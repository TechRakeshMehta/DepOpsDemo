//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18444.
// 
#pragma warning disable 1591

namespace ExternalVendors.ClearstarGatewayInvoice {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="InvoiceSoap", Namespace="http://clearstar.net/Gateway/wsInvoice")]
    public partial class Invoice : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetInvoicesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInvoiceDetailOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInvoiceReportOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Invoice() {
            this.Url = global::ExternalVendors.Properties.Settings.Default.ExternalVendors_ClearstarGatewayInvoice_Invoice;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetInvoicesCompletedEventHandler GetInvoicesCompleted;
        
        /// <remarks/>
        public event GetInvoiceDetailCompletedEventHandler GetInvoiceDetailCompleted;
        
        /// <remarks/>
        public event GetInvoiceReportCompletedEventHandler GetInvoiceReportCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/wsInvoice/GetInvoices", RequestNamespace="http://clearstar.net/Gateway/wsInvoice", ResponseNamespace="http://clearstar.net/Gateway/wsInvoice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetInvoices(string sUserName, string sPassword, int iBOID, string sCustID) {
            object[] results = this.Invoke("GetInvoices", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetInvoicesAsync(string sUserName, string sPassword, int iBOID, string sCustID) {
            this.GetInvoicesAsync(sUserName, sPassword, iBOID, sCustID, null);
        }
        
        /// <remarks/>
        public void GetInvoicesAsync(string sUserName, string sPassword, int iBOID, string sCustID, object userState) {
            if ((this.GetInvoicesOperationCompleted == null)) {
                this.GetInvoicesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInvoicesOperationCompleted);
            }
            this.InvokeAsync("GetInvoices", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID}, this.GetInvoicesOperationCompleted, userState);
        }
        
        private void OnGetInvoicesOperationCompleted(object arg) {
            if ((this.GetInvoicesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInvoicesCompleted(this, new GetInvoicesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/wsInvoice/GetInvoiceDetail", RequestNamespace="http://clearstar.net/Gateway/wsInvoice", ResponseNamespace="http://clearstar.net/Gateway/wsInvoice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetInvoiceDetail(string sUserName, string sPassword, int iBOID, string sCustID, int iInvoiceNo) {
            object[] results = this.Invoke("GetInvoiceDetail", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        iInvoiceNo});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetInvoiceDetailAsync(string sUserName, string sPassword, int iBOID, string sCustID, int iInvoiceNo) {
            this.GetInvoiceDetailAsync(sUserName, sPassword, iBOID, sCustID, iInvoiceNo, null);
        }
        
        /// <remarks/>
        public void GetInvoiceDetailAsync(string sUserName, string sPassword, int iBOID, string sCustID, int iInvoiceNo, object userState) {
            if ((this.GetInvoiceDetailOperationCompleted == null)) {
                this.GetInvoiceDetailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInvoiceDetailOperationCompleted);
            }
            this.InvokeAsync("GetInvoiceDetail", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        iInvoiceNo}, this.GetInvoiceDetailOperationCompleted, userState);
        }
        
        private void OnGetInvoiceDetailOperationCompleted(object arg) {
            if ((this.GetInvoiceDetailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInvoiceDetailCompleted(this, new GetInvoiceDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/wsInvoice/GetInvoiceReport", RequestNamespace="http://clearstar.net/Gateway/wsInvoice", ResponseNamespace="http://clearstar.net/Gateway/wsInvoice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetInvoiceReport(string sUserName, string sPassword, int iBOID, string sCustID, int iInvoiceNo) {
            object[] results = this.Invoke("GetInvoiceReport", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        iInvoiceNo});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetInvoiceReportAsync(string sUserName, string sPassword, int iBOID, string sCustID, int iInvoiceNo) {
            this.GetInvoiceReportAsync(sUserName, sPassword, iBOID, sCustID, iInvoiceNo, null);
        }
        
        /// <remarks/>
        public void GetInvoiceReportAsync(string sUserName, string sPassword, int iBOID, string sCustID, int iInvoiceNo, object userState) {
            if ((this.GetInvoiceReportOperationCompleted == null)) {
                this.GetInvoiceReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInvoiceReportOperationCompleted);
            }
            this.InvokeAsync("GetInvoiceReport", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        iInvoiceNo}, this.GetInvoiceReportOperationCompleted, userState);
        }
        
        private void OnGetInvoiceReportOperationCompleted(object arg) {
            if ((this.GetInvoiceReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInvoiceReportCompleted(this, new GetInvoiceReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetInvoicesCompletedEventHandler(object sender, GetInvoicesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInvoicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInvoicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetInvoiceDetailCompletedEventHandler(object sender, GetInvoiceDetailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInvoiceDetailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInvoiceDetailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetInvoiceReportCompletedEventHandler(object sender, GetInvoiceReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInvoiceReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInvoiceReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591