//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18444.
// 
#pragma warning disable 1591

namespace ExternalVendors.ServiceGateWay {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ServiceSoap", Namespace="http://clearstar.net/Gateway/wsService")]
    public partial class Service : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetServicesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServiceDetailOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServiceGroupsForBOOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServiceProductLinesForBOOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSvcsByCountriesGroupsOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddServiceFieldOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateServiceFieldOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServiceRestrictedResultsSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetServiceRestrictedResultsSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServiceFieldsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvailableSuppliersForServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateServicePreferredSupplierOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteServicePreferredSupplierOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteServiceFieldOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Service() {
            this.Url = global::ExternalVendors.Properties.Settings.Default.ExternalVendors_ServiceGateWay_Service;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetServicesCompletedEventHandler GetServicesCompleted;
        
        /// <remarks/>
        public event GetServiceDetailCompletedEventHandler GetServiceDetailCompleted;
        
        /// <remarks/>
        public event GetServiceGroupsForBOCompletedEventHandler GetServiceGroupsForBOCompleted;
        
        /// <remarks/>
        public event GetServiceProductLinesForBOCompletedEventHandler GetServiceProductLinesForBOCompleted;
        
        /// <remarks/>
        public event GetSvcsByCountriesGroupsCompletedEventHandler GetSvcsByCountriesGroupsCompleted;
        
        /// <remarks/>
        public event AddServiceFieldCompletedEventHandler AddServiceFieldCompleted;
        
        /// <remarks/>
        public event UpdateServiceFieldCompletedEventHandler UpdateServiceFieldCompleted;
        
        /// <remarks/>
        public event GetServiceRestrictedResultsSettingsCompletedEventHandler GetServiceRestrictedResultsSettingsCompleted;
        
        /// <remarks/>
        public event SetServiceRestrictedResultsSettingsCompletedEventHandler SetServiceRestrictedResultsSettingsCompleted;
        
        /// <remarks/>
        public event GetServiceFieldsCompletedEventHandler GetServiceFieldsCompleted;
        
        /// <remarks/>
        public event GetAvailableSuppliersForServiceCompletedEventHandler GetAvailableSuppliersForServiceCompleted;
        
        /// <remarks/>
        public event UpdateServicePreferredSupplierCompletedEventHandler UpdateServicePreferredSupplierCompleted;
        
        /// <remarks/>
        public event DeleteServicePreferredSupplierCompletedEventHandler DeleteServicePreferredSupplierCompleted;
        
        /// <remarks/>
        public event DeleteServiceFieldCompletedEventHandler DeleteServiceFieldCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/wsService/GetServices", RequestNamespace="http://clearstar.net/Gateway/wsService", ResponseNamespace="http://clearstar.net/Gateway/wsService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetServices(string sUserName, string sPassword, int iBOID, string sCustID) {
            object[] results = this.Invoke("GetServices", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetServicesAsync(string sUserName, string sPassword, int iBOID, string sCustID) {
            this.GetServicesAsync(sUserName, sPassword, iBOID, sCustID, null);
        }
        
        /// <remarks/>
        public void GetServicesAsync(string sUserName, string sPassword, int iBOID, string sCustID, object userState) {
            if ((this.GetServicesOperationCompleted == null)) {
                this.GetServicesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServicesOperationCompleted);
            }
            this.InvokeAsync("GetServices", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID}, this.GetServicesOperationCompleted, userState);
        }
        
        private void OnGetServicesOperationCompleted(object arg) {
            if ((this.GetServicesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServicesCompleted(this, new GetServicesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/wsService/GetServiceDetail", RequestNamespace="http://clearstar.net/Gateway/wsService", ResponseNamespace="http://clearstar.net/Gateway/wsService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetServiceDetail(string sUserName, string sPassword, int iBOID, string sCustID, string sServiceNo, string sDotConnectExample, string sGWOrderFieldsExample) {
            object[] results = this.Invoke("GetServiceDetail", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sServiceNo,
                        sDotConnectExample,
                        sGWOrderFieldsExample});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetServiceDetailAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sServiceNo, string sDotConnectExample, string sGWOrderFieldsExample) {
            this.GetServiceDetailAsync(sUserName, sPassword, iBOID, sCustID, sServiceNo, sDotConnectExample, sGWOrderFieldsExample, null);
        }
        
        /// <remarks/>
        public void GetServiceDetailAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sServiceNo, string sDotConnectExample, string sGWOrderFieldsExample, object userState) {
            if ((this.GetServiceDetailOperationCompleted == null)) {
                this.GetServiceDetailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServiceDetailOperationCompleted);
            }
            this.InvokeAsync("GetServiceDetail", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sServiceNo,
                        sDotConnectExample,
                        sGWOrderFieldsExample}, this.GetServiceDetailOperationCompleted, userState);
        }
        
        private void OnGetServiceDetailOperationCompleted(object arg) {
            if ((this.GetServiceDetailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServiceDetailCompleted(this, new GetServiceDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/wsService/GetServiceGroupsForBO", RequestNamespace="http://clearstar.net/Gateway/wsService", ResponseNamespace="http://clearstar.net/Gateway/wsService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetServiceGroupsForBO(string sUserName, string sPassword, int iBOID) {
            object[] results = this.Invoke("GetServiceGroupsForBO", new object[] {
                        sUserName,
                        sPassword,
                        iBOID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetServiceGroupsForBOAsync(string sUserName, string sPassword, int iBOID) {
            this.GetServiceGroupsForBOAsync(sUserName, sPassword, iBOID, null);
        }
        
        /// <remarks/>
        public void GetServiceGroupsForBOAsync(string sUserName, string sPassword, int iBOID, object userState) {
            if ((this.GetServiceGroupsForBOOperationCompleted == null)) {
                this.GetServiceGroupsForBOOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServiceGroupsForBOOperationCompleted);
            }
            this.InvokeAsync("GetServiceGroupsForBO", new object[] {
                        sUserName,
                        sPassword,
                        iBOID}, this.GetServiceGroupsForBOOperationCompleted, userState);
        }
        
        private void OnGetServiceGroupsForBOOperationCompleted(object arg) {
            if ((this.GetServiceGroupsForBOCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServiceGroupsForBOCompleted(this, new GetServiceGroupsForBOCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/wsService/GetServiceProductLinesForBO", RequestNamespace="http://clearstar.net/Gateway/wsService", ResponseNamespace="http://clearstar.net/Gateway/wsService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetServiceProductLinesForBO(string sUserName, string sPassword, int iBOID) {
            object[] results = this.Invoke("GetServiceProductLinesForBO", new object[] {
                        sUserName,
                        sPassword,
                        iBOID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetServiceProductLinesForBOAsync(string sUserName, string sPassword, int iBOID) {
            this.GetServiceProductLinesForBOAsync(sUserName, sPassword, iBOID, null);
        }
        
        /// <remarks/>
        public void GetServiceProductLinesForBOAsync(string sUserName, string sPassword, int iBOID, object userState) {
            if ((this.GetServiceProductLinesForBOOperationCompleted == null)) {
                this.GetServiceProductLinesForBOOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServiceProductLinesForBOOperationCompleted);
            }
            this.InvokeAsync("GetServiceProductLinesForBO", new object[] {
                        sUserName,
                        sPassword,
                        iBOID}, this.GetServiceProductLinesForBOOperationCompleted, userState);
        }
        
        private void OnGetServiceProductLinesForBOOperationCompleted(object arg) {
            if ((this.GetServiceProductLinesForBOCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServiceProductLinesForBOCompleted(this, new GetServiceProductLinesForBOCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/wsService/GetSvcsByCountriesGroups", RequestNamespace="http://clearstar.net/Gateway/wsService", ResponseNamespace="http://clearstar.net/Gateway/wsService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetSvcsByCountriesGroups(string sUserName, string sPassword, int iBOID, string sCustID, string sCountries, string sGroups) {
            object[] results = this.Invoke("GetSvcsByCountriesGroups", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sCountries,
                        sGroups});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetSvcsByCountriesGroupsAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sCountries, string sGroups) {
            this.GetSvcsByCountriesGroupsAsync(sUserName, sPassword, iBOID, sCustID, sCountries, sGroups, null);
        }
        
        /// <remarks/>
        public void GetSvcsByCountriesGroupsAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sCountries, string sGroups, object userState) {
            if ((this.GetSvcsByCountriesGroupsOperationCompleted == null)) {
                this.GetSvcsByCountriesGroupsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSvcsByCountriesGroupsOperationCompleted);
            }
            this.InvokeAsync("GetSvcsByCountriesGroups", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sCountries,
                        sGroups}, this.GetSvcsByCountriesGroupsOperationCompleted, userState);
        }
        
        private void OnGetSvcsByCountriesGroupsOperationCompleted(object arg) {
            if ((this.GetSvcsByCountriesGroupsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSvcsByCountriesGroupsCompleted(this, new GetSvcsByCountriesGroupsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/wsService/AddServiceField", RequestNamespace="http://clearstar.net/Gateway/wsService", ResponseNamespace="http://clearstar.net/Gateway/wsService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode AddServiceField(string sUserName, string sPassword, int iBOID, string sServiceNo, string sLabel, string sColumnName, int iDisplayOrder, string sDefaultValue, string sLocationField, bool bRequired, bool bVisible, string sToken) {
            object[] results = this.Invoke("AddServiceField", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sServiceNo,
                        sLabel,
                        sColumnName,
                        iDisplayOrder,
                        sDefaultValue,
                        sLocationField,
                        bRequired,
                        bVisible,
                        sToken});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void AddServiceFieldAsync(string sUserName, string sPassword, int iBOID, string sServiceNo, string sLabel, string sColumnName, int iDisplayOrder, string sDefaultValue, string sLocationField, bool bRequired, bool bVisible, string sToken) {
            this.AddServiceFieldAsync(sUserName, sPassword, iBOID, sServiceNo, sLabel, sColumnName, iDisplayOrder, sDefaultValue, sLocationField, bRequired, bVisible, sToken, null);
        }
        
        /// <remarks/>
        public void AddServiceFieldAsync(string sUserName, string sPassword, int iBOID, string sServiceNo, string sLabel, string sColumnName, int iDisplayOrder, string sDefaultValue, string sLocationField, bool bRequired, bool bVisible, string sToken, object userState) {
            if ((this.AddServiceFieldOperationCompleted == null)) {
                this.AddServiceFieldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddServiceFieldOperationCompleted);
            }
            this.InvokeAsync("AddServiceField", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sServiceNo,
                        sLabel,
                        sColumnName,
                        iDisplayOrder,
                        sDefaultValue,
                        sLocationField,
                        bRequired,
                        bVisible,
                        sToken}, this.AddServiceFieldOperationCompleted, userState);
        }
        
        private void OnAddServiceFieldOperationCompleted(object arg) {
            if ((this.AddServiceFieldCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddServiceFieldCompleted(this, new AddServiceFieldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/wsService/UpdateServiceField", RequestNamespace="http://clearstar.net/Gateway/wsService", ResponseNamespace="http://clearstar.net/Gateway/wsService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode UpdateServiceField(string sUserName, string sPassword, int iBOID, int iFieldID, string sServiceNo, string sLabel, string sColumnName, int iDisplayOrder, string sDefaultValue, string sLocationField, bool bRequired, bool bVisible, string sToken) {
            object[] results = this.Invoke("UpdateServiceField", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        iFieldID,
                        sServiceNo,
                        sLabel,
                        sColumnName,
                        iDisplayOrder,
                        sDefaultValue,
                        sLocationField,
                        bRequired,
                        bVisible,
                        sToken});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateServiceFieldAsync(string sUserName, string sPassword, int iBOID, int iFieldID, string sServiceNo, string sLabel, string sColumnName, int iDisplayOrder, string sDefaultValue, string sLocationField, bool bRequired, bool bVisible, string sToken) {
            this.UpdateServiceFieldAsync(sUserName, sPassword, iBOID, iFieldID, sServiceNo, sLabel, sColumnName, iDisplayOrder, sDefaultValue, sLocationField, bRequired, bVisible, sToken, null);
        }
        
        /// <remarks/>
        public void UpdateServiceFieldAsync(string sUserName, string sPassword, int iBOID, int iFieldID, string sServiceNo, string sLabel, string sColumnName, int iDisplayOrder, string sDefaultValue, string sLocationField, bool bRequired, bool bVisible, string sToken, object userState) {
            if ((this.UpdateServiceFieldOperationCompleted == null)) {
                this.UpdateServiceFieldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateServiceFieldOperationCompleted);
            }
            this.InvokeAsync("UpdateServiceField", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        iFieldID,
                        sServiceNo,
                        sLabel,
                        sColumnName,
                        iDisplayOrder,
                        sDefaultValue,
                        sLocationField,
                        bRequired,
                        bVisible,
                        sToken}, this.UpdateServiceFieldOperationCompleted, userState);
        }
        
        private void OnUpdateServiceFieldOperationCompleted(object arg) {
            if ((this.UpdateServiceFieldCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateServiceFieldCompleted(this, new UpdateServiceFieldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/wsService/GetServiceRestrictedResultsSettings", RequestNamespace="http://clearstar.net/Gateway/wsService", ResponseNamespace="http://clearstar.net/Gateway/wsService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetServiceRestrictedResultsSettings(string sUserName, string sPassword, int iBOID, string sCustID, string sServiceNo) {
            object[] results = this.Invoke("GetServiceRestrictedResultsSettings", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sServiceNo});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetServiceRestrictedResultsSettingsAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sServiceNo) {
            this.GetServiceRestrictedResultsSettingsAsync(sUserName, sPassword, iBOID, sCustID, sServiceNo, null);
        }
        
        /// <remarks/>
        public void GetServiceRestrictedResultsSettingsAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sServiceNo, object userState) {
            if ((this.GetServiceRestrictedResultsSettingsOperationCompleted == null)) {
                this.GetServiceRestrictedResultsSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServiceRestrictedResultsSettingsOperationCompleted);
            }
            this.InvokeAsync("GetServiceRestrictedResultsSettings", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sServiceNo}, this.GetServiceRestrictedResultsSettingsOperationCompleted, userState);
        }
        
        private void OnGetServiceRestrictedResultsSettingsOperationCompleted(object arg) {
            if ((this.GetServiceRestrictedResultsSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServiceRestrictedResultsSettingsCompleted(this, new GetServiceRestrictedResultsSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/wsService/SetServiceRestrictedResultsSettings", RequestNamespace="http://clearstar.net/Gateway/wsService", ResponseNamespace="http://clearstar.net/Gateway/wsService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode SetServiceRestrictedResultsSettings(string sUserName, string sPassword, int iBOID, string sCustID, string sServiceNo, bool bRestrictedResultsOn, string sFlaggedResultsText, string sNonFlaggedResultsText, bool bApplyToAllSvcsInGrp) {
            object[] results = this.Invoke("SetServiceRestrictedResultsSettings", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sServiceNo,
                        bRestrictedResultsOn,
                        sFlaggedResultsText,
                        sNonFlaggedResultsText,
                        bApplyToAllSvcsInGrp});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void SetServiceRestrictedResultsSettingsAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sServiceNo, bool bRestrictedResultsOn, string sFlaggedResultsText, string sNonFlaggedResultsText, bool bApplyToAllSvcsInGrp) {
            this.SetServiceRestrictedResultsSettingsAsync(sUserName, sPassword, iBOID, sCustID, sServiceNo, bRestrictedResultsOn, sFlaggedResultsText, sNonFlaggedResultsText, bApplyToAllSvcsInGrp, null);
        }
        
        /// <remarks/>
        public void SetServiceRestrictedResultsSettingsAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sServiceNo, bool bRestrictedResultsOn, string sFlaggedResultsText, string sNonFlaggedResultsText, bool bApplyToAllSvcsInGrp, object userState) {
            if ((this.SetServiceRestrictedResultsSettingsOperationCompleted == null)) {
                this.SetServiceRestrictedResultsSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetServiceRestrictedResultsSettingsOperationCompleted);
            }
            this.InvokeAsync("SetServiceRestrictedResultsSettings", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sServiceNo,
                        bRestrictedResultsOn,
                        sFlaggedResultsText,
                        sNonFlaggedResultsText,
                        bApplyToAllSvcsInGrp}, this.SetServiceRestrictedResultsSettingsOperationCompleted, userState);
        }
        
        private void OnSetServiceRestrictedResultsSettingsOperationCompleted(object arg) {
            if ((this.SetServiceRestrictedResultsSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetServiceRestrictedResultsSettingsCompleted(this, new SetServiceRestrictedResultsSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/wsService/GetServiceFields", RequestNamespace="http://clearstar.net/Gateway/wsService", ResponseNamespace="http://clearstar.net/Gateway/wsService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetServiceFields(string sUserName, string sPassword, int iBOID, string sServiceNo) {
            object[] results = this.Invoke("GetServiceFields", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sServiceNo});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetServiceFieldsAsync(string sUserName, string sPassword, int iBOID, string sServiceNo) {
            this.GetServiceFieldsAsync(sUserName, sPassword, iBOID, sServiceNo, null);
        }
        
        /// <remarks/>
        public void GetServiceFieldsAsync(string sUserName, string sPassword, int iBOID, string sServiceNo, object userState) {
            if ((this.GetServiceFieldsOperationCompleted == null)) {
                this.GetServiceFieldsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServiceFieldsOperationCompleted);
            }
            this.InvokeAsync("GetServiceFields", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sServiceNo}, this.GetServiceFieldsOperationCompleted, userState);
        }
        
        private void OnGetServiceFieldsOperationCompleted(object arg) {
            if ((this.GetServiceFieldsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServiceFieldsCompleted(this, new GetServiceFieldsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/wsService/GetAvailableSuppliersForService", RequestNamespace="http://clearstar.net/Gateway/wsService", ResponseNamespace="http://clearstar.net/Gateway/wsService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetAvailableSuppliersForService(string sUserName, string sPassword, int iBOID, string sServiceNo) {
            object[] results = this.Invoke("GetAvailableSuppliersForService", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sServiceNo});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetAvailableSuppliersForServiceAsync(string sUserName, string sPassword, int iBOID, string sServiceNo) {
            this.GetAvailableSuppliersForServiceAsync(sUserName, sPassword, iBOID, sServiceNo, null);
        }
        
        /// <remarks/>
        public void GetAvailableSuppliersForServiceAsync(string sUserName, string sPassword, int iBOID, string sServiceNo, object userState) {
            if ((this.GetAvailableSuppliersForServiceOperationCompleted == null)) {
                this.GetAvailableSuppliersForServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvailableSuppliersForServiceOperationCompleted);
            }
            this.InvokeAsync("GetAvailableSuppliersForService", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sServiceNo}, this.GetAvailableSuppliersForServiceOperationCompleted, userState);
        }
        
        private void OnGetAvailableSuppliersForServiceOperationCompleted(object arg) {
            if ((this.GetAvailableSuppliersForServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvailableSuppliersForServiceCompleted(this, new GetAvailableSuppliersForServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/wsService/UpdateServicePreferredSupplier", RequestNamespace="http://clearstar.net/Gateway/wsService", ResponseNamespace="http://clearstar.net/Gateway/wsService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode UpdateServicePreferredSupplier(string sUserName, string sPassword, int iBOID, string sServiceNo, int iSourceID, decimal dCharge, bool bIsDefault, char cReviewResults, bool bPurgeData, int iPurgeAfterDays, int iPurgeMethodID, int iPurgeLevelID, bool bApplyToAllCustomers) {
            object[] results = this.Invoke("UpdateServicePreferredSupplier", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sServiceNo,
                        iSourceID,
                        dCharge,
                        bIsDefault,
                        cReviewResults,
                        bPurgeData,
                        iPurgeAfterDays,
                        iPurgeMethodID,
                        iPurgeLevelID,
                        bApplyToAllCustomers});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateServicePreferredSupplierAsync(string sUserName, string sPassword, int iBOID, string sServiceNo, int iSourceID, decimal dCharge, bool bIsDefault, char cReviewResults, bool bPurgeData, int iPurgeAfterDays, int iPurgeMethodID, int iPurgeLevelID, bool bApplyToAllCustomers) {
            this.UpdateServicePreferredSupplierAsync(sUserName, sPassword, iBOID, sServiceNo, iSourceID, dCharge, bIsDefault, cReviewResults, bPurgeData, iPurgeAfterDays, iPurgeMethodID, iPurgeLevelID, bApplyToAllCustomers, null);
        }
        
        /// <remarks/>
        public void UpdateServicePreferredSupplierAsync(string sUserName, string sPassword, int iBOID, string sServiceNo, int iSourceID, decimal dCharge, bool bIsDefault, char cReviewResults, bool bPurgeData, int iPurgeAfterDays, int iPurgeMethodID, int iPurgeLevelID, bool bApplyToAllCustomers, object userState) {
            if ((this.UpdateServicePreferredSupplierOperationCompleted == null)) {
                this.UpdateServicePreferredSupplierOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateServicePreferredSupplierOperationCompleted);
            }
            this.InvokeAsync("UpdateServicePreferredSupplier", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sServiceNo,
                        iSourceID,
                        dCharge,
                        bIsDefault,
                        cReviewResults,
                        bPurgeData,
                        iPurgeAfterDays,
                        iPurgeMethodID,
                        iPurgeLevelID,
                        bApplyToAllCustomers}, this.UpdateServicePreferredSupplierOperationCompleted, userState);
        }
        
        private void OnUpdateServicePreferredSupplierOperationCompleted(object arg) {
            if ((this.UpdateServicePreferredSupplierCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateServicePreferredSupplierCompleted(this, new UpdateServicePreferredSupplierCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/wsService/DeleteServicePreferredSupplier", RequestNamespace="http://clearstar.net/Gateway/wsService", ResponseNamespace="http://clearstar.net/Gateway/wsService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode DeleteServicePreferredSupplier(string sUserName, string sPassword, int iBOID, string sServiceNo, int iSourceID) {
            object[] results = this.Invoke("DeleteServicePreferredSupplier", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sServiceNo,
                        iSourceID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteServicePreferredSupplierAsync(string sUserName, string sPassword, int iBOID, string sServiceNo, int iSourceID) {
            this.DeleteServicePreferredSupplierAsync(sUserName, sPassword, iBOID, sServiceNo, iSourceID, null);
        }
        
        /// <remarks/>
        public void DeleteServicePreferredSupplierAsync(string sUserName, string sPassword, int iBOID, string sServiceNo, int iSourceID, object userState) {
            if ((this.DeleteServicePreferredSupplierOperationCompleted == null)) {
                this.DeleteServicePreferredSupplierOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteServicePreferredSupplierOperationCompleted);
            }
            this.InvokeAsync("DeleteServicePreferredSupplier", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sServiceNo,
                        iSourceID}, this.DeleteServicePreferredSupplierOperationCompleted, userState);
        }
        
        private void OnDeleteServicePreferredSupplierOperationCompleted(object arg) {
            if ((this.DeleteServicePreferredSupplierCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteServicePreferredSupplierCompleted(this, new DeleteServicePreferredSupplierCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/wsService/DeleteServiceField", RequestNamespace="http://clearstar.net/Gateway/wsService", ResponseNamespace="http://clearstar.net/Gateway/wsService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode DeleteServiceField(string sUserName, string sPassword, int iBOID, string sServiceNo, int iFieldID, string sToken) {
            object[] results = this.Invoke("DeleteServiceField", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sServiceNo,
                        iFieldID,
                        sToken});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteServiceFieldAsync(string sUserName, string sPassword, int iBOID, string sServiceNo, int iFieldID, string sToken) {
            this.DeleteServiceFieldAsync(sUserName, sPassword, iBOID, sServiceNo, iFieldID, sToken, null);
        }
        
        /// <remarks/>
        public void DeleteServiceFieldAsync(string sUserName, string sPassword, int iBOID, string sServiceNo, int iFieldID, string sToken, object userState) {
            if ((this.DeleteServiceFieldOperationCompleted == null)) {
                this.DeleteServiceFieldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteServiceFieldOperationCompleted);
            }
            this.InvokeAsync("DeleteServiceField", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sServiceNo,
                        iFieldID,
                        sToken}, this.DeleteServiceFieldOperationCompleted, userState);
        }
        
        private void OnDeleteServiceFieldOperationCompleted(object arg) {
            if ((this.DeleteServiceFieldCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteServiceFieldCompleted(this, new DeleteServiceFieldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetServicesCompletedEventHandler(object sender, GetServicesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetServiceDetailCompletedEventHandler(object sender, GetServiceDetailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServiceDetailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServiceDetailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetServiceGroupsForBOCompletedEventHandler(object sender, GetServiceGroupsForBOCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServiceGroupsForBOCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServiceGroupsForBOCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetServiceProductLinesForBOCompletedEventHandler(object sender, GetServiceProductLinesForBOCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServiceProductLinesForBOCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServiceProductLinesForBOCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetSvcsByCountriesGroupsCompletedEventHandler(object sender, GetSvcsByCountriesGroupsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSvcsByCountriesGroupsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSvcsByCountriesGroupsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void AddServiceFieldCompletedEventHandler(object sender, AddServiceFieldCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddServiceFieldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddServiceFieldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UpdateServiceFieldCompletedEventHandler(object sender, UpdateServiceFieldCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateServiceFieldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateServiceFieldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetServiceRestrictedResultsSettingsCompletedEventHandler(object sender, GetServiceRestrictedResultsSettingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServiceRestrictedResultsSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServiceRestrictedResultsSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void SetServiceRestrictedResultsSettingsCompletedEventHandler(object sender, SetServiceRestrictedResultsSettingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetServiceRestrictedResultsSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetServiceRestrictedResultsSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetServiceFieldsCompletedEventHandler(object sender, GetServiceFieldsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServiceFieldsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServiceFieldsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetAvailableSuppliersForServiceCompletedEventHandler(object sender, GetAvailableSuppliersForServiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvailableSuppliersForServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvailableSuppliersForServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UpdateServicePreferredSupplierCompletedEventHandler(object sender, UpdateServicePreferredSupplierCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateServicePreferredSupplierCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateServicePreferredSupplierCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void DeleteServicePreferredSupplierCompletedEventHandler(object sender, DeleteServicePreferredSupplierCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteServicePreferredSupplierCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteServicePreferredSupplierCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void DeleteServiceFieldCompletedEventHandler(object sender, DeleteServiceFieldCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteServiceFieldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteServiceFieldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591