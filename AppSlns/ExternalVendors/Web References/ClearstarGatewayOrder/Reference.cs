//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18444.
// 
#pragma warning disable 1591

namespace ExternalVendors.ClearstarGatewayOrder {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="OrderSoap", Namespace="http://clearstar.net/Gateway/Order")]
    public partial class Order : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback SearchOrdersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOrderFieldsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOrderNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOrderResultsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOrderStatusDetailOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOrderDueDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateOrderDueDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback OrderNotificationRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReassignOrderOperationCompleted;
        
        private System.Threading.SendOrPostCallback ResendOrderNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback SuppressOrderOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnSuppressOrderOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOrderAdjustmentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddOrderAdjustmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateOrderAdjustmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteOrderAdjustmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateOrderSrcBONoteOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateOrderSrcBONote2OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOrderSrcBONotesHistoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOrderDetailOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddOrderFeesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBOOrderSummaryOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Order() {
            this.Url = global::ExternalVendors.Properties.Settings.Default.ExternalVendors_ClearstarGatewayOrder_Order;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event SearchOrdersCompletedEventHandler SearchOrdersCompleted;
        
        /// <remarks/>
        public event GetOrderFieldsCompletedEventHandler GetOrderFieldsCompleted;
        
        /// <remarks/>
        public event GetOrderNotificationCompletedEventHandler GetOrderNotificationCompleted;
        
        /// <remarks/>
        public event GetOrderResultsCompletedEventHandler GetOrderResultsCompleted;
        
        /// <remarks/>
        public event GetOrderStatusDetailCompletedEventHandler GetOrderStatusDetailCompleted;
        
        /// <remarks/>
        public event GetOrderDueDateCompletedEventHandler GetOrderDueDateCompleted;
        
        /// <remarks/>
        public event UpdateOrderDueDateCompletedEventHandler UpdateOrderDueDateCompleted;
        
        /// <remarks/>
        public event OrderNotificationRequestCompletedEventHandler OrderNotificationRequestCompleted;
        
        /// <remarks/>
        public event ReassignOrderCompletedEventHandler ReassignOrderCompleted;
        
        /// <remarks/>
        public event ResendOrderNotificationCompletedEventHandler ResendOrderNotificationCompleted;
        
        /// <remarks/>
        public event SuppressOrderCompletedEventHandler SuppressOrderCompleted;
        
        /// <remarks/>
        public event UnSuppressOrderCompletedEventHandler UnSuppressOrderCompleted;
        
        /// <remarks/>
        public event GetOrderAdjustmentsCompletedEventHandler GetOrderAdjustmentsCompleted;
        
        /// <remarks/>
        public event AddOrderAdjustmentCompletedEventHandler AddOrderAdjustmentCompleted;
        
        /// <remarks/>
        public event UpdateOrderAdjustmentCompletedEventHandler UpdateOrderAdjustmentCompleted;
        
        /// <remarks/>
        public event DeleteOrderAdjustmentCompletedEventHandler DeleteOrderAdjustmentCompleted;
        
        /// <remarks/>
        public event UpdateOrderSrcBONoteCompletedEventHandler UpdateOrderSrcBONoteCompleted;
        
        /// <remarks/>
        public event UpdateOrderSrcBONote2CompletedEventHandler UpdateOrderSrcBONote2Completed;
        
        /// <remarks/>
        public event GetOrderSrcBONotesHistoryCompletedEventHandler GetOrderSrcBONotesHistoryCompleted;
        
        /// <remarks/>
        public event GetOrderDetailCompletedEventHandler GetOrderDetailCompleted;
        
        /// <remarks/>
        public event AddOrderFeesCompletedEventHandler AddOrderFeesCompleted;
        
        /// <remarks/>
        public event GetBOOrderSummaryCompletedEventHandler GetBOOrderSummaryCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Order/SearchOrders", RequestNamespace="http://clearstar.net/Gateway/Order", ResponseNamespace="http://clearstar.net/Gateway/Order", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode SearchOrders(string sUserName, string sPassword, int iBOID, string sSearchValue, string sSearchField, bool bExactMatch) {
            object[] results = this.Invoke("SearchOrders", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sSearchValue,
                        sSearchField,
                        bExactMatch});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void SearchOrdersAsync(string sUserName, string sPassword, int iBOID, string sSearchValue, string sSearchField, bool bExactMatch) {
            this.SearchOrdersAsync(sUserName, sPassword, iBOID, sSearchValue, sSearchField, bExactMatch, null);
        }
        
        /// <remarks/>
        public void SearchOrdersAsync(string sUserName, string sPassword, int iBOID, string sSearchValue, string sSearchField, bool bExactMatch, object userState) {
            if ((this.SearchOrdersOperationCompleted == null)) {
                this.SearchOrdersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchOrdersOperationCompleted);
            }
            this.InvokeAsync("SearchOrders", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sSearchValue,
                        sSearchField,
                        bExactMatch}, this.SearchOrdersOperationCompleted, userState);
        }
        
        private void OnSearchOrdersOperationCompleted(object arg) {
            if ((this.SearchOrdersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchOrdersCompleted(this, new SearchOrdersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Order/GetOrderFields", RequestNamespace="http://clearstar.net/Gateway/Order", ResponseNamespace="http://clearstar.net/Gateway/Order", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetOrderFields(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, int iOrderID) {
            object[] results = this.Invoke("GetOrderFields", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo,
                        iOrderID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetOrderFieldsAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, int iOrderID) {
            this.GetOrderFieldsAsync(sUserName, sPassword, iBOID, sCustID, sProfNo, iOrderID, null);
        }
        
        /// <remarks/>
        public void GetOrderFieldsAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, int iOrderID, object userState) {
            if ((this.GetOrderFieldsOperationCompleted == null)) {
                this.GetOrderFieldsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOrderFieldsOperationCompleted);
            }
            this.InvokeAsync("GetOrderFields", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo,
                        iOrderID}, this.GetOrderFieldsOperationCompleted, userState);
        }
        
        private void OnGetOrderFieldsOperationCompleted(object arg) {
            if ((this.GetOrderFieldsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOrderFieldsCompleted(this, new GetOrderFieldsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Order/GetOrderNotification", RequestNamespace="http://clearstar.net/Gateway/Order", ResponseNamespace="http://clearstar.net/Gateway/Order", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetOrderNotification(string sUserName, string sPassword, int iBOID, string sCustID, int iOrderID) {
            object[] results = this.Invoke("GetOrderNotification", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        iOrderID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetOrderNotificationAsync(string sUserName, string sPassword, int iBOID, string sCustID, int iOrderID) {
            this.GetOrderNotificationAsync(sUserName, sPassword, iBOID, sCustID, iOrderID, null);
        }
        
        /// <remarks/>
        public void GetOrderNotificationAsync(string sUserName, string sPassword, int iBOID, string sCustID, int iOrderID, object userState) {
            if ((this.GetOrderNotificationOperationCompleted == null)) {
                this.GetOrderNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOrderNotificationOperationCompleted);
            }
            this.InvokeAsync("GetOrderNotification", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        iOrderID}, this.GetOrderNotificationOperationCompleted, userState);
        }
        
        private void OnGetOrderNotificationOperationCompleted(object arg) {
            if ((this.GetOrderNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOrderNotificationCompleted(this, new GetOrderNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Order/GetOrderResults", RequestNamespace="http://clearstar.net/Gateway/Order", ResponseNamespace="http://clearstar.net/Gateway/Order", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetOrderResults(string sUserName, string sPassword, int iBOID, string sCustID, int iOrderID) {
            object[] results = this.Invoke("GetOrderResults", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        iOrderID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetOrderResultsAsync(string sUserName, string sPassword, int iBOID, string sCustID, int iOrderID) {
            this.GetOrderResultsAsync(sUserName, sPassword, iBOID, sCustID, iOrderID, null);
        }
        
        /// <remarks/>
        public void GetOrderResultsAsync(string sUserName, string sPassword, int iBOID, string sCustID, int iOrderID, object userState) {
            if ((this.GetOrderResultsOperationCompleted == null)) {
                this.GetOrderResultsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOrderResultsOperationCompleted);
            }
            this.InvokeAsync("GetOrderResults", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        iOrderID}, this.GetOrderResultsOperationCompleted, userState);
        }
        
        private void OnGetOrderResultsOperationCompleted(object arg) {
            if ((this.GetOrderResultsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOrderResultsCompleted(this, new GetOrderResultsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Order/GetOrderStatusDetail", RequestNamespace="http://clearstar.net/Gateway/Order", ResponseNamespace="http://clearstar.net/Gateway/Order", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetOrderStatusDetail(string sUserName, string sPassword, int iBOID, string sCustID, int iOrderID) {
            object[] results = this.Invoke("GetOrderStatusDetail", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        iOrderID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetOrderStatusDetailAsync(string sUserName, string sPassword, int iBOID, string sCustID, int iOrderID) {
            this.GetOrderStatusDetailAsync(sUserName, sPassword, iBOID, sCustID, iOrderID, null);
        }
        
        /// <remarks/>
        public void GetOrderStatusDetailAsync(string sUserName, string sPassword, int iBOID, string sCustID, int iOrderID, object userState) {
            if ((this.GetOrderStatusDetailOperationCompleted == null)) {
                this.GetOrderStatusDetailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOrderStatusDetailOperationCompleted);
            }
            this.InvokeAsync("GetOrderStatusDetail", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        iOrderID}, this.GetOrderStatusDetailOperationCompleted, userState);
        }
        
        private void OnGetOrderStatusDetailOperationCompleted(object arg) {
            if ((this.GetOrderStatusDetailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOrderStatusDetailCompleted(this, new GetOrderStatusDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Order/GetOrderDueDate", RequestNamespace="http://clearstar.net/Gateway/Order", ResponseNamespace="http://clearstar.net/Gateway/Order", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetOrderDueDate(string sUserName, string sPassword, int iBOID, string sCustID, int iOrderID) {
            object[] results = this.Invoke("GetOrderDueDate", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        iOrderID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetOrderDueDateAsync(string sUserName, string sPassword, int iBOID, string sCustID, int iOrderID) {
            this.GetOrderDueDateAsync(sUserName, sPassword, iBOID, sCustID, iOrderID, null);
        }
        
        /// <remarks/>
        public void GetOrderDueDateAsync(string sUserName, string sPassword, int iBOID, string sCustID, int iOrderID, object userState) {
            if ((this.GetOrderDueDateOperationCompleted == null)) {
                this.GetOrderDueDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOrderDueDateOperationCompleted);
            }
            this.InvokeAsync("GetOrderDueDate", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        iOrderID}, this.GetOrderDueDateOperationCompleted, userState);
        }
        
        private void OnGetOrderDueDateOperationCompleted(object arg) {
            if ((this.GetOrderDueDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOrderDueDateCompleted(this, new GetOrderDueDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Order/UpdateOrderDueDate", RequestNamespace="http://clearstar.net/Gateway/Order", ResponseNamespace="http://clearstar.net/Gateway/Order", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode UpdateOrderDueDate(string sUserName, string sPassword, int iBOID, string sCustID, int iOrderID, System.DateTime dtDueDate) {
            object[] results = this.Invoke("UpdateOrderDueDate", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        iOrderID,
                        dtDueDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateOrderDueDateAsync(string sUserName, string sPassword, int iBOID, string sCustID, int iOrderID, System.DateTime dtDueDate) {
            this.UpdateOrderDueDateAsync(sUserName, sPassword, iBOID, sCustID, iOrderID, dtDueDate, null);
        }
        
        /// <remarks/>
        public void UpdateOrderDueDateAsync(string sUserName, string sPassword, int iBOID, string sCustID, int iOrderID, System.DateTime dtDueDate, object userState) {
            if ((this.UpdateOrderDueDateOperationCompleted == null)) {
                this.UpdateOrderDueDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateOrderDueDateOperationCompleted);
            }
            this.InvokeAsync("UpdateOrderDueDate", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        iOrderID,
                        dtDueDate}, this.UpdateOrderDueDateOperationCompleted, userState);
        }
        
        private void OnUpdateOrderDueDateOperationCompleted(object arg) {
            if ((this.UpdateOrderDueDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateOrderDueDateCompleted(this, new UpdateOrderDueDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Order/OrderNotificationRequest", RequestNamespace="http://clearstar.net/Gateway/Order", ResponseNamespace="http://clearstar.net/Gateway/Order", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode OrderNotificationRequest(string sUserName, string sPassword, int iBOID, string sCustID, int iOrderID, string sNotificationType, string sNotificationValue, string sProfNo) {
            object[] results = this.Invoke("OrderNotificationRequest", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        iOrderID,
                        sNotificationType,
                        sNotificationValue,
                        sProfNo});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void OrderNotificationRequestAsync(string sUserName, string sPassword, int iBOID, string sCustID, int iOrderID, string sNotificationType, string sNotificationValue, string sProfNo) {
            this.OrderNotificationRequestAsync(sUserName, sPassword, iBOID, sCustID, iOrderID, sNotificationType, sNotificationValue, sProfNo, null);
        }
        
        /// <remarks/>
        public void OrderNotificationRequestAsync(string sUserName, string sPassword, int iBOID, string sCustID, int iOrderID, string sNotificationType, string sNotificationValue, string sProfNo, object userState) {
            if ((this.OrderNotificationRequestOperationCompleted == null)) {
                this.OrderNotificationRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOrderNotificationRequestOperationCompleted);
            }
            this.InvokeAsync("OrderNotificationRequest", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        iOrderID,
                        sNotificationType,
                        sNotificationValue,
                        sProfNo}, this.OrderNotificationRequestOperationCompleted, userState);
        }
        
        private void OnOrderNotificationRequestOperationCompleted(object arg) {
            if ((this.OrderNotificationRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OrderNotificationRequestCompleted(this, new OrderNotificationRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Order/ReassignOrder", RequestNamespace="http://clearstar.net/Gateway/Order", ResponseNamespace="http://clearstar.net/Gateway/Order", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode ReassignOrder(string sUserName, string sPassword, int iBOID, string sCustID, int iOrderID, int iNewSourceID) {
            object[] results = this.Invoke("ReassignOrder", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        iOrderID,
                        iNewSourceID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void ReassignOrderAsync(string sUserName, string sPassword, int iBOID, string sCustID, int iOrderID, int iNewSourceID) {
            this.ReassignOrderAsync(sUserName, sPassword, iBOID, sCustID, iOrderID, iNewSourceID, null);
        }
        
        /// <remarks/>
        public void ReassignOrderAsync(string sUserName, string sPassword, int iBOID, string sCustID, int iOrderID, int iNewSourceID, object userState) {
            if ((this.ReassignOrderOperationCompleted == null)) {
                this.ReassignOrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReassignOrderOperationCompleted);
            }
            this.InvokeAsync("ReassignOrder", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        iOrderID,
                        iNewSourceID}, this.ReassignOrderOperationCompleted, userState);
        }
        
        private void OnReassignOrderOperationCompleted(object arg) {
            if ((this.ReassignOrderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReassignOrderCompleted(this, new ReassignOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Order/ResendOrderNotification", RequestNamespace="http://clearstar.net/Gateway/Order", ResponseNamespace="http://clearstar.net/Gateway/Order", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode ResendOrderNotification(string sUserName, string sPassword, int iBOID, string sCustID, int iOrderID) {
            object[] results = this.Invoke("ResendOrderNotification", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        iOrderID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void ResendOrderNotificationAsync(string sUserName, string sPassword, int iBOID, string sCustID, int iOrderID) {
            this.ResendOrderNotificationAsync(sUserName, sPassword, iBOID, sCustID, iOrderID, null);
        }
        
        /// <remarks/>
        public void ResendOrderNotificationAsync(string sUserName, string sPassword, int iBOID, string sCustID, int iOrderID, object userState) {
            if ((this.ResendOrderNotificationOperationCompleted == null)) {
                this.ResendOrderNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResendOrderNotificationOperationCompleted);
            }
            this.InvokeAsync("ResendOrderNotification", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        iOrderID}, this.ResendOrderNotificationOperationCompleted, userState);
        }
        
        private void OnResendOrderNotificationOperationCompleted(object arg) {
            if ((this.ResendOrderNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ResendOrderNotificationCompleted(this, new ResendOrderNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Order/SuppressOrder", RequestNamespace="http://clearstar.net/Gateway/Order", ResponseNamespace="http://clearstar.net/Gateway/Order", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode SuppressOrder(string sUserName, string sPassword, int iBOID, string sCustID, int iOrderID, string sInvoiceSuppressed) {
            object[] results = this.Invoke("SuppressOrder", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        iOrderID,
                        sInvoiceSuppressed});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void SuppressOrderAsync(string sUserName, string sPassword, int iBOID, string sCustID, int iOrderID, string sInvoiceSuppressed) {
            this.SuppressOrderAsync(sUserName, sPassword, iBOID, sCustID, iOrderID, sInvoiceSuppressed, null);
        }
        
        /// <remarks/>
        public void SuppressOrderAsync(string sUserName, string sPassword, int iBOID, string sCustID, int iOrderID, string sInvoiceSuppressed, object userState) {
            if ((this.SuppressOrderOperationCompleted == null)) {
                this.SuppressOrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSuppressOrderOperationCompleted);
            }
            this.InvokeAsync("SuppressOrder", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        iOrderID,
                        sInvoiceSuppressed}, this.SuppressOrderOperationCompleted, userState);
        }
        
        private void OnSuppressOrderOperationCompleted(object arg) {
            if ((this.SuppressOrderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SuppressOrderCompleted(this, new SuppressOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Order/UnSuppressOrder", RequestNamespace="http://clearstar.net/Gateway/Order", ResponseNamespace="http://clearstar.net/Gateway/Order", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode UnSuppressOrder(string sUserName, string sPassword, int iBOID, string sCustID, int iOrderID) {
            object[] results = this.Invoke("UnSuppressOrder", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        iOrderID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void UnSuppressOrderAsync(string sUserName, string sPassword, int iBOID, string sCustID, int iOrderID) {
            this.UnSuppressOrderAsync(sUserName, sPassword, iBOID, sCustID, iOrderID, null);
        }
        
        /// <remarks/>
        public void UnSuppressOrderAsync(string sUserName, string sPassword, int iBOID, string sCustID, int iOrderID, object userState) {
            if ((this.UnSuppressOrderOperationCompleted == null)) {
                this.UnSuppressOrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnSuppressOrderOperationCompleted);
            }
            this.InvokeAsync("UnSuppressOrder", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        iOrderID}, this.UnSuppressOrderOperationCompleted, userState);
        }
        
        private void OnUnSuppressOrderOperationCompleted(object arg) {
            if ((this.UnSuppressOrderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnSuppressOrderCompleted(this, new UnSuppressOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Order/GetOrderAdjustments", RequestNamespace="http://clearstar.net/Gateway/Order", ResponseNamespace="http://clearstar.net/Gateway/Order", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetOrderAdjustments(string sUserName, string sPassword, int iBOID, string sCustID, int iOrderID) {
            object[] results = this.Invoke("GetOrderAdjustments", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        iOrderID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetOrderAdjustmentsAsync(string sUserName, string sPassword, int iBOID, string sCustID, int iOrderID) {
            this.GetOrderAdjustmentsAsync(sUserName, sPassword, iBOID, sCustID, iOrderID, null);
        }
        
        /// <remarks/>
        public void GetOrderAdjustmentsAsync(string sUserName, string sPassword, int iBOID, string sCustID, int iOrderID, object userState) {
            if ((this.GetOrderAdjustmentsOperationCompleted == null)) {
                this.GetOrderAdjustmentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOrderAdjustmentsOperationCompleted);
            }
            this.InvokeAsync("GetOrderAdjustments", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        iOrderID}, this.GetOrderAdjustmentsOperationCompleted, userState);
        }
        
        private void OnGetOrderAdjustmentsOperationCompleted(object arg) {
            if ((this.GetOrderAdjustmentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOrderAdjustmentsCompleted(this, new GetOrderAdjustmentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Order/AddOrderAdjustment", RequestNamespace="http://clearstar.net/Gateway/Order", ResponseNamespace="http://clearstar.net/Gateway/Order", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode AddOrderAdjustment(string sUserName, string sPassword, int iBOID, string sCustID, int iOrderID, string sDescription, decimal dAmount) {
            object[] results = this.Invoke("AddOrderAdjustment", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        iOrderID,
                        sDescription,
                        dAmount});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void AddOrderAdjustmentAsync(string sUserName, string sPassword, int iBOID, string sCustID, int iOrderID, string sDescription, decimal dAmount) {
            this.AddOrderAdjustmentAsync(sUserName, sPassword, iBOID, sCustID, iOrderID, sDescription, dAmount, null);
        }
        
        /// <remarks/>
        public void AddOrderAdjustmentAsync(string sUserName, string sPassword, int iBOID, string sCustID, int iOrderID, string sDescription, decimal dAmount, object userState) {
            if ((this.AddOrderAdjustmentOperationCompleted == null)) {
                this.AddOrderAdjustmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddOrderAdjustmentOperationCompleted);
            }
            this.InvokeAsync("AddOrderAdjustment", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        iOrderID,
                        sDescription,
                        dAmount}, this.AddOrderAdjustmentOperationCompleted, userState);
        }
        
        private void OnAddOrderAdjustmentOperationCompleted(object arg) {
            if ((this.AddOrderAdjustmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddOrderAdjustmentCompleted(this, new AddOrderAdjustmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Order/UpdateOrderAdjustment", RequestNamespace="http://clearstar.net/Gateway/Order", ResponseNamespace="http://clearstar.net/Gateway/Order", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode UpdateOrderAdjustment(string sUserName, string sPassword, int iBOID, string sCustID, int iAdjID, int iOrderID, string sDescription, decimal dAmount) {
            object[] results = this.Invoke("UpdateOrderAdjustment", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        iAdjID,
                        iOrderID,
                        sDescription,
                        dAmount});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateOrderAdjustmentAsync(string sUserName, string sPassword, int iBOID, string sCustID, int iAdjID, int iOrderID, string sDescription, decimal dAmount) {
            this.UpdateOrderAdjustmentAsync(sUserName, sPassword, iBOID, sCustID, iAdjID, iOrderID, sDescription, dAmount, null);
        }
        
        /// <remarks/>
        public void UpdateOrderAdjustmentAsync(string sUserName, string sPassword, int iBOID, string sCustID, int iAdjID, int iOrderID, string sDescription, decimal dAmount, object userState) {
            if ((this.UpdateOrderAdjustmentOperationCompleted == null)) {
                this.UpdateOrderAdjustmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateOrderAdjustmentOperationCompleted);
            }
            this.InvokeAsync("UpdateOrderAdjustment", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        iAdjID,
                        iOrderID,
                        sDescription,
                        dAmount}, this.UpdateOrderAdjustmentOperationCompleted, userState);
        }
        
        private void OnUpdateOrderAdjustmentOperationCompleted(object arg) {
            if ((this.UpdateOrderAdjustmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateOrderAdjustmentCompleted(this, new UpdateOrderAdjustmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Order/DeleteOrderAdjustment", RequestNamespace="http://clearstar.net/Gateway/Order", ResponseNamespace="http://clearstar.net/Gateway/Order", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode DeleteOrderAdjustment(string sUserName, string sPassword, int iBOID, string sCustID, int iOrderID, int iAdjID) {
            object[] results = this.Invoke("DeleteOrderAdjustment", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        iOrderID,
                        iAdjID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteOrderAdjustmentAsync(string sUserName, string sPassword, int iBOID, string sCustID, int iOrderID, int iAdjID) {
            this.DeleteOrderAdjustmentAsync(sUserName, sPassword, iBOID, sCustID, iOrderID, iAdjID, null);
        }
        
        /// <remarks/>
        public void DeleteOrderAdjustmentAsync(string sUserName, string sPassword, int iBOID, string sCustID, int iOrderID, int iAdjID, object userState) {
            if ((this.DeleteOrderAdjustmentOperationCompleted == null)) {
                this.DeleteOrderAdjustmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteOrderAdjustmentOperationCompleted);
            }
            this.InvokeAsync("DeleteOrderAdjustment", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        iOrderID,
                        iAdjID}, this.DeleteOrderAdjustmentOperationCompleted, userState);
        }
        
        private void OnDeleteOrderAdjustmentOperationCompleted(object arg) {
            if ((this.DeleteOrderAdjustmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteOrderAdjustmentCompleted(this, new DeleteOrderAdjustmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Order/UpdateOrderSrcBONote", RequestNamespace="http://clearstar.net/Gateway/Order", ResponseNamespace="http://clearstar.net/Gateway/Order", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode UpdateOrderSrcBONote(string sUserName, string sPassword, int iBOID, string sNoteType, int iOrderID, string sNote) {
            object[] results = this.Invoke("UpdateOrderSrcBONote", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sNoteType,
                        iOrderID,
                        sNote});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateOrderSrcBONoteAsync(string sUserName, string sPassword, int iBOID, string sNoteType, int iOrderID, string sNote) {
            this.UpdateOrderSrcBONoteAsync(sUserName, sPassword, iBOID, sNoteType, iOrderID, sNote, null);
        }
        
        /// <remarks/>
        public void UpdateOrderSrcBONoteAsync(string sUserName, string sPassword, int iBOID, string sNoteType, int iOrderID, string sNote, object userState) {
            if ((this.UpdateOrderSrcBONoteOperationCompleted == null)) {
                this.UpdateOrderSrcBONoteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateOrderSrcBONoteOperationCompleted);
            }
            this.InvokeAsync("UpdateOrderSrcBONote", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sNoteType,
                        iOrderID,
                        sNote}, this.UpdateOrderSrcBONoteOperationCompleted, userState);
        }
        
        private void OnUpdateOrderSrcBONoteOperationCompleted(object arg) {
            if ((this.UpdateOrderSrcBONoteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateOrderSrcBONoteCompleted(this, new UpdateOrderSrcBONoteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Order/UpdateOrderSrcBONote2", RequestNamespace="http://clearstar.net/Gateway/Order", ResponseNamespace="http://clearstar.net/Gateway/Order", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode UpdateOrderSrcBONote2(string sUserName, string sPassword, int iBOID, string sNoteType, int iOrderID, string sNote, bool bIsFromCustomer, bool bIncludeInReport) {
            object[] results = this.Invoke("UpdateOrderSrcBONote2", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sNoteType,
                        iOrderID,
                        sNote,
                        bIsFromCustomer,
                        bIncludeInReport});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateOrderSrcBONote2Async(string sUserName, string sPassword, int iBOID, string sNoteType, int iOrderID, string sNote, bool bIsFromCustomer, bool bIncludeInReport) {
            this.UpdateOrderSrcBONote2Async(sUserName, sPassword, iBOID, sNoteType, iOrderID, sNote, bIsFromCustomer, bIncludeInReport, null);
        }
        
        /// <remarks/>
        public void UpdateOrderSrcBONote2Async(string sUserName, string sPassword, int iBOID, string sNoteType, int iOrderID, string sNote, bool bIsFromCustomer, bool bIncludeInReport, object userState) {
            if ((this.UpdateOrderSrcBONote2OperationCompleted == null)) {
                this.UpdateOrderSrcBONote2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateOrderSrcBONote2OperationCompleted);
            }
            this.InvokeAsync("UpdateOrderSrcBONote2", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sNoteType,
                        iOrderID,
                        sNote,
                        bIsFromCustomer,
                        bIncludeInReport}, this.UpdateOrderSrcBONote2OperationCompleted, userState);
        }
        
        private void OnUpdateOrderSrcBONote2OperationCompleted(object arg) {
            if ((this.UpdateOrderSrcBONote2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateOrderSrcBONote2Completed(this, new UpdateOrderSrcBONote2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Order/GetOrderSrcBONotesHistory", RequestNamespace="http://clearstar.net/Gateway/Order", ResponseNamespace="http://clearstar.net/Gateway/Order", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetOrderSrcBONotesHistory(string sUserName, string sPassword, int iBOID, string sNoteType, int iOrderID) {
            object[] results = this.Invoke("GetOrderSrcBONotesHistory", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sNoteType,
                        iOrderID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetOrderSrcBONotesHistoryAsync(string sUserName, string sPassword, int iBOID, string sNoteType, int iOrderID) {
            this.GetOrderSrcBONotesHistoryAsync(sUserName, sPassword, iBOID, sNoteType, iOrderID, null);
        }
        
        /// <remarks/>
        public void GetOrderSrcBONotesHistoryAsync(string sUserName, string sPassword, int iBOID, string sNoteType, int iOrderID, object userState) {
            if ((this.GetOrderSrcBONotesHistoryOperationCompleted == null)) {
                this.GetOrderSrcBONotesHistoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOrderSrcBONotesHistoryOperationCompleted);
            }
            this.InvokeAsync("GetOrderSrcBONotesHistory", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sNoteType,
                        iOrderID}, this.GetOrderSrcBONotesHistoryOperationCompleted, userState);
        }
        
        private void OnGetOrderSrcBONotesHistoryOperationCompleted(object arg) {
            if ((this.GetOrderSrcBONotesHistoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOrderSrcBONotesHistoryCompleted(this, new GetOrderSrcBONotesHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Order/GetOrderDetail", RequestNamespace="http://clearstar.net/Gateway/Order", ResponseNamespace="http://clearstar.net/Gateway/Order", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetOrderDetail(string sUserName, string sPassword, int iBOID, string sCustID, int iOrderID, int iSourceID) {
            object[] results = this.Invoke("GetOrderDetail", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        iOrderID,
                        iSourceID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetOrderDetailAsync(string sUserName, string sPassword, int iBOID, string sCustID, int iOrderID, int iSourceID) {
            this.GetOrderDetailAsync(sUserName, sPassword, iBOID, sCustID, iOrderID, iSourceID, null);
        }
        
        /// <remarks/>
        public void GetOrderDetailAsync(string sUserName, string sPassword, int iBOID, string sCustID, int iOrderID, int iSourceID, object userState) {
            if ((this.GetOrderDetailOperationCompleted == null)) {
                this.GetOrderDetailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOrderDetailOperationCompleted);
            }
            this.InvokeAsync("GetOrderDetail", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        iOrderID,
                        iSourceID}, this.GetOrderDetailOperationCompleted, userState);
        }
        
        private void OnGetOrderDetailOperationCompleted(object arg) {
            if ((this.GetOrderDetailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOrderDetailCompleted(this, new GetOrderDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Order/AddOrderFees", RequestNamespace="http://clearstar.net/Gateway/Order", ResponseNamespace="http://clearstar.net/Gateway/Order", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode AddOrderFees(string sUserName, string sPassword, int iBOID, string sCustID, int iOrderID, string sDescription, decimal dAmount) {
            object[] results = this.Invoke("AddOrderFees", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        iOrderID,
                        sDescription,
                        dAmount});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void AddOrderFeesAsync(string sUserName, string sPassword, int iBOID, string sCustID, int iOrderID, string sDescription, decimal dAmount) {
            this.AddOrderFeesAsync(sUserName, sPassword, iBOID, sCustID, iOrderID, sDescription, dAmount, null);
        }
        
        /// <remarks/>
        public void AddOrderFeesAsync(string sUserName, string sPassword, int iBOID, string sCustID, int iOrderID, string sDescription, decimal dAmount, object userState) {
            if ((this.AddOrderFeesOperationCompleted == null)) {
                this.AddOrderFeesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddOrderFeesOperationCompleted);
            }
            this.InvokeAsync("AddOrderFees", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        iOrderID,
                        sDescription,
                        dAmount}, this.AddOrderFeesOperationCompleted, userState);
        }
        
        private void OnAddOrderFeesOperationCompleted(object arg) {
            if ((this.AddOrderFeesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddOrderFeesCompleted(this, new AddOrderFeesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Order/GetBOOrderSummary", RequestNamespace="http://clearstar.net/Gateway/Order", ResponseNamespace="http://clearstar.net/Gateway/Order", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetBOOrderSummary(string sUserName, string sPassword, int iBOID) {
            object[] results = this.Invoke("GetBOOrderSummary", new object[] {
                        sUserName,
                        sPassword,
                        iBOID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetBOOrderSummaryAsync(string sUserName, string sPassword, int iBOID) {
            this.GetBOOrderSummaryAsync(sUserName, sPassword, iBOID, null);
        }
        
        /// <remarks/>
        public void GetBOOrderSummaryAsync(string sUserName, string sPassword, int iBOID, object userState) {
            if ((this.GetBOOrderSummaryOperationCompleted == null)) {
                this.GetBOOrderSummaryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBOOrderSummaryOperationCompleted);
            }
            this.InvokeAsync("GetBOOrderSummary", new object[] {
                        sUserName,
                        sPassword,
                        iBOID}, this.GetBOOrderSummaryOperationCompleted, userState);
        }
        
        private void OnGetBOOrderSummaryOperationCompleted(object arg) {
            if ((this.GetBOOrderSummaryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBOOrderSummaryCompleted(this, new GetBOOrderSummaryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void SearchOrdersCompletedEventHandler(object sender, SearchOrdersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchOrdersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchOrdersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetOrderFieldsCompletedEventHandler(object sender, GetOrderFieldsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOrderFieldsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOrderFieldsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetOrderNotificationCompletedEventHandler(object sender, GetOrderNotificationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOrderNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOrderNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetOrderResultsCompletedEventHandler(object sender, GetOrderResultsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOrderResultsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOrderResultsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetOrderStatusDetailCompletedEventHandler(object sender, GetOrderStatusDetailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOrderStatusDetailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOrderStatusDetailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetOrderDueDateCompletedEventHandler(object sender, GetOrderDueDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOrderDueDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOrderDueDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UpdateOrderDueDateCompletedEventHandler(object sender, UpdateOrderDueDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateOrderDueDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateOrderDueDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void OrderNotificationRequestCompletedEventHandler(object sender, OrderNotificationRequestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OrderNotificationRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OrderNotificationRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ReassignOrderCompletedEventHandler(object sender, ReassignOrderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReassignOrderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReassignOrderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ResendOrderNotificationCompletedEventHandler(object sender, ResendOrderNotificationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ResendOrderNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ResendOrderNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void SuppressOrderCompletedEventHandler(object sender, SuppressOrderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SuppressOrderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SuppressOrderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UnSuppressOrderCompletedEventHandler(object sender, UnSuppressOrderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnSuppressOrderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnSuppressOrderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetOrderAdjustmentsCompletedEventHandler(object sender, GetOrderAdjustmentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOrderAdjustmentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOrderAdjustmentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void AddOrderAdjustmentCompletedEventHandler(object sender, AddOrderAdjustmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddOrderAdjustmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddOrderAdjustmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UpdateOrderAdjustmentCompletedEventHandler(object sender, UpdateOrderAdjustmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateOrderAdjustmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateOrderAdjustmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void DeleteOrderAdjustmentCompletedEventHandler(object sender, DeleteOrderAdjustmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteOrderAdjustmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteOrderAdjustmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UpdateOrderSrcBONoteCompletedEventHandler(object sender, UpdateOrderSrcBONoteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateOrderSrcBONoteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateOrderSrcBONoteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UpdateOrderSrcBONote2CompletedEventHandler(object sender, UpdateOrderSrcBONote2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateOrderSrcBONote2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateOrderSrcBONote2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetOrderSrcBONotesHistoryCompletedEventHandler(object sender, GetOrderSrcBONotesHistoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOrderSrcBONotesHistoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOrderSrcBONotesHistoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetOrderDetailCompletedEventHandler(object sender, GetOrderDetailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOrderDetailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOrderDetailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void AddOrderFeesCompletedEventHandler(object sender, AddOrderFeesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddOrderFeesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddOrderFeesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetBOOrderSummaryCompletedEventHandler(object sender, GetBOOrderSummaryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBOOrderSummaryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBOOrderSummaryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591