//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18444.
// 
#pragma warning disable 1591

namespace ExternalVendors.ClearstarGatewayDocument {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="DocumentSoap", Namespace="http://clearstar.net/Gateway/Document")]
    public partial class Document : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback DeleteProfileDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteOrderDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProfileDocumentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProfileDocumentsForMergeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentsByKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOrderDocumentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback DownloadProfileDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback DownloadOrderDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadProfileDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadProfileDocument2OperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadProfileDocument3OperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadOrderDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadOrderDocument2OperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateDocumentSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateDocumentSettings2OperationCompleted;
        
        private System.Threading.SendOrPostCallback CopyProfileDocumentToOrderOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Document() {
            this.Url = global::ExternalVendors.Properties.Settings.Default.ExternalVendors_ClearstarGatewayDocument_Document;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event DeleteProfileDocumentCompletedEventHandler DeleteProfileDocumentCompleted;
        
        /// <remarks/>
        public event DeleteOrderDocumentCompletedEventHandler DeleteOrderDocumentCompleted;
        
        /// <remarks/>
        public event GetProfileDocumentsCompletedEventHandler GetProfileDocumentsCompleted;
        
        /// <remarks/>
        public event GetProfileDocumentsForMergeCompletedEventHandler GetProfileDocumentsForMergeCompleted;
        
        /// <remarks/>
        public event GetDocumentsByKeyCompletedEventHandler GetDocumentsByKeyCompleted;
        
        /// <remarks/>
        public event GetOrderDocumentsCompletedEventHandler GetOrderDocumentsCompleted;
        
        /// <remarks/>
        public event DownloadProfileDocumentCompletedEventHandler DownloadProfileDocumentCompleted;
        
        /// <remarks/>
        public event DownloadOrderDocumentCompletedEventHandler DownloadOrderDocumentCompleted;
        
        /// <remarks/>
        public event UploadProfileDocumentCompletedEventHandler UploadProfileDocumentCompleted;
        
        /// <remarks/>
        public event UploadProfileDocument2CompletedEventHandler UploadProfileDocument2Completed;
        
        /// <remarks/>
        public event UploadProfileDocument3CompletedEventHandler UploadProfileDocument3Completed;
        
        /// <remarks/>
        public event UploadOrderDocumentCompletedEventHandler UploadOrderDocumentCompleted;
        
        /// <remarks/>
        public event UploadOrderDocument2CompletedEventHandler UploadOrderDocument2Completed;
        
        /// <remarks/>
        public event UpdateDocumentSettingsCompletedEventHandler UpdateDocumentSettingsCompleted;
        
        /// <remarks/>
        public event UpdateDocumentSettings2CompletedEventHandler UpdateDocumentSettings2Completed;
        
        /// <remarks/>
        public event CopyProfileDocumentToOrderCompletedEventHandler CopyProfileDocumentToOrderCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Document/DeleteProfileDocument", RequestNamespace="http://clearstar.net/Gateway/Document", ResponseNamespace="http://clearstar.net/Gateway/Document", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode DeleteProfileDocument(string sUserName, string sPassword, int iBOID, string sCustID, int iFileID) {
            object[] results = this.Invoke("DeleteProfileDocument", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        iFileID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteProfileDocumentAsync(string sUserName, string sPassword, int iBOID, string sCustID, int iFileID) {
            this.DeleteProfileDocumentAsync(sUserName, sPassword, iBOID, sCustID, iFileID, null);
        }
        
        /// <remarks/>
        public void DeleteProfileDocumentAsync(string sUserName, string sPassword, int iBOID, string sCustID, int iFileID, object userState) {
            if ((this.DeleteProfileDocumentOperationCompleted == null)) {
                this.DeleteProfileDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteProfileDocumentOperationCompleted);
            }
            this.InvokeAsync("DeleteProfileDocument", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        iFileID}, this.DeleteProfileDocumentOperationCompleted, userState);
        }
        
        private void OnDeleteProfileDocumentOperationCompleted(object arg) {
            if ((this.DeleteProfileDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteProfileDocumentCompleted(this, new DeleteProfileDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Document/DeleteOrderDocument", RequestNamespace="http://clearstar.net/Gateway/Document", ResponseNamespace="http://clearstar.net/Gateway/Document", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode DeleteOrderDocument(string sUserName, string sPassword, int iBOID, string sCustID, int iFileID) {
            object[] results = this.Invoke("DeleteOrderDocument", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        iFileID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteOrderDocumentAsync(string sUserName, string sPassword, int iBOID, string sCustID, int iFileID) {
            this.DeleteOrderDocumentAsync(sUserName, sPassword, iBOID, sCustID, iFileID, null);
        }
        
        /// <remarks/>
        public void DeleteOrderDocumentAsync(string sUserName, string sPassword, int iBOID, string sCustID, int iFileID, object userState) {
            if ((this.DeleteOrderDocumentOperationCompleted == null)) {
                this.DeleteOrderDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteOrderDocumentOperationCompleted);
            }
            this.InvokeAsync("DeleteOrderDocument", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        iFileID}, this.DeleteOrderDocumentOperationCompleted, userState);
        }
        
        private void OnDeleteOrderDocumentOperationCompleted(object arg) {
            if ((this.DeleteOrderDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteOrderDocumentCompleted(this, new DeleteOrderDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Document/GetProfileDocuments", RequestNamespace="http://clearstar.net/Gateway/Document", ResponseNamespace="http://clearstar.net/Gateway/Document", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetProfileDocuments(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo) {
            object[] results = this.Invoke("GetProfileDocuments", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetProfileDocumentsAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo) {
            this.GetProfileDocumentsAsync(sUserName, sPassword, iBOID, sCustID, sProfNo, null);
        }
        
        /// <remarks/>
        public void GetProfileDocumentsAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, object userState) {
            if ((this.GetProfileDocumentsOperationCompleted == null)) {
                this.GetProfileDocumentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProfileDocumentsOperationCompleted);
            }
            this.InvokeAsync("GetProfileDocuments", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo}, this.GetProfileDocumentsOperationCompleted, userState);
        }
        
        private void OnGetProfileDocumentsOperationCompleted(object arg) {
            if ((this.GetProfileDocumentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProfileDocumentsCompleted(this, new GetProfileDocumentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Document/GetProfileDocumentsForMerge", RequestNamespace="http://clearstar.net/Gateway/Document", ResponseNamespace="http://clearstar.net/Gateway/Document", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetProfileDocumentsForMerge(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo) {
            object[] results = this.Invoke("GetProfileDocumentsForMerge", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetProfileDocumentsForMergeAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo) {
            this.GetProfileDocumentsForMergeAsync(sUserName, sPassword, iBOID, sCustID, sProfNo, null);
        }
        
        /// <remarks/>
        public void GetProfileDocumentsForMergeAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, object userState) {
            if ((this.GetProfileDocumentsForMergeOperationCompleted == null)) {
                this.GetProfileDocumentsForMergeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProfileDocumentsForMergeOperationCompleted);
            }
            this.InvokeAsync("GetProfileDocumentsForMerge", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo}, this.GetProfileDocumentsForMergeOperationCompleted, userState);
        }
        
        private void OnGetProfileDocumentsForMergeOperationCompleted(object arg) {
            if ((this.GetProfileDocumentsForMergeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProfileDocumentsForMergeCompleted(this, new GetProfileDocumentsForMergeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Document/GetDocumentsByKey", RequestNamespace="http://clearstar.net/Gateway/Document", ResponseNamespace="http://clearstar.net/Gateway/Document", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetDocumentsByKey(string sUserName, string sPassword, int iBOID, string sCustID, string sObjectID, string sObjectType) {
            object[] results = this.Invoke("GetDocumentsByKey", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sObjectID,
                        sObjectType});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentsByKeyAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sObjectID, string sObjectType) {
            this.GetDocumentsByKeyAsync(sUserName, sPassword, iBOID, sCustID, sObjectID, sObjectType, null);
        }
        
        /// <remarks/>
        public void GetDocumentsByKeyAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sObjectID, string sObjectType, object userState) {
            if ((this.GetDocumentsByKeyOperationCompleted == null)) {
                this.GetDocumentsByKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentsByKeyOperationCompleted);
            }
            this.InvokeAsync("GetDocumentsByKey", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sObjectID,
                        sObjectType}, this.GetDocumentsByKeyOperationCompleted, userState);
        }
        
        private void OnGetDocumentsByKeyOperationCompleted(object arg) {
            if ((this.GetDocumentsByKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentsByKeyCompleted(this, new GetDocumentsByKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Document/GetOrderDocuments", RequestNamespace="http://clearstar.net/Gateway/Document", ResponseNamespace="http://clearstar.net/Gateway/Document", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetOrderDocuments(string sUserName, string sPassword, int iBOID, string sCustID, int iOrderID) {
            object[] results = this.Invoke("GetOrderDocuments", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        iOrderID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetOrderDocumentsAsync(string sUserName, string sPassword, int iBOID, string sCustID, int iOrderID) {
            this.GetOrderDocumentsAsync(sUserName, sPassword, iBOID, sCustID, iOrderID, null);
        }
        
        /// <remarks/>
        public void GetOrderDocumentsAsync(string sUserName, string sPassword, int iBOID, string sCustID, int iOrderID, object userState) {
            if ((this.GetOrderDocumentsOperationCompleted == null)) {
                this.GetOrderDocumentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOrderDocumentsOperationCompleted);
            }
            this.InvokeAsync("GetOrderDocuments", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        iOrderID}, this.GetOrderDocumentsOperationCompleted, userState);
        }
        
        private void OnGetOrderDocumentsOperationCompleted(object arg) {
            if ((this.GetOrderDocumentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOrderDocumentsCompleted(this, new GetOrderDocumentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Document/DownloadProfileDocument", RequestNamespace="http://clearstar.net/Gateway/Document", ResponseNamespace="http://clearstar.net/Gateway/Document", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DownloadFile DownloadProfileDocument(string sUserName, string sPassword, int iBOID, string sCustID, int iFileID) {
            object[] results = this.Invoke("DownloadProfileDocument", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        iFileID});
            return ((DownloadFile)(results[0]));
        }
        
        /// <remarks/>
        public void DownloadProfileDocumentAsync(string sUserName, string sPassword, int iBOID, string sCustID, int iFileID) {
            this.DownloadProfileDocumentAsync(sUserName, sPassword, iBOID, sCustID, iFileID, null);
        }
        
        /// <remarks/>
        public void DownloadProfileDocumentAsync(string sUserName, string sPassword, int iBOID, string sCustID, int iFileID, object userState) {
            if ((this.DownloadProfileDocumentOperationCompleted == null)) {
                this.DownloadProfileDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadProfileDocumentOperationCompleted);
            }
            this.InvokeAsync("DownloadProfileDocument", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        iFileID}, this.DownloadProfileDocumentOperationCompleted, userState);
        }
        
        private void OnDownloadProfileDocumentOperationCompleted(object arg) {
            if ((this.DownloadProfileDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadProfileDocumentCompleted(this, new DownloadProfileDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Document/DownloadOrderDocument", RequestNamespace="http://clearstar.net/Gateway/Document", ResponseNamespace="http://clearstar.net/Gateway/Document", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DownloadFile DownloadOrderDocument(string sUserName, string sPassword, int iBOID, string sCustID, int iFileID) {
            object[] results = this.Invoke("DownloadOrderDocument", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        iFileID});
            return ((DownloadFile)(results[0]));
        }
        
        /// <remarks/>
        public void DownloadOrderDocumentAsync(string sUserName, string sPassword, int iBOID, string sCustID, int iFileID) {
            this.DownloadOrderDocumentAsync(sUserName, sPassword, iBOID, sCustID, iFileID, null);
        }
        
        /// <remarks/>
        public void DownloadOrderDocumentAsync(string sUserName, string sPassword, int iBOID, string sCustID, int iFileID, object userState) {
            if ((this.DownloadOrderDocumentOperationCompleted == null)) {
                this.DownloadOrderDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadOrderDocumentOperationCompleted);
            }
            this.InvokeAsync("DownloadOrderDocument", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        iFileID}, this.DownloadOrderDocumentOperationCompleted, userState);
        }
        
        private void OnDownloadOrderDocumentOperationCompleted(object arg) {
            if ((this.DownloadOrderDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadOrderDocumentCompleted(this, new DownloadOrderDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Document/UploadProfileDocument", RequestNamespace="http://clearstar.net/Gateway/Document", ResponseNamespace="http://clearstar.net/Gateway/Document", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode UploadProfileDocument(string sUserName, string sPassword, int iBOID, string sCustID, int iFileID, string sProfNo, string sFileType, string sContentType, int iSecurityLevel, string sDescription, string sFileName, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] baFileBytes) {
            object[] results = this.Invoke("UploadProfileDocument", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        iFileID,
                        sProfNo,
                        sFileType,
                        sContentType,
                        iSecurityLevel,
                        sDescription,
                        sFileName,
                        baFileBytes});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void UploadProfileDocumentAsync(string sUserName, string sPassword, int iBOID, string sCustID, int iFileID, string sProfNo, string sFileType, string sContentType, int iSecurityLevel, string sDescription, string sFileName, byte[] baFileBytes) {
            this.UploadProfileDocumentAsync(sUserName, sPassword, iBOID, sCustID, iFileID, sProfNo, sFileType, sContentType, iSecurityLevel, sDescription, sFileName, baFileBytes, null);
        }
        
        /// <remarks/>
        public void UploadProfileDocumentAsync(string sUserName, string sPassword, int iBOID, string sCustID, int iFileID, string sProfNo, string sFileType, string sContentType, int iSecurityLevel, string sDescription, string sFileName, byte[] baFileBytes, object userState) {
            if ((this.UploadProfileDocumentOperationCompleted == null)) {
                this.UploadProfileDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadProfileDocumentOperationCompleted);
            }
            this.InvokeAsync("UploadProfileDocument", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        iFileID,
                        sProfNo,
                        sFileType,
                        sContentType,
                        iSecurityLevel,
                        sDescription,
                        sFileName,
                        baFileBytes}, this.UploadProfileDocumentOperationCompleted, userState);
        }
        
        private void OnUploadProfileDocumentOperationCompleted(object arg) {
            if ((this.UploadProfileDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadProfileDocumentCompleted(this, new UploadProfileDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Document/UploadProfileDocument2", RequestNamespace="http://clearstar.net/Gateway/Document", ResponseNamespace="http://clearstar.net/Gateway/Document", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode UploadProfileDocument2(string sUserName, string sPassword, int iBOID, string sCustID, int iFileID, string sProfNo, string sFileType, string sContentType, int iSecurityLevel, string sDescription, string sIncludeInReport, string sFileName, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] baFileBytes) {
            object[] results = this.Invoke("UploadProfileDocument2", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        iFileID,
                        sProfNo,
                        sFileType,
                        sContentType,
                        iSecurityLevel,
                        sDescription,
                        sIncludeInReport,
                        sFileName,
                        baFileBytes});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void UploadProfileDocument2Async(string sUserName, string sPassword, int iBOID, string sCustID, int iFileID, string sProfNo, string sFileType, string sContentType, int iSecurityLevel, string sDescription, string sIncludeInReport, string sFileName, byte[] baFileBytes) {
            this.UploadProfileDocument2Async(sUserName, sPassword, iBOID, sCustID, iFileID, sProfNo, sFileType, sContentType, iSecurityLevel, sDescription, sIncludeInReport, sFileName, baFileBytes, null);
        }
        
        /// <remarks/>
        public void UploadProfileDocument2Async(string sUserName, string sPassword, int iBOID, string sCustID, int iFileID, string sProfNo, string sFileType, string sContentType, int iSecurityLevel, string sDescription, string sIncludeInReport, string sFileName, byte[] baFileBytes, object userState) {
            if ((this.UploadProfileDocument2OperationCompleted == null)) {
                this.UploadProfileDocument2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadProfileDocument2OperationCompleted);
            }
            this.InvokeAsync("UploadProfileDocument2", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        iFileID,
                        sProfNo,
                        sFileType,
                        sContentType,
                        iSecurityLevel,
                        sDescription,
                        sIncludeInReport,
                        sFileName,
                        baFileBytes}, this.UploadProfileDocument2OperationCompleted, userState);
        }
        
        private void OnUploadProfileDocument2OperationCompleted(object arg) {
            if ((this.UploadProfileDocument2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadProfileDocument2Completed(this, new UploadProfileDocument2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Document/UploadProfileDocument3", RequestNamespace="http://clearstar.net/Gateway/Document", ResponseNamespace="http://clearstar.net/Gateway/Document", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode UploadProfileDocument3(string sUserName, string sPassword, int iBOID, string sCustID, int iFileID, string sProfNo, string sOrderIDsDocCopiedTo, string sFileType, string sContentType, int iSecurityLevel, string sDescription, string sIncludeInReport, string sFileName, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] baFileBytes) {
            object[] results = this.Invoke("UploadProfileDocument3", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        iFileID,
                        sProfNo,
                        sOrderIDsDocCopiedTo,
                        sFileType,
                        sContentType,
                        iSecurityLevel,
                        sDescription,
                        sIncludeInReport,
                        sFileName,
                        baFileBytes});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void UploadProfileDocument3Async(string sUserName, string sPassword, int iBOID, string sCustID, int iFileID, string sProfNo, string sOrderIDsDocCopiedTo, string sFileType, string sContentType, int iSecurityLevel, string sDescription, string sIncludeInReport, string sFileName, byte[] baFileBytes) {
            this.UploadProfileDocument3Async(sUserName, sPassword, iBOID, sCustID, iFileID, sProfNo, sOrderIDsDocCopiedTo, sFileType, sContentType, iSecurityLevel, sDescription, sIncludeInReport, sFileName, baFileBytes, null);
        }
        
        /// <remarks/>
        public void UploadProfileDocument3Async(string sUserName, string sPassword, int iBOID, string sCustID, int iFileID, string sProfNo, string sOrderIDsDocCopiedTo, string sFileType, string sContentType, int iSecurityLevel, string sDescription, string sIncludeInReport, string sFileName, byte[] baFileBytes, object userState) {
            if ((this.UploadProfileDocument3OperationCompleted == null)) {
                this.UploadProfileDocument3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadProfileDocument3OperationCompleted);
            }
            this.InvokeAsync("UploadProfileDocument3", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        iFileID,
                        sProfNo,
                        sOrderIDsDocCopiedTo,
                        sFileType,
                        sContentType,
                        iSecurityLevel,
                        sDescription,
                        sIncludeInReport,
                        sFileName,
                        baFileBytes}, this.UploadProfileDocument3OperationCompleted, userState);
        }
        
        private void OnUploadProfileDocument3OperationCompleted(object arg) {
            if ((this.UploadProfileDocument3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadProfileDocument3Completed(this, new UploadProfileDocument3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Document/UploadOrderDocument", RequestNamespace="http://clearstar.net/Gateway/Document", ResponseNamespace="http://clearstar.net/Gateway/Document", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode UploadOrderDocument(string sUserName, string sPassword, int iBOID, string sCustID, int iFileID, string sProfNo, int iOrderID, string sFileType, string sContentType, int iSecurityLevel, string sDescription, string sFileName, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] baFileBytes) {
            object[] results = this.Invoke("UploadOrderDocument", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        iFileID,
                        sProfNo,
                        iOrderID,
                        sFileType,
                        sContentType,
                        iSecurityLevel,
                        sDescription,
                        sFileName,
                        baFileBytes});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void UploadOrderDocumentAsync(string sUserName, string sPassword, int iBOID, string sCustID, int iFileID, string sProfNo, int iOrderID, string sFileType, string sContentType, int iSecurityLevel, string sDescription, string sFileName, byte[] baFileBytes) {
            this.UploadOrderDocumentAsync(sUserName, sPassword, iBOID, sCustID, iFileID, sProfNo, iOrderID, sFileType, sContentType, iSecurityLevel, sDescription, sFileName, baFileBytes, null);
        }
        
        /// <remarks/>
        public void UploadOrderDocumentAsync(string sUserName, string sPassword, int iBOID, string sCustID, int iFileID, string sProfNo, int iOrderID, string sFileType, string sContentType, int iSecurityLevel, string sDescription, string sFileName, byte[] baFileBytes, object userState) {
            if ((this.UploadOrderDocumentOperationCompleted == null)) {
                this.UploadOrderDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadOrderDocumentOperationCompleted);
            }
            this.InvokeAsync("UploadOrderDocument", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        iFileID,
                        sProfNo,
                        iOrderID,
                        sFileType,
                        sContentType,
                        iSecurityLevel,
                        sDescription,
                        sFileName,
                        baFileBytes}, this.UploadOrderDocumentOperationCompleted, userState);
        }
        
        private void OnUploadOrderDocumentOperationCompleted(object arg) {
            if ((this.UploadOrderDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadOrderDocumentCompleted(this, new UploadOrderDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Document/UploadOrderDocument2", RequestNamespace="http://clearstar.net/Gateway/Document", ResponseNamespace="http://clearstar.net/Gateway/Document", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode UploadOrderDocument2(string sUserName, string sPassword, int iBOID, string sCustID, int iFileID, string sProfNo, int iOrderID, string sFileType, string sContentType, int iSecurityLevel, string sDescription, string sIncludeInReport, string sFileName, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] baFileBytes) {
            object[] results = this.Invoke("UploadOrderDocument2", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        iFileID,
                        sProfNo,
                        iOrderID,
                        sFileType,
                        sContentType,
                        iSecurityLevel,
                        sDescription,
                        sIncludeInReport,
                        sFileName,
                        baFileBytes});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void UploadOrderDocument2Async(string sUserName, string sPassword, int iBOID, string sCustID, int iFileID, string sProfNo, int iOrderID, string sFileType, string sContentType, int iSecurityLevel, string sDescription, string sIncludeInReport, string sFileName, byte[] baFileBytes) {
            this.UploadOrderDocument2Async(sUserName, sPassword, iBOID, sCustID, iFileID, sProfNo, iOrderID, sFileType, sContentType, iSecurityLevel, sDescription, sIncludeInReport, sFileName, baFileBytes, null);
        }
        
        /// <remarks/>
        public void UploadOrderDocument2Async(string sUserName, string sPassword, int iBOID, string sCustID, int iFileID, string sProfNo, int iOrderID, string sFileType, string sContentType, int iSecurityLevel, string sDescription, string sIncludeInReport, string sFileName, byte[] baFileBytes, object userState) {
            if ((this.UploadOrderDocument2OperationCompleted == null)) {
                this.UploadOrderDocument2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadOrderDocument2OperationCompleted);
            }
            this.InvokeAsync("UploadOrderDocument2", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        iFileID,
                        sProfNo,
                        iOrderID,
                        sFileType,
                        sContentType,
                        iSecurityLevel,
                        sDescription,
                        sIncludeInReport,
                        sFileName,
                        baFileBytes}, this.UploadOrderDocument2OperationCompleted, userState);
        }
        
        private void OnUploadOrderDocument2OperationCompleted(object arg) {
            if ((this.UploadOrderDocument2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadOrderDocument2Completed(this, new UploadOrderDocument2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Document/UpdateDocumentSettings", RequestNamespace="http://clearstar.net/Gateway/Document", ResponseNamespace="http://clearstar.net/Gateway/Document", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode UpdateDocumentSettings(string sUserName, string sPassword, int iBOID, string sCustID, int iFileID, string sDescription, int iSecurityLevel) {
            object[] results = this.Invoke("UpdateDocumentSettings", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        iFileID,
                        sDescription,
                        iSecurityLevel});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateDocumentSettingsAsync(string sUserName, string sPassword, int iBOID, string sCustID, int iFileID, string sDescription, int iSecurityLevel) {
            this.UpdateDocumentSettingsAsync(sUserName, sPassword, iBOID, sCustID, iFileID, sDescription, iSecurityLevel, null);
        }
        
        /// <remarks/>
        public void UpdateDocumentSettingsAsync(string sUserName, string sPassword, int iBOID, string sCustID, int iFileID, string sDescription, int iSecurityLevel, object userState) {
            if ((this.UpdateDocumentSettingsOperationCompleted == null)) {
                this.UpdateDocumentSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateDocumentSettingsOperationCompleted);
            }
            this.InvokeAsync("UpdateDocumentSettings", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        iFileID,
                        sDescription,
                        iSecurityLevel}, this.UpdateDocumentSettingsOperationCompleted, userState);
        }
        
        private void OnUpdateDocumentSettingsOperationCompleted(object arg) {
            if ((this.UpdateDocumentSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateDocumentSettingsCompleted(this, new UpdateDocumentSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Document/UpdateDocumentSettings2", RequestNamespace="http://clearstar.net/Gateway/Document", ResponseNamespace="http://clearstar.net/Gateway/Document", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode UpdateDocumentSettings2(string sUserName, string sPassword, int iBOID, string sCustID, int iFileID, string sDescription, int iSecurityLevel, string sIncludeInReport) {
            object[] results = this.Invoke("UpdateDocumentSettings2", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        iFileID,
                        sDescription,
                        iSecurityLevel,
                        sIncludeInReport});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateDocumentSettings2Async(string sUserName, string sPassword, int iBOID, string sCustID, int iFileID, string sDescription, int iSecurityLevel, string sIncludeInReport) {
            this.UpdateDocumentSettings2Async(sUserName, sPassword, iBOID, sCustID, iFileID, sDescription, iSecurityLevel, sIncludeInReport, null);
        }
        
        /// <remarks/>
        public void UpdateDocumentSettings2Async(string sUserName, string sPassword, int iBOID, string sCustID, int iFileID, string sDescription, int iSecurityLevel, string sIncludeInReport, object userState) {
            if ((this.UpdateDocumentSettings2OperationCompleted == null)) {
                this.UpdateDocumentSettings2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateDocumentSettings2OperationCompleted);
            }
            this.InvokeAsync("UpdateDocumentSettings2", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        iFileID,
                        sDescription,
                        iSecurityLevel,
                        sIncludeInReport}, this.UpdateDocumentSettings2OperationCompleted, userState);
        }
        
        private void OnUpdateDocumentSettings2OperationCompleted(object arg) {
            if ((this.UpdateDocumentSettings2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateDocumentSettings2Completed(this, new UpdateDocumentSettings2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Document/CopyProfileDocumentToOrder", RequestNamespace="http://clearstar.net/Gateway/Document", ResponseNamespace="http://clearstar.net/Gateway/Document", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode CopyProfileDocumentToOrder(string sUserName, string sPassword, int iBOID, string sCustID, int iFileID, string sProfNo, string sOrderIDsDocCopiedTo, string sFileName) {
            object[] results = this.Invoke("CopyProfileDocumentToOrder", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        iFileID,
                        sProfNo,
                        sOrderIDsDocCopiedTo,
                        sFileName});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void CopyProfileDocumentToOrderAsync(string sUserName, string sPassword, int iBOID, string sCustID, int iFileID, string sProfNo, string sOrderIDsDocCopiedTo, string sFileName) {
            this.CopyProfileDocumentToOrderAsync(sUserName, sPassword, iBOID, sCustID, iFileID, sProfNo, sOrderIDsDocCopiedTo, sFileName, null);
        }
        
        /// <remarks/>
        public void CopyProfileDocumentToOrderAsync(string sUserName, string sPassword, int iBOID, string sCustID, int iFileID, string sProfNo, string sOrderIDsDocCopiedTo, string sFileName, object userState) {
            if ((this.CopyProfileDocumentToOrderOperationCompleted == null)) {
                this.CopyProfileDocumentToOrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCopyProfileDocumentToOrderOperationCompleted);
            }
            this.InvokeAsync("CopyProfileDocumentToOrder", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        iFileID,
                        sProfNo,
                        sOrderIDsDocCopiedTo,
                        sFileName}, this.CopyProfileDocumentToOrderOperationCompleted, userState);
        }
        
        private void OnCopyProfileDocumentToOrderOperationCompleted(object arg) {
            if ((this.CopyProfileDocumentToOrderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CopyProfileDocumentToOrderCompleted(this, new CopyProfileDocumentToOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://clearstar.net/Gateway/Document")]
    public partial class DownloadFile {
        
        private string sFilenameField;
        
        private string sFileTypeField;
        
        private string sContentTypeField;
        
        private string sErrorCodeField;
        
        private string sErrorMsgField;
        
        private byte[] baFileBytesField;
        
        /// <remarks/>
        public string sFilename {
            get {
                return this.sFilenameField;
            }
            set {
                this.sFilenameField = value;
            }
        }
        
        /// <remarks/>
        public string sFileType {
            get {
                return this.sFileTypeField;
            }
            set {
                this.sFileTypeField = value;
            }
        }
        
        /// <remarks/>
        public string sContentType {
            get {
                return this.sContentTypeField;
            }
            set {
                this.sContentTypeField = value;
            }
        }
        
        /// <remarks/>
        public string sErrorCode {
            get {
                return this.sErrorCodeField;
            }
            set {
                this.sErrorCodeField = value;
            }
        }
        
        /// <remarks/>
        public string sErrorMsg {
            get {
                return this.sErrorMsgField;
            }
            set {
                this.sErrorMsgField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] baFileBytes {
            get {
                return this.baFileBytesField;
            }
            set {
                this.baFileBytesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void DeleteProfileDocumentCompletedEventHandler(object sender, DeleteProfileDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteProfileDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteProfileDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void DeleteOrderDocumentCompletedEventHandler(object sender, DeleteOrderDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteOrderDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteOrderDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetProfileDocumentsCompletedEventHandler(object sender, GetProfileDocumentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProfileDocumentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProfileDocumentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetProfileDocumentsForMergeCompletedEventHandler(object sender, GetProfileDocumentsForMergeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProfileDocumentsForMergeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProfileDocumentsForMergeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetDocumentsByKeyCompletedEventHandler(object sender, GetDocumentsByKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentsByKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentsByKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetOrderDocumentsCompletedEventHandler(object sender, GetOrderDocumentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOrderDocumentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOrderDocumentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void DownloadProfileDocumentCompletedEventHandler(object sender, DownloadProfileDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadProfileDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DownloadProfileDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DownloadFile Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DownloadFile)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void DownloadOrderDocumentCompletedEventHandler(object sender, DownloadOrderDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadOrderDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DownloadOrderDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DownloadFile Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DownloadFile)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UploadProfileDocumentCompletedEventHandler(object sender, UploadProfileDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadProfileDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadProfileDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UploadProfileDocument2CompletedEventHandler(object sender, UploadProfileDocument2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadProfileDocument2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadProfileDocument2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UploadProfileDocument3CompletedEventHandler(object sender, UploadProfileDocument3CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadProfileDocument3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadProfileDocument3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UploadOrderDocumentCompletedEventHandler(object sender, UploadOrderDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadOrderDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadOrderDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UploadOrderDocument2CompletedEventHandler(object sender, UploadOrderDocument2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadOrderDocument2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadOrderDocument2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UpdateDocumentSettingsCompletedEventHandler(object sender, UpdateDocumentSettingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateDocumentSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateDocumentSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UpdateDocumentSettings2CompletedEventHandler(object sender, UpdateDocumentSettings2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateDocumentSettings2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateDocumentSettings2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void CopyProfileDocumentToOrderCompletedEventHandler(object sender, CopyProfileDocumentToOrderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CopyProfileDocumentToOrderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CopyProfileDocumentToOrderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591