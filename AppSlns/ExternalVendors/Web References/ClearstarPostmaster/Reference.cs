//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18444.
// 
#pragma warning disable 1591

namespace ExternalVendors.ClearstarPostmaster {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="PostMasterSoap", Namespace="http://clearstar.net/Gateway/PostMaster")]
    public partial class PostMaster : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetEmailConfigurationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback RegisterEmailConfigurationOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendEmailOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateEmailConfigurationOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public PostMaster() {
            this.Url = global::ExternalVendors.Properties.Settings.Default.ExternalVendors_ClearstarPostmaster_PostMaster;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetEmailConfigurationsCompletedEventHandler GetEmailConfigurationsCompleted;
        
        /// <remarks/>
        public event RegisterEmailConfigurationCompletedEventHandler RegisterEmailConfigurationCompleted;
        
        /// <remarks/>
        public event SendEmailCompletedEventHandler SendEmailCompleted;
        
        /// <remarks/>
        public event UpdateEmailConfigurationCompletedEventHandler UpdateEmailConfigurationCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/PostMaster/GetEmailConfigurations", RequestNamespace="http://clearstar.net/Gateway/PostMaster", ResponseNamespace="http://clearstar.net/Gateway/PostMaster", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetEmailConfigurations(string sUserName, string sPassword, int iBOID, string sCustID) {
            object[] results = this.Invoke("GetEmailConfigurations", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetEmailConfigurationsAsync(string sUserName, string sPassword, int iBOID, string sCustID) {
            this.GetEmailConfigurationsAsync(sUserName, sPassword, iBOID, sCustID, null);
        }
        
        /// <remarks/>
        public void GetEmailConfigurationsAsync(string sUserName, string sPassword, int iBOID, string sCustID, object userState) {
            if ((this.GetEmailConfigurationsOperationCompleted == null)) {
                this.GetEmailConfigurationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEmailConfigurationsOperationCompleted);
            }
            this.InvokeAsync("GetEmailConfigurations", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID}, this.GetEmailConfigurationsOperationCompleted, userState);
        }
        
        private void OnGetEmailConfigurationsOperationCompleted(object arg) {
            if ((this.GetEmailConfigurationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEmailConfigurationsCompleted(this, new GetEmailConfigurationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/PostMaster/RegisterEmailConfiguration", RequestNamespace="http://clearstar.net/Gateway/PostMaster", ResponseNamespace="http://clearstar.net/Gateway/PostMaster", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode RegisterEmailConfiguration(string sUserName, string sPassword, int iBOID, string sCustID, string sSMTPServer, string sSMTPPort, bool bUseSSL, string sEmailUserName, string sEmailUserPassword, string sEmailFromAddress, string sMessageType) {
            object[] results = this.Invoke("RegisterEmailConfiguration", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sSMTPServer,
                        sSMTPPort,
                        bUseSSL,
                        sEmailUserName,
                        sEmailUserPassword,
                        sEmailFromAddress,
                        sMessageType});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void RegisterEmailConfigurationAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sSMTPServer, string sSMTPPort, bool bUseSSL, string sEmailUserName, string sEmailUserPassword, string sEmailFromAddress, string sMessageType) {
            this.RegisterEmailConfigurationAsync(sUserName, sPassword, iBOID, sCustID, sSMTPServer, sSMTPPort, bUseSSL, sEmailUserName, sEmailUserPassword, sEmailFromAddress, sMessageType, null);
        }
        
        /// <remarks/>
        public void RegisterEmailConfigurationAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sSMTPServer, string sSMTPPort, bool bUseSSL, string sEmailUserName, string sEmailUserPassword, string sEmailFromAddress, string sMessageType, object userState) {
            if ((this.RegisterEmailConfigurationOperationCompleted == null)) {
                this.RegisterEmailConfigurationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegisterEmailConfigurationOperationCompleted);
            }
            this.InvokeAsync("RegisterEmailConfiguration", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sSMTPServer,
                        sSMTPPort,
                        bUseSSL,
                        sEmailUserName,
                        sEmailUserPassword,
                        sEmailFromAddress,
                        sMessageType}, this.RegisterEmailConfigurationOperationCompleted, userState);
        }
        
        private void OnRegisterEmailConfigurationOperationCompleted(object arg) {
            if ((this.RegisterEmailConfigurationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RegisterEmailConfigurationCompleted(this, new RegisterEmailConfigurationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/PostMaster/SendEmail", RequestNamespace="http://clearstar.net/Gateway/PostMaster", ResponseNamespace="http://clearstar.net/Gateway/PostMaster", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode SendEmail(string sUserName, string sPassword, int iBOID, string sCustID, string sTo, string sCC, string sBCC, string sSubject, string sBody, bool bIsHtml, string sFileName, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] FileBytes, string sEmailCfgToken) {
            object[] results = this.Invoke("SendEmail", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sTo,
                        sCC,
                        sBCC,
                        sSubject,
                        sBody,
                        bIsHtml,
                        sFileName,
                        FileBytes,
                        sEmailCfgToken});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void SendEmailAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sTo, string sCC, string sBCC, string sSubject, string sBody, bool bIsHtml, string sFileName, byte[] FileBytes, string sEmailCfgToken) {
            this.SendEmailAsync(sUserName, sPassword, iBOID, sCustID, sTo, sCC, sBCC, sSubject, sBody, bIsHtml, sFileName, FileBytes, sEmailCfgToken, null);
        }
        
        /// <remarks/>
        public void SendEmailAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sTo, string sCC, string sBCC, string sSubject, string sBody, bool bIsHtml, string sFileName, byte[] FileBytes, string sEmailCfgToken, object userState) {
            if ((this.SendEmailOperationCompleted == null)) {
                this.SendEmailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendEmailOperationCompleted);
            }
            this.InvokeAsync("SendEmail", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sTo,
                        sCC,
                        sBCC,
                        sSubject,
                        sBody,
                        bIsHtml,
                        sFileName,
                        FileBytes,
                        sEmailCfgToken}, this.SendEmailOperationCompleted, userState);
        }
        
        private void OnSendEmailOperationCompleted(object arg) {
            if ((this.SendEmailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendEmailCompleted(this, new SendEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/PostMaster/UpdateEmailConfiguration", RequestNamespace="http://clearstar.net/Gateway/PostMaster", ResponseNamespace="http://clearstar.net/Gateway/PostMaster", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode UpdateEmailConfiguration(string sUserName, string sPassword, int iBOID, string sCustID, string sSMTPServer, string sSMTPPort, bool bUseSSL, string sEmailUserName, string sEmailUserPassword, string sEmailFromAddress, string sEmailCfgToken) {
            object[] results = this.Invoke("UpdateEmailConfiguration", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sSMTPServer,
                        sSMTPPort,
                        bUseSSL,
                        sEmailUserName,
                        sEmailUserPassword,
                        sEmailFromAddress,
                        sEmailCfgToken});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateEmailConfigurationAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sSMTPServer, string sSMTPPort, bool bUseSSL, string sEmailUserName, string sEmailUserPassword, string sEmailFromAddress, string sEmailCfgToken) {
            this.UpdateEmailConfigurationAsync(sUserName, sPassword, iBOID, sCustID, sSMTPServer, sSMTPPort, bUseSSL, sEmailUserName, sEmailUserPassword, sEmailFromAddress, sEmailCfgToken, null);
        }
        
        /// <remarks/>
        public void UpdateEmailConfigurationAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sSMTPServer, string sSMTPPort, bool bUseSSL, string sEmailUserName, string sEmailUserPassword, string sEmailFromAddress, string sEmailCfgToken, object userState) {
            if ((this.UpdateEmailConfigurationOperationCompleted == null)) {
                this.UpdateEmailConfigurationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateEmailConfigurationOperationCompleted);
            }
            this.InvokeAsync("UpdateEmailConfiguration", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sSMTPServer,
                        sSMTPPort,
                        bUseSSL,
                        sEmailUserName,
                        sEmailUserPassword,
                        sEmailFromAddress,
                        sEmailCfgToken}, this.UpdateEmailConfigurationOperationCompleted, userState);
        }
        
        private void OnUpdateEmailConfigurationOperationCompleted(object arg) {
            if ((this.UpdateEmailConfigurationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateEmailConfigurationCompleted(this, new UpdateEmailConfigurationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetEmailConfigurationsCompletedEventHandler(object sender, GetEmailConfigurationsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEmailConfigurationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEmailConfigurationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void RegisterEmailConfigurationCompletedEventHandler(object sender, RegisterEmailConfigurationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RegisterEmailConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RegisterEmailConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void SendEmailCompletedEventHandler(object sender, SendEmailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendEmailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendEmailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UpdateEmailConfigurationCompletedEventHandler(object sender, UpdateEmailConfigurationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateEmailConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateEmailConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591