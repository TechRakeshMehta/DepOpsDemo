//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18444.
// 
#pragma warning disable 1591

namespace ExternalVendors.ClearstarGatewayLookup {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="LookUpSoap", Namespace="http://clearstar.net/Gateway/LookUp")]
    public partial class LookUp : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetStatesForCountryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStatesForCountry2OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLocationsForCountryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLocationsForStateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLocationsForCountyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLocationsForCityOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLocationsForZipCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetISOCountryListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLocationsForCountryByServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLocationsForCountryByService2OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLocationsForStateByServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLocationsForStateByService2OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLocationsForCityByServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLocationsForCityByService2OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLocationsForCountyByServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLocationsForCountyByService2OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLocationsForZipCodeByServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLocationsForZipCodeByService2OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStatesForCountryByServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStatesForCountryByService2OperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public LookUp() {
            this.Url = global::ExternalVendors.Properties.Settings.Default.ExternalVendors_ClearstarGatewayLookup_LookUp;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetStatesForCountryCompletedEventHandler GetStatesForCountryCompleted;
        
        /// <remarks/>
        public event GetStatesForCountry2CompletedEventHandler GetStatesForCountry2Completed;
        
        /// <remarks/>
        public event GetLocationsForCountryCompletedEventHandler GetLocationsForCountryCompleted;
        
        /// <remarks/>
        public event GetLocationsForStateCompletedEventHandler GetLocationsForStateCompleted;
        
        /// <remarks/>
        public event GetLocationsForCountyCompletedEventHandler GetLocationsForCountyCompleted;
        
        /// <remarks/>
        public event GetLocationsForCityCompletedEventHandler GetLocationsForCityCompleted;
        
        /// <remarks/>
        public event GetLocationsForZipCodeCompletedEventHandler GetLocationsForZipCodeCompleted;
        
        /// <remarks/>
        public event GetISOCountryListCompletedEventHandler GetISOCountryListCompleted;
        
        /// <remarks/>
        public event GetLocationsForCountryByServiceCompletedEventHandler GetLocationsForCountryByServiceCompleted;
        
        /// <remarks/>
        public event GetLocationsForCountryByService2CompletedEventHandler GetLocationsForCountryByService2Completed;
        
        /// <remarks/>
        public event GetLocationsForStateByServiceCompletedEventHandler GetLocationsForStateByServiceCompleted;
        
        /// <remarks/>
        public event GetLocationsForStateByService2CompletedEventHandler GetLocationsForStateByService2Completed;
        
        /// <remarks/>
        public event GetLocationsForCityByServiceCompletedEventHandler GetLocationsForCityByServiceCompleted;
        
        /// <remarks/>
        public event GetLocationsForCityByService2CompletedEventHandler GetLocationsForCityByService2Completed;
        
        /// <remarks/>
        public event GetLocationsForCountyByServiceCompletedEventHandler GetLocationsForCountyByServiceCompleted;
        
        /// <remarks/>
        public event GetLocationsForCountyByService2CompletedEventHandler GetLocationsForCountyByService2Completed;
        
        /// <remarks/>
        public event GetLocationsForZipCodeByServiceCompletedEventHandler GetLocationsForZipCodeByServiceCompleted;
        
        /// <remarks/>
        public event GetLocationsForZipCodeByService2CompletedEventHandler GetLocationsForZipCodeByService2Completed;
        
        /// <remarks/>
        public event GetStatesForCountryByServiceCompletedEventHandler GetStatesForCountryByServiceCompleted;
        
        /// <remarks/>
        public event GetStatesForCountryByService2CompletedEventHandler GetStatesForCountryByService2Completed;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/LookUp/GetStatesForCountry", RequestNamespace="http://clearstar.net/Gateway/LookUp", ResponseNamespace="http://clearstar.net/Gateway/LookUp", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetStatesForCountry(string sUserName, string sPassword, int iBOID, string sCountry) {
            object[] results = this.Invoke("GetStatesForCountry", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCountry});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetStatesForCountryAsync(string sUserName, string sPassword, int iBOID, string sCountry) {
            this.GetStatesForCountryAsync(sUserName, sPassword, iBOID, sCountry, null);
        }
        
        /// <remarks/>
        public void GetStatesForCountryAsync(string sUserName, string sPassword, int iBOID, string sCountry, object userState) {
            if ((this.GetStatesForCountryOperationCompleted == null)) {
                this.GetStatesForCountryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStatesForCountryOperationCompleted);
            }
            this.InvokeAsync("GetStatesForCountry", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCountry}, this.GetStatesForCountryOperationCompleted, userState);
        }
        
        private void OnGetStatesForCountryOperationCompleted(object arg) {
            if ((this.GetStatesForCountryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStatesForCountryCompleted(this, new GetStatesForCountryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/LookUp/GetStatesForCountry2", RequestNamespace="http://clearstar.net/Gateway/LookUp", ResponseNamespace="http://clearstar.net/Gateway/LookUp", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetStatesForCountry2(string sUserName, string sPassword, int iBOID, string sCountry) {
            object[] results = this.Invoke("GetStatesForCountry2", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCountry});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetStatesForCountry2Async(string sUserName, string sPassword, int iBOID, string sCountry) {
            this.GetStatesForCountry2Async(sUserName, sPassword, iBOID, sCountry, null);
        }
        
        /// <remarks/>
        public void GetStatesForCountry2Async(string sUserName, string sPassword, int iBOID, string sCountry, object userState) {
            if ((this.GetStatesForCountry2OperationCompleted == null)) {
                this.GetStatesForCountry2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStatesForCountry2OperationCompleted);
            }
            this.InvokeAsync("GetStatesForCountry2", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCountry}, this.GetStatesForCountry2OperationCompleted, userState);
        }
        
        private void OnGetStatesForCountry2OperationCompleted(object arg) {
            if ((this.GetStatesForCountry2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStatesForCountry2Completed(this, new GetStatesForCountry2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/LookUp/GetLocationsForCountry", RequestNamespace="http://clearstar.net/Gateway/LookUp", ResponseNamespace="http://clearstar.net/Gateway/LookUp", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetLocationsForCountry(string sUserName, string sPassword, int iBOID, string sCountry) {
            object[] results = this.Invoke("GetLocationsForCountry", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCountry});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetLocationsForCountryAsync(string sUserName, string sPassword, int iBOID, string sCountry) {
            this.GetLocationsForCountryAsync(sUserName, sPassword, iBOID, sCountry, null);
        }
        
        /// <remarks/>
        public void GetLocationsForCountryAsync(string sUserName, string sPassword, int iBOID, string sCountry, object userState) {
            if ((this.GetLocationsForCountryOperationCompleted == null)) {
                this.GetLocationsForCountryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLocationsForCountryOperationCompleted);
            }
            this.InvokeAsync("GetLocationsForCountry", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCountry}, this.GetLocationsForCountryOperationCompleted, userState);
        }
        
        private void OnGetLocationsForCountryOperationCompleted(object arg) {
            if ((this.GetLocationsForCountryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLocationsForCountryCompleted(this, new GetLocationsForCountryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/LookUp/GetLocationsForState", RequestNamespace="http://clearstar.net/Gateway/LookUp", ResponseNamespace="http://clearstar.net/Gateway/LookUp", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetLocationsForState(string sUserName, string sPassword, int iBOID, string sCountry, string sState) {
            object[] results = this.Invoke("GetLocationsForState", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCountry,
                        sState});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetLocationsForStateAsync(string sUserName, string sPassword, int iBOID, string sCountry, string sState) {
            this.GetLocationsForStateAsync(sUserName, sPassword, iBOID, sCountry, sState, null);
        }
        
        /// <remarks/>
        public void GetLocationsForStateAsync(string sUserName, string sPassword, int iBOID, string sCountry, string sState, object userState) {
            if ((this.GetLocationsForStateOperationCompleted == null)) {
                this.GetLocationsForStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLocationsForStateOperationCompleted);
            }
            this.InvokeAsync("GetLocationsForState", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCountry,
                        sState}, this.GetLocationsForStateOperationCompleted, userState);
        }
        
        private void OnGetLocationsForStateOperationCompleted(object arg) {
            if ((this.GetLocationsForStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLocationsForStateCompleted(this, new GetLocationsForStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/LookUp/GetLocationsForCounty", RequestNamespace="http://clearstar.net/Gateway/LookUp", ResponseNamespace="http://clearstar.net/Gateway/LookUp", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetLocationsForCounty(string sUserName, string sPassword, int iBOID, string sCountry, string sState, string sCounty) {
            object[] results = this.Invoke("GetLocationsForCounty", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCountry,
                        sState,
                        sCounty});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetLocationsForCountyAsync(string sUserName, string sPassword, int iBOID, string sCountry, string sState, string sCounty) {
            this.GetLocationsForCountyAsync(sUserName, sPassword, iBOID, sCountry, sState, sCounty, null);
        }
        
        /// <remarks/>
        public void GetLocationsForCountyAsync(string sUserName, string sPassword, int iBOID, string sCountry, string sState, string sCounty, object userState) {
            if ((this.GetLocationsForCountyOperationCompleted == null)) {
                this.GetLocationsForCountyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLocationsForCountyOperationCompleted);
            }
            this.InvokeAsync("GetLocationsForCounty", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCountry,
                        sState,
                        sCounty}, this.GetLocationsForCountyOperationCompleted, userState);
        }
        
        private void OnGetLocationsForCountyOperationCompleted(object arg) {
            if ((this.GetLocationsForCountyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLocationsForCountyCompleted(this, new GetLocationsForCountyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/LookUp/GetLocationsForCity", RequestNamespace="http://clearstar.net/Gateway/LookUp", ResponseNamespace="http://clearstar.net/Gateway/LookUp", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetLocationsForCity(string sUserName, string sPassword, int iBOID, string sCountry, string sState, string sCity) {
            object[] results = this.Invoke("GetLocationsForCity", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCountry,
                        sState,
                        sCity});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetLocationsForCityAsync(string sUserName, string sPassword, int iBOID, string sCountry, string sState, string sCity) {
            this.GetLocationsForCityAsync(sUserName, sPassword, iBOID, sCountry, sState, sCity, null);
        }
        
        /// <remarks/>
        public void GetLocationsForCityAsync(string sUserName, string sPassword, int iBOID, string sCountry, string sState, string sCity, object userState) {
            if ((this.GetLocationsForCityOperationCompleted == null)) {
                this.GetLocationsForCityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLocationsForCityOperationCompleted);
            }
            this.InvokeAsync("GetLocationsForCity", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCountry,
                        sState,
                        sCity}, this.GetLocationsForCityOperationCompleted, userState);
        }
        
        private void OnGetLocationsForCityOperationCompleted(object arg) {
            if ((this.GetLocationsForCityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLocationsForCityCompleted(this, new GetLocationsForCityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/LookUp/GetLocationsForZipCode", RequestNamespace="http://clearstar.net/Gateway/LookUp", ResponseNamespace="http://clearstar.net/Gateway/LookUp", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetLocationsForZipCode(string sUserName, string sPassword, int iBOID, string sCountry, string sZipCode) {
            object[] results = this.Invoke("GetLocationsForZipCode", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCountry,
                        sZipCode});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetLocationsForZipCodeAsync(string sUserName, string sPassword, int iBOID, string sCountry, string sZipCode) {
            this.GetLocationsForZipCodeAsync(sUserName, sPassword, iBOID, sCountry, sZipCode, null);
        }
        
        /// <remarks/>
        public void GetLocationsForZipCodeAsync(string sUserName, string sPassword, int iBOID, string sCountry, string sZipCode, object userState) {
            if ((this.GetLocationsForZipCodeOperationCompleted == null)) {
                this.GetLocationsForZipCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLocationsForZipCodeOperationCompleted);
            }
            this.InvokeAsync("GetLocationsForZipCode", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCountry,
                        sZipCode}, this.GetLocationsForZipCodeOperationCompleted, userState);
        }
        
        private void OnGetLocationsForZipCodeOperationCompleted(object arg) {
            if ((this.GetLocationsForZipCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLocationsForZipCodeCompleted(this, new GetLocationsForZipCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/LookUp/GetISOCountryList", RequestNamespace="http://clearstar.net/Gateway/LookUp", ResponseNamespace="http://clearstar.net/Gateway/LookUp", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetISOCountryList(string sUserName, string sPassword, int iBOID) {
            object[] results = this.Invoke("GetISOCountryList", new object[] {
                        sUserName,
                        sPassword,
                        iBOID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetISOCountryListAsync(string sUserName, string sPassword, int iBOID) {
            this.GetISOCountryListAsync(sUserName, sPassword, iBOID, null);
        }
        
        /// <remarks/>
        public void GetISOCountryListAsync(string sUserName, string sPassword, int iBOID, object userState) {
            if ((this.GetISOCountryListOperationCompleted == null)) {
                this.GetISOCountryListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetISOCountryListOperationCompleted);
            }
            this.InvokeAsync("GetISOCountryList", new object[] {
                        sUserName,
                        sPassword,
                        iBOID}, this.GetISOCountryListOperationCompleted, userState);
        }
        
        private void OnGetISOCountryListOperationCompleted(object arg) {
            if ((this.GetISOCountryListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetISOCountryListCompleted(this, new GetISOCountryListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/LookUp/GetLocationsForCountryByService", RequestNamespace="http://clearstar.net/Gateway/LookUp", ResponseNamespace="http://clearstar.net/Gateway/LookUp", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetLocationsForCountryByService(string sUserName, string sPassword, int iBOID, string sCountry, string sServiceNo) {
            object[] results = this.Invoke("GetLocationsForCountryByService", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCountry,
                        sServiceNo});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetLocationsForCountryByServiceAsync(string sUserName, string sPassword, int iBOID, string sCountry, string sServiceNo) {
            this.GetLocationsForCountryByServiceAsync(sUserName, sPassword, iBOID, sCountry, sServiceNo, null);
        }
        
        /// <remarks/>
        public void GetLocationsForCountryByServiceAsync(string sUserName, string sPassword, int iBOID, string sCountry, string sServiceNo, object userState) {
            if ((this.GetLocationsForCountryByServiceOperationCompleted == null)) {
                this.GetLocationsForCountryByServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLocationsForCountryByServiceOperationCompleted);
            }
            this.InvokeAsync("GetLocationsForCountryByService", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCountry,
                        sServiceNo}, this.GetLocationsForCountryByServiceOperationCompleted, userState);
        }
        
        private void OnGetLocationsForCountryByServiceOperationCompleted(object arg) {
            if ((this.GetLocationsForCountryByServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLocationsForCountryByServiceCompleted(this, new GetLocationsForCountryByServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/LookUp/GetLocationsForCountryByService2", RequestNamespace="http://clearstar.net/Gateway/LookUp", ResponseNamespace="http://clearstar.net/Gateway/LookUp", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetLocationsForCountryByService2(string sUserName, string sPassword, int iBOID, string sCustID, string sCountry, string sServiceNo) {
            object[] results = this.Invoke("GetLocationsForCountryByService2", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sCountry,
                        sServiceNo});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetLocationsForCountryByService2Async(string sUserName, string sPassword, int iBOID, string sCustID, string sCountry, string sServiceNo) {
            this.GetLocationsForCountryByService2Async(sUserName, sPassword, iBOID, sCustID, sCountry, sServiceNo, null);
        }
        
        /// <remarks/>
        public void GetLocationsForCountryByService2Async(string sUserName, string sPassword, int iBOID, string sCustID, string sCountry, string sServiceNo, object userState) {
            if ((this.GetLocationsForCountryByService2OperationCompleted == null)) {
                this.GetLocationsForCountryByService2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLocationsForCountryByService2OperationCompleted);
            }
            this.InvokeAsync("GetLocationsForCountryByService2", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sCountry,
                        sServiceNo}, this.GetLocationsForCountryByService2OperationCompleted, userState);
        }
        
        private void OnGetLocationsForCountryByService2OperationCompleted(object arg) {
            if ((this.GetLocationsForCountryByService2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLocationsForCountryByService2Completed(this, new GetLocationsForCountryByService2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/LookUp/GetLocationsForStateByService", RequestNamespace="http://clearstar.net/Gateway/LookUp", ResponseNamespace="http://clearstar.net/Gateway/LookUp", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetLocationsForStateByService(string sUserName, string sPassword, int iBOID, string sCountry, string sState, string sServiceNo) {
            object[] results = this.Invoke("GetLocationsForStateByService", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCountry,
                        sState,
                        sServiceNo});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetLocationsForStateByServiceAsync(string sUserName, string sPassword, int iBOID, string sCountry, string sState, string sServiceNo) {
            this.GetLocationsForStateByServiceAsync(sUserName, sPassword, iBOID, sCountry, sState, sServiceNo, null);
        }
        
        /// <remarks/>
        public void GetLocationsForStateByServiceAsync(string sUserName, string sPassword, int iBOID, string sCountry, string sState, string sServiceNo, object userState) {
            if ((this.GetLocationsForStateByServiceOperationCompleted == null)) {
                this.GetLocationsForStateByServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLocationsForStateByServiceOperationCompleted);
            }
            this.InvokeAsync("GetLocationsForStateByService", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCountry,
                        sState,
                        sServiceNo}, this.GetLocationsForStateByServiceOperationCompleted, userState);
        }
        
        private void OnGetLocationsForStateByServiceOperationCompleted(object arg) {
            if ((this.GetLocationsForStateByServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLocationsForStateByServiceCompleted(this, new GetLocationsForStateByServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/LookUp/GetLocationsForStateByService2", RequestNamespace="http://clearstar.net/Gateway/LookUp", ResponseNamespace="http://clearstar.net/Gateway/LookUp", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetLocationsForStateByService2(string sUserName, string sPassword, int iBOID, string sCustID, string sCountry, string sState, string sServiceNo) {
            object[] results = this.Invoke("GetLocationsForStateByService2", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sCountry,
                        sState,
                        sServiceNo});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetLocationsForStateByService2Async(string sUserName, string sPassword, int iBOID, string sCustID, string sCountry, string sState, string sServiceNo) {
            this.GetLocationsForStateByService2Async(sUserName, sPassword, iBOID, sCustID, sCountry, sState, sServiceNo, null);
        }
        
        /// <remarks/>
        public void GetLocationsForStateByService2Async(string sUserName, string sPassword, int iBOID, string sCustID, string sCountry, string sState, string sServiceNo, object userState) {
            if ((this.GetLocationsForStateByService2OperationCompleted == null)) {
                this.GetLocationsForStateByService2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLocationsForStateByService2OperationCompleted);
            }
            this.InvokeAsync("GetLocationsForStateByService2", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sCountry,
                        sState,
                        sServiceNo}, this.GetLocationsForStateByService2OperationCompleted, userState);
        }
        
        private void OnGetLocationsForStateByService2OperationCompleted(object arg) {
            if ((this.GetLocationsForStateByService2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLocationsForStateByService2Completed(this, new GetLocationsForStateByService2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/LookUp/GetLocationsForCityByService", RequestNamespace="http://clearstar.net/Gateway/LookUp", ResponseNamespace="http://clearstar.net/Gateway/LookUp", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetLocationsForCityByService(string sUserName, string sPassword, int iBOID, string sCountry, string sState, string sCity, string sServiceNo) {
            object[] results = this.Invoke("GetLocationsForCityByService", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCountry,
                        sState,
                        sCity,
                        sServiceNo});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetLocationsForCityByServiceAsync(string sUserName, string sPassword, int iBOID, string sCountry, string sState, string sCity, string sServiceNo) {
            this.GetLocationsForCityByServiceAsync(sUserName, sPassword, iBOID, sCountry, sState, sCity, sServiceNo, null);
        }
        
        /// <remarks/>
        public void GetLocationsForCityByServiceAsync(string sUserName, string sPassword, int iBOID, string sCountry, string sState, string sCity, string sServiceNo, object userState) {
            if ((this.GetLocationsForCityByServiceOperationCompleted == null)) {
                this.GetLocationsForCityByServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLocationsForCityByServiceOperationCompleted);
            }
            this.InvokeAsync("GetLocationsForCityByService", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCountry,
                        sState,
                        sCity,
                        sServiceNo}, this.GetLocationsForCityByServiceOperationCompleted, userState);
        }
        
        private void OnGetLocationsForCityByServiceOperationCompleted(object arg) {
            if ((this.GetLocationsForCityByServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLocationsForCityByServiceCompleted(this, new GetLocationsForCityByServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/LookUp/GetLocationsForCityByService2", RequestNamespace="http://clearstar.net/Gateway/LookUp", ResponseNamespace="http://clearstar.net/Gateway/LookUp", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetLocationsForCityByService2(string sUserName, string sPassword, int iBOID, string sCustID, string sCountry, string sState, string sCity, string sServiceNo) {
            object[] results = this.Invoke("GetLocationsForCityByService2", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sCountry,
                        sState,
                        sCity,
                        sServiceNo});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetLocationsForCityByService2Async(string sUserName, string sPassword, int iBOID, string sCustID, string sCountry, string sState, string sCity, string sServiceNo) {
            this.GetLocationsForCityByService2Async(sUserName, sPassword, iBOID, sCustID, sCountry, sState, sCity, sServiceNo, null);
        }
        
        /// <remarks/>
        public void GetLocationsForCityByService2Async(string sUserName, string sPassword, int iBOID, string sCustID, string sCountry, string sState, string sCity, string sServiceNo, object userState) {
            if ((this.GetLocationsForCityByService2OperationCompleted == null)) {
                this.GetLocationsForCityByService2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLocationsForCityByService2OperationCompleted);
            }
            this.InvokeAsync("GetLocationsForCityByService2", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sCountry,
                        sState,
                        sCity,
                        sServiceNo}, this.GetLocationsForCityByService2OperationCompleted, userState);
        }
        
        private void OnGetLocationsForCityByService2OperationCompleted(object arg) {
            if ((this.GetLocationsForCityByService2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLocationsForCityByService2Completed(this, new GetLocationsForCityByService2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/LookUp/GetLocationsForCountyByService", RequestNamespace="http://clearstar.net/Gateway/LookUp", ResponseNamespace="http://clearstar.net/Gateway/LookUp", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetLocationsForCountyByService(string sUserName, string sPassword, int iBOID, string sCountry, string sState, string sCounty, string sServiceNo) {
            object[] results = this.Invoke("GetLocationsForCountyByService", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCountry,
                        sState,
                        sCounty,
                        sServiceNo});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetLocationsForCountyByServiceAsync(string sUserName, string sPassword, int iBOID, string sCountry, string sState, string sCounty, string sServiceNo) {
            this.GetLocationsForCountyByServiceAsync(sUserName, sPassword, iBOID, sCountry, sState, sCounty, sServiceNo, null);
        }
        
        /// <remarks/>
        public void GetLocationsForCountyByServiceAsync(string sUserName, string sPassword, int iBOID, string sCountry, string sState, string sCounty, string sServiceNo, object userState) {
            if ((this.GetLocationsForCountyByServiceOperationCompleted == null)) {
                this.GetLocationsForCountyByServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLocationsForCountyByServiceOperationCompleted);
            }
            this.InvokeAsync("GetLocationsForCountyByService", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCountry,
                        sState,
                        sCounty,
                        sServiceNo}, this.GetLocationsForCountyByServiceOperationCompleted, userState);
        }
        
        private void OnGetLocationsForCountyByServiceOperationCompleted(object arg) {
            if ((this.GetLocationsForCountyByServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLocationsForCountyByServiceCompleted(this, new GetLocationsForCountyByServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/LookUp/GetLocationsForCountyByService2", RequestNamespace="http://clearstar.net/Gateway/LookUp", ResponseNamespace="http://clearstar.net/Gateway/LookUp", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetLocationsForCountyByService2(string sUserName, string sPassword, int iBOID, string sCustID, string sCountry, string sState, string sCounty, string sServiceNo) {
            object[] results = this.Invoke("GetLocationsForCountyByService2", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sCountry,
                        sState,
                        sCounty,
                        sServiceNo});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetLocationsForCountyByService2Async(string sUserName, string sPassword, int iBOID, string sCustID, string sCountry, string sState, string sCounty, string sServiceNo) {
            this.GetLocationsForCountyByService2Async(sUserName, sPassword, iBOID, sCustID, sCountry, sState, sCounty, sServiceNo, null);
        }
        
        /// <remarks/>
        public void GetLocationsForCountyByService2Async(string sUserName, string sPassword, int iBOID, string sCustID, string sCountry, string sState, string sCounty, string sServiceNo, object userState) {
            if ((this.GetLocationsForCountyByService2OperationCompleted == null)) {
                this.GetLocationsForCountyByService2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLocationsForCountyByService2OperationCompleted);
            }
            this.InvokeAsync("GetLocationsForCountyByService2", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sCountry,
                        sState,
                        sCounty,
                        sServiceNo}, this.GetLocationsForCountyByService2OperationCompleted, userState);
        }
        
        private void OnGetLocationsForCountyByService2OperationCompleted(object arg) {
            if ((this.GetLocationsForCountyByService2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLocationsForCountyByService2Completed(this, new GetLocationsForCountyByService2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/LookUp/GetLocationsForZipCodeByService", RequestNamespace="http://clearstar.net/Gateway/LookUp", ResponseNamespace="http://clearstar.net/Gateway/LookUp", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetLocationsForZipCodeByService(string sUserName, string sPassword, int iBOID, string sCountry, string sZipCode, string sServiceNo) {
            object[] results = this.Invoke("GetLocationsForZipCodeByService", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCountry,
                        sZipCode,
                        sServiceNo});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetLocationsForZipCodeByServiceAsync(string sUserName, string sPassword, int iBOID, string sCountry, string sZipCode, string sServiceNo) {
            this.GetLocationsForZipCodeByServiceAsync(sUserName, sPassword, iBOID, sCountry, sZipCode, sServiceNo, null);
        }
        
        /// <remarks/>
        public void GetLocationsForZipCodeByServiceAsync(string sUserName, string sPassword, int iBOID, string sCountry, string sZipCode, string sServiceNo, object userState) {
            if ((this.GetLocationsForZipCodeByServiceOperationCompleted == null)) {
                this.GetLocationsForZipCodeByServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLocationsForZipCodeByServiceOperationCompleted);
            }
            this.InvokeAsync("GetLocationsForZipCodeByService", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCountry,
                        sZipCode,
                        sServiceNo}, this.GetLocationsForZipCodeByServiceOperationCompleted, userState);
        }
        
        private void OnGetLocationsForZipCodeByServiceOperationCompleted(object arg) {
            if ((this.GetLocationsForZipCodeByServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLocationsForZipCodeByServiceCompleted(this, new GetLocationsForZipCodeByServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/LookUp/GetLocationsForZipCodeByService2", RequestNamespace="http://clearstar.net/Gateway/LookUp", ResponseNamespace="http://clearstar.net/Gateway/LookUp", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetLocationsForZipCodeByService2(string sUserName, string sPassword, int iBOID, string sCustID, string sCountry, string sZipCode, string sServiceNo) {
            object[] results = this.Invoke("GetLocationsForZipCodeByService2", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sCountry,
                        sZipCode,
                        sServiceNo});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetLocationsForZipCodeByService2Async(string sUserName, string sPassword, int iBOID, string sCustID, string sCountry, string sZipCode, string sServiceNo) {
            this.GetLocationsForZipCodeByService2Async(sUserName, sPassword, iBOID, sCustID, sCountry, sZipCode, sServiceNo, null);
        }
        
        /// <remarks/>
        public void GetLocationsForZipCodeByService2Async(string sUserName, string sPassword, int iBOID, string sCustID, string sCountry, string sZipCode, string sServiceNo, object userState) {
            if ((this.GetLocationsForZipCodeByService2OperationCompleted == null)) {
                this.GetLocationsForZipCodeByService2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLocationsForZipCodeByService2OperationCompleted);
            }
            this.InvokeAsync("GetLocationsForZipCodeByService2", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sCountry,
                        sZipCode,
                        sServiceNo}, this.GetLocationsForZipCodeByService2OperationCompleted, userState);
        }
        
        private void OnGetLocationsForZipCodeByService2OperationCompleted(object arg) {
            if ((this.GetLocationsForZipCodeByService2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLocationsForZipCodeByService2Completed(this, new GetLocationsForZipCodeByService2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/LookUp/GetStatesForCountryByService", RequestNamespace="http://clearstar.net/Gateway/LookUp", ResponseNamespace="http://clearstar.net/Gateway/LookUp", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetStatesForCountryByService(string sUserName, string sPassword, int iBOID, string sCountry, string sServiceNo) {
            object[] results = this.Invoke("GetStatesForCountryByService", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCountry,
                        sServiceNo});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetStatesForCountryByServiceAsync(string sUserName, string sPassword, int iBOID, string sCountry, string sServiceNo) {
            this.GetStatesForCountryByServiceAsync(sUserName, sPassword, iBOID, sCountry, sServiceNo, null);
        }
        
        /// <remarks/>
        public void GetStatesForCountryByServiceAsync(string sUserName, string sPassword, int iBOID, string sCountry, string sServiceNo, object userState) {
            if ((this.GetStatesForCountryByServiceOperationCompleted == null)) {
                this.GetStatesForCountryByServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStatesForCountryByServiceOperationCompleted);
            }
            this.InvokeAsync("GetStatesForCountryByService", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCountry,
                        sServiceNo}, this.GetStatesForCountryByServiceOperationCompleted, userState);
        }
        
        private void OnGetStatesForCountryByServiceOperationCompleted(object arg) {
            if ((this.GetStatesForCountryByServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStatesForCountryByServiceCompleted(this, new GetStatesForCountryByServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/LookUp/GetStatesForCountryByService2", RequestNamespace="http://clearstar.net/Gateway/LookUp", ResponseNamespace="http://clearstar.net/Gateway/LookUp", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetStatesForCountryByService2(string sUserName, string sPassword, int iBOID, string sCustID, string sCountry, string sServiceNo) {
            object[] results = this.Invoke("GetStatesForCountryByService2", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sCountry,
                        sServiceNo});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetStatesForCountryByService2Async(string sUserName, string sPassword, int iBOID, string sCustID, string sCountry, string sServiceNo) {
            this.GetStatesForCountryByService2Async(sUserName, sPassword, iBOID, sCustID, sCountry, sServiceNo, null);
        }
        
        /// <remarks/>
        public void GetStatesForCountryByService2Async(string sUserName, string sPassword, int iBOID, string sCustID, string sCountry, string sServiceNo, object userState) {
            if ((this.GetStatesForCountryByService2OperationCompleted == null)) {
                this.GetStatesForCountryByService2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStatesForCountryByService2OperationCompleted);
            }
            this.InvokeAsync("GetStatesForCountryByService2", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sCountry,
                        sServiceNo}, this.GetStatesForCountryByService2OperationCompleted, userState);
        }
        
        private void OnGetStatesForCountryByService2OperationCompleted(object arg) {
            if ((this.GetStatesForCountryByService2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStatesForCountryByService2Completed(this, new GetStatesForCountryByService2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetStatesForCountryCompletedEventHandler(object sender, GetStatesForCountryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStatesForCountryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStatesForCountryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetStatesForCountry2CompletedEventHandler(object sender, GetStatesForCountry2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStatesForCountry2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStatesForCountry2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetLocationsForCountryCompletedEventHandler(object sender, GetLocationsForCountryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLocationsForCountryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLocationsForCountryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetLocationsForStateCompletedEventHandler(object sender, GetLocationsForStateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLocationsForStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLocationsForStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetLocationsForCountyCompletedEventHandler(object sender, GetLocationsForCountyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLocationsForCountyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLocationsForCountyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetLocationsForCityCompletedEventHandler(object sender, GetLocationsForCityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLocationsForCityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLocationsForCityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetLocationsForZipCodeCompletedEventHandler(object sender, GetLocationsForZipCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLocationsForZipCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLocationsForZipCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetISOCountryListCompletedEventHandler(object sender, GetISOCountryListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetISOCountryListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetISOCountryListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetLocationsForCountryByServiceCompletedEventHandler(object sender, GetLocationsForCountryByServiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLocationsForCountryByServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLocationsForCountryByServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetLocationsForCountryByService2CompletedEventHandler(object sender, GetLocationsForCountryByService2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLocationsForCountryByService2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLocationsForCountryByService2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetLocationsForStateByServiceCompletedEventHandler(object sender, GetLocationsForStateByServiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLocationsForStateByServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLocationsForStateByServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetLocationsForStateByService2CompletedEventHandler(object sender, GetLocationsForStateByService2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLocationsForStateByService2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLocationsForStateByService2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetLocationsForCityByServiceCompletedEventHandler(object sender, GetLocationsForCityByServiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLocationsForCityByServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLocationsForCityByServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetLocationsForCityByService2CompletedEventHandler(object sender, GetLocationsForCityByService2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLocationsForCityByService2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLocationsForCityByService2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetLocationsForCountyByServiceCompletedEventHandler(object sender, GetLocationsForCountyByServiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLocationsForCountyByServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLocationsForCountyByServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetLocationsForCountyByService2CompletedEventHandler(object sender, GetLocationsForCountyByService2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLocationsForCountyByService2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLocationsForCountyByService2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetLocationsForZipCodeByServiceCompletedEventHandler(object sender, GetLocationsForZipCodeByServiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLocationsForZipCodeByServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLocationsForZipCodeByServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetLocationsForZipCodeByService2CompletedEventHandler(object sender, GetLocationsForZipCodeByService2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLocationsForZipCodeByService2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLocationsForZipCodeByService2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetStatesForCountryByServiceCompletedEventHandler(object sender, GetStatesForCountryByServiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStatesForCountryByServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStatesForCountryByServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetStatesForCountryByService2CompletedEventHandler(object sender, GetStatesForCountryByService2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStatesForCountryByService2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStatesForCountryByService2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591