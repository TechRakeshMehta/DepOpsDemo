//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18444.
// 
#pragma warning disable 1591

namespace ExternalVendors.ClearstarGatewayProfile {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ProfileSoap", Namespace="http://clearstar.net/Gateway/Profile")]
    public partial class Profile : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback AddOrderToProfileOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddServiceToProfileOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelProfileOperationCompleted;
        
        private System.Threading.SendOrPostCallback CopyProfileOperationCompleted;
        
        private System.Threading.SendOrPostCallback ArchiveProfileOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnarchiveProfileOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateProfileOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateProfileForCountryOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteProfileDraftOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteProfileOrderOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteProfileServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback EditOrderInProfileOperationCompleted;
        
        private System.Threading.SendOrPostCallback EditProfileOperationCompleted;
        
        private System.Threading.SendOrPostCallback EditProfileForCountryOperationCompleted;
        
        private System.Threading.SendOrPostCallback EditProfileCommentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetBOInternalNoteOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBOInternalNotesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBOProfileSummaryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetListOfProfilesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetListOfCancelledProfilesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProfileNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProfilesPassFailDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProfileSubjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProfileStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProfileDetailOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStoredProfileDetailOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProfileReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProfileReportByReportEngineOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReOpenProfileOperationCompleted;
        
        private System.Threading.SendOrPostCallback TransmitProfileOperationCompleted;
        
        private System.Threading.SendOrPostCallback TransmitProfileWithCreditCardOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchProfilesOperationCompleted;
        
        private System.Threading.SendOrPostCallback TrackDisclaimerAcceptanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddAddressOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddAddressForCountryOperationCompleted;
        
        private System.Threading.SendOrPostCallback EditAddressOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteAddressOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAddressToEditOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddAliasOperationCompleted;
        
        private System.Threading.SendOrPostCallback EditAliasOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteAliasOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAliasToEditOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReleaseProfileServiceHoldOperationCompleted;
        
        private System.Threading.SendOrPostCallback ResendProfileNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnlockProfileOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnlockProfileForcedOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnlockProfileForAllUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateSSNOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateDLOperationCompleted;
        
        private System.Threading.SendOrPostCallback NotificationRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdatePassFailStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFieldDataTypesOperationCompleted;
        
        private System.Threading.SendOrPostCallback RegisterUserDefinedFieldOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateRegisteredUserDefinedFieldOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserDefinedFieldsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserDefinedFieldsWithValuesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserDefinedFieldOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveUserDefinedFieldValueOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Profile() {
            this.Url = global::ExternalVendors.Properties.Settings.Default.ExternalVendors_ClearstarGateway_Profile;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event AddOrderToProfileCompletedEventHandler AddOrderToProfileCompleted;
        
        /// <remarks/>
        public event AddServiceToProfileCompletedEventHandler AddServiceToProfileCompleted;
        
        /// <remarks/>
        public event CancelProfileCompletedEventHandler CancelProfileCompleted;
        
        /// <remarks/>
        public event CopyProfileCompletedEventHandler CopyProfileCompleted;
        
        /// <remarks/>
        public event ArchiveProfileCompletedEventHandler ArchiveProfileCompleted;
        
        /// <remarks/>
        public event UnarchiveProfileCompletedEventHandler UnarchiveProfileCompleted;
        
        /// <remarks/>
        public event CreateProfileCompletedEventHandler CreateProfileCompleted;
        
        /// <remarks/>
        public event CreateProfileForCountryCompletedEventHandler CreateProfileForCountryCompleted;
        
        /// <remarks/>
        public event DeleteProfileDraftCompletedEventHandler DeleteProfileDraftCompleted;
        
        /// <remarks/>
        public event DeleteProfileOrderCompletedEventHandler DeleteProfileOrderCompleted;
        
        /// <remarks/>
        public event DeleteProfileServiceCompletedEventHandler DeleteProfileServiceCompleted;
        
        /// <remarks/>
        public event EditOrderInProfileCompletedEventHandler EditOrderInProfileCompleted;
        
        /// <remarks/>
        public event EditProfileCompletedEventHandler EditProfileCompleted;
        
        /// <remarks/>
        public event EditProfileForCountryCompletedEventHandler EditProfileForCountryCompleted;
        
        /// <remarks/>
        public event EditProfileCommentsCompletedEventHandler EditProfileCommentsCompleted;
        
        /// <remarks/>
        public event SetBOInternalNoteCompletedEventHandler SetBOInternalNoteCompleted;
        
        /// <remarks/>
        public event GetBOInternalNotesCompletedEventHandler GetBOInternalNotesCompleted;
        
        /// <remarks/>
        public event GetBOProfileSummaryCompletedEventHandler GetBOProfileSummaryCompleted;
        
        /// <remarks/>
        public event GetListOfProfilesCompletedEventHandler GetListOfProfilesCompleted;
        
        /// <remarks/>
        public event GetListOfCancelledProfilesCompletedEventHandler GetListOfCancelledProfilesCompleted;
        
        /// <remarks/>
        public event GetProfileNotificationCompletedEventHandler GetProfileNotificationCompleted;
        
        /// <remarks/>
        public event GetProfilesPassFailDataCompletedEventHandler GetProfilesPassFailDataCompleted;
        
        /// <remarks/>
        public event GetProfileSubjectCompletedEventHandler GetProfileSubjectCompleted;
        
        /// <remarks/>
        public event GetProfileStatusCompletedEventHandler GetProfileStatusCompleted;
        
        /// <remarks/>
        public event GetProfileDetailCompletedEventHandler GetProfileDetailCompleted;
        
        /// <remarks/>
        public event GetStoredProfileDetailCompletedEventHandler GetStoredProfileDetailCompleted;
        
        /// <remarks/>
        public event GetProfileReportCompletedEventHandler GetProfileReportCompleted;
        
        /// <remarks/>
        public event GetProfileReportByReportEngineCompletedEventHandler GetProfileReportByReportEngineCompleted;
        
        /// <remarks/>
        public event ReOpenProfileCompletedEventHandler ReOpenProfileCompleted;
        
        /// <remarks/>
        public event TransmitProfileCompletedEventHandler TransmitProfileCompleted;
        
        /// <remarks/>
        public event TransmitProfileWithCreditCardCompletedEventHandler TransmitProfileWithCreditCardCompleted;
        
        /// <remarks/>
        public event SearchProfilesCompletedEventHandler SearchProfilesCompleted;
        
        /// <remarks/>
        public event TrackDisclaimerAcceptanceCompletedEventHandler TrackDisclaimerAcceptanceCompleted;
        
        /// <remarks/>
        public event AddAddressCompletedEventHandler AddAddressCompleted;
        
        /// <remarks/>
        public event AddAddressForCountryCompletedEventHandler AddAddressForCountryCompleted;
        
        /// <remarks/>
        public event EditAddressCompletedEventHandler EditAddressCompleted;
        
        /// <remarks/>
        public event DeleteAddressCompletedEventHandler DeleteAddressCompleted;
        
        /// <remarks/>
        public event GetAddressToEditCompletedEventHandler GetAddressToEditCompleted;
        
        /// <remarks/>
        public event AddAliasCompletedEventHandler AddAliasCompleted;
        
        /// <remarks/>
        public event EditAliasCompletedEventHandler EditAliasCompleted;
        
        /// <remarks/>
        public event DeleteAliasCompletedEventHandler DeleteAliasCompleted;
        
        /// <remarks/>
        public event GetAliasToEditCompletedEventHandler GetAliasToEditCompleted;
        
        /// <remarks/>
        public event ReleaseProfileServiceHoldCompletedEventHandler ReleaseProfileServiceHoldCompleted;
        
        /// <remarks/>
        public event ResendProfileNotificationCompletedEventHandler ResendProfileNotificationCompleted;
        
        /// <remarks/>
        public event UnlockProfileCompletedEventHandler UnlockProfileCompleted;
        
        /// <remarks/>
        public event UnlockProfileForcedCompletedEventHandler UnlockProfileForcedCompleted;
        
        /// <remarks/>
        public event UnlockProfileForAllUsersCompletedEventHandler UnlockProfileForAllUsersCompleted;
        
        /// <remarks/>
        public event ValidateSSNCompletedEventHandler ValidateSSNCompleted;
        
        /// <remarks/>
        public event ValidateDLCompletedEventHandler ValidateDLCompleted;
        
        /// <remarks/>
        public event NotificationRequestCompletedEventHandler NotificationRequestCompleted;
        
        /// <remarks/>
        public event UpdatePassFailStatusCompletedEventHandler UpdatePassFailStatusCompleted;
        
        /// <remarks/>
        public event GetFieldDataTypesCompletedEventHandler GetFieldDataTypesCompleted;
        
        /// <remarks/>
        public event RegisterUserDefinedFieldCompletedEventHandler RegisterUserDefinedFieldCompleted;
        
        /// <remarks/>
        public event UpdateRegisteredUserDefinedFieldCompletedEventHandler UpdateRegisteredUserDefinedFieldCompleted;
        
        /// <remarks/>
        public event GetUserDefinedFieldsCompletedEventHandler GetUserDefinedFieldsCompleted;
        
        /// <remarks/>
        public event GetUserDefinedFieldsWithValuesCompletedEventHandler GetUserDefinedFieldsWithValuesCompleted;
        
        /// <remarks/>
        public event GetUserDefinedFieldCompletedEventHandler GetUserDefinedFieldCompleted;
        
        /// <remarks/>
        public event SaveUserDefinedFieldValueCompletedEventHandler SaveUserDefinedFieldValueCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Profile/AddOrderToProfile", RequestNamespace="http://clearstar.net/Gateway/Profile", ResponseNamespace="http://clearstar.net/Gateway/Profile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode AddOrderToProfile(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, string sServiceNo, string sCountry, string sState, string sCounty, string sCity, string sZip, string sInstruct, string sStage, int iAliasID, string sOrderFieldsXML) {
            object[] results = this.Invoke("AddOrderToProfile", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo,
                        sServiceNo,
                        sCountry,
                        sState,
                        sCounty,
                        sCity,
                        sZip,
                        sInstruct,
                        sStage,
                        iAliasID,
                        sOrderFieldsXML});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void AddOrderToProfileAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, string sServiceNo, string sCountry, string sState, string sCounty, string sCity, string sZip, string sInstruct, string sStage, int iAliasID, string sOrderFieldsXML) {
            this.AddOrderToProfileAsync(sUserName, sPassword, iBOID, sCustID, sProfNo, sServiceNo, sCountry, sState, sCounty, sCity, sZip, sInstruct, sStage, iAliasID, sOrderFieldsXML, null);
        }
        
        /// <remarks/>
        public void AddOrderToProfileAsync(
                    string sUserName, 
                    string sPassword, 
                    int iBOID, 
                    string sCustID, 
                    string sProfNo, 
                    string sServiceNo, 
                    string sCountry, 
                    string sState, 
                    string sCounty, 
                    string sCity, 
                    string sZip, 
                    string sInstruct, 
                    string sStage, 
                    int iAliasID, 
                    string sOrderFieldsXML, 
                    object userState) {
            if ((this.AddOrderToProfileOperationCompleted == null)) {
                this.AddOrderToProfileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddOrderToProfileOperationCompleted);
            }
            this.InvokeAsync("AddOrderToProfile", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo,
                        sServiceNo,
                        sCountry,
                        sState,
                        sCounty,
                        sCity,
                        sZip,
                        sInstruct,
                        sStage,
                        iAliasID,
                        sOrderFieldsXML}, this.AddOrderToProfileOperationCompleted, userState);
        }
        
        private void OnAddOrderToProfileOperationCompleted(object arg) {
            if ((this.AddOrderToProfileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddOrderToProfileCompleted(this, new AddOrderToProfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Profile/AddServiceToProfile", RequestNamespace="http://clearstar.net/Gateway/Profile", ResponseNamespace="http://clearstar.net/Gateway/Profile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode AddServiceToProfile(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, string sServiceNo) {
            object[] results = this.Invoke("AddServiceToProfile", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo,
                        sServiceNo});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void AddServiceToProfileAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, string sServiceNo) {
            this.AddServiceToProfileAsync(sUserName, sPassword, iBOID, sCustID, sProfNo, sServiceNo, null);
        }
        
        /// <remarks/>
        public void AddServiceToProfileAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, string sServiceNo, object userState) {
            if ((this.AddServiceToProfileOperationCompleted == null)) {
                this.AddServiceToProfileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddServiceToProfileOperationCompleted);
            }
            this.InvokeAsync("AddServiceToProfile", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo,
                        sServiceNo}, this.AddServiceToProfileOperationCompleted, userState);
        }
        
        private void OnAddServiceToProfileOperationCompleted(object arg) {
            if ((this.AddServiceToProfileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddServiceToProfileCompleted(this, new AddServiceToProfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Profile/CancelProfile", RequestNamespace="http://clearstar.net/Gateway/Profile", ResponseNamespace="http://clearstar.net/Gateway/Profile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode CancelProfile(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, string sAuthorizedBy, bool bInvoiceCustomer) {
            object[] results = this.Invoke("CancelProfile", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo,
                        sAuthorizedBy,
                        bInvoiceCustomer});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void CancelProfileAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, string sAuthorizedBy, bool bInvoiceCustomer) {
            this.CancelProfileAsync(sUserName, sPassword, iBOID, sCustID, sProfNo, sAuthorizedBy, bInvoiceCustomer, null);
        }
        
        /// <remarks/>
        public void CancelProfileAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, string sAuthorizedBy, bool bInvoiceCustomer, object userState) {
            if ((this.CancelProfileOperationCompleted == null)) {
                this.CancelProfileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelProfileOperationCompleted);
            }
            this.InvokeAsync("CancelProfile", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo,
                        sAuthorizedBy,
                        bInvoiceCustomer}, this.CancelProfileOperationCompleted, userState);
        }
        
        private void OnCancelProfileOperationCompleted(object arg) {
            if ((this.CancelProfileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelProfileCompleted(this, new CancelProfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Profile/CopyProfile", RequestNamespace="http://clearstar.net/Gateway/Profile", ResponseNamespace="http://clearstar.net/Gateway/Profile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode CopyProfile(string sUserName, string sPassword, int iBOID, string sCustID, string sFromProfNo, string sSvcsSelection, int iPriorityID) {
            object[] results = this.Invoke("CopyProfile", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sFromProfNo,
                        sSvcsSelection,
                        iPriorityID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void CopyProfileAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sFromProfNo, string sSvcsSelection, int iPriorityID) {
            this.CopyProfileAsync(sUserName, sPassword, iBOID, sCustID, sFromProfNo, sSvcsSelection, iPriorityID, null);
        }
        
        /// <remarks/>
        public void CopyProfileAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sFromProfNo, string sSvcsSelection, int iPriorityID, object userState) {
            if ((this.CopyProfileOperationCompleted == null)) {
                this.CopyProfileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCopyProfileOperationCompleted);
            }
            this.InvokeAsync("CopyProfile", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sFromProfNo,
                        sSvcsSelection,
                        iPriorityID}, this.CopyProfileOperationCompleted, userState);
        }
        
        private void OnCopyProfileOperationCompleted(object arg) {
            if ((this.CopyProfileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CopyProfileCompleted(this, new CopyProfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Profile/ArchiveProfile", RequestNamespace="http://clearstar.net/Gateway/Profile", ResponseNamespace="http://clearstar.net/Gateway/Profile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode ArchiveProfile(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo) {
            object[] results = this.Invoke("ArchiveProfile", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void ArchiveProfileAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo) {
            this.ArchiveProfileAsync(sUserName, sPassword, iBOID, sCustID, sProfNo, null);
        }
        
        /// <remarks/>
        public void ArchiveProfileAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, object userState) {
            if ((this.ArchiveProfileOperationCompleted == null)) {
                this.ArchiveProfileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnArchiveProfileOperationCompleted);
            }
            this.InvokeAsync("ArchiveProfile", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo}, this.ArchiveProfileOperationCompleted, userState);
        }
        
        private void OnArchiveProfileOperationCompleted(object arg) {
            if ((this.ArchiveProfileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ArchiveProfileCompleted(this, new ArchiveProfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Profile/UnarchiveProfile", RequestNamespace="http://clearstar.net/Gateway/Profile", ResponseNamespace="http://clearstar.net/Gateway/Profile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode UnarchiveProfile(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo) {
            object[] results = this.Invoke("UnarchiveProfile", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void UnarchiveProfileAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo) {
            this.UnarchiveProfileAsync(sUserName, sPassword, iBOID, sCustID, sProfNo, null);
        }
        
        /// <remarks/>
        public void UnarchiveProfileAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, object userState) {
            if ((this.UnarchiveProfileOperationCompleted == null)) {
                this.UnarchiveProfileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnarchiveProfileOperationCompleted);
            }
            this.InvokeAsync("UnarchiveProfile", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo}, this.UnarchiveProfileOperationCompleted, userState);
        }
        
        private void OnUnarchiveProfileOperationCompleted(object arg) {
            if ((this.UnarchiveProfileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnarchiveProfileCompleted(this, new UnarchiveProfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Profile/CreateProfile", RequestNamespace="http://clearstar.net/Gateway/Profile", ResponseNamespace="http://clearstar.net/Gateway/Profile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode CreateProfile(
                    string sUserName, 
                    string sPassword, 
                    int iBOID, 
                    string sCustID, 
                    string sFolderID, 
                    int iPriorityID, 
                    string sPosition, 
                    string sAccountingCode, 
                    string sSSN, 
                    string sLastName, 
                    string sFirstName, 
                    string sMiddleName, 
                    string sSuffix, 
                    string sRaceID, 
                    string sSex, 
                    string sBirthDate, 
                    string sHeight, 
                    string sWeight, 
                    string sScars, 
                    string sEyes, 
                    string sAddrLine1, 
                    string sAddrLine2, 
                    string sCity, 
                    string sState, 
                    string sZipCode, 
                    string sCounty, 
                    string sFromDate, 
                    string sSubjectType, 
                    bool bIsHighlighted, 
                    string sComments) {
            object[] results = this.Invoke("CreateProfile", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sFolderID,
                        iPriorityID,
                        sPosition,
                        sAccountingCode,
                        sSSN,
                        sLastName,
                        sFirstName,
                        sMiddleName,
                        sSuffix,
                        sRaceID,
                        sSex,
                        sBirthDate,
                        sHeight,
                        sWeight,
                        sScars,
                        sEyes,
                        sAddrLine1,
                        sAddrLine2,
                        sCity,
                        sState,
                        sZipCode,
                        sCounty,
                        sFromDate,
                        sSubjectType,
                        bIsHighlighted,
                        sComments});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void CreateProfileAsync(
                    string sUserName, 
                    string sPassword, 
                    int iBOID, 
                    string sCustID, 
                    string sFolderID, 
                    int iPriorityID, 
                    string sPosition, 
                    string sAccountingCode, 
                    string sSSN, 
                    string sLastName, 
                    string sFirstName, 
                    string sMiddleName, 
                    string sSuffix, 
                    string sRaceID, 
                    string sSex, 
                    string sBirthDate, 
                    string sHeight, 
                    string sWeight, 
                    string sScars, 
                    string sEyes, 
                    string sAddrLine1, 
                    string sAddrLine2, 
                    string sCity, 
                    string sState, 
                    string sZipCode, 
                    string sCounty, 
                    string sFromDate, 
                    string sSubjectType, 
                    bool bIsHighlighted, 
                    string sComments) {
            this.CreateProfileAsync(sUserName, sPassword, iBOID, sCustID, sFolderID, iPriorityID, sPosition, sAccountingCode, sSSN, sLastName, sFirstName, sMiddleName, sSuffix, sRaceID, sSex, sBirthDate, sHeight, sWeight, sScars, sEyes, sAddrLine1, sAddrLine2, sCity, sState, sZipCode, sCounty, sFromDate, sSubjectType, bIsHighlighted, sComments, null);
        }
        
        /// <remarks/>
        public void CreateProfileAsync(
                    string sUserName, 
                    string sPassword, 
                    int iBOID, 
                    string sCustID, 
                    string sFolderID, 
                    int iPriorityID, 
                    string sPosition, 
                    string sAccountingCode, 
                    string sSSN, 
                    string sLastName, 
                    string sFirstName, 
                    string sMiddleName, 
                    string sSuffix, 
                    string sRaceID, 
                    string sSex, 
                    string sBirthDate, 
                    string sHeight, 
                    string sWeight, 
                    string sScars, 
                    string sEyes, 
                    string sAddrLine1, 
                    string sAddrLine2, 
                    string sCity, 
                    string sState, 
                    string sZipCode, 
                    string sCounty, 
                    string sFromDate, 
                    string sSubjectType, 
                    bool bIsHighlighted, 
                    string sComments, 
                    object userState) {
            if ((this.CreateProfileOperationCompleted == null)) {
                this.CreateProfileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateProfileOperationCompleted);
            }
            this.InvokeAsync("CreateProfile", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sFolderID,
                        iPriorityID,
                        sPosition,
                        sAccountingCode,
                        sSSN,
                        sLastName,
                        sFirstName,
                        sMiddleName,
                        sSuffix,
                        sRaceID,
                        sSex,
                        sBirthDate,
                        sHeight,
                        sWeight,
                        sScars,
                        sEyes,
                        sAddrLine1,
                        sAddrLine2,
                        sCity,
                        sState,
                        sZipCode,
                        sCounty,
                        sFromDate,
                        sSubjectType,
                        bIsHighlighted,
                        sComments}, this.CreateProfileOperationCompleted, userState);
        }
        
        private void OnCreateProfileOperationCompleted(object arg) {
            if ((this.CreateProfileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateProfileCompleted(this, new CreateProfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Profile/CreateProfileForCountry", RequestNamespace="http://clearstar.net/Gateway/Profile", ResponseNamespace="http://clearstar.net/Gateway/Profile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode CreateProfileForCountry(
                    string sUserName, 
                    string sPassword, 
                    int iBOID, 
                    string sCustID, 
                    string sFolderID, 
                    int iPriorityID, 
                    string sPosition, 
                    string sAccountingCode, 
                    string sSSN, 
                    string sLastName, 
                    string sFirstName, 
                    string sMiddleName, 
                    string sSuffix, 
                    string sRaceID, 
                    string sSex, 
                    string sBirthDate, 
                    string sHeight, 
                    string sWeight, 
                    string sScars, 
                    string sEyes, 
                    int iCountryID, 
                    string sAddrLine1, 
                    string sAddrLine2, 
                    string sCity, 
                    string sState, 
                    string sZipCode, 
                    string sCounty, 
                    string sFromDate, 
                    string sSubjectType, 
                    bool bIsHighlighted, 
                    string sComments, 
                    string sEmailAddress, 
                    string sPhoneNumber) {
            object[] results = this.Invoke("CreateProfileForCountry", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sFolderID,
                        iPriorityID,
                        sPosition,
                        sAccountingCode,
                        sSSN,
                        sLastName,
                        sFirstName,
                        sMiddleName,
                        sSuffix,
                        sRaceID,
                        sSex,
                        sBirthDate,
                        sHeight,
                        sWeight,
                        sScars,
                        sEyes,
                        iCountryID,
                        sAddrLine1,
                        sAddrLine2,
                        sCity,
                        sState,
                        sZipCode,
                        sCounty,
                        sFromDate,
                        sSubjectType,
                        bIsHighlighted,
                        sComments,
                        sEmailAddress,
                        sPhoneNumber});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void CreateProfileForCountryAsync(
                    string sUserName, 
                    string sPassword, 
                    int iBOID, 
                    string sCustID, 
                    string sFolderID, 
                    int iPriorityID, 
                    string sPosition, 
                    string sAccountingCode, 
                    string sSSN, 
                    string sLastName, 
                    string sFirstName, 
                    string sMiddleName, 
                    string sSuffix, 
                    string sRaceID, 
                    string sSex, 
                    string sBirthDate, 
                    string sHeight, 
                    string sWeight, 
                    string sScars, 
                    string sEyes, 
                    int iCountryID, 
                    string sAddrLine1, 
                    string sAddrLine2, 
                    string sCity, 
                    string sState, 
                    string sZipCode, 
                    string sCounty, 
                    string sFromDate, 
                    string sSubjectType, 
                    bool bIsHighlighted, 
                    string sComments, 
                    string sEmailAddress, 
                    string sPhoneNumber) {
            this.CreateProfileForCountryAsync(sUserName, sPassword, iBOID, sCustID, sFolderID, iPriorityID, sPosition, sAccountingCode, sSSN, sLastName, sFirstName, sMiddleName, sSuffix, sRaceID, sSex, sBirthDate, sHeight, sWeight, sScars, sEyes, iCountryID, sAddrLine1, sAddrLine2, sCity, sState, sZipCode, sCounty, sFromDate, sSubjectType, bIsHighlighted, sComments, sEmailAddress, sPhoneNumber, null);
        }
        
        /// <remarks/>
        public void CreateProfileForCountryAsync(
                    string sUserName, 
                    string sPassword, 
                    int iBOID, 
                    string sCustID, 
                    string sFolderID, 
                    int iPriorityID, 
                    string sPosition, 
                    string sAccountingCode, 
                    string sSSN, 
                    string sLastName, 
                    string sFirstName, 
                    string sMiddleName, 
                    string sSuffix, 
                    string sRaceID, 
                    string sSex, 
                    string sBirthDate, 
                    string sHeight, 
                    string sWeight, 
                    string sScars, 
                    string sEyes, 
                    int iCountryID, 
                    string sAddrLine1, 
                    string sAddrLine2, 
                    string sCity, 
                    string sState, 
                    string sZipCode, 
                    string sCounty, 
                    string sFromDate, 
                    string sSubjectType, 
                    bool bIsHighlighted, 
                    string sComments, 
                    string sEmailAddress, 
                    string sPhoneNumber, 
                    object userState) {
            if ((this.CreateProfileForCountryOperationCompleted == null)) {
                this.CreateProfileForCountryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateProfileForCountryOperationCompleted);
            }
            this.InvokeAsync("CreateProfileForCountry", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sFolderID,
                        iPriorityID,
                        sPosition,
                        sAccountingCode,
                        sSSN,
                        sLastName,
                        sFirstName,
                        sMiddleName,
                        sSuffix,
                        sRaceID,
                        sSex,
                        sBirthDate,
                        sHeight,
                        sWeight,
                        sScars,
                        sEyes,
                        iCountryID,
                        sAddrLine1,
                        sAddrLine2,
                        sCity,
                        sState,
                        sZipCode,
                        sCounty,
                        sFromDate,
                        sSubjectType,
                        bIsHighlighted,
                        sComments,
                        sEmailAddress,
                        sPhoneNumber}, this.CreateProfileForCountryOperationCompleted, userState);
        }
        
        private void OnCreateProfileForCountryOperationCompleted(object arg) {
            if ((this.CreateProfileForCountryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateProfileForCountryCompleted(this, new CreateProfileForCountryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Profile/DeleteProfileDraft", RequestNamespace="http://clearstar.net/Gateway/Profile", ResponseNamespace="http://clearstar.net/Gateway/Profile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode DeleteProfileDraft(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo) {
            object[] results = this.Invoke("DeleteProfileDraft", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteProfileDraftAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo) {
            this.DeleteProfileDraftAsync(sUserName, sPassword, iBOID, sCustID, sProfNo, null);
        }
        
        /// <remarks/>
        public void DeleteProfileDraftAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, object userState) {
            if ((this.DeleteProfileDraftOperationCompleted == null)) {
                this.DeleteProfileDraftOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteProfileDraftOperationCompleted);
            }
            this.InvokeAsync("DeleteProfileDraft", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo}, this.DeleteProfileDraftOperationCompleted, userState);
        }
        
        private void OnDeleteProfileDraftOperationCompleted(object arg) {
            if ((this.DeleteProfileDraftCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteProfileDraftCompleted(this, new DeleteProfileDraftCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Profile/DeleteProfileOrder", RequestNamespace="http://clearstar.net/Gateway/Profile", ResponseNamespace="http://clearstar.net/Gateway/Profile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode DeleteProfileOrder(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, int iOrderID) {
            object[] results = this.Invoke("DeleteProfileOrder", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo,
                        iOrderID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteProfileOrderAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, int iOrderID) {
            this.DeleteProfileOrderAsync(sUserName, sPassword, iBOID, sCustID, sProfNo, iOrderID, null);
        }
        
        /// <remarks/>
        public void DeleteProfileOrderAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, int iOrderID, object userState) {
            if ((this.DeleteProfileOrderOperationCompleted == null)) {
                this.DeleteProfileOrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteProfileOrderOperationCompleted);
            }
            this.InvokeAsync("DeleteProfileOrder", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo,
                        iOrderID}, this.DeleteProfileOrderOperationCompleted, userState);
        }
        
        private void OnDeleteProfileOrderOperationCompleted(object arg) {
            if ((this.DeleteProfileOrderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteProfileOrderCompleted(this, new DeleteProfileOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Profile/DeleteProfileService", RequestNamespace="http://clearstar.net/Gateway/Profile", ResponseNamespace="http://clearstar.net/Gateway/Profile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode DeleteProfileService(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, string sServiceNo) {
            object[] results = this.Invoke("DeleteProfileService", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo,
                        sServiceNo});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteProfileServiceAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, string sServiceNo) {
            this.DeleteProfileServiceAsync(sUserName, sPassword, iBOID, sCustID, sProfNo, sServiceNo, null);
        }
        
        /// <remarks/>
        public void DeleteProfileServiceAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, string sServiceNo, object userState) {
            if ((this.DeleteProfileServiceOperationCompleted == null)) {
                this.DeleteProfileServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteProfileServiceOperationCompleted);
            }
            this.InvokeAsync("DeleteProfileService", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo,
                        sServiceNo}, this.DeleteProfileServiceOperationCompleted, userState);
        }
        
        private void OnDeleteProfileServiceOperationCompleted(object arg) {
            if ((this.DeleteProfileServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteProfileServiceCompleted(this, new DeleteProfileServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Profile/EditOrderInProfile", RequestNamespace="http://clearstar.net/Gateway/Profile", ResponseNamespace="http://clearstar.net/Gateway/Profile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode EditOrderInProfile(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, string sServiceNo, int iOrderID, string sCountry, string sState, string sCounty, string sCity, string sZip, string sInstruct, string sOrderFieldsXML) {
            object[] results = this.Invoke("EditOrderInProfile", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo,
                        sServiceNo,
                        iOrderID,
                        sCountry,
                        sState,
                        sCounty,
                        sCity,
                        sZip,
                        sInstruct,
                        sOrderFieldsXML});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void EditOrderInProfileAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, string sServiceNo, int iOrderID, string sCountry, string sState, string sCounty, string sCity, string sZip, string sInstruct, string sOrderFieldsXML) {
            this.EditOrderInProfileAsync(sUserName, sPassword, iBOID, sCustID, sProfNo, sServiceNo, iOrderID, sCountry, sState, sCounty, sCity, sZip, sInstruct, sOrderFieldsXML, null);
        }
        
        /// <remarks/>
        public void EditOrderInProfileAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, string sServiceNo, int iOrderID, string sCountry, string sState, string sCounty, string sCity, string sZip, string sInstruct, string sOrderFieldsXML, object userState) {
            if ((this.EditOrderInProfileOperationCompleted == null)) {
                this.EditOrderInProfileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEditOrderInProfileOperationCompleted);
            }
            this.InvokeAsync("EditOrderInProfile", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo,
                        sServiceNo,
                        iOrderID,
                        sCountry,
                        sState,
                        sCounty,
                        sCity,
                        sZip,
                        sInstruct,
                        sOrderFieldsXML}, this.EditOrderInProfileOperationCompleted, userState);
        }
        
        private void OnEditOrderInProfileOperationCompleted(object arg) {
            if ((this.EditOrderInProfileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EditOrderInProfileCompleted(this, new EditOrderInProfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Profile/EditProfile", RequestNamespace="http://clearstar.net/Gateway/Profile", ResponseNamespace="http://clearstar.net/Gateway/Profile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode EditProfile(
                    string sUserName, 
                    string sPassword, 
                    int iBOID, 
                    string sCustID, 
                    string sProfNo, 
                    string sFolderID, 
                    int iPriorityID, 
                    string sPosition, 
                    string sAccountingCode, 
                    string sSSN, 
                    string sLastName, 
                    string sFirstName, 
                    string sMiddleName, 
                    string sSuffix, 
                    string sRaceID, 
                    string sSex, 
                    string sBirthDate, 
                    string sHeight, 
                    string sWeight, 
                    string sScars, 
                    string sEyes, 
                    string sAddrLine1, 
                    string sAddrLine2, 
                    string sCity, 
                    string sState, 
                    string sZipCode, 
                    string sCounty, 
                    string sFromDate, 
                    string sSubjectType, 
                    bool bIsHighlighted) {
            object[] results = this.Invoke("EditProfile", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo,
                        sFolderID,
                        iPriorityID,
                        sPosition,
                        sAccountingCode,
                        sSSN,
                        sLastName,
                        sFirstName,
                        sMiddleName,
                        sSuffix,
                        sRaceID,
                        sSex,
                        sBirthDate,
                        sHeight,
                        sWeight,
                        sScars,
                        sEyes,
                        sAddrLine1,
                        sAddrLine2,
                        sCity,
                        sState,
                        sZipCode,
                        sCounty,
                        sFromDate,
                        sSubjectType,
                        bIsHighlighted});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void EditProfileAsync(
                    string sUserName, 
                    string sPassword, 
                    int iBOID, 
                    string sCustID, 
                    string sProfNo, 
                    string sFolderID, 
                    int iPriorityID, 
                    string sPosition, 
                    string sAccountingCode, 
                    string sSSN, 
                    string sLastName, 
                    string sFirstName, 
                    string sMiddleName, 
                    string sSuffix, 
                    string sRaceID, 
                    string sSex, 
                    string sBirthDate, 
                    string sHeight, 
                    string sWeight, 
                    string sScars, 
                    string sEyes, 
                    string sAddrLine1, 
                    string sAddrLine2, 
                    string sCity, 
                    string sState, 
                    string sZipCode, 
                    string sCounty, 
                    string sFromDate, 
                    string sSubjectType, 
                    bool bIsHighlighted) {
            this.EditProfileAsync(sUserName, sPassword, iBOID, sCustID, sProfNo, sFolderID, iPriorityID, sPosition, sAccountingCode, sSSN, sLastName, sFirstName, sMiddleName, sSuffix, sRaceID, sSex, sBirthDate, sHeight, sWeight, sScars, sEyes, sAddrLine1, sAddrLine2, sCity, sState, sZipCode, sCounty, sFromDate, sSubjectType, bIsHighlighted, null);
        }
        
        /// <remarks/>
        public void EditProfileAsync(
                    string sUserName, 
                    string sPassword, 
                    int iBOID, 
                    string sCustID, 
                    string sProfNo, 
                    string sFolderID, 
                    int iPriorityID, 
                    string sPosition, 
                    string sAccountingCode, 
                    string sSSN, 
                    string sLastName, 
                    string sFirstName, 
                    string sMiddleName, 
                    string sSuffix, 
                    string sRaceID, 
                    string sSex, 
                    string sBirthDate, 
                    string sHeight, 
                    string sWeight, 
                    string sScars, 
                    string sEyes, 
                    string sAddrLine1, 
                    string sAddrLine2, 
                    string sCity, 
                    string sState, 
                    string sZipCode, 
                    string sCounty, 
                    string sFromDate, 
                    string sSubjectType, 
                    bool bIsHighlighted, 
                    object userState) {
            if ((this.EditProfileOperationCompleted == null)) {
                this.EditProfileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEditProfileOperationCompleted);
            }
            this.InvokeAsync("EditProfile", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo,
                        sFolderID,
                        iPriorityID,
                        sPosition,
                        sAccountingCode,
                        sSSN,
                        sLastName,
                        sFirstName,
                        sMiddleName,
                        sSuffix,
                        sRaceID,
                        sSex,
                        sBirthDate,
                        sHeight,
                        sWeight,
                        sScars,
                        sEyes,
                        sAddrLine1,
                        sAddrLine2,
                        sCity,
                        sState,
                        sZipCode,
                        sCounty,
                        sFromDate,
                        sSubjectType,
                        bIsHighlighted}, this.EditProfileOperationCompleted, userState);
        }
        
        private void OnEditProfileOperationCompleted(object arg) {
            if ((this.EditProfileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EditProfileCompleted(this, new EditProfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Profile/EditProfileForCountry", RequestNamespace="http://clearstar.net/Gateway/Profile", ResponseNamespace="http://clearstar.net/Gateway/Profile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode EditProfileForCountry(
                    string sUserName, 
                    string sPassword, 
                    int iBOID, 
                    string sCustID, 
                    string sProfNo, 
                    string sFolderID, 
                    int iPriorityID, 
                    string sPosition, 
                    string sAccountingCode, 
                    string sSSN, 
                    string sLastName, 
                    string sFirstName, 
                    string sMiddleName, 
                    string sSuffix, 
                    string sRaceID, 
                    string sSex, 
                    string sBirthDate, 
                    string sHeight, 
                    string sWeight, 
                    string sScars, 
                    string sEyes, 
                    int iCountryID, 
                    string sAddrLine1, 
                    string sAddrLine2, 
                    string sCity, 
                    string sState, 
                    string sZipCode, 
                    string sCounty, 
                    string sFromDate, 
                    string sSubjectType, 
                    bool bIsHighlighted, 
                    string sEmailAddress, 
                    string sPhoneNumber) {
            object[] results = this.Invoke("EditProfileForCountry", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo,
                        sFolderID,
                        iPriorityID,
                        sPosition,
                        sAccountingCode,
                        sSSN,
                        sLastName,
                        sFirstName,
                        sMiddleName,
                        sSuffix,
                        sRaceID,
                        sSex,
                        sBirthDate,
                        sHeight,
                        sWeight,
                        sScars,
                        sEyes,
                        iCountryID,
                        sAddrLine1,
                        sAddrLine2,
                        sCity,
                        sState,
                        sZipCode,
                        sCounty,
                        sFromDate,
                        sSubjectType,
                        bIsHighlighted,
                        sEmailAddress,
                        sPhoneNumber});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void EditProfileForCountryAsync(
                    string sUserName, 
                    string sPassword, 
                    int iBOID, 
                    string sCustID, 
                    string sProfNo, 
                    string sFolderID, 
                    int iPriorityID, 
                    string sPosition, 
                    string sAccountingCode, 
                    string sSSN, 
                    string sLastName, 
                    string sFirstName, 
                    string sMiddleName, 
                    string sSuffix, 
                    string sRaceID, 
                    string sSex, 
                    string sBirthDate, 
                    string sHeight, 
                    string sWeight, 
                    string sScars, 
                    string sEyes, 
                    int iCountryID, 
                    string sAddrLine1, 
                    string sAddrLine2, 
                    string sCity, 
                    string sState, 
                    string sZipCode, 
                    string sCounty, 
                    string sFromDate, 
                    string sSubjectType, 
                    bool bIsHighlighted, 
                    string sEmailAddress, 
                    string sPhoneNumber) {
            this.EditProfileForCountryAsync(sUserName, sPassword, iBOID, sCustID, sProfNo, sFolderID, iPriorityID, sPosition, sAccountingCode, sSSN, sLastName, sFirstName, sMiddleName, sSuffix, sRaceID, sSex, sBirthDate, sHeight, sWeight, sScars, sEyes, iCountryID, sAddrLine1, sAddrLine2, sCity, sState, sZipCode, sCounty, sFromDate, sSubjectType, bIsHighlighted, sEmailAddress, sPhoneNumber, null);
        }
        
        /// <remarks/>
        public void EditProfileForCountryAsync(
                    string sUserName, 
                    string sPassword, 
                    int iBOID, 
                    string sCustID, 
                    string sProfNo, 
                    string sFolderID, 
                    int iPriorityID, 
                    string sPosition, 
                    string sAccountingCode, 
                    string sSSN, 
                    string sLastName, 
                    string sFirstName, 
                    string sMiddleName, 
                    string sSuffix, 
                    string sRaceID, 
                    string sSex, 
                    string sBirthDate, 
                    string sHeight, 
                    string sWeight, 
                    string sScars, 
                    string sEyes, 
                    int iCountryID, 
                    string sAddrLine1, 
                    string sAddrLine2, 
                    string sCity, 
                    string sState, 
                    string sZipCode, 
                    string sCounty, 
                    string sFromDate, 
                    string sSubjectType, 
                    bool bIsHighlighted, 
                    string sEmailAddress, 
                    string sPhoneNumber, 
                    object userState) {
            if ((this.EditProfileForCountryOperationCompleted == null)) {
                this.EditProfileForCountryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEditProfileForCountryOperationCompleted);
            }
            this.InvokeAsync("EditProfileForCountry", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo,
                        sFolderID,
                        iPriorityID,
                        sPosition,
                        sAccountingCode,
                        sSSN,
                        sLastName,
                        sFirstName,
                        sMiddleName,
                        sSuffix,
                        sRaceID,
                        sSex,
                        sBirthDate,
                        sHeight,
                        sWeight,
                        sScars,
                        sEyes,
                        iCountryID,
                        sAddrLine1,
                        sAddrLine2,
                        sCity,
                        sState,
                        sZipCode,
                        sCounty,
                        sFromDate,
                        sSubjectType,
                        bIsHighlighted,
                        sEmailAddress,
                        sPhoneNumber}, this.EditProfileForCountryOperationCompleted, userState);
        }
        
        private void OnEditProfileForCountryOperationCompleted(object arg) {
            if ((this.EditProfileForCountryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EditProfileForCountryCompleted(this, new EditProfileForCountryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Profile/EditProfileComments", RequestNamespace="http://clearstar.net/Gateway/Profile", ResponseNamespace="http://clearstar.net/Gateway/Profile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode EditProfileComments(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, bool bIsHighlighted, string sFolderIDStr, string sComments) {
            object[] results = this.Invoke("EditProfileComments", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo,
                        bIsHighlighted,
                        sFolderIDStr,
                        sComments});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void EditProfileCommentsAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, bool bIsHighlighted, string sFolderIDStr, string sComments) {
            this.EditProfileCommentsAsync(sUserName, sPassword, iBOID, sCustID, sProfNo, bIsHighlighted, sFolderIDStr, sComments, null);
        }
        
        /// <remarks/>
        public void EditProfileCommentsAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, bool bIsHighlighted, string sFolderIDStr, string sComments, object userState) {
            if ((this.EditProfileCommentsOperationCompleted == null)) {
                this.EditProfileCommentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEditProfileCommentsOperationCompleted);
            }
            this.InvokeAsync("EditProfileComments", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo,
                        bIsHighlighted,
                        sFolderIDStr,
                        sComments}, this.EditProfileCommentsOperationCompleted, userState);
        }
        
        private void OnEditProfileCommentsOperationCompleted(object arg) {
            if ((this.EditProfileCommentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EditProfileCommentsCompleted(this, new EditProfileCommentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Profile/SetBOInternalNote", RequestNamespace="http://clearstar.net/Gateway/Profile", ResponseNamespace="http://clearstar.net/Gateway/Profile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode SetBOInternalNote(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, string sBOInternalNote) {
            object[] results = this.Invoke("SetBOInternalNote", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo,
                        sBOInternalNote});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void SetBOInternalNoteAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, string sBOInternalNote) {
            this.SetBOInternalNoteAsync(sUserName, sPassword, iBOID, sCustID, sProfNo, sBOInternalNote, null);
        }
        
        /// <remarks/>
        public void SetBOInternalNoteAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, string sBOInternalNote, object userState) {
            if ((this.SetBOInternalNoteOperationCompleted == null)) {
                this.SetBOInternalNoteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetBOInternalNoteOperationCompleted);
            }
            this.InvokeAsync("SetBOInternalNote", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo,
                        sBOInternalNote}, this.SetBOInternalNoteOperationCompleted, userState);
        }
        
        private void OnSetBOInternalNoteOperationCompleted(object arg) {
            if ((this.SetBOInternalNoteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetBOInternalNoteCompleted(this, new SetBOInternalNoteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Profile/GetBOInternalNotes", RequestNamespace="http://clearstar.net/Gateway/Profile", ResponseNamespace="http://clearstar.net/Gateway/Profile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetBOInternalNotes(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo) {
            object[] results = this.Invoke("GetBOInternalNotes", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetBOInternalNotesAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo) {
            this.GetBOInternalNotesAsync(sUserName, sPassword, iBOID, sCustID, sProfNo, null);
        }
        
        /// <remarks/>
        public void GetBOInternalNotesAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, object userState) {
            if ((this.GetBOInternalNotesOperationCompleted == null)) {
                this.GetBOInternalNotesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBOInternalNotesOperationCompleted);
            }
            this.InvokeAsync("GetBOInternalNotes", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo}, this.GetBOInternalNotesOperationCompleted, userState);
        }
        
        private void OnGetBOInternalNotesOperationCompleted(object arg) {
            if ((this.GetBOInternalNotesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBOInternalNotesCompleted(this, new GetBOInternalNotesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Profile/GetBOProfileSummary", RequestNamespace="http://clearstar.net/Gateway/Profile", ResponseNamespace="http://clearstar.net/Gateway/Profile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetBOProfileSummary(string sUserName, string sPassword, int iBOID, int iDistributorID) {
            object[] results = this.Invoke("GetBOProfileSummary", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        iDistributorID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetBOProfileSummaryAsync(string sUserName, string sPassword, int iBOID, int iDistributorID) {
            this.GetBOProfileSummaryAsync(sUserName, sPassword, iBOID, iDistributorID, null);
        }
        
        /// <remarks/>
        public void GetBOProfileSummaryAsync(string sUserName, string sPassword, int iBOID, int iDistributorID, object userState) {
            if ((this.GetBOProfileSummaryOperationCompleted == null)) {
                this.GetBOProfileSummaryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBOProfileSummaryOperationCompleted);
            }
            this.InvokeAsync("GetBOProfileSummary", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        iDistributorID}, this.GetBOProfileSummaryOperationCompleted, userState);
        }
        
        private void OnGetBOProfileSummaryOperationCompleted(object arg) {
            if ((this.GetBOProfileSummaryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBOProfileSummaryCompleted(this, new GetBOProfileSummaryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Profile/GetListOfProfiles", RequestNamespace="http://clearstar.net/Gateway/Profile", ResponseNamespace="http://clearstar.net/Gateway/Profile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetListOfProfiles(string sUserName, string sPassword, int iBOID, string sCustID, string sFolderID, bool bExactCustMatch, string sCannedFilterID, string sAging, bool bOnlyHighlighted, bool bInclOfflineProfs, int iStartAtRecord, int iMaxResults) {
            object[] results = this.Invoke("GetListOfProfiles", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sFolderID,
                        bExactCustMatch,
                        sCannedFilterID,
                        sAging,
                        bOnlyHighlighted,
                        bInclOfflineProfs,
                        iStartAtRecord,
                        iMaxResults});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetListOfProfilesAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sFolderID, bool bExactCustMatch, string sCannedFilterID, string sAging, bool bOnlyHighlighted, bool bInclOfflineProfs, int iStartAtRecord, int iMaxResults) {
            this.GetListOfProfilesAsync(sUserName, sPassword, iBOID, sCustID, sFolderID, bExactCustMatch, sCannedFilterID, sAging, bOnlyHighlighted, bInclOfflineProfs, iStartAtRecord, iMaxResults, null);
        }
        
        /// <remarks/>
        public void GetListOfProfilesAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sFolderID, bool bExactCustMatch, string sCannedFilterID, string sAging, bool bOnlyHighlighted, bool bInclOfflineProfs, int iStartAtRecord, int iMaxResults, object userState) {
            if ((this.GetListOfProfilesOperationCompleted == null)) {
                this.GetListOfProfilesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetListOfProfilesOperationCompleted);
            }
            this.InvokeAsync("GetListOfProfiles", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sFolderID,
                        bExactCustMatch,
                        sCannedFilterID,
                        sAging,
                        bOnlyHighlighted,
                        bInclOfflineProfs,
                        iStartAtRecord,
                        iMaxResults}, this.GetListOfProfilesOperationCompleted, userState);
        }
        
        private void OnGetListOfProfilesOperationCompleted(object arg) {
            if ((this.GetListOfProfilesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetListOfProfilesCompleted(this, new GetListOfProfilesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Profile/GetListOfCancelledProfiles", RequestNamespace="http://clearstar.net/Gateway/Profile", ResponseNamespace="http://clearstar.net/Gateway/Profile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetListOfCancelledProfiles(string sUserName, string sPassword, int iBOID, string sCustID, System.DateTime dtDateStart, System.DateTime dtDateEnd, int iStartAtRecord, int iMaxResults) {
            object[] results = this.Invoke("GetListOfCancelledProfiles", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        dtDateStart,
                        dtDateEnd,
                        iStartAtRecord,
                        iMaxResults});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetListOfCancelledProfilesAsync(string sUserName, string sPassword, int iBOID, string sCustID, System.DateTime dtDateStart, System.DateTime dtDateEnd, int iStartAtRecord, int iMaxResults) {
            this.GetListOfCancelledProfilesAsync(sUserName, sPassword, iBOID, sCustID, dtDateStart, dtDateEnd, iStartAtRecord, iMaxResults, null);
        }
        
        /// <remarks/>
        public void GetListOfCancelledProfilesAsync(string sUserName, string sPassword, int iBOID, string sCustID, System.DateTime dtDateStart, System.DateTime dtDateEnd, int iStartAtRecord, int iMaxResults, object userState) {
            if ((this.GetListOfCancelledProfilesOperationCompleted == null)) {
                this.GetListOfCancelledProfilesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetListOfCancelledProfilesOperationCompleted);
            }
            this.InvokeAsync("GetListOfCancelledProfiles", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        dtDateStart,
                        dtDateEnd,
                        iStartAtRecord,
                        iMaxResults}, this.GetListOfCancelledProfilesOperationCompleted, userState);
        }
        
        private void OnGetListOfCancelledProfilesOperationCompleted(object arg) {
            if ((this.GetListOfCancelledProfilesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetListOfCancelledProfilesCompleted(this, new GetListOfCancelledProfilesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Profile/GetProfileNotification", RequestNamespace="http://clearstar.net/Gateway/Profile", ResponseNamespace="http://clearstar.net/Gateway/Profile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetProfileNotification(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo) {
            object[] results = this.Invoke("GetProfileNotification", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetProfileNotificationAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo) {
            this.GetProfileNotificationAsync(sUserName, sPassword, iBOID, sCustID, sProfNo, null);
        }
        
        /// <remarks/>
        public void GetProfileNotificationAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, object userState) {
            if ((this.GetProfileNotificationOperationCompleted == null)) {
                this.GetProfileNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProfileNotificationOperationCompleted);
            }
            this.InvokeAsync("GetProfileNotification", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo}, this.GetProfileNotificationOperationCompleted, userState);
        }
        
        private void OnGetProfileNotificationOperationCompleted(object arg) {
            if ((this.GetProfileNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProfileNotificationCompleted(this, new GetProfileNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Profile/GetProfilesPassFailData", RequestNamespace="http://clearstar.net/Gateway/Profile", ResponseNamespace="http://clearstar.net/Gateway/Profile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetProfilesPassFailData(string sUserName, string sPassword, int iBOID, string sCustomerGroup, string sSearchValue, string sSearchIn) {
            object[] results = this.Invoke("GetProfilesPassFailData", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustomerGroup,
                        sSearchValue,
                        sSearchIn});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetProfilesPassFailDataAsync(string sUserName, string sPassword, int iBOID, string sCustomerGroup, string sSearchValue, string sSearchIn) {
            this.GetProfilesPassFailDataAsync(sUserName, sPassword, iBOID, sCustomerGroup, sSearchValue, sSearchIn, null);
        }
        
        /// <remarks/>
        public void GetProfilesPassFailDataAsync(string sUserName, string sPassword, int iBOID, string sCustomerGroup, string sSearchValue, string sSearchIn, object userState) {
            if ((this.GetProfilesPassFailDataOperationCompleted == null)) {
                this.GetProfilesPassFailDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProfilesPassFailDataOperationCompleted);
            }
            this.InvokeAsync("GetProfilesPassFailData", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustomerGroup,
                        sSearchValue,
                        sSearchIn}, this.GetProfilesPassFailDataOperationCompleted, userState);
        }
        
        private void OnGetProfilesPassFailDataOperationCompleted(object arg) {
            if ((this.GetProfilesPassFailDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProfilesPassFailDataCompleted(this, new GetProfilesPassFailDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Profile/GetProfileSubject", RequestNamespace="http://clearstar.net/Gateway/Profile", ResponseNamespace="http://clearstar.net/Gateway/Profile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetProfileSubject(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo) {
            object[] results = this.Invoke("GetProfileSubject", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetProfileSubjectAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo) {
            this.GetProfileSubjectAsync(sUserName, sPassword, iBOID, sCustID, sProfNo, null);
        }
        
        /// <remarks/>
        public void GetProfileSubjectAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, object userState) {
            if ((this.GetProfileSubjectOperationCompleted == null)) {
                this.GetProfileSubjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProfileSubjectOperationCompleted);
            }
            this.InvokeAsync("GetProfileSubject", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo}, this.GetProfileSubjectOperationCompleted, userState);
        }
        
        private void OnGetProfileSubjectOperationCompleted(object arg) {
            if ((this.GetProfileSubjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProfileSubjectCompleted(this, new GetProfileSubjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Profile/GetProfileStatus", RequestNamespace="http://clearstar.net/Gateway/Profile", ResponseNamespace="http://clearstar.net/Gateway/Profile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetProfileStatus(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo) {
            object[] results = this.Invoke("GetProfileStatus", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetProfileStatusAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo) {
            this.GetProfileStatusAsync(sUserName, sPassword, iBOID, sCustID, sProfNo, null);
        }
        
        /// <remarks/>
        public void GetProfileStatusAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, object userState) {
            if ((this.GetProfileStatusOperationCompleted == null)) {
                this.GetProfileStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProfileStatusOperationCompleted);
            }
            this.InvokeAsync("GetProfileStatus", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo}, this.GetProfileStatusOperationCompleted, userState);
        }
        
        private void OnGetProfileStatusOperationCompleted(object arg) {
            if ((this.GetProfileStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProfileStatusCompleted(this, new GetProfileStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Profile/GetProfileDetail", RequestNamespace="http://clearstar.net/Gateway/Profile", ResponseNamespace="http://clearstar.net/Gateway/Profile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetProfileDetail(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo) {
            object[] results = this.Invoke("GetProfileDetail", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetProfileDetailAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo) {
            this.GetProfileDetailAsync(sUserName, sPassword, iBOID, sCustID, sProfNo, null);
        }
        
        /// <remarks/>
        public void GetProfileDetailAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, object userState) {
            if ((this.GetProfileDetailOperationCompleted == null)) {
                this.GetProfileDetailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProfileDetailOperationCompleted);
            }
            this.InvokeAsync("GetProfileDetail", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo}, this.GetProfileDetailOperationCompleted, userState);
        }
        
        private void OnGetProfileDetailOperationCompleted(object arg) {
            if ((this.GetProfileDetailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProfileDetailCompleted(this, new GetProfileDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Profile/GetStoredProfileDetail", RequestNamespace="http://clearstar.net/Gateway/Profile", ResponseNamespace="http://clearstar.net/Gateway/Profile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetStoredProfileDetail(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo) {
            object[] results = this.Invoke("GetStoredProfileDetail", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetStoredProfileDetailAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo) {
            this.GetStoredProfileDetailAsync(sUserName, sPassword, iBOID, sCustID, sProfNo, null);
        }
        
        /// <remarks/>
        public void GetStoredProfileDetailAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, object userState) {
            if ((this.GetStoredProfileDetailOperationCompleted == null)) {
                this.GetStoredProfileDetailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStoredProfileDetailOperationCompleted);
            }
            this.InvokeAsync("GetStoredProfileDetail", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo}, this.GetStoredProfileDetailOperationCompleted, userState);
        }
        
        private void OnGetStoredProfileDetailOperationCompleted(object arg) {
            if ((this.GetStoredProfileDetailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStoredProfileDetailCompleted(this, new GetStoredProfileDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Profile/GetProfileReport", RequestNamespace="http://clearstar.net/Gateway/Profile", ResponseNamespace="http://clearstar.net/Gateway/Profile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetProfileReport(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, bool bShowComments) {
            object[] results = this.Invoke("GetProfileReport", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo,
                        bShowComments});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetProfileReportAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, bool bShowComments) {
            this.GetProfileReportAsync(sUserName, sPassword, iBOID, sCustID, sProfNo, bShowComments, null);
        }
        
        /// <remarks/>
        public void GetProfileReportAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, bool bShowComments, object userState) {
            if ((this.GetProfileReportOperationCompleted == null)) {
                this.GetProfileReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProfileReportOperationCompleted);
            }
            this.InvokeAsync("GetProfileReport", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo,
                        bShowComments}, this.GetProfileReportOperationCompleted, userState);
        }
        
        private void OnGetProfileReportOperationCompleted(object arg) {
            if ((this.GetProfileReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProfileReportCompleted(this, new GetProfileReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Profile/GetProfileReportByReportEngine", RequestNamespace="http://clearstar.net/Gateway/Profile", ResponseNamespace="http://clearstar.net/Gateway/Profile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetProfileReportByReportEngine(string sUserName, string sPassword, int iBOID, string sProfNo, bool bShowComments, string sReportEngine) {
            object[] results = this.Invoke("GetProfileReportByReportEngine", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sProfNo,
                        bShowComments,
                        sReportEngine});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetProfileReportByReportEngineAsync(string sUserName, string sPassword, int iBOID, string sProfNo, bool bShowComments, string sReportEngine) {
            this.GetProfileReportByReportEngineAsync(sUserName, sPassword, iBOID, sProfNo, bShowComments, sReportEngine, null);
        }
        
        /// <remarks/>
        public void GetProfileReportByReportEngineAsync(string sUserName, string sPassword, int iBOID, string sProfNo, bool bShowComments, string sReportEngine, object userState) {
            if ((this.GetProfileReportByReportEngineOperationCompleted == null)) {
                this.GetProfileReportByReportEngineOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProfileReportByReportEngineOperationCompleted);
            }
            this.InvokeAsync("GetProfileReportByReportEngine", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sProfNo,
                        bShowComments,
                        sReportEngine}, this.GetProfileReportByReportEngineOperationCompleted, userState);
        }
        
        private void OnGetProfileReportByReportEngineOperationCompleted(object arg) {
            if ((this.GetProfileReportByReportEngineCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProfileReportByReportEngineCompleted(this, new GetProfileReportByReportEngineCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Profile/ReOpenProfile", RequestNamespace="http://clearstar.net/Gateway/Profile", ResponseNamespace="http://clearstar.net/Gateway/Profile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode ReOpenProfile(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo) {
            object[] results = this.Invoke("ReOpenProfile", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void ReOpenProfileAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo) {
            this.ReOpenProfileAsync(sUserName, sPassword, iBOID, sCustID, sProfNo, null);
        }
        
        /// <remarks/>
        public void ReOpenProfileAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, object userState) {
            if ((this.ReOpenProfileOperationCompleted == null)) {
                this.ReOpenProfileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReOpenProfileOperationCompleted);
            }
            this.InvokeAsync("ReOpenProfile", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo}, this.ReOpenProfileOperationCompleted, userState);
        }
        
        private void OnReOpenProfileOperationCompleted(object arg) {
            if ((this.ReOpenProfileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReOpenProfileCompleted(this, new ReOpenProfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Profile/TransmitProfile", RequestNamespace="http://clearstar.net/Gateway/Profile", ResponseNamespace="http://clearstar.net/Gateway/Profile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode TransmitProfile(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo) {
            object[] results = this.Invoke("TransmitProfile", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void TransmitProfileAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo) {
            this.TransmitProfileAsync(sUserName, sPassword, iBOID, sCustID, sProfNo, null);
        }
        
        /// <remarks/>
        public void TransmitProfileAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, object userState) {
            if ((this.TransmitProfileOperationCompleted == null)) {
                this.TransmitProfileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTransmitProfileOperationCompleted);
            }
            this.InvokeAsync("TransmitProfile", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo}, this.TransmitProfileOperationCompleted, userState);
        }
        
        private void OnTransmitProfileOperationCompleted(object arg) {
            if ((this.TransmitProfileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TransmitProfileCompleted(this, new TransmitProfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Profile/TransmitProfileWithCreditCard", RequestNamespace="http://clearstar.net/Gateway/Profile", ResponseNamespace="http://clearstar.net/Gateway/Profile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode TransmitProfileWithCreditCard(
                    string sUserName, 
                    string sPassword, 
                    int iBOID, 
                    string sCustID, 
                    string sProfNo, 
                    string sCreditCardNumber, 
                    string sVerificationNumber, 
                    string sFirstNameOnCard, 
                    string sLastNameOnCard, 
                    string sCompany, 
                    string sExpirationDate, 
                    string sAddress, 
                    string sCity, 
                    string sState, 
                    string sZip, 
                    string sEMailAddress, 
                    string sDescription, 
                    bool bSendEMail, 
                    bool bUseCCVCode, 
                    bool bVerifyAddress) {
            object[] results = this.Invoke("TransmitProfileWithCreditCard", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo,
                        sCreditCardNumber,
                        sVerificationNumber,
                        sFirstNameOnCard,
                        sLastNameOnCard,
                        sCompany,
                        sExpirationDate,
                        sAddress,
                        sCity,
                        sState,
                        sZip,
                        sEMailAddress,
                        sDescription,
                        bSendEMail,
                        bUseCCVCode,
                        bVerifyAddress});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void TransmitProfileWithCreditCardAsync(
                    string sUserName, 
                    string sPassword, 
                    int iBOID, 
                    string sCustID, 
                    string sProfNo, 
                    string sCreditCardNumber, 
                    string sVerificationNumber, 
                    string sFirstNameOnCard, 
                    string sLastNameOnCard, 
                    string sCompany, 
                    string sExpirationDate, 
                    string sAddress, 
                    string sCity, 
                    string sState, 
                    string sZip, 
                    string sEMailAddress, 
                    string sDescription, 
                    bool bSendEMail, 
                    bool bUseCCVCode, 
                    bool bVerifyAddress) {
            this.TransmitProfileWithCreditCardAsync(sUserName, sPassword, iBOID, sCustID, sProfNo, sCreditCardNumber, sVerificationNumber, sFirstNameOnCard, sLastNameOnCard, sCompany, sExpirationDate, sAddress, sCity, sState, sZip, sEMailAddress, sDescription, bSendEMail, bUseCCVCode, bVerifyAddress, null);
        }
        
        /// <remarks/>
        public void TransmitProfileWithCreditCardAsync(
                    string sUserName, 
                    string sPassword, 
                    int iBOID, 
                    string sCustID, 
                    string sProfNo, 
                    string sCreditCardNumber, 
                    string sVerificationNumber, 
                    string sFirstNameOnCard, 
                    string sLastNameOnCard, 
                    string sCompany, 
                    string sExpirationDate, 
                    string sAddress, 
                    string sCity, 
                    string sState, 
                    string sZip, 
                    string sEMailAddress, 
                    string sDescription, 
                    bool bSendEMail, 
                    bool bUseCCVCode, 
                    bool bVerifyAddress, 
                    object userState) {
            if ((this.TransmitProfileWithCreditCardOperationCompleted == null)) {
                this.TransmitProfileWithCreditCardOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTransmitProfileWithCreditCardOperationCompleted);
            }
            this.InvokeAsync("TransmitProfileWithCreditCard", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo,
                        sCreditCardNumber,
                        sVerificationNumber,
                        sFirstNameOnCard,
                        sLastNameOnCard,
                        sCompany,
                        sExpirationDate,
                        sAddress,
                        sCity,
                        sState,
                        sZip,
                        sEMailAddress,
                        sDescription,
                        bSendEMail,
                        bUseCCVCode,
                        bVerifyAddress}, this.TransmitProfileWithCreditCardOperationCompleted, userState);
        }
        
        private void OnTransmitProfileWithCreditCardOperationCompleted(object arg) {
            if ((this.TransmitProfileWithCreditCardCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TransmitProfileWithCreditCardCompleted(this, new TransmitProfileWithCreditCardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Profile/SearchProfiles", RequestNamespace="http://clearstar.net/Gateway/Profile", ResponseNamespace="http://clearstar.net/Gateway/Profile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode SearchProfiles(string sUserName, string sPassword, int iBOID, string sCustID, string sSearchValue, string sSearchField, bool bIncludeStored, bool bExactMatch) {
            object[] results = this.Invoke("SearchProfiles", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sSearchValue,
                        sSearchField,
                        bIncludeStored,
                        bExactMatch});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void SearchProfilesAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sSearchValue, string sSearchField, bool bIncludeStored, bool bExactMatch) {
            this.SearchProfilesAsync(sUserName, sPassword, iBOID, sCustID, sSearchValue, sSearchField, bIncludeStored, bExactMatch, null);
        }
        
        /// <remarks/>
        public void SearchProfilesAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sSearchValue, string sSearchField, bool bIncludeStored, bool bExactMatch, object userState) {
            if ((this.SearchProfilesOperationCompleted == null)) {
                this.SearchProfilesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchProfilesOperationCompleted);
            }
            this.InvokeAsync("SearchProfiles", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sSearchValue,
                        sSearchField,
                        bIncludeStored,
                        bExactMatch}, this.SearchProfilesOperationCompleted, userState);
        }
        
        private void OnSearchProfilesOperationCompleted(object arg) {
            if ((this.SearchProfilesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchProfilesCompleted(this, new SearchProfilesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Profile/TrackDisclaimerAcceptance", RequestNamespace="http://clearstar.net/Gateway/Profile", ResponseNamespace="http://clearstar.net/Gateway/Profile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode TrackDisclaimerAcceptance(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, string sDisclaimer) {
            object[] results = this.Invoke("TrackDisclaimerAcceptance", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo,
                        sDisclaimer});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void TrackDisclaimerAcceptanceAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, string sDisclaimer) {
            this.TrackDisclaimerAcceptanceAsync(sUserName, sPassword, iBOID, sCustID, sProfNo, sDisclaimer, null);
        }
        
        /// <remarks/>
        public void TrackDisclaimerAcceptanceAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, string sDisclaimer, object userState) {
            if ((this.TrackDisclaimerAcceptanceOperationCompleted == null)) {
                this.TrackDisclaimerAcceptanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTrackDisclaimerAcceptanceOperationCompleted);
            }
            this.InvokeAsync("TrackDisclaimerAcceptance", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo,
                        sDisclaimer}, this.TrackDisclaimerAcceptanceOperationCompleted, userState);
        }
        
        private void OnTrackDisclaimerAcceptanceOperationCompleted(object arg) {
            if ((this.TrackDisclaimerAcceptanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TrackDisclaimerAcceptanceCompleted(this, new TrackDisclaimerAcceptanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Profile/AddAddress", RequestNamespace="http://clearstar.net/Gateway/Profile", ResponseNamespace="http://clearstar.net/Gateway/Profile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode AddAddress(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, string sAddrLine1, string sAddrLine2, string sCity, string sState, string sZipCode, string sCounty, string sFromDate, string sToDate) {
            object[] results = this.Invoke("AddAddress", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo,
                        sAddrLine1,
                        sAddrLine2,
                        sCity,
                        sState,
                        sZipCode,
                        sCounty,
                        sFromDate,
                        sToDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void AddAddressAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, string sAddrLine1, string sAddrLine2, string sCity, string sState, string sZipCode, string sCounty, string sFromDate, string sToDate) {
            this.AddAddressAsync(sUserName, sPassword, iBOID, sCustID, sProfNo, sAddrLine1, sAddrLine2, sCity, sState, sZipCode, sCounty, sFromDate, sToDate, null);
        }
        
        /// <remarks/>
        public void AddAddressAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, string sAddrLine1, string sAddrLine2, string sCity, string sState, string sZipCode, string sCounty, string sFromDate, string sToDate, object userState) {
            if ((this.AddAddressOperationCompleted == null)) {
                this.AddAddressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddAddressOperationCompleted);
            }
            this.InvokeAsync("AddAddress", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo,
                        sAddrLine1,
                        sAddrLine2,
                        sCity,
                        sState,
                        sZipCode,
                        sCounty,
                        sFromDate,
                        sToDate}, this.AddAddressOperationCompleted, userState);
        }
        
        private void OnAddAddressOperationCompleted(object arg) {
            if ((this.AddAddressCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddAddressCompleted(this, new AddAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Profile/AddAddressForCountry", RequestNamespace="http://clearstar.net/Gateway/Profile", ResponseNamespace="http://clearstar.net/Gateway/Profile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode AddAddressForCountry(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, string sAddrLine1, string sAddrLine2, string sCity, string sState, string sZipCode, string sCounty, string sFromDate, string sToDate, int iCountryID) {
            object[] results = this.Invoke("AddAddressForCountry", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo,
                        sAddrLine1,
                        sAddrLine2,
                        sCity,
                        sState,
                        sZipCode,
                        sCounty,
                        sFromDate,
                        sToDate,
                        iCountryID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void AddAddressForCountryAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, string sAddrLine1, string sAddrLine2, string sCity, string sState, string sZipCode, string sCounty, string sFromDate, string sToDate, int iCountryID) {
            this.AddAddressForCountryAsync(sUserName, sPassword, iBOID, sCustID, sProfNo, sAddrLine1, sAddrLine2, sCity, sState, sZipCode, sCounty, sFromDate, sToDate, iCountryID, null);
        }
        
        /// <remarks/>
        public void AddAddressForCountryAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, string sAddrLine1, string sAddrLine2, string sCity, string sState, string sZipCode, string sCounty, string sFromDate, string sToDate, int iCountryID, object userState) {
            if ((this.AddAddressForCountryOperationCompleted == null)) {
                this.AddAddressForCountryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddAddressForCountryOperationCompleted);
            }
            this.InvokeAsync("AddAddressForCountry", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo,
                        sAddrLine1,
                        sAddrLine2,
                        sCity,
                        sState,
                        sZipCode,
                        sCounty,
                        sFromDate,
                        sToDate,
                        iCountryID}, this.AddAddressForCountryOperationCompleted, userState);
        }
        
        private void OnAddAddressForCountryOperationCompleted(object arg) {
            if ((this.AddAddressForCountryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddAddressForCountryCompleted(this, new AddAddressForCountryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Profile/EditAddress", RequestNamespace="http://clearstar.net/Gateway/Profile", ResponseNamespace="http://clearstar.net/Gateway/Profile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode EditAddress(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, int iAppID, int iAddrID, string sAddrLine1, string sAddrLine2, string sCity, string sState, string sZipCode, string sCounty, string sFromDate, string sToDate) {
            object[] results = this.Invoke("EditAddress", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo,
                        iAppID,
                        iAddrID,
                        sAddrLine1,
                        sAddrLine2,
                        sCity,
                        sState,
                        sZipCode,
                        sCounty,
                        sFromDate,
                        sToDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void EditAddressAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, int iAppID, int iAddrID, string sAddrLine1, string sAddrLine2, string sCity, string sState, string sZipCode, string sCounty, string sFromDate, string sToDate) {
            this.EditAddressAsync(sUserName, sPassword, iBOID, sCustID, sProfNo, iAppID, iAddrID, sAddrLine1, sAddrLine2, sCity, sState, sZipCode, sCounty, sFromDate, sToDate, null);
        }
        
        /// <remarks/>
        public void EditAddressAsync(
                    string sUserName, 
                    string sPassword, 
                    int iBOID, 
                    string sCustID, 
                    string sProfNo, 
                    int iAppID, 
                    int iAddrID, 
                    string sAddrLine1, 
                    string sAddrLine2, 
                    string sCity, 
                    string sState, 
                    string sZipCode, 
                    string sCounty, 
                    string sFromDate, 
                    string sToDate, 
                    object userState) {
            if ((this.EditAddressOperationCompleted == null)) {
                this.EditAddressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEditAddressOperationCompleted);
            }
            this.InvokeAsync("EditAddress", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo,
                        iAppID,
                        iAddrID,
                        sAddrLine1,
                        sAddrLine2,
                        sCity,
                        sState,
                        sZipCode,
                        sCounty,
                        sFromDate,
                        sToDate}, this.EditAddressOperationCompleted, userState);
        }
        
        private void OnEditAddressOperationCompleted(object arg) {
            if ((this.EditAddressCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EditAddressCompleted(this, new EditAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Profile/DeleteAddress", RequestNamespace="http://clearstar.net/Gateway/Profile", ResponseNamespace="http://clearstar.net/Gateway/Profile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode DeleteAddress(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, int iAppID, int iAddrID) {
            object[] results = this.Invoke("DeleteAddress", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo,
                        iAppID,
                        iAddrID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteAddressAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, int iAppID, int iAddrID) {
            this.DeleteAddressAsync(sUserName, sPassword, iBOID, sCustID, sProfNo, iAppID, iAddrID, null);
        }
        
        /// <remarks/>
        public void DeleteAddressAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, int iAppID, int iAddrID, object userState) {
            if ((this.DeleteAddressOperationCompleted == null)) {
                this.DeleteAddressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteAddressOperationCompleted);
            }
            this.InvokeAsync("DeleteAddress", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo,
                        iAppID,
                        iAddrID}, this.DeleteAddressOperationCompleted, userState);
        }
        
        private void OnDeleteAddressOperationCompleted(object arg) {
            if ((this.DeleteAddressCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteAddressCompleted(this, new DeleteAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Profile/GetAddressToEdit", RequestNamespace="http://clearstar.net/Gateway/Profile", ResponseNamespace="http://clearstar.net/Gateway/Profile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetAddressToEdit(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, int iAppID, int iAddrID) {
            object[] results = this.Invoke("GetAddressToEdit", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo,
                        iAppID,
                        iAddrID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetAddressToEditAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, int iAppID, int iAddrID) {
            this.GetAddressToEditAsync(sUserName, sPassword, iBOID, sCustID, sProfNo, iAppID, iAddrID, null);
        }
        
        /// <remarks/>
        public void GetAddressToEditAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, int iAppID, int iAddrID, object userState) {
            if ((this.GetAddressToEditOperationCompleted == null)) {
                this.GetAddressToEditOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAddressToEditOperationCompleted);
            }
            this.InvokeAsync("GetAddressToEdit", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo,
                        iAppID,
                        iAddrID}, this.GetAddressToEditOperationCompleted, userState);
        }
        
        private void OnGetAddressToEditOperationCompleted(object arg) {
            if ((this.GetAddressToEditCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAddressToEditCompleted(this, new GetAddressToEditCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Profile/AddAlias", RequestNamespace="http://clearstar.net/Gateway/Profile", ResponseNamespace="http://clearstar.net/Gateway/Profile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode AddAlias(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, string sLastName, string sFirstName, string sMiddleName, string sSuffix, string sAliasType) {
            object[] results = this.Invoke("AddAlias", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo,
                        sLastName,
                        sFirstName,
                        sMiddleName,
                        sSuffix,
                        sAliasType});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void AddAliasAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, string sLastName, string sFirstName, string sMiddleName, string sSuffix, string sAliasType) {
            this.AddAliasAsync(sUserName, sPassword, iBOID, sCustID, sProfNo, sLastName, sFirstName, sMiddleName, sSuffix, sAliasType, null);
        }
        
        /// <remarks/>
        public void AddAliasAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, string sLastName, string sFirstName, string sMiddleName, string sSuffix, string sAliasType, object userState) {
            if ((this.AddAliasOperationCompleted == null)) {
                this.AddAliasOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddAliasOperationCompleted);
            }
            this.InvokeAsync("AddAlias", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo,
                        sLastName,
                        sFirstName,
                        sMiddleName,
                        sSuffix,
                        sAliasType}, this.AddAliasOperationCompleted, userState);
        }
        
        private void OnAddAliasOperationCompleted(object arg) {
            if ((this.AddAliasCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddAliasCompleted(this, new AddAliasCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Profile/EditAlias", RequestNamespace="http://clearstar.net/Gateway/Profile", ResponseNamespace="http://clearstar.net/Gateway/Profile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode EditAlias(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, int iAliasID, string sLastName, string sFirstName, string sMiddleName, string sSuffix, string sAliasType) {
            object[] results = this.Invoke("EditAlias", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo,
                        iAliasID,
                        sLastName,
                        sFirstName,
                        sMiddleName,
                        sSuffix,
                        sAliasType});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void EditAliasAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, int iAliasID, string sLastName, string sFirstName, string sMiddleName, string sSuffix, string sAliasType) {
            this.EditAliasAsync(sUserName, sPassword, iBOID, sCustID, sProfNo, iAliasID, sLastName, sFirstName, sMiddleName, sSuffix, sAliasType, null);
        }
        
        /// <remarks/>
        public void EditAliasAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, int iAliasID, string sLastName, string sFirstName, string sMiddleName, string sSuffix, string sAliasType, object userState) {
            if ((this.EditAliasOperationCompleted == null)) {
                this.EditAliasOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEditAliasOperationCompleted);
            }
            this.InvokeAsync("EditAlias", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo,
                        iAliasID,
                        sLastName,
                        sFirstName,
                        sMiddleName,
                        sSuffix,
                        sAliasType}, this.EditAliasOperationCompleted, userState);
        }
        
        private void OnEditAliasOperationCompleted(object arg) {
            if ((this.EditAliasCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EditAliasCompleted(this, new EditAliasCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Profile/DeleteAlias", RequestNamespace="http://clearstar.net/Gateway/Profile", ResponseNamespace="http://clearstar.net/Gateway/Profile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode DeleteAlias(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, int iAliasID) {
            object[] results = this.Invoke("DeleteAlias", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo,
                        iAliasID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteAliasAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, int iAliasID) {
            this.DeleteAliasAsync(sUserName, sPassword, iBOID, sCustID, sProfNo, iAliasID, null);
        }
        
        /// <remarks/>
        public void DeleteAliasAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, int iAliasID, object userState) {
            if ((this.DeleteAliasOperationCompleted == null)) {
                this.DeleteAliasOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteAliasOperationCompleted);
            }
            this.InvokeAsync("DeleteAlias", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo,
                        iAliasID}, this.DeleteAliasOperationCompleted, userState);
        }
        
        private void OnDeleteAliasOperationCompleted(object arg) {
            if ((this.DeleteAliasCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteAliasCompleted(this, new DeleteAliasCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Profile/GetAliasToEdit", RequestNamespace="http://clearstar.net/Gateway/Profile", ResponseNamespace="http://clearstar.net/Gateway/Profile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetAliasToEdit(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, int iAliasID) {
            object[] results = this.Invoke("GetAliasToEdit", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo,
                        iAliasID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetAliasToEditAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, int iAliasID) {
            this.GetAliasToEditAsync(sUserName, sPassword, iBOID, sCustID, sProfNo, iAliasID, null);
        }
        
        /// <remarks/>
        public void GetAliasToEditAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, int iAliasID, object userState) {
            if ((this.GetAliasToEditOperationCompleted == null)) {
                this.GetAliasToEditOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAliasToEditOperationCompleted);
            }
            this.InvokeAsync("GetAliasToEdit", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo,
                        iAliasID}, this.GetAliasToEditOperationCompleted, userState);
        }
        
        private void OnGetAliasToEditOperationCompleted(object arg) {
            if ((this.GetAliasToEditCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAliasToEditCompleted(this, new GetAliasToEditCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Profile/ReleaseProfileServiceHold", RequestNamespace="http://clearstar.net/Gateway/Profile", ResponseNamespace="http://clearstar.net/Gateway/Profile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode ReleaseProfileServiceHold(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, string sServiceNo) {
            object[] results = this.Invoke("ReleaseProfileServiceHold", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo,
                        sServiceNo});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void ReleaseProfileServiceHoldAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, string sServiceNo) {
            this.ReleaseProfileServiceHoldAsync(sUserName, sPassword, iBOID, sCustID, sProfNo, sServiceNo, null);
        }
        
        /// <remarks/>
        public void ReleaseProfileServiceHoldAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, string sServiceNo, object userState) {
            if ((this.ReleaseProfileServiceHoldOperationCompleted == null)) {
                this.ReleaseProfileServiceHoldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReleaseProfileServiceHoldOperationCompleted);
            }
            this.InvokeAsync("ReleaseProfileServiceHold", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo,
                        sServiceNo}, this.ReleaseProfileServiceHoldOperationCompleted, userState);
        }
        
        private void OnReleaseProfileServiceHoldOperationCompleted(object arg) {
            if ((this.ReleaseProfileServiceHoldCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReleaseProfileServiceHoldCompleted(this, new ReleaseProfileServiceHoldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Profile/ResendProfileNotification", RequestNamespace="http://clearstar.net/Gateway/Profile", ResponseNamespace="http://clearstar.net/Gateway/Profile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode ResendProfileNotification(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo) {
            object[] results = this.Invoke("ResendProfileNotification", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void ResendProfileNotificationAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo) {
            this.ResendProfileNotificationAsync(sUserName, sPassword, iBOID, sCustID, sProfNo, null);
        }
        
        /// <remarks/>
        public void ResendProfileNotificationAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, object userState) {
            if ((this.ResendProfileNotificationOperationCompleted == null)) {
                this.ResendProfileNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResendProfileNotificationOperationCompleted);
            }
            this.InvokeAsync("ResendProfileNotification", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo}, this.ResendProfileNotificationOperationCompleted, userState);
        }
        
        private void OnResendProfileNotificationOperationCompleted(object arg) {
            if ((this.ResendProfileNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ResendProfileNotificationCompleted(this, new ResendProfileNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Profile/UnlockProfile", RequestNamespace="http://clearstar.net/Gateway/Profile", ResponseNamespace="http://clearstar.net/Gateway/Profile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode UnlockProfile(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo) {
            object[] results = this.Invoke("UnlockProfile", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void UnlockProfileAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo) {
            this.UnlockProfileAsync(sUserName, sPassword, iBOID, sCustID, sProfNo, null);
        }
        
        /// <remarks/>
        public void UnlockProfileAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, object userState) {
            if ((this.UnlockProfileOperationCompleted == null)) {
                this.UnlockProfileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnlockProfileOperationCompleted);
            }
            this.InvokeAsync("UnlockProfile", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo}, this.UnlockProfileOperationCompleted, userState);
        }
        
        private void OnUnlockProfileOperationCompleted(object arg) {
            if ((this.UnlockProfileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnlockProfileCompleted(this, new UnlockProfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Profile/UnlockProfileForced", RequestNamespace="http://clearstar.net/Gateway/Profile", ResponseNamespace="http://clearstar.net/Gateway/Profile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode UnlockProfileForced(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, string sToken) {
            object[] results = this.Invoke("UnlockProfileForced", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo,
                        sToken});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void UnlockProfileForcedAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, string sToken) {
            this.UnlockProfileForcedAsync(sUserName, sPassword, iBOID, sCustID, sProfNo, sToken, null);
        }
        
        /// <remarks/>
        public void UnlockProfileForcedAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, string sToken, object userState) {
            if ((this.UnlockProfileForcedOperationCompleted == null)) {
                this.UnlockProfileForcedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnlockProfileForcedOperationCompleted);
            }
            this.InvokeAsync("UnlockProfileForced", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo,
                        sToken}, this.UnlockProfileForcedOperationCompleted, userState);
        }
        
        private void OnUnlockProfileForcedOperationCompleted(object arg) {
            if ((this.UnlockProfileForcedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnlockProfileForcedCompleted(this, new UnlockProfileForcedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Profile/UnlockProfileForAllUsers", RequestNamespace="http://clearstar.net/Gateway/Profile", ResponseNamespace="http://clearstar.net/Gateway/Profile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode UnlockProfileForAllUsers(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo) {
            object[] results = this.Invoke("UnlockProfileForAllUsers", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void UnlockProfileForAllUsersAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo) {
            this.UnlockProfileForAllUsersAsync(sUserName, sPassword, iBOID, sCustID, sProfNo, null);
        }
        
        /// <remarks/>
        public void UnlockProfileForAllUsersAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, object userState) {
            if ((this.UnlockProfileForAllUsersOperationCompleted == null)) {
                this.UnlockProfileForAllUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnlockProfileForAllUsersOperationCompleted);
            }
            this.InvokeAsync("UnlockProfileForAllUsers", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo}, this.UnlockProfileForAllUsersOperationCompleted, userState);
        }
        
        private void OnUnlockProfileForAllUsersOperationCompleted(object arg) {
            if ((this.UnlockProfileForAllUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnlockProfileForAllUsersCompleted(this, new UnlockProfileForAllUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Profile/ValidateSSN", RequestNamespace="http://clearstar.net/Gateway/Profile", ResponseNamespace="http://clearstar.net/Gateway/Profile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode ValidateSSN(string sUserName, string sPassword, int iBOID, string sCustID, string sSSN) {
            object[] results = this.Invoke("ValidateSSN", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sSSN});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void ValidateSSNAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sSSN) {
            this.ValidateSSNAsync(sUserName, sPassword, iBOID, sCustID, sSSN, null);
        }
        
        /// <remarks/>
        public void ValidateSSNAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sSSN, object userState) {
            if ((this.ValidateSSNOperationCompleted == null)) {
                this.ValidateSSNOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateSSNOperationCompleted);
            }
            this.InvokeAsync("ValidateSSN", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sSSN}, this.ValidateSSNOperationCompleted, userState);
        }
        
        private void OnValidateSSNOperationCompleted(object arg) {
            if ((this.ValidateSSNCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateSSNCompleted(this, new ValidateSSNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Profile/ValidateDL", RequestNamespace="http://clearstar.net/Gateway/Profile", ResponseNamespace="http://clearstar.net/Gateway/Profile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode ValidateDL(string sUserName, string sPassword, int iBOID, string sCustID, string sLicense, string sCountry, string sState, string sLastName, string sFirstName, string sMiddleName, string sBirthDate) {
            object[] results = this.Invoke("ValidateDL", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sLicense,
                        sCountry,
                        sState,
                        sLastName,
                        sFirstName,
                        sMiddleName,
                        sBirthDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void ValidateDLAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sLicense, string sCountry, string sState, string sLastName, string sFirstName, string sMiddleName, string sBirthDate) {
            this.ValidateDLAsync(sUserName, sPassword, iBOID, sCustID, sLicense, sCountry, sState, sLastName, sFirstName, sMiddleName, sBirthDate, null);
        }
        
        /// <remarks/>
        public void ValidateDLAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sLicense, string sCountry, string sState, string sLastName, string sFirstName, string sMiddleName, string sBirthDate, object userState) {
            if ((this.ValidateDLOperationCompleted == null)) {
                this.ValidateDLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateDLOperationCompleted);
            }
            this.InvokeAsync("ValidateDL", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sLicense,
                        sCountry,
                        sState,
                        sLastName,
                        sFirstName,
                        sMiddleName,
                        sBirthDate}, this.ValidateDLOperationCompleted, userState);
        }
        
        private void OnValidateDLOperationCompleted(object arg) {
            if ((this.ValidateDLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateDLCompleted(this, new ValidateDLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Profile/NotificationRequest", RequestNamespace="http://clearstar.net/Gateway/Profile", ResponseNamespace="http://clearstar.net/Gateway/Profile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode NotificationRequest(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, string sNotificationType, string sNotificationValue) {
            object[] results = this.Invoke("NotificationRequest", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo,
                        sNotificationType,
                        sNotificationValue});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void NotificationRequestAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, string sNotificationType, string sNotificationValue) {
            this.NotificationRequestAsync(sUserName, sPassword, iBOID, sCustID, sProfNo, sNotificationType, sNotificationValue, null);
        }
        
        /// <remarks/>
        public void NotificationRequestAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, string sNotificationType, string sNotificationValue, object userState) {
            if ((this.NotificationRequestOperationCompleted == null)) {
                this.NotificationRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNotificationRequestOperationCompleted);
            }
            this.InvokeAsync("NotificationRequest", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo,
                        sNotificationType,
                        sNotificationValue}, this.NotificationRequestOperationCompleted, userState);
        }
        
        private void OnNotificationRequestOperationCompleted(object arg) {
            if ((this.NotificationRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NotificationRequestCompleted(this, new NotificationRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Profile/UpdatePassFailStatus", RequestNamespace="http://clearstar.net/Gateway/Profile", ResponseNamespace="http://clearstar.net/Gateway/Profile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode UpdatePassFailStatus(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, int iPassFailStatus, string sRequestor) {
            object[] results = this.Invoke("UpdatePassFailStatus", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo,
                        iPassFailStatus,
                        sRequestor});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void UpdatePassFailStatusAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, int iPassFailStatus, string sRequestor) {
            this.UpdatePassFailStatusAsync(sUserName, sPassword, iBOID, sCustID, sProfNo, iPassFailStatus, sRequestor, null);
        }
        
        /// <remarks/>
        public void UpdatePassFailStatusAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, int iPassFailStatus, string sRequestor, object userState) {
            if ((this.UpdatePassFailStatusOperationCompleted == null)) {
                this.UpdatePassFailStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePassFailStatusOperationCompleted);
            }
            this.InvokeAsync("UpdatePassFailStatus", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo,
                        iPassFailStatus,
                        sRequestor}, this.UpdatePassFailStatusOperationCompleted, userState);
        }
        
        private void OnUpdatePassFailStatusOperationCompleted(object arg) {
            if ((this.UpdatePassFailStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatePassFailStatusCompleted(this, new UpdatePassFailStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Profile/GetFieldDataTypes", RequestNamespace="http://clearstar.net/Gateway/Profile", ResponseNamespace="http://clearstar.net/Gateway/Profile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetFieldDataTypes(string sUserName, string sPassword, int iBOID, string sCustID) {
            object[] results = this.Invoke("GetFieldDataTypes", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetFieldDataTypesAsync(string sUserName, string sPassword, int iBOID, string sCustID) {
            this.GetFieldDataTypesAsync(sUserName, sPassword, iBOID, sCustID, null);
        }
        
        /// <remarks/>
        public void GetFieldDataTypesAsync(string sUserName, string sPassword, int iBOID, string sCustID, object userState) {
            if ((this.GetFieldDataTypesOperationCompleted == null)) {
                this.GetFieldDataTypesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFieldDataTypesOperationCompleted);
            }
            this.InvokeAsync("GetFieldDataTypes", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID}, this.GetFieldDataTypesOperationCompleted, userState);
        }
        
        private void OnGetFieldDataTypesOperationCompleted(object arg) {
            if ((this.GetFieldDataTypesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFieldDataTypesCompleted(this, new GetFieldDataTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Profile/RegisterUserDefinedField", RequestNamespace="http://clearstar.net/Gateway/Profile", ResponseNamespace="http://clearstar.net/Gateway/Profile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode RegisterUserDefinedField(string sUserName, string sPassword, int iBOID, string sCustID, string sFieldName, int iFieldDataTypeID, string sPrompt, bool bIsRequired, string[] sListDisplays, string[] sListValues, bool bIsActive) {
            object[] results = this.Invoke("RegisterUserDefinedField", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sFieldName,
                        iFieldDataTypeID,
                        sPrompt,
                        bIsRequired,
                        sListDisplays,
                        sListValues,
                        bIsActive});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void RegisterUserDefinedFieldAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sFieldName, int iFieldDataTypeID, string sPrompt, bool bIsRequired, string[] sListDisplays, string[] sListValues, bool bIsActive) {
            this.RegisterUserDefinedFieldAsync(sUserName, sPassword, iBOID, sCustID, sFieldName, iFieldDataTypeID, sPrompt, bIsRequired, sListDisplays, sListValues, bIsActive, null);
        }
        
        /// <remarks/>
        public void RegisterUserDefinedFieldAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sFieldName, int iFieldDataTypeID, string sPrompt, bool bIsRequired, string[] sListDisplays, string[] sListValues, bool bIsActive, object userState) {
            if ((this.RegisterUserDefinedFieldOperationCompleted == null)) {
                this.RegisterUserDefinedFieldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegisterUserDefinedFieldOperationCompleted);
            }
            this.InvokeAsync("RegisterUserDefinedField", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sFieldName,
                        iFieldDataTypeID,
                        sPrompt,
                        bIsRequired,
                        sListDisplays,
                        sListValues,
                        bIsActive}, this.RegisterUserDefinedFieldOperationCompleted, userState);
        }
        
        private void OnRegisterUserDefinedFieldOperationCompleted(object arg) {
            if ((this.RegisterUserDefinedFieldCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RegisterUserDefinedFieldCompleted(this, new RegisterUserDefinedFieldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Profile/UpdateRegisteredUserDefinedField", RequestNamespace="http://clearstar.net/Gateway/Profile", ResponseNamespace="http://clearstar.net/Gateway/Profile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode UpdateRegisteredUserDefinedField(string sUserName, string sPassword, int iBOID, string sCustID, string sFieldID, string sFieldName, int iFieldDataTypeID, string sPrompt, bool bIsRequired, string[] sListDisplays, string[] sListValues, bool bIsActive) {
            object[] results = this.Invoke("UpdateRegisteredUserDefinedField", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sFieldID,
                        sFieldName,
                        iFieldDataTypeID,
                        sPrompt,
                        bIsRequired,
                        sListDisplays,
                        sListValues,
                        bIsActive});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateRegisteredUserDefinedFieldAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sFieldID, string sFieldName, int iFieldDataTypeID, string sPrompt, bool bIsRequired, string[] sListDisplays, string[] sListValues, bool bIsActive) {
            this.UpdateRegisteredUserDefinedFieldAsync(sUserName, sPassword, iBOID, sCustID, sFieldID, sFieldName, iFieldDataTypeID, sPrompt, bIsRequired, sListDisplays, sListValues, bIsActive, null);
        }
        
        /// <remarks/>
        public void UpdateRegisteredUserDefinedFieldAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sFieldID, string sFieldName, int iFieldDataTypeID, string sPrompt, bool bIsRequired, string[] sListDisplays, string[] sListValues, bool bIsActive, object userState) {
            if ((this.UpdateRegisteredUserDefinedFieldOperationCompleted == null)) {
                this.UpdateRegisteredUserDefinedFieldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateRegisteredUserDefinedFieldOperationCompleted);
            }
            this.InvokeAsync("UpdateRegisteredUserDefinedField", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sFieldID,
                        sFieldName,
                        iFieldDataTypeID,
                        sPrompt,
                        bIsRequired,
                        sListDisplays,
                        sListValues,
                        bIsActive}, this.UpdateRegisteredUserDefinedFieldOperationCompleted, userState);
        }
        
        private void OnUpdateRegisteredUserDefinedFieldOperationCompleted(object arg) {
            if ((this.UpdateRegisteredUserDefinedFieldCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateRegisteredUserDefinedFieldCompleted(this, new UpdateRegisteredUserDefinedFieldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Profile/GetUserDefinedFields", RequestNamespace="http://clearstar.net/Gateway/Profile", ResponseNamespace="http://clearstar.net/Gateway/Profile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetUserDefinedFields(string sUserName, string sPassword, int iBOID, string sCustID) {
            object[] results = this.Invoke("GetUserDefinedFields", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserDefinedFieldsAsync(string sUserName, string sPassword, int iBOID, string sCustID) {
            this.GetUserDefinedFieldsAsync(sUserName, sPassword, iBOID, sCustID, null);
        }
        
        /// <remarks/>
        public void GetUserDefinedFieldsAsync(string sUserName, string sPassword, int iBOID, string sCustID, object userState) {
            if ((this.GetUserDefinedFieldsOperationCompleted == null)) {
                this.GetUserDefinedFieldsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserDefinedFieldsOperationCompleted);
            }
            this.InvokeAsync("GetUserDefinedFields", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID}, this.GetUserDefinedFieldsOperationCompleted, userState);
        }
        
        private void OnGetUserDefinedFieldsOperationCompleted(object arg) {
            if ((this.GetUserDefinedFieldsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserDefinedFieldsCompleted(this, new GetUserDefinedFieldsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Profile/GetUserDefinedFieldsWithValues", RequestNamespace="http://clearstar.net/Gateway/Profile", ResponseNamespace="http://clearstar.net/Gateway/Profile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetUserDefinedFieldsWithValues(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo) {
            object[] results = this.Invoke("GetUserDefinedFieldsWithValues", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserDefinedFieldsWithValuesAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo) {
            this.GetUserDefinedFieldsWithValuesAsync(sUserName, sPassword, iBOID, sCustID, sProfNo, null);
        }
        
        /// <remarks/>
        public void GetUserDefinedFieldsWithValuesAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, object userState) {
            if ((this.GetUserDefinedFieldsWithValuesOperationCompleted == null)) {
                this.GetUserDefinedFieldsWithValuesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserDefinedFieldsWithValuesOperationCompleted);
            }
            this.InvokeAsync("GetUserDefinedFieldsWithValues", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo}, this.GetUserDefinedFieldsWithValuesOperationCompleted, userState);
        }
        
        private void OnGetUserDefinedFieldsWithValuesOperationCompleted(object arg) {
            if ((this.GetUserDefinedFieldsWithValuesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserDefinedFieldsWithValuesCompleted(this, new GetUserDefinedFieldsWithValuesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Profile/GetUserDefinedField", RequestNamespace="http://clearstar.net/Gateway/Profile", ResponseNamespace="http://clearstar.net/Gateway/Profile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetUserDefinedField(string sUserName, string sPassword, int iBOID, string sCustID, string sFieldID) {
            object[] results = this.Invoke("GetUserDefinedField", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sFieldID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserDefinedFieldAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sFieldID) {
            this.GetUserDefinedFieldAsync(sUserName, sPassword, iBOID, sCustID, sFieldID, null);
        }
        
        /// <remarks/>
        public void GetUserDefinedFieldAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sFieldID, object userState) {
            if ((this.GetUserDefinedFieldOperationCompleted == null)) {
                this.GetUserDefinedFieldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserDefinedFieldOperationCompleted);
            }
            this.InvokeAsync("GetUserDefinedField", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sFieldID}, this.GetUserDefinedFieldOperationCompleted, userState);
        }
        
        private void OnGetUserDefinedFieldOperationCompleted(object arg) {
            if ((this.GetUserDefinedFieldCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserDefinedFieldCompleted(this, new GetUserDefinedFieldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://clearstar.net/Gateway/Profile/SaveUserDefinedFieldValue", RequestNamespace="http://clearstar.net/Gateway/Profile", ResponseNamespace="http://clearstar.net/Gateway/Profile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode SaveUserDefinedFieldValue(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, string sFieldID, object oValue) {
            object[] results = this.Invoke("SaveUserDefinedFieldValue", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo,
                        sFieldID,
                        oValue});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void SaveUserDefinedFieldValueAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, string sFieldID, object oValue) {
            this.SaveUserDefinedFieldValueAsync(sUserName, sPassword, iBOID, sCustID, sProfNo, sFieldID, oValue, null);
        }
        
        /// <remarks/>
        public void SaveUserDefinedFieldValueAsync(string sUserName, string sPassword, int iBOID, string sCustID, string sProfNo, string sFieldID, object oValue, object userState) {
            if ((this.SaveUserDefinedFieldValueOperationCompleted == null)) {
                this.SaveUserDefinedFieldValueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveUserDefinedFieldValueOperationCompleted);
            }
            this.InvokeAsync("SaveUserDefinedFieldValue", new object[] {
                        sUserName,
                        sPassword,
                        iBOID,
                        sCustID,
                        sProfNo,
                        sFieldID,
                        oValue}, this.SaveUserDefinedFieldValueOperationCompleted, userState);
        }
        
        private void OnSaveUserDefinedFieldValueOperationCompleted(object arg) {
            if ((this.SaveUserDefinedFieldValueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveUserDefinedFieldValueCompleted(this, new SaveUserDefinedFieldValueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void AddOrderToProfileCompletedEventHandler(object sender, AddOrderToProfileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddOrderToProfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddOrderToProfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void AddServiceToProfileCompletedEventHandler(object sender, AddServiceToProfileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddServiceToProfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddServiceToProfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void CancelProfileCompletedEventHandler(object sender, CancelProfileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelProfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelProfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void CopyProfileCompletedEventHandler(object sender, CopyProfileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CopyProfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CopyProfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ArchiveProfileCompletedEventHandler(object sender, ArchiveProfileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ArchiveProfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ArchiveProfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UnarchiveProfileCompletedEventHandler(object sender, UnarchiveProfileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnarchiveProfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnarchiveProfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void CreateProfileCompletedEventHandler(object sender, CreateProfileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateProfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateProfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void CreateProfileForCountryCompletedEventHandler(object sender, CreateProfileForCountryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateProfileForCountryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateProfileForCountryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void DeleteProfileDraftCompletedEventHandler(object sender, DeleteProfileDraftCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteProfileDraftCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteProfileDraftCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void DeleteProfileOrderCompletedEventHandler(object sender, DeleteProfileOrderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteProfileOrderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteProfileOrderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void DeleteProfileServiceCompletedEventHandler(object sender, DeleteProfileServiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteProfileServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteProfileServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void EditOrderInProfileCompletedEventHandler(object sender, EditOrderInProfileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EditOrderInProfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EditOrderInProfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void EditProfileCompletedEventHandler(object sender, EditProfileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EditProfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EditProfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void EditProfileForCountryCompletedEventHandler(object sender, EditProfileForCountryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EditProfileForCountryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EditProfileForCountryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void EditProfileCommentsCompletedEventHandler(object sender, EditProfileCommentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EditProfileCommentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EditProfileCommentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void SetBOInternalNoteCompletedEventHandler(object sender, SetBOInternalNoteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetBOInternalNoteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetBOInternalNoteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetBOInternalNotesCompletedEventHandler(object sender, GetBOInternalNotesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBOInternalNotesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBOInternalNotesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetBOProfileSummaryCompletedEventHandler(object sender, GetBOProfileSummaryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBOProfileSummaryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBOProfileSummaryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetListOfProfilesCompletedEventHandler(object sender, GetListOfProfilesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetListOfProfilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetListOfProfilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetListOfCancelledProfilesCompletedEventHandler(object sender, GetListOfCancelledProfilesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetListOfCancelledProfilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetListOfCancelledProfilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetProfileNotificationCompletedEventHandler(object sender, GetProfileNotificationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProfileNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProfileNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetProfilesPassFailDataCompletedEventHandler(object sender, GetProfilesPassFailDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProfilesPassFailDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProfilesPassFailDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetProfileSubjectCompletedEventHandler(object sender, GetProfileSubjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProfileSubjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProfileSubjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetProfileStatusCompletedEventHandler(object sender, GetProfileStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProfileStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProfileStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetProfileDetailCompletedEventHandler(object sender, GetProfileDetailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProfileDetailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProfileDetailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetStoredProfileDetailCompletedEventHandler(object sender, GetStoredProfileDetailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStoredProfileDetailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStoredProfileDetailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetProfileReportCompletedEventHandler(object sender, GetProfileReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProfileReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProfileReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetProfileReportByReportEngineCompletedEventHandler(object sender, GetProfileReportByReportEngineCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProfileReportByReportEngineCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProfileReportByReportEngineCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ReOpenProfileCompletedEventHandler(object sender, ReOpenProfileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReOpenProfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReOpenProfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void TransmitProfileCompletedEventHandler(object sender, TransmitProfileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TransmitProfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TransmitProfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void TransmitProfileWithCreditCardCompletedEventHandler(object sender, TransmitProfileWithCreditCardCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TransmitProfileWithCreditCardCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TransmitProfileWithCreditCardCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void SearchProfilesCompletedEventHandler(object sender, SearchProfilesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchProfilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchProfilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void TrackDisclaimerAcceptanceCompletedEventHandler(object sender, TrackDisclaimerAcceptanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TrackDisclaimerAcceptanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TrackDisclaimerAcceptanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void AddAddressCompletedEventHandler(object sender, AddAddressCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void AddAddressForCountryCompletedEventHandler(object sender, AddAddressForCountryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddAddressForCountryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddAddressForCountryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void EditAddressCompletedEventHandler(object sender, EditAddressCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EditAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EditAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void DeleteAddressCompletedEventHandler(object sender, DeleteAddressCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetAddressToEditCompletedEventHandler(object sender, GetAddressToEditCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAddressToEditCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAddressToEditCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void AddAliasCompletedEventHandler(object sender, AddAliasCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddAliasCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddAliasCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void EditAliasCompletedEventHandler(object sender, EditAliasCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EditAliasCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EditAliasCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void DeleteAliasCompletedEventHandler(object sender, DeleteAliasCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteAliasCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteAliasCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetAliasToEditCompletedEventHandler(object sender, GetAliasToEditCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAliasToEditCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAliasToEditCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ReleaseProfileServiceHoldCompletedEventHandler(object sender, ReleaseProfileServiceHoldCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReleaseProfileServiceHoldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReleaseProfileServiceHoldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ResendProfileNotificationCompletedEventHandler(object sender, ResendProfileNotificationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ResendProfileNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ResendProfileNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UnlockProfileCompletedEventHandler(object sender, UnlockProfileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnlockProfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnlockProfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UnlockProfileForcedCompletedEventHandler(object sender, UnlockProfileForcedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnlockProfileForcedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnlockProfileForcedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UnlockProfileForAllUsersCompletedEventHandler(object sender, UnlockProfileForAllUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnlockProfileForAllUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnlockProfileForAllUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ValidateSSNCompletedEventHandler(object sender, ValidateSSNCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateSSNCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateSSNCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ValidateDLCompletedEventHandler(object sender, ValidateDLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateDLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateDLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void NotificationRequestCompletedEventHandler(object sender, NotificationRequestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NotificationRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NotificationRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UpdatePassFailStatusCompletedEventHandler(object sender, UpdatePassFailStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdatePassFailStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdatePassFailStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetFieldDataTypesCompletedEventHandler(object sender, GetFieldDataTypesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFieldDataTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFieldDataTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void RegisterUserDefinedFieldCompletedEventHandler(object sender, RegisterUserDefinedFieldCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RegisterUserDefinedFieldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RegisterUserDefinedFieldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UpdateRegisteredUserDefinedFieldCompletedEventHandler(object sender, UpdateRegisteredUserDefinedFieldCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateRegisteredUserDefinedFieldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateRegisteredUserDefinedFieldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetUserDefinedFieldsCompletedEventHandler(object sender, GetUserDefinedFieldsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserDefinedFieldsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserDefinedFieldsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetUserDefinedFieldsWithValuesCompletedEventHandler(object sender, GetUserDefinedFieldsWithValuesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserDefinedFieldsWithValuesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserDefinedFieldsWithValuesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetUserDefinedFieldCompletedEventHandler(object sender, GetUserDefinedFieldCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserDefinedFieldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserDefinedFieldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void SaveUserDefinedFieldValueCompletedEventHandler(object sender, SaveUserDefinedFieldValueCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveUserDefinedFieldValueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveUserDefinedFieldValueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591