using DAL.Interfaces;
using Entity.ClientEntity;
using INTSOF.UI.Contract.BkgOperations;
using INTSOF.UI.Contract.ComplianceManagement;
using INTSOF.UI.Contract.ComplianceOperation;
using INTSOF.UI.Contract.SearchUI;
using INTSOF.Utils;
using INTSOF.Utils.Consts;
using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Configuration;
using System.Data;
using System.Data.Entity.Core.EntityClient;
using System.Data.Entity.Core.Metadata.Edm;
using System.Data.Entity.Core.Objects;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Web;
using System.Xml;
using INTSOF.UI.Contract.PackageBundleManagement;
using System.Xml.Serialization;
using System.IO;
using System.Xml.Linq;
using INTSOF.UI.Contract.QueueManagement;
using INTSOF.ServiceDataContracts.Modules.ClinicalRotation;
using System.Web.UI.WebControls;
using INTSOF.ServiceDataContracts.Core;
using INTSOF.UI.Contract.SystemSetUp;
using INTSOF.UI.Contract.Templates;
using INTSOF.UI.Contract.MobileAPI;
using INTSOF.UI.Contract.RecounciliationQueue;
using INTSOF.UI.Contract.FingerPrintSetup;

namespace DAL.Repository
{
    public class ComplianceDataRepository : ClientBaseRepository, IComplianceDataRepository
    {

        private ADB_LibertyUniversity_ReviewEntities _dbContext;

        /// <summary>
        /// Default constructor to initialize class level variables.
        /// </summary>
        public ComplianceDataRepository(Int32 tenantId)
            : base(tenantId)
        {
            _dbContext = base.ClientDBContext;
        }

        public PackageSubscription GetPackageSubscriptionByPackageID(Int32 compliancePackageID, Int32 organizationUserID)
        {
            return _dbContext.PackageSubscriptions.FirstOrDefault(ps => ps.CompliancePackageID == compliancePackageID
           && ps.OrganizationUserID == organizationUserID && !ps.IsDeleted);
        }

        public DataTable GetPackageTreeForServiceMapping(String packageIds)
        {
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {

                SqlCommand command = new SqlCommand("GetPackageTreeForServiceMapping", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@packageIds", packageIds);
                //command.Parameters.AddWithValue("@filteringSortingData", verificationGridCustomPaging.XML);
                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > 0)
                {
                    return ds.Tables[0];
                }
            }
            return new DataTable();
        }

        public PackageSubscription GetPackageSubscriptionByID(Int32 tenantID, Int32 packageSubscriptionID)
        {
            ResetClientContext();
            return _dbContext.PackageSubscriptions
                    .Include("OrganizationUser")
                    .Include("ApplicantComplianceCategoryDatas")
                    .Include("lkpPackageComplianceStatu")
                    .Include("ApplicantComplianceCategoryDatas.lkpCategoryComplianceStatu")
                    .Include("CompliancePackage")
                    .Include("Order.DeptProgramPackage.DeptProgramMapping")
                    .FirstOrDefault(ps => ps.PackageSubscriptionID == packageSubscriptionID
            && !ps.IsDeleted);
        }

        public override void ResetClientContext()
        {
            base.ResetClientContext();
            _dbContext = base.ClientDBContext;
        }

        public String GetNodeHiearchy(Int32 packageSubscriptionID)
        {
            String nodeHierarchy = String.Empty;
            PackageSubscription packageSubscription = _dbContext.PackageSubscriptions.Include("Order")
                .Include("Order.DeptProgramPackage")
                .Include("Order.DeptProgramPackage.DeptProgramMapping")
                .Where(ps => ps.PackageSubscriptionID == packageSubscriptionID && !ps.IsDeleted).FirstOrDefault();

            if (packageSubscription.IsNotNull())
            {
                if (packageSubscription.Order.DeptProgramPackage.DeptProgramMapping.IsNotNull())
                {
                    nodeHierarchy = packageSubscription.Order.DeptProgramPackage.DeptProgramMapping.DPM_Label;
                }
            }

            return nodeHierarchy;
        }

        /// <summary>
        /// Get the category details for selected category in the applicant dynamic form, aloong with its explanaotry Notes.
        /// </summary>
        /// <param name="complianceCategoryId">Id of the selected category.</param>
        /// <returns>Details of the selected category.</returns>
        public ComplianceCategory GetComplianceCategoryDetails(Int32 complianceCategoryId)
        {

            //String categoryName = _dbContext.ComplianceCategories.Where(cc => cc.ComplianceCategoryID == complianceCategoryId && !cc.IsDeleted).FirstOrDefault().CategoryName;
            ComplianceCategory cmpCategory = _dbContext.ComplianceCategories.Where(cc => cc.ComplianceCategoryID == complianceCategoryId && !cc.IsDeleted).FirstOrDefault();

            String objectTypeCode = LCObjectType.ComplianceCategory.GetStringValue();
            String expNotesCode = LCContentType.ExplanatoryNotes.GetStringValue();
            String notes = _dbContext.LargeContents.Where(lc => lc.LC_ObjectID == complianceCategoryId).Join(_dbContext.lkpLargeContentTypes, lc => lc.LC_LargeContentTypeID, lct => lct.LCT_ID, (lc, lct) => new { lct.LCT_Code, LCObjectTypeId = lc.LC_ObjectTypeID, ExpNotes = lc.LC_Content })
                      .Where(c => c.LCT_Code.ToLower() == expNotesCode.ToLower())
                      .Join(_dbContext.lkpObjectTypes, lc => lc.LCObjectTypeId, ot => ot.OT_ID, (lc, ot) => new { OTCode = ot.OT_Code, ExpNotes = lc.ExpNotes })
                      .Where(code => code.OTCode.ToLower() == objectTypeCode.ToLower()).Select(x => x.ExpNotes).FirstOrDefault();

            var complianceCategory = new ComplianceCategory
            {
                CategoryName = cmpCategory.CategoryLabel.IsNullOrEmpty() ? cmpCategory.CategoryName : cmpCategory.CategoryLabel,
                ExpNotes = notes,
                Description = cmpCategory.Description,
                //SampleDocFormURL = cmpCategory.SampleDocFormURL,
                //SampleDocFormURLLabel = cmpCategory.SampleDocFormURLLabel,
            };

            foreach (var docUrl in cmpCategory.ComplianceCategoryDocUrls.Where(x => x.IsDeleted == false).ToList())
            {
                complianceCategory.ComplianceCategoryDocUrls.Add(docUrl);
            }


            return complianceCategory;
        }

        /// <summary>
        /// To get cat updated by latest Info
        /// </summary>
        /// <param name="CategoryID"></param>
        /// <returns></returns>
        public List<CatUpdatedByLatestInfo> GetCatUpdatedByLatestInfo(Int32 categoryID, Int32 packageSubscriptionID)
        {
            return _dbContext.GetCatUpdatedByLatestInfo(categoryID, packageSubscriptionID).ToList();
        }

        public List<INTSOF.Utils.CommonPocoClasses.ComplianceCategoryPocoClass> GetApplicantComplianceCategoryData(Int32 PackageSubscriptionID)
        {
            _dbContext.ContextOptions.LazyLoadingEnabled = false;
            var query = (from PS in _dbContext.PackageSubscriptions
                         join CPC in _dbContext.CompliancePackageCategories on PS.CompliancePackageID equals CPC.CPC_PackageID
                         join CC in _dbContext.ComplianceCategories on CPC.CPC_CategoryID equals CC.ComplianceCategoryID
                         join ACCD_1 in _dbContext.ApplicantComplianceCategoryDatas.Where(x => x.IsDeleted == false) on new { PS.PackageSubscriptionID, CC.ComplianceCategoryID } equals new { ACCD_1.PackageSubscriptionID, ACCD_1.ComplianceCategoryID } into ACCD_2
                         from ACCD in ACCD_2.DefaultIfEmpty()
                         join CCS_1 in _dbContext.lkpCategoryComplianceStatus on ACCD.StatusID equals CCS_1.CategoryComplianceStatusID into CCS_2
                         from CCS in CCS_2.DefaultIfEmpty()
                         join CES_1 in _dbContext.lkpCategoryExceptionStatus on ACCD.CategoryExceptionStatusID equals CES_1.CES_ID into CES_2
                         from CES in CES_2.DefaultIfEmpty()
                         where PS.PackageSubscriptionID == PackageSubscriptionID && !PS.IsDeleted && (CPC.CPC_IsDeleted == null || !CPC.CPC_IsDeleted) && (CC.IsDeleted == null || !CC.IsDeleted) && CC.IsActive
                         select new INTSOF.Utils.CommonPocoClasses.ComplianceCategoryPocoClass
                         {
                             CategoryId = CC.ComplianceCategoryID,
                             CategoryName = String.IsNullOrEmpty(CC.CategoryLabel) ? CC.CategoryName : CC.CategoryLabel,
                             CategoryStatusId = ACCD.StatusID,
                             CategoryStatusCode = CCS.Code,
                             CategoryStatusName = CCS.Name,
                             DisplayOrder = CPC.CPC_DisplayOrder,
                             CategoryExceptionStatusID = CES.CES_ID,
                             CategoryExceptionStatusCode = CES.CES_Code,
                             ComplianceStartDate = CPC.CPC_ComplianceRqdStartDate,
                             ComplianceEndDate = CPC.CPC_ComplianceRqdEndDate,
                             IsComplianceRequired = CPC.CPC_ComplianceRequired,
                             IsActualComplianceRequired = CPC.CPC_ComplianceRequired,//UAT-3611
                             PackageId = PS.CompliancePackageID,
                             CPC_ID = CPC.CPC_ID,
                             RulesStatusID = ACCD.RulesStatusID.ToString()
                         }).Distinct().OrderBy(ordr => ordr.DisplayOrder).ToList();

            _dbContext.ContextOptions.LazyLoadingEnabled = true;
            return query;
        }

        public Boolean CheckIfApplicantHasPlacedOrder(Int32 currentLoggedInUserId)
        {
            return _dbContext.Orders.Any(x => x.OrganizationUserProfile.OrganizationUserID == currentLoggedInUserId);
        }

        /// <summary>
        /// To check if cuurent Applicant have any order with Payment due.
        /// </summary>
        /// <param name="currentLoggedInUserId"></param>
        /// <returns>True/False</returns>
        public Boolean CheckIfApplicantHasPaymentDue(Int32 currentLoggedInUserId)
        {
            String paymentDueStatusCode = ApplicantOrderStatus.Payment_Due.GetStringValue();
            String sentOnlinePaymentStatusCode = ApplicantOrderStatus.Send_For_Online_Payment.GetStringValue();
            String onlinePaymentNotCompletedStatusCode = ApplicantOrderStatus.Online_Payment_Not_Completed.GetStringValue();

            var _lstOrders = _dbContext.Orders.Where(cond => cond.OrganizationUserProfile.OrganizationUserID == currentLoggedInUserId
              && !cond.IsDeleted && !cond.OrganizationUserProfile.IsDeleted && cond.DuePayment != null && cond.DuePayment != Decimal.Zero).ToList();

            var _isPendingOrder = false;
            if (_lstOrders.IsNullOrEmpty())
                return _isPendingOrder;

            var _isOrderFound = false;

            foreach (var ord in _lstOrders)
            {
                foreach (var opd in ord.OrderPaymentDetails)
                {
                    var compliancePkgOPPD = opd.OrderPkgPaymentDetails.Where(x => x.OPPD_BkgOrderPackageID.IsNull()
                        && x.lkpOrderPackageType.OPT_Code == OrderPackageTypes.COMPLIANCE_PACKAGE.GetStringValue()).FirstOrDefault();

                    if (compliancePkgOPPD.IsNotNull() && compliancePkgOPPD.OrderPaymentDetail.OPD_OrderStatusID.IsNotNull()
                        &&
                        (compliancePkgOPPD.OrderPaymentDetail.lkpOrderStatu.Code == paymentDueStatusCode
                          || compliancePkgOPPD.OrderPaymentDetail.lkpOrderStatu.Code == sentOnlinePaymentStatusCode
                          || compliancePkgOPPD.OrderPaymentDetail.lkpOrderStatu.Code == onlinePaymentNotCompletedStatusCode)
                        )
                    {
                        _isPendingOrder = true;
                        _isOrderFound = true;
                        break;
                    }
                }
                if (_isOrderFound)
                    break;
            }
            return _isPendingOrder;
        }


        /// <summary>
        /// Get the applicant orders to check if applicant has placed any order and 
        /// pass on further to check if any payment is due.
        /// </summary>
        /// <param name="currentLoggedInUserId"></param>
        /// <returns></returns>
        List<Order> IComplianceDataRepository.GetApplicantOrders(Int32 currentLoggedInUserId)
        {
            return _dbContext.Orders.Where(ord => ord.OrganizationUserProfile.OrganizationUserID == currentLoggedInUserId).ToList();
        }

        /// <summary>
        /// To check if cuurent Applicant have any order with Payment due.
        /// </summary>
        /// <param name="currentLoggedInUserId"></param>
        /// <returns>True/False</returns>
        Boolean IComplianceDataRepository.CheckApplicantPaymentDue(Int32 currentLoggedInUserId, List<Order> lstOrders)
        {
            String paymentDueStatusCode = ApplicantOrderStatus.Payment_Due.GetStringValue();
            String sentOnlinePaymentStatusCode = ApplicantOrderStatus.Send_For_Online_Payment.GetStringValue();
            String onlinePaymentNotCompletedStatusCode = ApplicantOrderStatus.Online_Payment_Not_Completed.GetStringValue();

            lstOrders = lstOrders.Where(cond => cond.OrganizationUserProfile.OrganizationUserID == currentLoggedInUserId
              && !cond.IsDeleted && !cond.OrganizationUserProfile.IsDeleted && cond.DuePayment != null && cond.DuePayment != Decimal.Zero).ToList();

            var _isPendingOrder = false;
            if (lstOrders.IsNullOrEmpty())
                return _isPendingOrder;

            var _isOrderFound = false;

            foreach (var ord in lstOrders)
            {
                foreach (var opd in ord.OrderPaymentDetails)
                {
                    var compliancePkgOPPD = opd.OrderPkgPaymentDetails.Where(x => x.OPPD_BkgOrderPackageID.IsNull()
                        && x.lkpOrderPackageType.OPT_Code == OrderPackageTypes.COMPLIANCE_PACKAGE.GetStringValue()).FirstOrDefault();

                    if (compliancePkgOPPD.IsNotNull() && compliancePkgOPPD.OrderPaymentDetail.OPD_OrderStatusID.IsNotNull()
                        &&
                        (compliancePkgOPPD.OrderPaymentDetail.lkpOrderStatu.Code == paymentDueStatusCode
                          || compliancePkgOPPD.OrderPaymentDetail.lkpOrderStatu.Code == sentOnlinePaymentStatusCode
                          || compliancePkgOPPD.OrderPaymentDetail.lkpOrderStatu.Code == onlinePaymentNotCompletedStatusCode)
                        )
                    {
                        _isPendingOrder = true;
                        _isOrderFound = true;
                        break;
                    }
                }
                if (_isOrderFound)
                    break;
            }
            return _isPendingOrder;
        }


        public List<ComplianceItem> GetAvailableDataEntryItems(Int32 packageId, Int32 categoryId, Int32 currentUserId, Int32 currentSelectedItem = 0)
        {
            List<Int32> availableItemIds = GetAvailableItems(packageId, categoryId, currentUserId);
            if (currentSelectedItem == 0)
                return _dbContext.ComplianceItems.Where(item => availableItemIds.Contains(item.ComplianceItemID) && !item.IsDeleted && item.IsActive).ToList();
            else
                return _dbContext.ComplianceItems.Where(item => availableItemIds.Contains(item.ComplianceItemID) && !item.IsDeleted && item.IsActive || item.ComplianceItemID == currentSelectedItem).ToList();
        }

        private List<Int32> GetAvailableItems(Int32 packageId, Int32 categoryId, Int32 currentUserId)
        {
            List<Int32> allItemIds = _dbContext.CompliancePackageCategories.Where(cpc => cpc.CPC_CategoryID == categoryId && cpc.CPC_PackageID == packageId && !cpc.CPC_IsDeleted)
         .Join(_dbContext.ComplianceCategories, cpc => cpc.CPC_CategoryID, cc => cc.ComplianceCategoryID, (cpc, cc) => new { CatId = cc.ComplianceCategoryID, IsCCDeleted = cc.IsDeleted, IsCategoryActive = cc.IsActive })
         .Where(cc => !cc.IsCCDeleted && cc.IsCategoryActive)
         .Join(_dbContext.ComplianceCategoryItems, cc => cc.CatId, cci => cci.CCI_CategoryID, (cc, cci) => new { ItemId = cci.CCI_ItemID, IsCCIDeleted = cci.CCI_IsDeleted })
         .Where(cci => !cci.IsCCIDeleted)
         .Join(_dbContext.ComplianceItems, cci => cci.ItemId, ci => ci.ComplianceItemID, (cci, ci) => new { AvailableItemIds = ci.ComplianceItemID, IsCIDeleted = ci.IsDeleted, IsItemActive = ci.IsActive })
         .Where(ci => !ci.IsCIDeleted && ci.IsItemActive)
         .AsEnumerable().Select(id => id.AvailableItemIds).ToList();


            List<Int32> mappedItemIds = _dbContext.PackageSubscriptions.Where(ps => ps.CompliancePackageID == packageId && ps.OrganizationUserID == currentUserId && !ps.IsDeleted)
                .Join(_dbContext.ApplicantComplianceCategoryDatas, ps => ps.PackageSubscriptionID, accd => accd.PackageSubscriptionID, (ps, accd) => new { ApplicantCategoryId = accd.ApplicantComplianceCategoryID, CategoryId = accd.ComplianceCategoryID, IsACCDDeleted = accd.IsDeleted })
                .Where(cat => cat.CategoryId == categoryId && !cat.IsACCDDeleted)
                .Join(_dbContext.ApplicantComplianceItemDatas, accd => accd.ApplicantCategoryId, acid => acid.ApplicantComplianceCategoryID, (accd, acid) => new { MappedItemIds = acid.ComplianceItemID, IsACIDDeleted = acid.IsDeleted })
                .Where(acid => !acid.IsACIDDeleted)
                .Select(id => id.MappedItemIds).ToList();

            List<Int32> tempList = mappedItemIds;

            foreach (var id in tempList)
            {
                allItemIds.Remove(allItemIds.Where(i => Convert.ToInt32(i) == id).FirstOrDefault());
            }
            return allItemIds;
        }

        public ComplianceItem GetDataEntryComplianceItem(Int32 itemId)
        {
            return _dbContext.ComplianceItems.Include("ComplianceItemAttributes").Where(item => item.ComplianceItemID == itemId && !item.IsDeleted && item.IsActive).FirstOrDefault();
        }

        public ApplicantComplianceItemData GetApplicantData(Int32 packageId, Int32 complianceCategoryId, Int32 complianceItemId, Int32 organizationUserId)
        {
            return _dbContext.PackageSubscriptions.Where(ps => ps.CompliancePackageID == packageId && !ps.IsDeleted && ps.OrganizationUserID == organizationUserId)
                .Join(_dbContext.ApplicantComplianceCategoryDatas, ps => ps.PackageSubscriptionID, accd => accd.PackageSubscriptionID, (ps, accd) => new { ComplianceCategoryId = accd.ComplianceCategoryID, ApplicantComplianceCategoryId = accd.ApplicantComplianceCategoryID, IsACCDDeleted = accd.IsDeleted })
                .Where(cd => cd.ComplianceCategoryId == complianceCategoryId && !cd.IsACCDDeleted)
                .Join(_dbContext.ApplicantComplianceItemDatas, acd => acd.ApplicantComplianceCategoryId, aid => aid.ApplicantComplianceCategoryID, (acd, aid) => new { ApplicantItemData = aid, IsACIDDeleted = aid.IsDeleted })
                .Where(itemData => itemData.ApplicantItemData.ComplianceItemID == complianceItemId && !itemData.IsACIDDeleted)
                .Select(i => i.ApplicantItemData).FirstOrDefault();
        }

        public Boolean RemoveMapping(Int32 applicantMapId, Int32 currentUserId, Boolean Isexception)
        {
            if (Isexception)
            {
                ExceptionDocumentMapping applicantComplianceDocumentMapInDb =
                _dbContext.ExceptionDocumentMappings.FirstOrDefault(x => x.ExceptionDocumentMappingID == applicantMapId);
                if (applicantComplianceDocumentMapInDb != null)
                {
                    applicantComplianceDocumentMapInDb.IsDeleted = true;
                    applicantComplianceDocumentMapInDb.ModifiedBy = currentUserId;
                    applicantComplianceDocumentMapInDb.ModifiedOn = DateTime.Now;

                }
            }
            else
            {
                ApplicantComplianceDocumentMap applicantComplianceDocumentMapInDb =
                    _dbContext.ApplicantComplianceDocumentMaps.FirstOrDefault(x => x.ApplicantComplianceDocumentMapID == applicantMapId);
                if (applicantComplianceDocumentMapInDb != null)
                {
                    DateTime _dtCurrentDateTime = DateTime.Now;
                    applicantComplianceDocumentMapInDb.IsDeleted = true;
                    applicantComplianceDocumentMapInDb.ModifiedByID = currentUserId;
                    applicantComplianceDocumentMapInDb.ModifiedOn = _dtCurrentDateTime;

                    ApplicantComplianceAttributeData _attributeData = applicantComplianceDocumentMapInDb.ApplicantComplianceAttributeData;
                    _attributeData.ModifiedByID = currentUserId;
                    _attributeData.ModifiedOn = _dtCurrentDateTime;
                    _attributeData.AttributeValue = Convert.ToString(Convert.ToInt32(_attributeData.AttributeValue) - 1);
                }
            }
            _dbContext.SaveChanges();
            return true;
        }


        public String ValidateUIInput(Int32 organizationUserId, Int32 compliancePackageId, List<ApplicantComplianceAttributeData> lstApplicantData, Int32 complianceItemId, Int32 complianceCategoryId, Int32 packageSubscriptionId, Boolean isDataEntryForm, List<lkpObjectType> lstObjectTypes, List<ApplicantComplianceAttributeData> lstCompleteApplicantData = null)
        {
            List<GetObjectsRules> lstObjectsRules = GetObjectRulesByApplicantData(organizationUserId, compliancePackageId, lstApplicantData, complianceItemId, complianceCategoryId, lstObjectTypes);

            #region GENERATE XML OF APPLICANT INPUT VALUES & EXECUTE THE STORED PROCEDURE usp_Rule_EvaluatePreSubmitRules  AS PER THE RULE ID's

            XmlDocument xmlRules = new XmlDocument();
            XmlElement elementRules = (XmlElement)xmlRules.AppendChild(xmlRules.CreateElement("Rules"));

            Int32 initialRuleMappingId = 0;
            XmlElement elementMappings = null;

            foreach (var objectRule in lstObjectsRules)
            {
                if (initialRuleMappingId != objectRule.RuleMappingID)
                {
                    XmlElement elementRule = (XmlElement)elementRules.AppendChild(xmlRules.CreateElement("Rule"));
                    elementRule.AppendChild(xmlRules.CreateElement("Id")).InnerText = Convert.ToString(objectRule.RuleMappingID);
                    XmlElement elementObjectMapping = (XmlElement)elementRule.AppendChild(xmlRules.CreateElement("ObjectMapping"));
                    elementMappings = (XmlElement)elementObjectMapping.AppendChild(xmlRules.CreateElement("Mappings"));
                    initialRuleMappingId = objectRule.RuleMappingID;
                }

                XmlNode nodeRules = elementMappings.AppendChild(xmlRules.CreateElement("Mapping"));
                nodeRules.AppendChild(xmlRules.CreateElement("Key")).InnerText = objectRule.PlaceHolder;


                if (objectRule.IsRemoteAttribute.IsNotNull())
                {
                    if (objectRule.IsRemoteAttribute == AppConsts.NONE)
                    {
                        if (objectRule.RLMD_ConstantValue == AppConsts.SUBMISSION_DATE)
                            nodeRules.AppendChild(xmlRules.CreateElement("Value")).InnerText = DateTime.Now.ToString("MM/dd/yyyy");
                        else
                            nodeRules.AppendChild(xmlRules.CreateElement("Value")).InnerText = String.IsNullOrEmpty(Convert.ToString(objectRule.RLMD_ConstantValue)) ? GetObjectValueForDataEntry(lstApplicantData, Convert.ToInt32(objectRule.RLMD_ObjectID), Convert.ToInt32(objectRule.RLMD_ObjectTypeID)) : objectRule.RLMD_ConstantValue;

                    }
                    else if (objectRule.IsRemoteAttribute == AppConsts.ONE)
                    {
                        if (isDataEntryForm)
                            nodeRules.AppendChild(xmlRules.CreateElement("Value")).InnerText = GetRemoteAttributeValue(organizationUserId, compliancePackageId, objectRule.RuleMappingDetailID);
                        //else // Rules for verification details will be now fired separately
                        //  nodeRules.AppendChild(xmlRules.CreateElement("Value")).InnerText = String.IsNullOrEmpty(Convert.ToString(objectRule.RLMD_ConstantValue)) ? GetObjectValueForVerificationDetails(lstCompleteApplicantData, objectRule.ObjectHPath, Convert.ToInt32(objectRule.RLMD_ObjectID)) : objectRule.RLMD_ConstantValue;
                    }
                }
            }

            String resultXML = _dbContext.RuleEvaluatePreSubmitResults(xmlRules.OuterXml).FirstOrDefault();

            #endregion

            return EvaluateResultXML(resultXML);
        }

        public Dictionary<Int32, String> ValidateUIRulesVerificationDetail(List<ApplicantComplianceItemData> lstItemData, List<ApplicantComplianceAttributeData> lstAttributeData, Int32 packageSubscriptionId, Int32 compliancePackageId, Int32 complianceCategoryId, Int32 organizationUserId,
            List<lkpObjectType> lstObjectTypes, Int32 tenantId)
        {
            //Int32 _itemObjectTypeId = _dbContext.lkpObjectTypes.Where(ot => ot.OT_Code == ComplainceObjectType.Item && ot.OT_IsDeleted == false).FirstOrDefault().OT_ID;
            Int32 _itemObjectTypeId = lstObjectTypes.Where(ot => ot.OT_Code == ComplainceObjectType.Item && ot.OT_IsDeleted == false).FirstOrDefault().OT_ID;

            Int32 _catObjectTypeId = lstObjectTypes.Where(ot => ot.OT_Code == ComplainceObjectType.Category && ot.OT_IsDeleted == false).FirstOrDefault().OT_ID;
            List<GetObjectsRules> _lstRules = GetObjectRulesAllItems(lstItemData, lstAttributeData, compliancePackageId, complianceCategoryId, organizationUserId, lstObjectTypes);

            #region GENERATE XML OF APPLICANT INPUT VALUES & EXECUTE THE STORED PROCEDURE usp_Rule_EvaluatePreSubmitRules  AS PER THE RULE ID's

            XmlDocument xmlRules = new XmlDocument();
            XmlElement elementRules = (XmlElement)xmlRules.AppendChild(xmlRules.CreateElement("Rules"));

            Int32 initialRuleMappingId = 0;
            XmlElement elementMappings = null;

            foreach (var objectRule in _lstRules)
            {
                if (initialRuleMappingId != objectRule.RuleMappingID)
                {
                    XmlElement elementRule = (XmlElement)elementRules.AppendChild(xmlRules.CreateElement("Rule"));
                    elementRule.AppendChild(xmlRules.CreateElement("Id")).InnerText = Convert.ToString(objectRule.RuleMappingID);
                    XmlElement elementObjectMapping = (XmlElement)elementRule.AppendChild(xmlRules.CreateElement("ObjectMapping"));
                    elementMappings = (XmlElement)elementObjectMapping.AppendChild(xmlRules.CreateElement("Mappings"));
                    initialRuleMappingId = objectRule.RuleMappingID;
                }

                XmlNode nodeRules = elementMappings.AppendChild(xmlRules.CreateElement("Mapping"));
                nodeRules.AppendChild(xmlRules.CreateElement("Key")).InnerText = objectRule.PlaceHolder;

                if (objectRule.RLMD_ConstantValue == AppConsts.SUBMISSION_DATE)
                {
                    var itemUsedInRules = lstItemData.FirstOrDefault(cond => cond.ComplianceItemID == objectRule.RLMD_ObjectID);
                    nodeRules.AppendChild(xmlRules.CreateElement("Value")).InnerText = itemUsedInRules.IsNullOrEmpty() ? String.Empty : (itemUsedInRules.SubmissionDate.IsNullOrEmpty() ? DateTime.Now.ToString("MM/dd/yyyy") : String.Format("{0:MM/dd/yyyy}", itemUsedInRules.SubmissionDate));
                }
                else
                    nodeRules.AppendChild(xmlRules.CreateElement("Value")).InnerText = String.IsNullOrEmpty(Convert.ToString(objectRule.RLMD_ConstantValue))
                         ? GetAttributeValueVerificationDetails(lstAttributeData, objectRule.ObjectHPath, Convert.ToInt32(objectRule.RLMD_ObjectID),
                                                                 _itemObjectTypeId, _catObjectTypeId, compliancePackageId, complianceCategoryId,
                                                                 organizationUserId, objectRule.RuleMappingDetailID, objectRule.AttributeValue)

                        : objectRule.RLMD_ConstantValue;
            }

            String resultXML = _dbContext.RuleEvaluatePreSubmitResults(xmlRules.OuterXml).FirstOrDefault();

            #endregion

            Dictionary<Int32, String> _lstValidationMessages = EvaluateResultXMLVerificationDetails(resultXML);

            if (_lstValidationMessages.Count() > 0)
            {
                StoredProceduresRepository _spRepository = new StoredProceduresRepository(tenantId);
                DataSet _ds = _spRepository.GetRuleMappingDetailsByIds(_lstRules.Select(rules => rules.RuleMappingID).Distinct().ToList());

                List<RuleMappingDetailsData> _lstRuleMappingDetailsData = new List<RuleMappingDetailsData>();
                if (_ds.Tables[0].IsNotNull() && _ds.Tables[0].Rows.Count > 0)
                {
                    DataTable _dtData = _ds.Tables[0];
                    for (int i = 0; i < _dtData.Rows.Count; i++)
                    {
                        _lstRuleMappingDetailsData.Add(new RuleMappingDetailsData
                        {
                            RuleMappingId = Convert.ToInt32(_dtData.Rows[i]["RuleMappingId"]),
                            RuleSetId = Convert.ToInt32(_dtData.Rows[i]["RuleSetId"]),
                            AssignmentHierarchyId = Convert.ToInt32(_dtData.Rows[i]["AssignmentHierarchyId"]),
                            ObjectId = Convert.ToInt32(_dtData.Rows[i]["ObjectId"]),
                            ObjectTypeCode = Convert.ToString(_dtData.Rows[i]["ObjectTypeCode"]),
                            AssignementHierarchy = Convert.ToString(_dtData.Rows[i]["AssignementHierarchy"])
                        });
                    }
                }
                return MatchItemsByValidationMessages(_lstValidationMessages, _lstRuleMappingDetailsData, _itemObjectTypeId);
            }
            return new Dictionary<int, string>();
        }


        /// <summary>
        /// Validate the document add/remove from the Verification details screen
        /// </summary>
        public String ValidateUIDocuments(Int32 organizationUserId, Int32 compliancePackageId, List<ApplicantComplianceAttributeData> lstApplicantData, ApplicantComplianceItemData applicantItemData, Int32 complianceCategoryId, Int32 packageSubscriptionId,
            List<lkpObjectType> lstObjectTypes)
        {
            List<GetObjectsRules> lstObjectsRules = GetObjectRulesByApplicantData(organizationUserId, compliancePackageId, lstApplicantData, applicantItemData.ComplianceItemID, complianceCategoryId, lstObjectTypes);

            #region GENERATE XML OF APPLICANT INPUT VALUES & EXECUTE THE STORED PROCEDURE usp_Rule_EvaluatePreSubmitRules  AS PER THE RULE ID's

            XmlDocument xmlRules = new XmlDocument();
            XmlElement elementRules = (XmlElement)xmlRules.AppendChild(xmlRules.CreateElement("Rules"));

            Int32 initialRuleMappingId = 0;
            XmlElement elementMappings = null;

            foreach (var objectRule in lstObjectsRules)
            {
                if (initialRuleMappingId != objectRule.RuleMappingID)
                {
                    XmlElement elementRule = (XmlElement)elementRules.AppendChild(xmlRules.CreateElement("Rule"));
                    elementRule.AppendChild(xmlRules.CreateElement("Id")).InnerText = Convert.ToString(objectRule.RuleMappingID);
                    XmlElement elementObjectMapping = (XmlElement)elementRule.AppendChild(xmlRules.CreateElement("ObjectMapping"));
                    elementMappings = (XmlElement)elementObjectMapping.AppendChild(xmlRules.CreateElement("Mappings"));
                    initialRuleMappingId = objectRule.RuleMappingID;
                }

                XmlNode nodeRules = elementMappings.AppendChild(xmlRules.CreateElement("Mapping"));
                nodeRules.AppendChild(xmlRules.CreateElement("Key")).InnerText = objectRule.PlaceHolder;


                if (objectRule.IsRemoteAttribute.IsNotNull())
                {
                    if (objectRule.IsRemoteAttribute == AppConsts.NONE)
                        nodeRules.AppendChild(xmlRules.CreateElement("Value")).InnerText = String.IsNullOrEmpty(Convert.ToString(objectRule.RLMD_ConstantValue)) ? GetObjectValueForDataEntry(lstApplicantData, Convert.ToInt32(objectRule.RLMD_ObjectID), Convert.ToInt32(objectRule.RLMD_ObjectTypeID)) : objectRule.RLMD_ConstantValue;
                    else if (objectRule.IsRemoteAttribute == AppConsts.ONE)
                        nodeRules.AppendChild(xmlRules.CreateElement("Value")).InnerText = GetRemoteAttributeValue(organizationUserId, compliancePackageId, objectRule.RuleMappingDetailID);
                }
            }

            String resultXML = _dbContext.RuleEvaluatePreSubmitResults(xmlRules.OuterXml).FirstOrDefault();

            #endregion

            return EvaluateResultXML(resultXML);
        }

        private List<GetObjectsRules> GetObjectRulesAllItems(List<ApplicantComplianceItemData> lstItemData, List<ApplicantComplianceAttributeData> lstAttributeData,
            Int32 compliancePackageId, Int32 complianceCategoryId, Int32 organizationUserId, List<lkpObjectType> lstObjectTypes)
        {
            #region GENERATE XML OF APPLICANT DATA ENTRY FORM OBJECTS AND GET OBJECT RULES BY EXECUTING STORED PROCEDURE usp_Rule_GetObjectsRules

            XmlDocument xmlObjectsRules = new XmlDocument();
            XmlElement elementObjectRules = (XmlElement)xmlObjectsRules.AppendChild(xmlObjectsRules.CreateElement("RuleObjects"));
            XmlNode expPackageNode = elementObjectRules.AppendChild(xmlObjectsRules.CreateElement("RuleObject"));

            //added extra nodes for hierarchy for pacakge
            expPackageNode.AppendChild(xmlObjectsRules.CreateElement("TypeId")).InnerText = Convert.ToString(GetObjectTypeId(LCObjectType.CompliancePackage.GetStringValue(), lstObjectTypes));
            expPackageNode.AppendChild(xmlObjectsRules.CreateElement("Id")).InnerText = Convert.ToString(compliancePackageId);
            expPackageNode.AppendChild(xmlObjectsRules.CreateElement("ParentId")).InnerText = Convert.ToString(AppConsts.NONE);

            //added extra nodes for hierarchy for category
            XmlNode expCategoryNode = elementObjectRules.AppendChild(xmlObjectsRules.CreateElement("RuleObject"));
            expCategoryNode.AppendChild(xmlObjectsRules.CreateElement("TypeId")).InnerText = Convert.ToString(GetObjectTypeId(LCObjectType.ComplianceCategory.GetStringValue(), lstObjectTypes));
            expCategoryNode.AppendChild(xmlObjectsRules.CreateElement("Id")).InnerText = Convert.ToString(complianceCategoryId);
            expCategoryNode.AppendChild(xmlObjectsRules.CreateElement("ParentId")).InnerText = Convert.ToString(compliancePackageId);

            foreach (var itemData in lstItemData)
            {
                //If user attempted rejected status then UI rules not validating for that item - UAT-849: WB: Verification details screen should allow status change to rejected even if it violated UI rules
                if (itemData.AttemptedStatusCode != ApplicantItemComplianceStatus.Not_Approved.GetStringValue())
                {
                    XmlNode expItemNode = elementObjectRules.AppendChild(xmlObjectsRules.CreateElement("RuleObject"));
                    expItemNode.AppendChild(xmlObjectsRules.CreateElement("TypeId")).InnerText = Convert.ToString(GetObjectTypeId(LCObjectType.ComplianceItem.GetStringValue(), lstObjectTypes));
                    expItemNode.AppendChild(xmlObjectsRules.CreateElement("Id")).InnerText = Convert.ToString(itemData.ComplianceItemID);
                    expItemNode.AppendChild(xmlObjectsRules.CreateElement("ParentId")).InnerText = Convert.ToString(complianceCategoryId);

                    List<ApplicantComplianceAttributeData> _lstTempData = lstAttributeData.Where(attData => attData.ComplianceItemId == itemData.ComplianceItemID).ToList();

                    foreach (var attributeData in _lstTempData)
                    {
                        XmlNode exp = elementObjectRules.AppendChild(xmlObjectsRules.CreateElement("RuleObject"));
                        exp.AppendChild(xmlObjectsRules.CreateElement("TypeId")).InnerText = Convert.ToString(GetObjectTypeId(LCObjectType.ComplianceATR.GetStringValue(), lstObjectTypes));
                        exp.AppendChild(xmlObjectsRules.CreateElement("Id")).InnerText = Convert.ToString(attributeData.ComplianceAttributeID);
                        exp.AppendChild(xmlObjectsRules.CreateElement("ParentId")).InnerText = Convert.ToString(itemData.ComplianceItemID);
                    }
                }
            }

            Int32 _ruleTypeId = GetRuleTypeId(ComplianceRuleType.UIRules.GetStringValue());
            List<GetObjectsRules> lstObjectsRules = _dbContext.GetObjectsRules(organizationUserId, compliancePackageId, _ruleTypeId, Convert.ToString(xmlObjectsRules.OuterXml)).ToList();

            #endregion
            return lstObjectsRules;
        }

        private List<GetObjectsRules> GetObjectRulesByApplicantData(Int32 organizationUserId, Int32 compliancePackageId, List<ApplicantComplianceAttributeData> lstApplicantData, Int32 complianceItemId, Int32 complianceCategoryId,
             List<lkpObjectType> lstObjectTypes)
        {
            #region GENERATE XML OF APPLICANT DATA ENTRY FORM OBJECTS AND GET OBJECT RULES BY EXECUTING STORED PROCEDURE usp_Rule_GetObjectsRules

            XmlDocument xmlObjectsRules = new XmlDocument();
            XmlElement elementObjectRules = (XmlElement)xmlObjectsRules.AppendChild(xmlObjectsRules.CreateElement("RuleObjects"));
            XmlNode expPackageNode = elementObjectRules.AppendChild(xmlObjectsRules.CreateElement("RuleObject"));
            //added extra nodes for hierarchy for pacakge
            expPackageNode.AppendChild(xmlObjectsRules.CreateElement("TypeId")).InnerText = Convert.ToString(GetObjectTypeId(LCObjectType.CompliancePackage.GetStringValue(), lstObjectTypes));
            expPackageNode.AppendChild(xmlObjectsRules.CreateElement("Id")).InnerText = Convert.ToString(compliancePackageId);
            expPackageNode.AppendChild(xmlObjectsRules.CreateElement("ParentId")).InnerText = Convert.ToString(AppConsts.NONE);
            //added extra nodes for hierarchy for category
            XmlNode expCategoryNode = elementObjectRules.AppendChild(xmlObjectsRules.CreateElement("RuleObject"));
            expCategoryNode.AppendChild(xmlObjectsRules.CreateElement("TypeId")).InnerText = Convert.ToString(GetObjectTypeId(LCObjectType.ComplianceCategory.GetStringValue(), lstObjectTypes));
            expCategoryNode.AppendChild(xmlObjectsRules.CreateElement("Id")).InnerText = Convert.ToString(complianceCategoryId);
            expCategoryNode.AppendChild(xmlObjectsRules.CreateElement("ParentId")).InnerText = Convert.ToString(compliancePackageId);

            XmlNode expItemNode = elementObjectRules.AppendChild(xmlObjectsRules.CreateElement("RuleObject"));
            expItemNode.AppendChild(xmlObjectsRules.CreateElement("TypeId")).InnerText = Convert.ToString(GetObjectTypeId(LCObjectType.ComplianceItem.GetStringValue(), lstObjectTypes));
            expItemNode.AppendChild(xmlObjectsRules.CreateElement("Id")).InnerText = Convert.ToString(complianceItemId);
            expItemNode.AppendChild(xmlObjectsRules.CreateElement("ParentId")).InnerText = Convert.ToString(complianceCategoryId);
            foreach (var attribute in lstApplicantData)
            {
                XmlNode exp = elementObjectRules.AppendChild(xmlObjectsRules.CreateElement("RuleObject"));
                exp.AppendChild(xmlObjectsRules.CreateElement("TypeId")).InnerText = Convert.ToString(GetObjectTypeId(LCObjectType.ComplianceATR.GetStringValue(), lstObjectTypes));
                exp.AppendChild(xmlObjectsRules.CreateElement("Id")).InnerText = Convert.ToString(attribute.ComplianceAttributeID);
                exp.AppendChild(xmlObjectsRules.CreateElement("ParentId")).InnerText = Convert.ToString(complianceItemId);
            }

            Int32 _ruleTypeId = GetRuleTypeId(ComplianceRuleType.UIRules.GetStringValue());
            List<GetObjectsRules> lstObjectsRules = _dbContext.GetObjectsRules(organizationUserId, compliancePackageId, _ruleTypeId, Convert.ToString(xmlObjectsRules.OuterXml)).ToList();

            #endregion
            return lstObjectsRules;
        }

        private String GetRemoteAttributeValue(Int32 applicantId, Int32 packageId, Int32 mappingDetailId)
        {
            return _dbContext.GetObjectMappedValue(applicantId, packageId, mappingDetailId).FirstOrDefault() ?? String.Empty;
        }

        /// <summary>
        /// Get Recent ApplicantHierarchyMapping of an applicant.
        /// </summary>
        /// <param name="applicantID">applicantID</param>
        /// <returns>ApplicantHierarchyMapping</returns>
        public ApplicantHierarchyMapping GetRecentApplicantHierarchyMappingForApplicant(Int32 applicantID)
        {
            return _dbContext.ApplicantHierarchyMappings.Where(x => x.AHM_OrganizationUserID == applicantID && x.AHM_IsDeleted == false).OrderByDescending(x => x.AHM_CreatedOn).FirstOrDefault();
        }

        /// <summary>
        /// Get attribute values for the Items for which Rule is defined with current item being processed
        /// </summary>
        /// <returns>Attribute Value for the item under particular category and subscription</returns>
        private String GetAttributeValue(Int32 packageSubscriptionId, Int32 categoryId, Int32 itemId, Int32 attributeId)
        {
            ApplicantComplianceCategoryData _categoryData = _dbContext.ApplicantComplianceCategoryDatas
                .Where(acd => acd.PackageSubscriptionID == packageSubscriptionId
                       && acd.ComplianceCategoryID == categoryId
                       && acd.IsDeleted == false)
                       .FirstOrDefault();

            if (_categoryData.IsNullOrEmpty())
                return String.Empty;

            ApplicantComplianceItemData _itemData = _categoryData.ApplicantComplianceItemDatas
                .Where(aid => aid.ApplicantComplianceCategoryID == _categoryData.ApplicantComplianceCategoryID
                       && aid.ComplianceItemID == itemId
                       && aid.IsDeleted == false)
                       .FirstOrDefault();

            if (_itemData.IsNullOrEmpty())
                return String.Empty;

            ApplicantComplianceAttributeData _attributeData = _itemData.ApplicantComplianceAttributeDatas
                .Where(aad => aad.ApplicantComplianceItemID == _itemData.ApplicantComplianceItemID
                       && aad.ComplianceAttributeID == attributeId
                       && aad.IsDeleted == false)
                       .FirstOrDefault();

            return _attributeData.IsNullOrEmpty() ? String.Empty : _attributeData.AttributeValue;
        }

        private String EvaluateResultXML(String resultXML)
        {
            XmlDocument xml = new XmlDocument();
            xml.LoadXml(resultXML);
            XmlNodeList nodeList = xml.SelectNodes("Results/Result");
            StringBuilder sbErrors = new StringBuilder();

            Int32 _errorCount = 0;

            foreach (XmlNode xmlNode in nodeList)
            {
                if (xmlNode.IsNotNull())
                {
                    Boolean result;
                    Boolean.TryParse(xmlNode["Result"].InnerText, out result);

                    String nodeResultText = xmlNode["Result"].InnerText;
                    UIValidationResultType enumType = nodeResultText.ParseEnumbyCode<UIValidationResultType>();

                    //if (!result && !xmlNode["Result"].InnerText.ToLower().Contains("error"))
                    //{
                    //    sbErrors.Append(xmlNode["ErrorMessage"].InnerText + "<br />");
                    //}
                    if (enumType == UIValidationResultType.False)
                    {
                        sbErrors.Append(xmlNode["ErrorMessage"].InnerText + "<br />");
                    }
                    else if (enumType == UIValidationResultType.Error)
                    {
                        _errorCount++;
                    }
                }
            }
            if (_errorCount > 0)
                return Convert.ToString(sbErrors.Append(String.Format("<br /> Some error(s) has occured and {0} rule(s) could not be validated. Please make sure that you have entered valid data.", _errorCount)));
            else
                return Convert.ToString(sbErrors);
        }

        private Dictionary<Int32, String> EvaluateResultXMLVerificationDetails(String resultXML)
        {
            Dictionary<Int32, String> _dicErrors = new Dictionary<Int32, String>();
            XmlDocument xml = new XmlDocument();
            xml.LoadXml(resultXML);
            XmlNode _resultsNode = xml.SelectSingleNode("Results"); // Main Results Tag
            StringBuilder sbErrors = new StringBuilder();

            if (_resultsNode.IsNotNull())
            {
                XmlNodeList _resultNodeList = _resultsNode.SelectNodes("Result"); // LIST of Result Tags in main Tag
                foreach (XmlNode node in _resultNodeList)
                {
                    Int32 _ruleMappingId = Convert.ToInt32(node.SelectSingleNode("RuleMappingID").InnerText);
                    String _validationResult = node.SelectSingleNode("Result").InnerText;// Result Tag for CURRENT tag being iterated

                    UIValidationResultType enumType = _validationResult.ParseEnumbyCode<UIValidationResultType>();

                    if (enumType == UIValidationResultType.False)
                    {
                        _dicErrors.Add(_ruleMappingId, node.SelectSingleNode("ErrorMessage").InnerText);
                    }
                    else if (enumType == UIValidationResultType.Error)
                    {
                        _dicErrors.Add(_ruleMappingId, "An error occured while processing the item results.");
                    }
                }
            }
            return _dicErrors;
        }

        /// <summary>
        /// Based on RuleMappingId, ItemIds and Object hierarchy, match the items and their Validation messages
        /// </summary>
        /// <param name="validationErrors"></param>
        /// <param name="lstRules"></param>
        /// <param name="itemObjectTypeId"></param>
        /// <returns></returns>
        //private Dictionary<Int32, String> MatchItemsByValidationMessages(Dictionary<Int32, String> validationMessages, List<GetObjectsRules> lstRules, Int32 itemObjectTypeId)
        private Dictionary<Int32, String> MatchItemsByValidationMessages(Dictionary<Int32, String> validationMessages, List<RuleMappingDetailsData> lstRuleMappingDetailsData, Int32 itemObjectTypeId)
        {
            Dictionary<Int32, String> _dicValidationMessages = new Dictionary<Int32, String>();
            foreach (var validationMessage in validationMessages)
            {
                String _objectHPath = lstRuleMappingDetailsData.Where(rmd => rmd.RuleMappingId == validationMessage.Key)
                                              .FirstOrDefault().AssignementHierarchy;
                try
                {

                    var tempData = _dbContext.GetSubPathFromHierarchyPath(_objectHPath, itemObjectTypeId).FirstOrDefault();
                    if (tempData.IsNotNull())
                    {
                        Int32 _itemId = tempData.ObjectID;


                        if (_dicValidationMessages.ContainsKey(_itemId))
                        {
                            String _value = _dicValidationMessages.GetValue(_itemId);
                            _dicValidationMessages[_itemId] = _value + " <br /> " + validationMessage.Value;
                        }
                        else
                            _dicValidationMessages.Add(_itemId, validationMessage.Value);
                    }
                }
                catch (SysXException ex)
                {
                    String exceptionMessage = SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace + Environment.NewLine + String.Format("An Error has occured on getting sub path from hierarchy path for the following object Path : {0}, and itemObjectTypeId: {1}", _objectHPath, itemObjectTypeId.ToString());
                    DALUtils.LoggerService.GetLogger().Error(exceptionMessage);
                    throw ex;
                }
                catch (Exception ex)
                {
                    String exceptionMessage = SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace + Environment.NewLine + String.Format("An Error has occured on getting sub path from hierarchy path for the following object Path : {0}, and itemObjectTypeId: {1}", _objectHPath, itemObjectTypeId.ToString());
                    DALUtils.LoggerService.GetLogger().Error(exceptionMessage);
                    throw ex;
                }

            }

            return _dicValidationMessages;
        }

        public Int32 AddPackageSubscriptions(PackageSubscription packageSubscription)
        {
            if (!_dbContext.PackageSubscriptions.Any(x => x.OrderID == packageSubscription.OrderID && !x.IsDeleted))
            {
                _dbContext.PackageSubscriptions.AddObject(packageSubscription);
                _dbContext.SaveChanges();
            }
            return packageSubscription.PackageSubscriptionID;
            //return true;
        }

        /// <summary>
        /// To create optional category entry in ApplicantComplianceCategoryData table
        /// </summary>
        /// <param name="packageSubscriptionIdsXML"></param>
        /// <param name="currentUserId"></param>
        public void CreateOptionalCategoryEntry(String packageSubscriptionIdsXML, Int32 currentUserId)
        {
            EntityConnection connection = _dbContext.Connection as EntityConnection;

            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand command = new SqlCommand("usp_CreateOptionalCategoryEntry", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@PackageSubscriptionIDs", packageSubscriptionIdsXML);
                command.Parameters.AddWithValue("@SystemUserID", currentUserId);
                if (con.State == ConnectionState.Closed)
                    con.Open();

                command.ExecuteNonQuery();
                con.Close();
            }
        }

        private Int32 GetApplicantComplianceCategoryId(Int32 packageSubscriptionId, Int32 complianceCategoryId, Int32 currentUserId)
        {
            return _dbContext.PackageSubscriptions
                .Where(ps => ps.PackageSubscriptionID == packageSubscriptionId && ps.OrganizationUserID == currentUserId && !ps.IsDeleted)
                .Join(_dbContext.ApplicantComplianceCategoryDatas, ps => ps.PackageSubscriptionID, acd => acd.PackageSubscriptionID, (ps, acd) => new { ApplicantComplianceCategoryId = acd.ApplicantComplianceCategoryID, CategoryId = acd.ComplianceCategoryID, IsACDDeleted = acd.IsDeleted })
                .Where(acd => acd.CategoryId == complianceCategoryId && !acd.IsACDDeleted)
                .Select(id => id.ApplicantComplianceCategoryId).FirstOrDefault();
        }

        private Int32 GetReviewStatusByCode(String itemReviewCode)
        {
            return _dbContext.lkpItemComplianceStatus.Where(cmpStatus => cmpStatus.Code.ToLower() == itemReviewCode.ToLower() && !cmpStatus.IsDeleted).FirstOrDefault().ItemComplianceStatusID;
        }

        private Int32 GetItemMovementTypeByCode(String itemMovementTypeCode, List<lkpItemMovementType> lstItemMovementTypes)
        {
            //return _dbContext.lkpItemMovementTypes.Where(mType => mType.Code.ToLower() ==
            //    itemMovementTypeCode.ToLower() && !mType.IsDeleted).FirstOrDefault().ItemMovementTypeID;
            return lstItemMovementTypes.Where(mType => mType.Code.ToLower() ==
            itemMovementTypeCode.ToLower() && !mType.IsDeleted).FirstOrDefault().ItemMovementTypeID;
        }

        private Int16? GetArchiveStateIDByCode(ArchiveState archiveState)
        {
            String archiveStateCode = archiveState.GetStringValue();
            lkpArchiveState lkpArchiveState = _dbContext.lkpArchiveStates.FirstOrDefault(x => x.AS_Code == archiveStateCode && x.AS_IsDeleted == false);

            if (lkpArchiveState.IsNotNull())
            {
                return lkpArchiveState.AS_ID;
            }
            return null;
        }

        #region Uploaded Documents

        public Int32 GetApplicantIdForSubscription(Int32 subscriptionId)
        {
            var _packageSubscription = _dbContext.PackageSubscriptions.FirstOrDefault(x => x.PackageSubscriptionID == subscriptionId);
            if (_packageSubscription.IsNotNull())
                return Convert.ToInt32(_packageSubscription.OrganizationUserID);
            return 0;
        }


        public List<ApplicantDocuments> GetApplicantDocumentsData(Int32 organizationUserID)
        {
            List<ApplicantDocuments> documents = new List<ApplicantDocuments>();
            List<GetAllDocumentsRelatedToUser_Result> documentDetails = _dbContext.GetAllDocumentsRelatedToUser(organizationUserID).ToList();
            if (documentDetails.IsNotNull())
            {
                foreach (var a in documentDetails)
                {
                    documents.Add(new ApplicantDocuments(String.Empty, String.Empty, a.ApplicantDocumentID, a.DocumentSize, a.ItemId, a.SubscriptionId, a.CategoryId
                        , a.ApplicantDocumentMergingID
                        , a.UnifiedDocumentStartPageID, a.UnifiedDocumentEndPageID, a.UnifiedPdfDocumentID
                        , a.UnifiedPdfFileName, a.UnifiedPdfDocPath, a.UnifiedDocumentStatusID, a.DocumentType
                        , a.ApplicantDocumentMergingStatusID, a.ComplianceItemID, a.DocumentFileName, a.IsViewDocType, a.DocumentDescription));
                }
            }
            return documents;
        }

        public List<ApplicantDocument> GetApplicantDocuments(Int32 organizationUserID)
        {
            return _dbContext.ApplicantDocuments.Where(ad => ad.OrganizationUserID == organizationUserID && !ad.IsDeleted).OrderByDescending(ad => ad.ApplicantDocumentID).ToList();
        }

        public ApplicantDocument GetApplicantDocument(Int32 applicantDocumentId)
        {
            return _dbContext.ApplicantDocuments.FirstOrDefault(ad => ad.ApplicantDocumentID == applicantDocumentId && !ad.IsDeleted);
        }

        public ApplicantDocument GetFailedUnifiedApplicantDocument(Int32 applicantDocumentId)
        {
            var mergingCompletedStatus = LKPDocumentStatus.MergingCompleted.GetStringValue();
            var applicantDocumentMerging = _dbContext.ApplicantDocumentMergings.FirstOrDefault(x => x.ADM_ApplicantDocumentID == applicantDocumentId
                                            && x.lkpDocumentStatu.DMS_Code != mergingCompletedStatus && x.ADM_IsDeleted == false);
            if (applicantDocumentMerging.IsNotNull())
            {
                return _dbContext.ApplicantDocuments.FirstOrDefault(ad => ad.ApplicantDocumentID == applicantDocumentId && !ad.IsDeleted);
            }
            return null;
        }

        public ApplicantDocument GetApplicantUploadedDocument(Int32 applicantUploadedDocumentID)
        {
            return _dbContext.ApplicantDocuments.FirstOrDefault(x => x.ApplicantDocumentID == applicantUploadedDocumentID);
        }

        public Boolean AddApplicantUploadedDocuments(List<ApplicantDocument> lstApplicantUploadedDocument)
        {
            foreach (ApplicantDocument applicantUploadedDocument in lstApplicantUploadedDocument)
            {
                applicantUploadedDocument.Code = Guid.NewGuid();
                _dbContext.ApplicantDocuments.AddObject(applicantUploadedDocument);
            }
            _dbContext.SaveChanges();
            return true;
        }

        /// <summary>
        /// Need to get the id of added document
        /// </summary>
        /// <param name="applicantDocument"></param>
        /// <returns></returns>
        public Int32 AddApplicantDocument(ApplicantDocument applicantDocument)
        {
            if (applicantDocument != null)
            {
                applicantDocument.Code = Guid.NewGuid();
                _dbContext.ApplicantDocuments.AddObject(applicantDocument);
            }
            _dbContext.SaveChanges();

            return applicantDocument.ApplicantDocumentID;


        }

        public ApplicantDocument UpdateApplicantUploadedDocument(ApplicantDocument applicantUploadedDocument)
        {
            ApplicantDocument uploadedDocument = GetApplicantUploadedDocument(applicantUploadedDocument.ApplicantDocumentID);
            if (uploadedDocument != null)
            {
                uploadedDocument.Description = applicantUploadedDocument.Description;
                uploadedDocument.ModifiedByID = applicantUploadedDocument.ModifiedByID;
                uploadedDocument.ModifiedOn = applicantUploadedDocument.ModifiedOn;
                //UAT-2296
                if (!applicantUploadedDocument.DocItemAssociationForDataEntries.IsNullOrEmpty() && applicantUploadedDocument.DocItemAssociationForDataEntries.Count > 0
                    && (uploadedDocument.lkpDataEntryDocumentStatu.IsNullOrEmpty() || String.Compare(uploadedDocument.lkpDataEntryDocumentStatu.LDEDS_Code, DataEntryDocumentStatus.NEW.GetStringValue(), true) != AppConsts.NONE))
                {
                    uploadedDocument.DataEntryDocumentStatusID = applicantUploadedDocument.DataEntryDocumentStatusID; //UAT-2296
                }
            }
            _dbContext.SaveChanges();

            //UAT-2296 For schools where the document association at time of upload is turned on,
            //edit document on manage documents screen should allow additional items/exceptions to be added to uploaded documents
            if (!applicantUploadedDocument.DocItemAssociationForDataEntries.IsNullOrEmpty() && applicantUploadedDocument.DocItemAssociationForDataEntries.Count > 0)
            {
                foreach (DocItemAssociationForDataEntry Record in applicantUploadedDocument.DocItemAssociationForDataEntries)
                {
                    DocItemAssociationForDataEntry newRecord = new DocItemAssociationForDataEntry();
                    newRecord.DAFD_ApplicantDocumentId = Record.DAFD_ApplicantDocumentId;
                    newRecord.DAFD_ComplianceCategoryId = Record.DAFD_ComplianceCategoryId;
                    newRecord.DAFD_ComplianceItemId = Record.DAFD_ComplianceItemId;
                    newRecord.DAFD_CreatedById = Record.DAFD_CreatedById;
                    newRecord.DAFD_CreatedOn = Record.DAFD_CreatedOn;
                    newRecord.DAFD_IsDeleted = Record.DAFD_IsDeleted;
                    newRecord.DAFD_MappingType = Record.DAFD_MappingType;
                    _dbContext.DocItemAssociationForDataEntries.AddObject(newRecord);
                }
                _dbContext.SaveChanges();
            }

            return uploadedDocument;
        }

        public ApplicantDocument DeleteApplicantUploadedDocument(Int32 applicantUploadedDocumentID, Int32 currentUserID, Int32? applicantID = null)
        {
            ApplicantDocument uploadedDocument = GetApplicantUploadedDocument(applicantUploadedDocumentID);
            if (uploadedDocument != null)
            {
                uploadedDocument.IsDeleted = true;
                uploadedDocument.ModifiedByID = (applicantID.IsNullOrEmpty() ? currentUserID : applicantID.Value);
                uploadedDocument.ModifiedOn = DateTime.Now;
            }
            _dbContext.SaveChanges();
            return uploadedDocument;

        }

        /// <summary>
        /// Check if the document with the same name and same size is already uploaded by applicant, in data entry
        /// </summary>
        /// <param name="documentName"></param>
        /// <param name="documentSize"></param>
        /// <param name="organizationUserId"></param>
        /// <returns></returns>
        public Boolean IsDocumentAlreadyUploaded(String documentName, Int32 documentSize, Int32 organizationUserId, List<lkpDocumentType> docType, Boolean isPersonalDoc)
        {
            //UAT-2244
            Int32 reqUploadDocTypeID = docType.Where(cond => cond.DMT_Code.Equals(DocumentType.REQUIREMENT_FIELD_UPLOAD_DOCUMENT.GetStringValue())).Select(sel => sel.DMT_ID).FirstOrDefault();
            Int32 personalDocTypeID = docType.Where(cond => cond.DMT_Code.Equals(DocumentType.PERSONAL_DOCUMENT.GetStringValue())).Select(sel => sel.DMT_ID).FirstOrDefault();

            /*
                                1) once a document is uplaoded into personal documents, it can not be uploaded again to personal documents.
                                2) once a document is uploaded in personal documents, it can still be uploaded in compliance documents
                                3) once a document is uploaded in personal documents, it can still be uploaded in rotation documents.
                                4) Once a document is uploaded into rotation documents, it can still be uploaded into personal dcouments.
                                4) Once a document is uploaded into compliance documents, it can still be uploaded into personal dcouments.
                */
            return _dbContext.ApplicantDocuments
                .Where(doc => doc.FileName.ToLower().Trim() == documentName.ToLower().Trim()
                    && doc.OriginalDocSize == documentSize
                    && doc.OrganizationUserID == organizationUserId
                    && ((isPersonalDoc && doc.DocumentType == personalDocTypeID)
                    || (!isPersonalDoc && (doc.DocumentType == null || (doc.DocumentType != reqUploadDocTypeID && doc.DocumentType != personalDocTypeID))))
                    && doc.IsDeleted == false).Any();
        }

        List<UploadDocumentContract> IComplianceDataRepository.GetsubscriptionItems(Int32 organizationUserID)
        {
            List<UploadDocumentContract> lstItems = new List<UploadDocumentContract>();
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {

                SqlCommand command = new SqlCommand("usp_GetItemLstToBeAssociatedWithDoc", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@OrganizationUserId", organizationUserID);

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        UploadDocumentContract item = new UploadDocumentContract();
                        item.CategoryItemsID = Convert.ToString(Convert.ToString(ds.Tables[0].Rows[i]["CategoryID"]) + '_' + Convert.ToString(ds.Tables[0].Rows[i]["ItemID"]));
                        item.ItemsID = Convert.ToString(ds.Tables[0].Rows[i]["ItemID"]).IsNullOrEmpty() ? String.Empty : Convert.ToString(ds.Tables[0].Rows[i]["ItemID"]);
                        item.ItemsName = Convert.ToString(ds.Tables[0].Rows[i]["ItemName"]).IsNullOrEmpty() ? String.Empty : Convert.ToString(ds.Tables[0].Rows[i]["ItemName"]);
                        item.CategoryId = Convert.ToString(ds.Tables[0].Rows[i]["CategoryID"]).IsNullOrEmpty() ? String.Empty : Convert.ToString(ds.Tables[0].Rows[i]["CategoryID"]);
                        lstItems.Add(item);
                    }
                }
            }
            return lstItems;
        }


        #endregion

        private String GetAttributeTypeCode(Int32 attributeId)
        {
            return _dbContext.ComplianceAttributes.Where(attr => attr.ComplianceAttributeID == attributeId).FirstOrDefault().lkpComplianceAttributeDatatype.Code.ToLower().Trim();
        }

        private String GetApplicantAttributeDataTypeCode(Int32 attributeId)
        {
            return _dbContext.ApplicantComplianceAttributeDatas
                .Where(attrData => attrData.ApplicantComplianceAttributeID == attributeId && !attrData.IsDeleted).FirstOrDefault()
                .ComplianceAttribute.lkpComplianceAttributeDatatype.Code.ToLower().Trim();
        }

        private Int32 GetAttributeTypeId(Int32 attributeId)
        {
            return _dbContext.ComplianceAttributes.Where(attr => attr.ComplianceAttributeID == attributeId).FirstOrDefault().lkpComplianceAttributeDatatype.ComplianceAttributeDatatypeID;
        }

        private Int32 GetRuleTypeId(String ruleTypeCode)
        {
            return _dbContext.lkpRuleTypes.Where(rType => rType.RLT_Code.ToLower().Trim() == ruleTypeCode.ToLower().Trim()).FirstOrDefault().RLT_ID;
        }

        private Int32 GetObjectTypeId(String objectTypeCode, List<lkpObjectType> lstObjectTypes)
        {
            return lstObjectTypes.Where(oType => oType.OT_Code.ToLower() == objectTypeCode.ToLower()).FirstOrDefault().OT_ID;
            //   return _dbContext.lkpObjectTypes.Where(oType => oType.OT_Code.ToLower() == objectTypeCode.ToLower()).FirstOrDefault().OT_ID;
        }

        private String GetAttributeValueVerificationDetails(List<ApplicantComplianceAttributeData> lstCompleteData, String objectHPath, Int32 objectId,
                                                                        Int32 itemObjectTypeId, Int32 catObjectTypeId, Int32 compliancePackageId
                                                                        , Int32 complianceCategoryId, Int32 organizationUserId, Int32 ruleMappingDetailID, String AttributeValue)
        {
            Int32 _itemId = _dbContext.GetSubPathFromHierarchyPath(objectHPath, itemObjectTypeId).FirstOrDefault().ObjectID;
            Int32 _ruleObjectCategoryId = _dbContext.GetSubPathFromHierarchyPath(objectHPath, catObjectTypeId).FirstOrDefault().ObjectID;
            ApplicantComplianceAttributeData applicantData =
                lstCompleteData
                .Where(data => data.ComplianceAttributeID == objectId
                && data.ComplianceItemId == _itemId).FirstOrDefault();

            if (applicantData.IsNotNull())
                return applicantData.AttributeValue;
            else if (complianceCategoryId == _ruleObjectCategoryId)
                return AttributeValue;
            else if (complianceCategoryId != _ruleObjectCategoryId)
                return GetRemoteAttributeValue(organizationUserId, compliancePackageId, ruleMappingDetailID);
            else
                return String.Empty;
        }

        private String GetObjectValueForDataEntry(List<ApplicantComplianceAttributeData> lstApplicantData, Int32 objectId, Int32 objectTypeId)
        {
            ApplicantComplianceAttributeData applciantData = lstApplicantData.Where(data => data.ComplianceAttributeID == objectId).FirstOrDefault();

            if (applciantData.IsNotNull())
            {
                //if (applciantData.AttributeTypeCode == ComplianceAttributeDatatypes.View_Document.GetStringValue() && applciantData.AttributeValue != AppConsts.ZERO)
                //{
                //    return AppConsts.ONE.ToString();
                //}
                return applciantData.AttributeValue;

            }
            else
                return String.Empty;
        }

        #region ApplicantComplianceItemData for Verification

        /// <summary>
        /// To get Compliance Item data submitted by applicant
        /// </summary>
        /// <param name="applicantComplianceItemID"></param>
        /// <returns></returns>
        public ApplicantComplianceItemData GetApplicantComplianceItemData(Int32 applicantComplianceItemID)
        {
            Guid wholeCatGUID = new Guid(AppConsts.WHOLE_CATEGORY_GUID);
            return _dbContext.ApplicantComplianceItemDatas.Include("ComplianceItem").FirstOrDefault(x => x.ApplicantComplianceItemID == applicantComplianceItemID &&
                (x.IsDeleted == false || x.ComplianceItem.Code == wholeCatGUID));
        }

        public Boolean UpdateApplicantComplianceDocumentMaps(List<ApplicantComplianceDocumentMap> toAddDocumentMap, List<Int32> toDeleteApplicantComplianceDocumentMapIDs, Int32 currentUserId)
        {

            if (toAddDocumentMap != null && toAddDocumentMap.Count > 0)
            {
                foreach (ApplicantComplianceDocumentMap documentMap in toAddDocumentMap)
                    _dbContext.ApplicantComplianceDocumentMaps.AddObject(documentMap);
            }

            if (toDeleteApplicantComplianceDocumentMapIDs != null && toDeleteApplicantComplianceDocumentMapIDs.Count > 0)
            {
                foreach (Int32 applicantComplianceDocumentMapID in toDeleteApplicantComplianceDocumentMapIDs)
                {
                    ApplicantComplianceDocumentMap applicantComplianceDocumentMapInDb =
                    _dbContext.ApplicantComplianceDocumentMaps.FirstOrDefault(x => x.ApplicantComplianceDocumentMapID == applicantComplianceDocumentMapID);
                    if (applicantComplianceDocumentMapInDb != null)
                    {
                        applicantComplianceDocumentMapInDb.IsDeleted = true;
                        applicantComplianceDocumentMapInDb.ModifiedByID = currentUserId;
                        applicantComplianceDocumentMapInDb.ModifiedOn = DateTime.Now;

                    }
                }
            }
            _dbContext.SaveChanges();

            return true;
        }

        /// <summary>
        /// Get the UserDetails by OrganizationUserId
        /// </summary>
        /// <param name="orgUserId"></param>
        /// <returns></returns>
        usp_GetUserDetails_Result IComplianceDataRepository.GetUserData(Int32 orgUserId)
        {
            return _dbContext.GetUserDetails(Convert.ToInt32(orgUserId)).First();
        }

        /// <summary>
        /// Save/Update Applicant data from Data Entry screen
        /// </summary>
        public ComplianceSaveResponse SaveApplicantData(ApplicantComplianceCategoryData applicantCategoryData, ApplicantComplianceItemData applicantItemData,
            List<ApplicantComplianceAttributeData> lstApplicantData, Int32 createdModifiedById, Dictionary<Int32, Int32> attributeDocuments,
            String categoryComplianceStatus, Int32 compliancePackageId, Boolean isUIValidationApplicable, AssignmentProperty assignmentProperty,
            Int32 packageSubscriptionId, List<lkpItemMovementType> lstItemMovementTypes, List<lkpObjectType> lstObjectTypes, Boolean isDataEntryForm
            , Dictionary<Int32, Int32> viewAttributeDocuments, Int32 orgUsrID, Int32 tenantID)
        {
            DALUtils.LoggerService.GetLogger().Info("Checking Duplicate Entry Log");
            String _errors = String.Empty;
            ComplianceSaveResponse complianceSaveResponse = new ComplianceSaveResponse();
            if (isUIValidationApplicable)
                _errors = ValidateUIInput(createdModifiedById, compliancePackageId, lstApplicantData, applicantItemData.ComplianceItemID, applicantCategoryData.ComplianceCategoryID, packageSubscriptionId, isDataEntryForm, lstObjectTypes);

            if (!String.IsNullOrEmpty(_errors))
            {
                complianceSaveResponse.UIValidationErrors = _errors;
                complianceSaveResponse.StatusCode = String.Empty;
                complianceSaveResponse.StatusId = null;
                return complianceSaveResponse;
            }
            else
            {
                // Get the Applicant Compliance Category Id to check if the category is already added or not. If added, then add the new item under this category. Used in both Add/Update
                Int32 _applicantComplianceCategoryInitialId = applicantCategoryData.ApplicantComplianceCategoryID = GetApplicantComplianceCategoryId(applicantCategoryData.PackageSubscriptionID, applicantCategoryData.ComplianceCategoryID, createdModifiedById);
                Int32 _categoryComplianceStatusId = _dbContext.lkpCategoryComplianceStatus.Where(catStatus => catStatus.Code.ToLower().Trim() == categoryComplianceStatus.ToLower().Trim()).FirstOrDefault().CategoryComplianceStatusID;

                Int16? _reviewerTypeId = 0;
                Int32 _itemComplianceStatusId;
                String _newItemComplianceStatusCode = String.Empty;
                Boolean _isAdminReviewRequired = false; 
         

                if (Convert.ToBoolean(assignmentProperty.ApprovalRequired))
                {
                    var adminReviewer = assignmentProperty.AssignmentPropertiesReviewers.Where(revType => !revType.IsDeleted).FirstOrDefault(revType => revType.lkpReviewerType.Code.ToLower() == LkpReviewerType.Admin.ToLower() && !revType.IsDeleted);
                    if (adminReviewer.IsNotNull())
                    {
                        _newItemComplianceStatusCode = ApplicantItemComplianceStatus.Pending_Review.GetStringValue();
                        _itemComplianceStatusId = GetReviewStatusByCode(_newItemComplianceStatusCode);
                        _isAdminReviewRequired = true;
                        _reviewerTypeId = adminReviewer.ReviewerTypeID;
                    }
                    else
                    {
                        _newItemComplianceStatusCode = ApplicantItemComplianceStatus.Pending_Review_For_Client.GetStringValue();
                        _itemComplianceStatusId = GetReviewStatusByCode(_newItemComplianceStatusCode);
                        _isAdminReviewRequired = false;
                        _reviewerTypeId = assignmentProperty.AssignmentPropertiesReviewers.Where(revType => !revType.IsDeleted).FirstOrDefault().ReviewerTypeID;
                    }
                }
                else
                    _itemComplianceStatusId = GetReviewStatusByCode(ApplicantItemComplianceStatus.Incomplete.GetStringValue());

                Int32? itemReviewerCount = null;
                if (_newItemComplianceStatusCode == ApplicantItemComplianceStatus.Pending_Review.GetStringValue())
                {
                    //UAT-1712 //call for reconciliation
                    ItemReconciliationAvailiblityContract reconciliationAvailablity = GetItemReconciliationAvailiblityStatus(tenantID
                                                                                                            , applicantItemData.ComplianceItemID.ToString()
                                                                                                            , packageSubscriptionId).FirstOrDefault();
                    if (reconciliationAvailablity.IsSelected)
                    {
                        itemReviewerCount = reconciliationAvailablity.ReviewerCount;
                    }
                }

                DateTime creationModificationDateTime = DateTime.Now;

                if (applicantCategoryData.ApplicantComplianceCategoryID > 0)
                {
                    #region UPDATE DATA

                    ApplicantComplianceCategoryData applicantCategoryDataToUpdate = _dbContext.ApplicantComplianceCategoryDatas.
                               Where(catData => catData.ApplicantComplianceCategoryID == applicantCategoryData.ApplicantComplianceCategoryID).FirstOrDefault();

                    applicantCategoryDataToUpdate.ModifiedByID = orgUsrID;
                    applicantCategoryDataToUpdate.ModifiedOn = creationModificationDateTime;

                    if (applicantItemData.ApplicantComplianceItemID > 0)
                    {

                        ApplicantComplianceItemData applicantComplianceItemDataToUpdate = _dbContext.ApplicantComplianceItemDatas.
                        Where(itemData => itemData.ApplicantComplianceItemID == applicantItemData.ApplicantComplianceItemID).FirstOrDefault();
                        String itemStatuscode = applicantComplianceItemDataToUpdate.lkpItemComplianceStatu.Code;
                        applicantComplianceItemDataToUpdate.ModifiedByID = orgUsrID;
                        applicantComplianceItemDataToUpdate.ModifiedOn = creationModificationDateTime;
                        applicantComplianceItemDataToUpdate.Notes = applicantItemData.Notes;
                        applicantComplianceItemDataToUpdate.StatusID = _itemComplianceStatusId;
                        applicantComplianceItemDataToUpdate.IsUiRulesViolate = applicantItemData.IsUiRulesViolate;
                        //UAT-1712 : Update Reviewer Count
                        applicantComplianceItemDataToUpdate.ReconciliationReviewCount = itemReviewerCount;

                        if (_newItemComplianceStatusCode != itemStatuscode)
                        {
                            if (Convert.ToBoolean(assignmentProperty.ApprovalRequired))
                                applicantComplianceItemDataToUpdate.ItemMovementTypeID = GetItemMovementTypeId(itemStatuscode, ComplianceScreenModes.DATAENTRY, _isAdminReviewRequired, lstItemMovementTypes);
                        }

                        applicantComplianceItemDataToUpdate.ReviewerTypeID = _reviewerTypeId == 0 ? null : _reviewerTypeId;
                        //UAT_5234 Start
                        if (!Convert.ToBoolean(assignmentProperty.ApprovalRequired)) {
                            applicantComplianceItemDataToUpdate.IsReviewerTypeAdmin = false;
                            applicantComplianceItemDataToUpdate.IsReviewerTypeClientAdmin = false;                          
                        }             
                        else if (_isAdminReviewRequired)
                        {
                            applicantComplianceItemDataToUpdate.IsReviewerTypeAdmin = true;
                            applicantComplianceItemDataToUpdate.IsReviewerTypeClientAdmin = false;
                        }
                        else {
                            applicantComplianceItemDataToUpdate.IsReviewerTypeAdmin = false;
                            applicantComplianceItemDataToUpdate.IsReviewerTypeClientAdmin = true;
                        }
                        applicantComplianceItemDataToUpdate.IsReviewerTypeThirdParty = assignmentProperty.TPReviewerUserID.IsNullOrEmpty() ? false : true;
                        //UAT_5234 End
                        applicantItemData = applicantComplianceItemDataToUpdate;

                        //when admin reject the item and applicant again do his data entry,Submission date is entered again
                        //if (itemStatuscode == ApplicantItemComplianceStatus.Incomplete.GetStringValue() ||
                        //    itemStatuscode == ApplicantItemComplianceStatus.Not_Approved.GetStringValue() ||
                        //    itemStatuscode == ApplicantItemComplianceStatus.Expired.GetStringValue())
                        //{
                        //Update submission date whenever applicant do his data entry. UAT 522- Submission Date on Verification Queues should be the most recent student submission date.
                        //applicantComplianceItemDataToUpdate.SubmissionDate = creationModificationDateTime;
                        //}
                        applicantComplianceItemDataToUpdate.ExpirationDate = null;
                        applicantComplianceItemDataToUpdate.ExceptionReason = null;
                        complianceSaveResponse.ItemData = applicantComplianceItemDataToUpdate;

                        //UAT 4737 Submission date changing when item is changed from meets requirements to any other status.
                        String oldStatus = itemStatuscode;
                        String newStatus = _newItemComplianceStatusCode;
                        //if (
                        //    ((_newItemComplianceStatusCode == ApplicantItemComplianceStatus.Pending_Review.GetStringValue() && itemStatuscode != ApplicantItemComplianceStatus.Pending_Review_For_Client.GetStringValue())
                        //    || (_newItemComplianceStatusCode == ApplicantItemComplianceStatus.Pending_Review_For_Client.GetStringValue() && itemStatuscode != ApplicantItemComplianceStatus.Pending_Review.GetStringValue())
                        //    || (itemStatuscode == ApplicantItemComplianceStatus.Incomplete.GetStringValue())
                        //    || (itemStatuscode == ApplicantItemComplianceStatus.Exception_Rejected.GetStringValue() && _newItemComplianceStatusCode == ApplicantItemComplianceStatus.Applied_For_Exception.GetStringValue()))
                        //     && (itemStatuscode != _newItemComplianceStatusCode)
                        //    )

                        if ((oldStatus == ApplicantItemComplianceStatus.Incomplete.GetStringValue() && newStatus != ApplicantItemComplianceStatus.Incomplete.GetStringValue())
                            || (oldStatus == ApplicantItemComplianceStatus.Pending_Review.GetStringValue()
                                 && newStatus == ApplicantItemComplianceStatus.Pending_Review.GetStringValue())
                            || (oldStatus != ApplicantItemComplianceStatus.Pending_Review.GetStringValue()
                                 &&
                                     (newStatus == ApplicantItemComplianceStatus.Pending_Review.GetStringValue()
                                     || newStatus == ApplicantItemComplianceStatus.Pending_Review_For_Client.GetStringValue()
                                     || newStatus == ApplicantItemComplianceStatus.Applied_For_Exception.GetStringValue())
                               )
                        )
                        {
                            applicantComplianceItemDataToUpdate.SubmissionDate = creationModificationDateTime;
                            Boolean NotAssesedMultiReview = _newItemComplianceStatusCode != ApplicantItemComplianceStatus.Pending_Review.GetStringValue();
                            ComplianceItemSubmissionHistory itemStatusHistory = InsertItemSubmissionHistory(itemReviewerCount, orgUsrID, applicantComplianceItemDataToUpdate.SubmissionDate, NotAssesedMultiReview);
                            itemStatusHistory.ApplicantComplianceItemData = applicantComplianceItemDataToUpdate;
                            ClientDBContext.ComplianceItemSubmissionHistories.AddObject(itemStatusHistory);
                        }
                    }
                    else
                    {
                        applicantItemData.ApplicantComplianceCategoryID = applicantCategoryData.ApplicantComplianceCategoryID;
                        applicantItemData.ReviewerTypeID = _reviewerTypeId == 0 ? null : _reviewerTypeId;
                        applicantItemData.StatusID = _itemComplianceStatusId;
                        //UAT-1712 : Update Reviewer Count
                        applicantItemData.ReconciliationReviewCount = itemReviewerCount;

                        if (applicantItemData.SubmissionDate.IsNull())
                        {
                            applicantItemData.SubmissionDate = creationModificationDateTime;
                        }

                        if (Convert.ToBoolean(assignmentProperty.ApprovalRequired))
                            applicantItemData.ItemMovementTypeID = GetItemMovementTypeByCode(LkpItemMovementStatus.VIA_DATA_ENTRY_FROM_INCOMPLETE.GetStringValue(), lstItemMovementTypes);
                        else
                            applicantItemData.ItemMovementTypeID = GetItemMovementTypeByCode(LkpItemMovementStatus.VIA_DATA_ENTRY_FROM_INCOMPLETE_REVIEW_NOT_REQUIRED.GetStringValue(), lstItemMovementTypes);
                        SaveApplicantItemData(applicantItemData, orgUsrID, creationModificationDateTime);
                        complianceSaveResponse.ItemData = applicantItemData;

                        Boolean notAssesedMultiReview = _newItemComplianceStatusCode != ApplicantItemComplianceStatus.Pending_Review.GetStringValue();
                        ComplianceItemSubmissionHistory itemStatusHistory = InsertItemSubmissionHistory(itemReviewerCount, orgUsrID, applicantItemData.SubmissionDate, notAssesedMultiReview);
                        itemStatusHistory.ApplicantComplianceItemData = applicantItemData;
                        ClientDBContext.ComplianceItemSubmissionHistories.AddObject(itemStatusHistory);
                    }

                    foreach (var attributeData in lstApplicantData)
                    {
                        if (attributeData.ApplicantComplianceAttributeID > 0)
                        {
                            ApplicantComplianceAttributeData attributeDataToUpdate = _dbContext.ApplicantComplianceAttributeDatas.Where
                                (attrData => attrData.ApplicantComplianceAttributeID == attributeData.ApplicantComplianceAttributeID).FirstOrDefault();

                            String _dataTypeCode = GetAttributeTypeCode(attributeData.ComplianceAttributeID);

                            if (_dataTypeCode == ComplianceAttributeDatatypes.Signature.GetStringValue().ToLower().Trim()
                                && attributeData.ComplianceAttributeDataLargeContents.IsNullOrEmpty())
                                continue;

                            attributeDataToUpdate.ModifiedByID = orgUsrID;
                            attributeDataToUpdate.ModifiedOn = creationModificationDateTime;
                            attributeDataToUpdate.AttributeValue = attributeData.AttributeValue;


                            if (_dataTypeCode == ComplianceAttributeDatatypes.Signature.GetStringValue().ToLower().Trim())
                            {
                                if (attributeDataToUpdate.ComplianceAttributeDataLargeContents.IsNullOrEmpty())
                                {
                                    if (!attributeData.ComplianceAttributeDataLargeContents.IsNullOrEmpty())
                                    {
                                        var signatureObj = attributeData.ComplianceAttributeDataLargeContents.FirstOrDefault();
                                        signatureObj.CADLC_CreatedBy = orgUsrID;
                                        signatureObj.CADLC_CreatedOn = DateTime.Now;
                                        signatureObj.CADLC_ModifiedBy = null;
                                        signatureObj.CADLC_ModifiedOn = null;
                                        attributeDataToUpdate.ComplianceAttributeDataLargeContents.Add(signatureObj);
                                    }
                                }
                                else
                                {
                                    //Need to Delete
                                    if (attributeData.ComplianceAttributeDataLargeContents.IsNullOrEmpty())
                                    {
                                        foreach (var item in attributeDataToUpdate.ComplianceAttributeDataLargeContents)
                                        {
                                            item.CADLC_IsDeleted = true;
                                            item.CADLC_ModifiedBy = orgUsrID;
                                            item.CADLC_ModifiedOn = DateTime.Now;
                                        }
                                    }
                                    else
                                    {
                                        //Need to Update
                                        if (!attributeData.ComplianceAttributeDataLargeContents.IsNullOrEmpty())
                                        {
                                            var signatureRecord = attributeDataToUpdate.ComplianceAttributeDataLargeContents.FirstOrDefault();
                                            signatureRecord.CADLC_Signature = attributeData.ComplianceAttributeDataLargeContents.FirstOrDefault().CADLC_Signature;
                                            signatureRecord.CADLC_ModifiedBy = orgUsrID;
                                            signatureRecord.CADLC_ModifiedOn = DateTime.Now;
                                        }
                                    }
                                }
                            }


                            if (_dataTypeCode == ComplianceAttributeDatatypes.FileUpload.GetStringValue().ToLower().Trim())
                            {
                                //String viewDocCode = DocumentType.COMPLIANCE_VIEW_DOCUMENT.GetStringValue();
                                List<ApplicantComplianceDocumentMap> lstMappedDocuments = _dbContext.ApplicantComplianceDocumentMaps.Where
                                 (documentMap => documentMap.ApplicantComplianceAttributeID == attributeData.ApplicantComplianceAttributeID
                                     && documentMap.IsDeleted == false).ToList();
                                //List<ApplicantComplianceDocumentMap> lstDocumentToRemove = lstMappedDocuments.Where(cond => !attributeDocuments.ContainsKey(cond.ApplicantDocumentID)
                                //    && cond.ApplicantComplianceAttributeID == attributeData.ApplicantComplianceAttributeID
                                //    && (cond.ApplicantDocument.lkpDocumentType == null || cond.ApplicantDocument.lkpDocumentType.DMT_Code != viewDocCode)).ToList();
                                List<ApplicantComplianceDocumentMap> lstDocumentToRemove = lstMappedDocuments.Where(cond => !attributeDocuments.ContainsKey(cond.ApplicantDocumentID)
                                   && cond.ApplicantComplianceAttributeID == attributeData.ApplicantComplianceAttributeID).ToList();
                                foreach (var mappedDoc in lstMappedDocuments)
                                {
                                    if (attributeDocuments.ContainsKey(mappedDoc.ApplicantDocumentID))
                                        attributeDocuments.Remove(mappedDoc.ApplicantDocumentID);
                                }
                                foreach (var mappedDocuments in lstDocumentToRemove)
                                {
                                    mappedDocuments.IsDeleted = true;
                                    mappedDocuments.ModifiedByID = orgUsrID;
                                    mappedDocuments.ModifiedOn = creationModificationDateTime;

                                }
                                SaveApplicantDocuments(orgUsrID, attributeDocuments, creationModificationDateTime, attributeData, attributeData.ApplicantComplianceAttributeID, null);
                            }
                            else if (_dataTypeCode == ComplianceAttributeDatatypes.View_Document.GetStringValue().ToLower().Trim())
                            {
                                SaveApplicantDocuments(orgUsrID, null, creationModificationDateTime, attributeData, attributeData.ApplicantComplianceAttributeID, viewAttributeDocuments);
                            }
                        }
                        else
                        {
                            //if (!(attributeData.AttributeTypeCode == ComplianceAttributeDatatypes.View_Document.GetStringValue() && attributeData.AttributeValue == AppConsts.ZERO))
                            //{
                            //Save the attribute and its document type
                            SaveApplicantAttributes(applicantItemData, orgUsrID, attributeDocuments, creationModificationDateTime, attributeData, viewAttributeDocuments);
                            _dbContext.ApplicantComplianceAttributeDatas.AddObject(attributeData);
                            //}
                        }
                    }
                    #endregion
                }
                else
                {
                    #region INSERT DATA

                    // Applicant Category Data is not added, then no other data is entered. So insert all.
                    applicantCategoryData.CreatedByID = orgUsrID; //createdModifiedById; UAT 1261
                    applicantCategoryData.CreatedOn = creationModificationDateTime;
                    applicantCategoryData.IsDeleted = false;
                    applicantCategoryData.StatusID = _categoryComplianceStatusId;
                    _dbContext.ApplicantComplianceCategoryDatas.AddObject(applicantCategoryData);

                    #region FOR SECOND APPLICANTITEM DATA BEING SAVED, CHECK IF THE APPLICANTCATEGORY IS ALREADY CREATED OR NOT. IF YES, THEN GET THE APPLICANTCOMPLIANCECATEGORYID

                    if (_applicantComplianceCategoryInitialId != 0)
                        applicantItemData.ApplicantComplianceCategoryID = _applicantComplianceCategoryInitialId;
                    else
                        applicantItemData.ApplicantComplianceCategoryData = applicantCategoryData;

                    #endregion

                    applicantItemData.ReviewerTypeID = _reviewerTypeId == 0 ? null : _reviewerTypeId;
                    applicantItemData.StatusID = _itemComplianceStatusId;
                    applicantItemData.ReconciliationReviewCount = itemReviewerCount;

                    if (Convert.ToBoolean(assignmentProperty.ApprovalRequired))
                        applicantItemData.ItemMovementTypeID = GetItemMovementTypeByCode(LkpItemMovementStatus.VIA_DATA_ENTRY_FROM_INCOMPLETE.GetStringValue(), lstItemMovementTypes);
                    else
                        applicantItemData.ItemMovementTypeID = GetItemMovementTypeByCode(LkpItemMovementStatus.VIA_DATA_ENTRY_FROM_INCOMPLETE_REVIEW_NOT_REQUIRED.GetStringValue(), lstItemMovementTypes);

                    SaveApplicantItemData(applicantItemData, orgUsrID, creationModificationDateTime);
                    complianceSaveResponse.ItemData = applicantItemData;

                    Boolean notAssesedMultiReview = _newItemComplianceStatusCode != ApplicantItemComplianceStatus.Pending_Review.GetStringValue();
                    ComplianceItemSubmissionHistory itemStatusHistory = InsertItemSubmissionHistory(itemReviewerCount, orgUsrID, applicantItemData.SubmissionDate, notAssesedMultiReview);
                    itemStatusHistory.ApplicantComplianceItemData = applicantItemData;
                    ClientDBContext.ComplianceItemSubmissionHistories.AddObject(itemStatusHistory);

                    foreach (var attributeData in lstApplicantData)
                    {
                        //if (!(attributeData.AttributeTypeCode == ComplianceAttributeDatatypes.View_Document.GetStringValue() && attributeData.AttributeValue == AppConsts.ZERO))
                        //{
                        SaveApplicantAttributes(applicantItemData, orgUsrID, attributeDocuments, creationModificationDateTime, attributeData, viewAttributeDocuments);
                        _dbContext.ApplicantComplianceAttributeDatas.AddObject(attributeData);
                        //}

                    }

                    #endregion
                }
                if (_dbContext.SaveChanges() > 0)
                    complianceSaveResponse.SaveStatus = true;
                else
                    complianceSaveResponse.SaveStatus = false;
                complianceSaveResponse.StatusCode = _newItemComplianceStatusCode;
                complianceSaveResponse.StatusId = _itemComplianceStatusId;
                complianceSaveResponse.UIValidationErrors = String.Empty;

                if (!Convert.ToBoolean(assignmentProperty.ApprovalRequired))
                {
                    if (complianceSaveResponse.ItemData.IsNotNull() && complianceSaveResponse.ItemData.ApplicantComplianceItemID > 0)
                    {
                        ApplicantComplianceItemData applicantComplianceItemDataToUpdate1 = _dbContext.ApplicantComplianceItemDatas.Where(itemData => itemData.ApplicantComplianceItemID == complianceSaveResponse.ItemData.ApplicantComplianceItemID).FirstOrDefault();
                        applicantComplianceItemDataToUpdate1.StatusID = GetReviewStatusByCode(ApplicantItemComplianceStatus.Approved.GetStringValue());
                        applicantComplianceItemDataToUpdate1.ModifiedByID = AppConsts.BACKGROUND_PROCESS_USER_VALUE;
                        applicantComplianceItemDataToUpdate1.ModifiedOn = DateTime.Now;
                        _dbContext.SaveChanges();
                    }
                }
                return complianceSaveResponse;
            }
        }

        /// <summary>
        /// Save/Update Applicant data from Verification details screen and Update item status
        /// </summary>
        /// <param name="applicantCategoryData"></param>
        /// <param name="applicantItemData"></param>
        /// <param name="lstApplicantData"></param>
        /// <param name="createdModifiedById"></param>
        /// <param name="adminComments"></param>
        /// <param name="_newStatus"></param>
        /// <param name="reviewerTypeId"></param>
        /// <param name="reviewerTenantId"></param>
        /// <param name="thirdPartyReviewerUserId"></param>
        public ApplicantComplianceItemData SaveApplicanteDataVerificationDetails(VerificationDetailsContract verificationDetailsContract, String recordActionType, Int32 categoryComplianceStatusId,
              List<lkpItemMovementType> lstMovementTypes, Int32 tenantId, Boolean IsReconciliationDataSaved)
        {
            DateTime creationModificationDateTime = DateTime.Now;
            String[] CurrentStatusComment = verificationDetailsContract.applicantItemData.StatusComments.Split(']');
            Boolean IsVerificationCommentUpdated = false; //UAT-4416
            // Get the Applicant Compliance Category Id to check if the category is already added or not. If added, then add the new item under this category. Used in both Add/Update
            Int32 _applicantComplianceCategoryInitialId =
                verificationDetailsContract.applicantCategoryData.ApplicantComplianceCategoryID =
                GetApplicantComplianceCategoryId(verificationDetailsContract.applicantCategoryData.PackageSubscriptionID
                , verificationDetailsContract.applicantCategoryData.ComplianceCategoryID, verificationDetailsContract.applicantId);

            if (verificationDetailsContract.applicantCategoryData.ApplicantComplianceCategoryID > 0)
            {

                Boolean dataNeedsToBeSaved = true;
                String itemReconcillationStatus = String.Empty;
                if (verificationDetailsContract.applicantItemData.ApplicantComplianceItemID > 0)
                {
                    ComplianceItemSubmissionHistory complianceItemSubmissionHistory = ClientDBContext.ComplianceItemSubmissionHistories.Where(cond => cond.CISH_AcidID == verificationDetailsContract.applicantItemData.ApplicantComplianceItemID
                                                                                                                                                && !cond.CISH_IsDeleted).OrderByDescending(sel => sel.CISH_CreatedOn)
                                                                                                                                                .FirstOrDefault();
                    if (recordActionType == lkpQueueActionType.Random_Review_Required.GetStringValue()
                        || recordActionType == lkpQueueActionType.Random_Review_OverRidden_Clntadmn.GetStringValue())
                    {

                        #region Recoincillation related changes

                        dataNeedsToBeSaved = false;

                        ApplicantComplianceCategoryData applicantCategoryDataToUpdate = _dbContext.ApplicantComplianceCategoryDatas
                                                                                        .Include("ApplicantComplianceItemDatas")
                                                                                        .Include("ApplicantComplianceItemDatas.ApplicantComplianceAttributeDatas")
                                                                                        .Where(catData => catData.ApplicantComplianceCategoryID ==
                                                                                        verificationDetailsContract.applicantCategoryData.ApplicantComplianceCategoryID)
                                                                                       .FirstOrDefault();

                        ApplicantComplianceItemData applicantComplianceItemDataToUpdate = applicantCategoryDataToUpdate.ApplicantComplianceItemDatas
                                                                                            .Where(itemData => itemData.ApplicantComplianceItemID ==
                                                                                            verificationDetailsContract.applicantItemData.ApplicantComplianceItemID)
                                                                                           .FirstOrDefault();

                        applicantCategoryDataToUpdate.ModifiedByID = verificationDetailsContract.createdModifiedById;
                        applicantCategoryDataToUpdate.ModifiedOn = creationModificationDateTime;


                        applicantComplianceItemDataToUpdate.ModifiedByID = verificationDetailsContract.createdModifiedById;
                        applicantComplianceItemDataToUpdate.ModifiedOn = creationModificationDateTime;

                        applicantComplianceItemDataToUpdate.VerificationComments = verificationDetailsContract.applicantItemData.VerificationComments
                            + applicantComplianceItemDataToUpdate.VerificationComments;
                        applicantComplianceItemDataToUpdate.VerificationCommentsWithInitials = verificationDetailsContract.applicantItemData.VerificationCommentsWithInitials
                            + applicantComplianceItemDataToUpdate.VerificationCommentsWithInitials; //UAT 2807

                        IsVerificationCommentUpdated = true;  //UAT-4416
                        String _oldItemStatusCode = applicantComplianceItemDataToUpdate.lkpItemComplianceStatu.Code;

                        Boolean IfAnyAttributeDataChanged = false;

                        foreach (var attributeData in verificationDetailsContract.lstApplicantData)
                        {
                            IfAnyAttributeDataChanged = CheckIfAttributeDataIschanged(applicantComplianceItemDataToUpdate, IfAnyAttributeDataChanged, attributeData);
                        }

                        //Consider review only if Data is changed or any attribute value is changed.
                        if (verificationDetailsContract.newItemStatusCode == _oldItemStatusCode && !IfAnyAttributeDataChanged)
                        {
                            verificationDetailsContract.applicantItemData.ReconciliationMatchingStatus = ReconciliationMatchingStatus.Reviewed_Not_Submitted.GetStringValue();
                        }

                        //Consider review only if Data is changed or any attribute value is changed.
                        if (verificationDetailsContract.newItemStatusCode != _oldItemStatusCode || IfAnyAttributeDataChanged)
                        {
                            if (recordActionType == lkpQueueActionType.Random_Review_Required.GetStringValue())
                                SaveReconcillationData(verificationDetailsContract, tenantId, creationModificationDateTime, ref dataNeedsToBeSaved
                                                        , ref itemReconcillationStatus, complianceItemSubmissionHistory,
                                                         applicantCategoryDataToUpdate, applicantComplianceItemDataToUpdate);

                            else
                            {
                                verificationDetailsContract.applicantItemData.ReconciliationMatchingStatus = ReconciliationMatchingStatus.Reviewe_OverRidden.GetStringValue();
                                itemReconcillationStatus = ItemSubmissionReconStatus.REVIEW_OVERRIDDEN_CLNTADMN.GetStringValue();
                                dataNeedsToBeSaved = true;
                            }
                        }

                        if (dataNeedsToBeSaved)
                        {
                            //UAT 2528
                            applicantComplianceItemDataToUpdate.IsUiRulesViolate = verificationDetailsContract.applicantItemData.IsUiRulesViolate;
                        }
                        #endregion
                    }
                    //UAT-1887
                    //here we are saving finally Review in ApplicantComplianceReconciliationData Table
                    if (IsReconciliationDataSaved)
                    {
                        #region Fnal Reconcillation save.
                        Int32 ACDR_ID = SaveReconcillationReviewData(verificationDetailsContract, creationModificationDateTime, ref itemReconcillationStatus, complianceItemSubmissionHistory);

                        UpdateMatchedReviewStatus(ACDR_ID);

                        #endregion
                    }

                    if (!itemReconcillationStatus.IsNullOrEmpty() && !complianceItemSubmissionHistory.IsNullOrEmpty())
                    {
                        var statusId = ClientDBContext.lkpItemSubmissionReconStatus.FirstOrDefault(cond => cond.ISRS_Code == itemReconcillationStatus).ISRS_ID;
                        complianceItemSubmissionHistory.CISH_StatusId = statusId;
                        complianceItemSubmissionHistory.CISH_ModifiedBY = verificationDetailsContract.createdModifiedById;
                        complianceItemSubmissionHistory.CISH_ModifiedOn = creationModificationDateTime;
                    }
                }

                if (dataNeedsToBeSaved)
                {
                    #region UPDATE DATA
                    ApplicantComplianceCategoryData applicantCategoryDataToUpdate = _dbContext.ApplicantComplianceCategoryDatas.
                                Where(catData => catData.ApplicantComplianceCategoryID == verificationDetailsContract.applicantCategoryData.ApplicantComplianceCategoryID).FirstOrDefault();

                    applicantCategoryDataToUpdate.ModifiedByID = verificationDetailsContract.createdModifiedById;
                    applicantCategoryDataToUpdate.ModifiedOn = creationModificationDateTime;

                    if (verificationDetailsContract.applicantItemData.ApplicantComplianceItemID > 0)
                    {
                        ApplicantComplianceItemData applicantComplianceItemDataToUpdate = _dbContext.ApplicantComplianceItemDatas.
                                Where(itemData => itemData.ApplicantComplianceItemID == verificationDetailsContract.applicantItemData.ApplicantComplianceItemID).FirstOrDefault();
                        //UAT-4416
                        UpdateApplicantComplianceItemData(verificationDetailsContract, recordActionType, lstMovementTypes, creationModificationDateTime, applicantComplianceItemDataToUpdate, IsVerificationCommentUpdated);

                        if (IsReconciliationDataSaved)
                        {
                            applicantComplianceItemDataToUpdate.IsUiRulesViolate = verificationDetailsContract.applicantItemData.IsUiRulesViolate;
                        }
                    }
                    else
                    {
                        verificationDetailsContract.applicantItemData.ApplicantComplianceCategoryID = verificationDetailsContract.applicantCategoryData.ApplicantComplianceCategoryID;

                        //Commented Below code related to UAT-2433: Regis University | Date is not appearing while item name is appearing as attribute with drop down
                        //if (verificationDetailsContract.newItemStatusCode != ApplicantItemComplianceStatus.Approved.GetStringValue())
                        verificationDetailsContract.applicantItemData.ItemMovementTypeID = GetItemMovementTypeId(String.Empty, ComplianceScreenModes.VERIFICATION, verificationDetailsContract.isAdminReviewRequired, lstMovementTypes);
                        verificationDetailsContract.applicantItemData.StatusComments = verificationDetailsContract.applicantItemData.StatusComments;

                        SaveApplicantItemData(verificationDetailsContract.applicantItemData, verificationDetailsContract.createdModifiedById, creationModificationDateTime);

                        ComplianceItemSubmissionHistory itemStatusHistory = InsertItemSubmissionHistory(null, verificationDetailsContract.createdModifiedById, verificationDetailsContract.applicantItemData.SubmissionDate, true);
                        itemStatusHistory.ApplicantComplianceItemData = verificationDetailsContract.applicantItemData;
                        ClientDBContext.ComplianceItemSubmissionHistories.AddObject(itemStatusHistory);

                        SetItemProperties(verificationDetailsContract.applicantItemData, verificationDetailsContract.newStatus, verificationDetailsContract.reviewerTypeId,
                            verificationDetailsContract.reviewerTenantId);

                    }

                    // Set properties like Reviewer Type, Status etc. for the ITEM
                    foreach (var attributeData in verificationDetailsContract.lstApplicantData)
                    {
                        if (attributeData.ApplicantComplianceAttributeID > 0)
                        {

                            ApplicantComplianceAttributeData attributeDataToUpdate = _dbContext.ApplicantComplianceAttributeDatas.Where
                              (attrData => attrData.ApplicantComplianceAttributeID == attributeData.ApplicantComplianceAttributeID).FirstOrDefault();

                            //UAT-2023: Reconciliation: Addition of attribute-level setting to enable/disable trigger for reconciliation queue.
                            //Checks IF (not Final review and data comes from reconciliation screen ) or ((final review or reconciliation screen) and IsTriggerProperty is off).
                            if (
                                     (verificationDetailsContract.applicantItemData.ReconciliationMatchingStatus != ReconciliationMatchingStatus.Matched.GetStringValue() &&
                                     !IsReconciliationDataSaved)
                              ||
                                    ((verificationDetailsContract.applicantItemData.ReconciliationMatchingStatus == ReconciliationMatchingStatus.Matched.GetStringValue()
                                    || IsReconciliationDataSaved)
                                    && attributeDataToUpdate.ComplianceAttribute.IsTriggersReconciliation)
                               )
                            {
                                attributeDataToUpdate.ModifiedByID = verificationDetailsContract.createdModifiedById;
                                attributeDataToUpdate.ModifiedOn = creationModificationDateTime;
                                attributeDataToUpdate.AttributeValue = attributeData.AttributeValue;
                            }
                        }
                        else
                        {
                            //Save the attribute and its document type
                            SaveApplicantAttributes(verificationDetailsContract.applicantItemData, verificationDetailsContract.createdModifiedById, null, creationModificationDateTime, attributeData, null);
                            _dbContext.ApplicantComplianceAttributeDatas.AddObject(attributeData);
                        }
                    }
                    #endregion
                }
            }
            else
            {
                #region INSERT DATA - APPLICANT CATEGORY DATA IS NOT ADDED, THEN NO OTHER DATA IS ENTERED. SO INSERT ALL.

                verificationDetailsContract.applicantCategoryData.CreatedByID = verificationDetailsContract.createdModifiedById;
                verificationDetailsContract.applicantCategoryData.CreatedOn = creationModificationDateTime;
                verificationDetailsContract.applicantCategoryData.IsDeleted = false;
                verificationDetailsContract.applicantCategoryData.StatusID = categoryComplianceStatusId;
                _dbContext.ApplicantComplianceCategoryDatas.AddObject(verificationDetailsContract.applicantCategoryData);

                #region FOR SECOND APPLICANT-ITEM DATA BEING SAVED, CHECK IF THE APPLICANT-CATEGORY IS ALREADY CREATED OR NOT. IF YES, THEN GET THE APPLICANTCOMPLIANCECATEGORYID

                if (_applicantComplianceCategoryInitialId != 0)
                    verificationDetailsContract.applicantItemData.ApplicantComplianceCategoryID = _applicantComplianceCategoryInitialId;
                else
                    verificationDetailsContract.applicantItemData.ApplicantComplianceCategoryData = verificationDetailsContract.applicantCategoryData;

                #endregion
                //Commented Below code related to UAT-2433: Regis University | Date is not appearing while item name is appearing as attribute with drop down
                // if (verificationDetailsContract.newItemStatusCode != ApplicantItemComplianceStatus.Approved.GetStringValue())
                verificationDetailsContract.applicantItemData.ItemMovementTypeID = GetItemMovementTypeId(String.Empty, ComplianceScreenModes.VERIFICATION, verificationDetailsContract.isAdminReviewRequired, lstMovementTypes);

                SetItemProperties(verificationDetailsContract.applicantItemData, verificationDetailsContract.newStatus,
                    verificationDetailsContract.reviewerTypeId, verificationDetailsContract.reviewerTenantId);
                verificationDetailsContract.applicantItemData.StatusComments = verificationDetailsContract.applicantItemData.StatusComments;
                SaveApplicantItemData(verificationDetailsContract.applicantItemData, verificationDetailsContract.createdModifiedById, creationModificationDateTime);

                ComplianceItemSubmissionHistory itemStatusHistory = InsertItemSubmissionHistory(null, verificationDetailsContract.createdModifiedById, verificationDetailsContract.applicantItemData.SubmissionDate, true);
                itemStatusHistory.ApplicantComplianceItemData = verificationDetailsContract.applicantItemData;
                ClientDBContext.ComplianceItemSubmissionHistories.AddObject(itemStatusHistory);

                foreach (var attributeData in verificationDetailsContract.lstApplicantData)
                {
                    SaveApplicantAttributes(verificationDetailsContract.applicantItemData, verificationDetailsContract.createdModifiedById, null, creationModificationDateTime, attributeData, null);
                    _dbContext.ApplicantComplianceAttributeDatas.AddObject(attributeData);
                }

                #endregion
            }

            #region UAT-3667
            var complianceItemStatus = _dbContext.lkpItemComplianceStatus.Where(x => x.Code == "NAPD" && !x.IsDeleted).FirstOrDefault();

            if (verificationDetailsContract.applicantItemData.StatusID == complianceItemStatus.ItemComplianceStatusID)
            {
                String docIds = String.Empty;
                ApplicantComplianceAttributeData attributeData = verificationDetailsContract.applicantItemData.ApplicantComplianceAttributeDatas
                     .Where(x => x.ComplianceAttribute.lkpComplianceAttributeDatatype.Code == ComplianceAttributeDatatypes.FileUpload.GetStringValue()).FirstOrDefault();

                if (!attributeData.IsNullOrEmpty() && attributeData.ApplicantComplianceAttributeID > 0)
                {
                    List<Int32> documentIds = attributeData.ApplicantComplianceDocumentMaps.Where(cond => !cond.IsDeleted && !cond.ApplicantDocument.IsDeleted).Select(sel => sel.ApplicantDocument.ApplicantDocumentID).ToList();
                    if (documentIds.Count > 0)
                    {
                        docIds = String.Join(",", (documentIds.ToArray()));
                    }
                }
                ApplicantComplianceRejectionDetail objItemRejectiondtl = new ApplicantComplianceRejectionDetail();
                objItemRejectiondtl.ACRD_ACIDId = verificationDetailsContract.applicantItemData.ApplicantComplianceItemID;
                objItemRejectiondtl.ACRD_ReviewerId = Convert.ToInt32(verificationDetailsContract.createdModifiedById);
                objItemRejectiondtl.ACRD_Notes = CurrentStatusComment.Length > 1 ? CurrentStatusComment[1] : String.Empty;
                objItemRejectiondtl.ACRD_CreatedByID = Convert.ToInt32(verificationDetailsContract.createdModifiedById);
                objItemRejectiondtl.ACRD_CreatedOn = DateTime.Now;
                objItemRejectiondtl.ACRD_IsDeleted = false;
                objItemRejectiondtl.ACRD_DocumentIds = docIds;
                _dbContext.ApplicantComplianceRejectionDetails.AddObject(objItemRejectiondtl);
            }
            #endregion

            _dbContext.SaveChanges();

            SecurityContext.SaveChanges();
            return verificationDetailsContract.applicantItemData;
        }

        private void UpdateApplicantComplianceItemData(VerificationDetailsContract verificationDetailsContract, String recordActionType, List<lkpItemMovementType> lstMovementTypes, DateTime creationModificationDateTime, ApplicantComplianceItemData applicantComplianceItemDataToUpdate, Boolean IsVerificationCommentUpdated)
        {
            applicantComplianceItemDataToUpdate.ModifiedByID = verificationDetailsContract.createdModifiedById;
            applicantComplianceItemDataToUpdate.ModifiedOn = creationModificationDateTime;
            //UAT-4416
            if (!IsVerificationCommentUpdated)
            {
                applicantComplianceItemDataToUpdate.VerificationComments = verificationDetailsContract.applicantItemData.VerificationComments
                    + applicantComplianceItemDataToUpdate.VerificationComments;
                applicantComplianceItemDataToUpdate.VerificationCommentsWithInitials = verificationDetailsContract.applicantItemData.VerificationCommentsWithInitials
                    + applicantComplianceItemDataToUpdate.VerificationCommentsWithInitials; //UAT 2807
            }
            //END 
            applicantComplianceItemDataToUpdate.IsReviewerTypeAdmin = verificationDetailsContract.applicantItemData.IsReviewerTypeAdmin;
            applicantComplianceItemDataToUpdate.IsReviewerTypeClientAdmin = verificationDetailsContract.applicantItemData.IsReviewerTypeClientAdmin;
            applicantComplianceItemDataToUpdate.IsReviewerTypeThirdParty = verificationDetailsContract.applicantItemData.IsReviewerTypeThirdParty;

            String _oldItemStatusCode = applicantComplianceItemDataToUpdate.lkpItemComplianceStatu.Code;

            //UAT-3036
            //if (_oldItemStatusCode == ApplicantItemComplianceStatus.Incomplete.GetStringValue() && verificationDetailsContract.newItemStatusCode != _oldItemStatusCode)

            //if ((_oldItemStatusCode == ApplicantItemComplianceStatus.Incomplete.GetStringValue()
            //    || _oldItemStatusCode == ApplicantItemComplianceStatus.Expired.GetStringValue()
            //    || _oldItemStatusCode == ApplicantItemComplianceStatus.Approved.GetStringValue())
            //    && (_oldItemStatusCode != verificationDetailsContract.newItemStatusCode))
            //{
            //    applicantComplianceItemDataToUpdate.SubmissionDate = DateTime.Now;

            //    //As we are updating Submission date it will be considered as new submission
            //    ComplianceItemSubmissionHistory itemStatusHistory = InsertItemSubmissionHistory(null, verificationDetailsContract.createdModifiedById, applicantComplianceItemDataToUpdate.SubmissionDate, true);
            //    itemStatusHistory.ApplicantComplianceItemData = applicantComplianceItemDataToUpdate;
            //    ClientDBContext.ComplianceItemSubmissionHistories.AddObject(itemStatusHistory);
            //}
            //UAT 4737

            //if (
            //    ((_oldItemStatusCode == ApplicantItemComplianceStatus.Incomplete.GetStringValue())
            //    || (verificationDetailsContract.newItemStatusCode == ApplicantItemComplianceStatus.Pending_Review.GetStringValue() && _oldItemStatusCode != ApplicantItemComplianceStatus.Pending_Review_For_Client.GetStringValue())
            //    || (verificationDetailsContract.newItemStatusCode == ApplicantItemComplianceStatus.Pending_Review_For_Client.GetStringValue() && _oldItemStatusCode != ApplicantItemComplianceStatus.Pending_Review.GetStringValue())
            //    || (_oldItemStatusCode == ApplicantItemComplianceStatus.Exception_Rejected.GetStringValue() && verificationDetailsContract.newItemStatusCode == ApplicantItemComplianceStatus.Applied_For_Exception.GetStringValue())
            //    )
            //    && (_oldItemStatusCode != verificationDetailsContract.newItemStatusCode)
            //    )

            String oldStatus = _oldItemStatusCode;
            String newStatus = verificationDetailsContract.newItemStatusCode;
            //UAT_5234 Start
            if (newStatus == ApplicantItemComplianceStatus.Pending_Review.GetStringValue()) {
                applicantComplianceItemDataToUpdate.IsReviewerTypeAdmin = true;
                applicantComplianceItemDataToUpdate.IsReviewerTypeClientAdmin = false;
            }
            else if (newStatus == ApplicantItemComplianceStatus.Pending_Review_For_Client.GetStringValue()) {
                applicantComplianceItemDataToUpdate.IsReviewerTypeAdmin = false;
                applicantComplianceItemDataToUpdate.IsReviewerTypeClientAdmin = true;
            }
            //UAT_5234 End
            if ((oldStatus == ApplicantItemComplianceStatus.Incomplete.GetStringValue() && newStatus != ApplicantItemComplianceStatus.Incomplete.GetStringValue())
                || (oldStatus == ApplicantItemComplianceStatus.Pending_Review.GetStringValue()
                    && newStatus == ApplicantItemComplianceStatus.Pending_Review.GetStringValue())
                || (oldStatus != ApplicantItemComplianceStatus.Pending_Review.GetStringValue()
                &&
                    (newStatus == ApplicantItemComplianceStatus.Pending_Review.GetStringValue()
                    || newStatus == ApplicantItemComplianceStatus.Pending_Review_For_Client.GetStringValue()
                    || newStatus == ApplicantItemComplianceStatus.Applied_For_Exception.GetStringValue())
                ))
            {
                applicantComplianceItemDataToUpdate.SubmissionDate = DateTime.Now;

                //As we are updating Submission date it will be considered as new submission
                ComplianceItemSubmissionHistory itemStatusHistory = InsertItemSubmissionHistory(null, verificationDetailsContract.createdModifiedById, applicantComplianceItemDataToUpdate.SubmissionDate, true);
                itemStatusHistory.ApplicantComplianceItemData = applicantComplianceItemDataToUpdate;
                ClientDBContext.ComplianceItemSubmissionHistories.AddObject(itemStatusHistory);
            }
            Boolean IfAnyAttributeDataChanged = false;

            foreach (var attributeData in verificationDetailsContract.lstApplicantData)
            {
                IfAnyAttributeDataChanged = CheckIfAttributeDataIschanged(applicantComplianceItemDataToUpdate, IfAnyAttributeDataChanged, attributeData);
            }

            if (verificationDetailsContract.newItemStatusCode == _oldItemStatusCode && !IfAnyAttributeDataChanged)
            {
                verificationDetailsContract.applicantItemData.ReconciliationMatchingStatus = ReconciliationMatchingStatus.Reviewed_Not_Submitted.GetStringValue();
            }
            //Consider review only if Data is changed or any attribute value is changed.
            if (verificationDetailsContract.newItemStatusCode != _oldItemStatusCode || IfAnyAttributeDataChanged)
            {
                if (recordActionType == lkpQueueActionType.SendFor_Random_Review_Required.GetStringValue()
                    && verificationDetailsContract.newItemStatusCode == ApplicantItemComplianceStatus.Pending_Review.GetStringValue())
                {
                    applicantComplianceItemDataToUpdate.ReconciliationReviewCount = verificationDetailsContract.applicantItemData.ReconciliationReviewCount;
                }
                else
                {
                    applicantComplianceItemDataToUpdate.ReconciliationReviewCount = null;
                }

            }

            if (verificationDetailsContract.newItemStatusCode != _oldItemStatusCode ||
                IfAnyAttributeDataChanged)
            {
                applicantComplianceItemDataToUpdate.ItemMovementTypeID = GetItemMovementTypeId(_oldItemStatusCode, ComplianceScreenModes.VERIFICATION, verificationDetailsContract.isAdminReviewRequired, lstMovementTypes);

                if (!String.IsNullOrEmpty(recordActionType))
                {
                    if (recordActionType == lkpQueueActionType.Next_Level_Review_Required.GetStringValue())
                    {
                        //    // Status Id to remain same
                        //    // IsReviewerTypeAdmin, IsReviewerTypeClientAdmin, IsReviewerTypeThirdParty
                        //    // ReviewerTypeID to be same
                        //    // ReviewerTenantID to be same
                        //    // AssignedToUser remains the same -- TBD // need to clear
                        verificationDetailsContract.applicantItemData = applicantComplianceItemDataToUpdate;
                    }
                    else if (recordActionType == lkpQueueActionType.Proceed_To_Next_Queue.GetStringValue()
                        || recordActionType == lkpQueueActionType.Random_Review_Required.GetStringValue()
                        || recordActionType == lkpQueueActionType.SendFor_Random_Review_Required.GetStringValue()
                        || recordActionType == lkpQueueActionType.Random_Review_OverRidden_Clntadmn.GetStringValue())
                    {
                        //UAT-612
                        if (verificationDetailsContract.newItemStatusCode.Equals("APRD"))
                            applicantComplianceItemDataToUpdate.StatusComments = verificationDetailsContract.applicantItemData.StatusComments;
                        else
                            applicantComplianceItemDataToUpdate.StatusComments += verificationDetailsContract.applicantItemData.StatusComments;
                        applicantComplianceItemDataToUpdate.ReconciliationMatchingStatus = verificationDetailsContract.applicantItemData.ReconciliationMatchingStatus;
                        verificationDetailsContract.applicantItemData = applicantComplianceItemDataToUpdate; // Status will be overridden by the next statement

                        SetItemProperties(applicantComplianceItemDataToUpdate,
                          verificationDetailsContract.newStatus, verificationDetailsContract.reviewerTypeId,
                          verificationDetailsContract.reviewerTenantId);

                        //UAT 2528
                        if (verificationDetailsContract.applicantItemData.IsUiRulesViolate)
                            applicantComplianceItemDataToUpdate.IsUiRulesViolate = false;
                        else
                            applicantComplianceItemDataToUpdate.IsUiRulesViolate = verificationDetailsContract.applicantItemData.IsUiRulesViolate;

                    }
                }
            }
        }

        private static bool CheckIfAttributeDataIschanged(ApplicantComplianceItemData applicantComplianceItemDataToUpdate, Boolean IfAnyAttributeDataChanged, ApplicantComplianceAttributeData attributeData)
        {
            ApplicantComplianceAttributeData attributeDataToUpdate = applicantComplianceItemDataToUpdate.ApplicantComplianceAttributeDatas.Where
                                                                        (attrData => attrData.ApplicantComplianceAttributeID == attributeData.ApplicantComplianceAttributeID)
                                                                        .FirstOrDefault();
            if (!attributeDataToUpdate.IsNullOrEmpty())
            {
                string attributeTypecode = attributeDataToUpdate.ComplianceAttribute.lkpComplianceAttributeDatatype.Code;

                // do not include fileupload and view document type attribute.
                if (attributeTypecode != ComplianceAttributeDatatypes.View_Document.GetStringValue().ToLower().Trim())
                {
                    if (attributeTypecode == ComplianceAttributeDatatypes.Date.GetStringValue())
                    {
                        String date1 = attributeDataToUpdate.AttributeValue.IsNullOrEmpty() ? String.Empty : attributeDataToUpdate.AttributeValue;
                        if (!date1.IsNullOrEmpty())
                        {
                            date1 = Convert.ToDateTime(date1).ToString("MM/dd/yyyy");
                        }
                        String date2 = attributeData.AttributeValue.IsNullOrEmpty() ? String.Empty : attributeData.AttributeValue;
                        if (!date2.IsNullOrEmpty())
                        {
                            date2 = Convert.ToDateTime(date2).ToString("MM/dd/yyyy");
                        }
                        if (!date1.Equals(date2))
                        {
                            IfAnyAttributeDataChanged = true;
                        }
                    }
                    else if (attributeDataToUpdate.AttributeValue != attributeData.AttributeValue)
                    {
                        IfAnyAttributeDataChanged = true;
                    }
                }
            }
            return IfAnyAttributeDataChanged;
        }

        private void SaveReconcillationData(VerificationDetailsContract verificationDetailsContract, Int32 tenantId, DateTime creationModificationDateTime, ref Boolean dataNeedsToBeSaved, ref String itemReconcillationStatus, ComplianceItemSubmissionHistory complianceItemSubmissionHistory, ApplicantComplianceCategoryData applicantCategoryDataToUpdate, ApplicantComplianceItemData applicantComplianceItemDataToUpdate)
        {
            applicantComplianceItemDataToUpdate.ReconciliationReviewCount = applicantComplianceItemDataToUpdate.ReconciliationReviewCount - AppConsts.ONE;

            //crate xml to save.
            XmlDocument doc = CreateRecomcillationReviewXml(verificationDetailsContract, creationModificationDateTime, applicantComplianceItemDataToUpdate);

            verificationDetailsContract.applicantItemData.ReconciliationMatchingStatus = ReconciliationMatchingStatus.Reviewed_Only.GetStringValue();


            List<ApplicantComplianceReconciliationData> applicantCmplncReconciliationDatainDb = ClientDBContext.ApplicantComplianceReconciliationDatas.Where(cond => cond.ACRD_ApplicantComplianceItemID ==
                                                                                                                   verificationDetailsContract.applicantItemData.ApplicantComplianceItemID
                                                                                                                    && cond.ACRD_IsActive == true && !cond.ACRD_IsDeleted).ToList();

            Int32 reviewNumber = AppConsts.ONE;
            if (!applicantCmplncReconciliationDatainDb.IsNullOrEmpty())
            {
                Int32 lstReviewNumber = applicantCmplncReconciliationDatainDb.OrderByDescending(cond => cond.ACRD_ReviewNumber).FirstOrDefault().ACRD_ReviewNumber;
                reviewNumber = lstReviewNumber + 1;
            }
            else
            {
                itemReconcillationStatus = ItemSubmissionReconStatus.REVIEW_STARTED.GetStringValue();
            }
            //UAT-2023 :Reconciliation: Addition of attribute-level setting to enable/disable trigger for reconciliation queue 
            //If first reviewer is updating the data and Reconcillation trigger is off then update Attribute Value.
            if (reviewNumber == AppConsts.ONE)
            {
                foreach (var attributeData in verificationDetailsContract.lstApplicantData)
                {
                    if (attributeData.ApplicantComplianceAttributeID > 0)
                    {
                        ApplicantComplianceAttributeData attributeDataToUpdate = applicantComplianceItemDataToUpdate.ApplicantComplianceAttributeDatas.Where
                                                                                  (attrData => attrData.ApplicantComplianceAttributeID == attributeData.ApplicantComplianceAttributeID)
                                                                                   .FirstOrDefault();
                        if (!attributeDataToUpdate.ComplianceAttribute.IsTriggersReconciliation)
                        {
                            attributeDataToUpdate.ModifiedByID = verificationDetailsContract.createdModifiedById;
                            attributeDataToUpdate.ModifiedOn = creationModificationDateTime;
                            attributeDataToUpdate.AttributeValue = attributeData.AttributeValue;
                        }
                    }
                }
            }

            ApplicantComplianceReconciliationData applicantCmplncReconciliationData = new ApplicantComplianceReconciliationData();
            applicantCmplncReconciliationData.ACRD_ApplicantComplianceItemID = verificationDetailsContract.applicantItemData.ApplicantComplianceItemID;
            applicantCmplncReconciliationData.ACRD_ReviewerId = verificationDetailsContract.createdModifiedById;
            applicantCmplncReconciliationData.ACRD_ReviewerItemData = doc.InnerXml.ToString();
            applicantCmplncReconciliationData.ACRD_ReviewNumber = reviewNumber;
            applicantCmplncReconciliationData.ACRD_IsActive = true;
            applicantCmplncReconciliationData.ACRD_IsDeleted = false;
            applicantCmplncReconciliationData.ACRD_CreatedBy = verificationDetailsContract.createdModifiedById;
            applicantCmplncReconciliationData.ACRD_CreatedOn = creationModificationDateTime;
            //UAT-1887:
            applicantCmplncReconciliationData.ACRD_IsFinalReview = false;
            applicantCmplncReconciliationData.ACRD_CmplnceItemSubHistoryID = complianceItemSubmissionHistory.IsNullOrEmpty() ? (Int32?)null : complianceItemSubmissionHistory.CISH_ID;
            ClientDBContext.ApplicantComplianceReconciliationDatas.AddObject(applicantCmplncReconciliationData);

            ClientDBContext.SaveChanges();

            //Compare the xml if final review is being submitted.
            if (applicantComplianceItemDataToUpdate.ReconciliationReviewCount == AppConsts.NONE)
            {
                //Compare the xml.
                dataNeedsToBeSaved = CompareReconciliationReviews(verificationDetailsContract, tenantId, creationModificationDateTime, dataNeedsToBeSaved, applicantCategoryDataToUpdate, applicantComplianceItemDataToUpdate, applicantCmplncReconciliationDatainDb, out itemReconcillationStatus);
            }
        }

        private int SaveReconcillationReviewData(VerificationDetailsContract verificationDetailsContract, DateTime creationModificationDateTime, ref String itemReconcillationStatus, ComplianceItemSubmissionHistory complianceItemSubmissionHistory)
        {
            itemReconcillationStatus = ItemSubmissionReconStatus.COMPLETED_RECONCILIATION.GetStringValue();
            ApplicantComplianceItemData applicantComplianceItemDataToUpdate = _dbContext.ApplicantComplianceItemDatas.
                       Where(itemData => itemData.ApplicantComplianceItemID == verificationDetailsContract.applicantItemData.ApplicantComplianceItemID).FirstOrDefault();

            applicantComplianceItemDataToUpdate.ModifiedByID = verificationDetailsContract.createdModifiedById;
            applicantComplianceItemDataToUpdate.ModifiedOn = creationModificationDateTime;
            applicantComplianceItemDataToUpdate.IsUiRulesViolate = false;
            //applicantComplianceItemDataToUpdate.VerificationComments += verificationDetailsContract.applicantItemData.VerificationComments;
            //applicantComplianceItemDataToUpdate.VerificationCommentsWithInitials += verificationDetailsContract.applicantItemData.VerificationCommentsWithInitials;  //UAT-2807
            String _oldItemStatusCode = applicantComplianceItemDataToUpdate.lkpItemComplianceStatu.Code;
            List<ApplicantComplianceReconciliationData> applicantCmplncReconciliationDatainDb = ClientDBContext.ApplicantComplianceReconciliationDatas.Where(cond => cond.ACRD_ApplicantComplianceItemID ==
                                                                                                                        verificationDetailsContract.applicantItemData.ApplicantComplianceItemID
                                                                                                                         && cond.ACRD_IsActive == true && !cond.ACRD_IsDeleted).ToList();
            Int32 reviewNumber = AppConsts.ONE;
            if (!applicantCmplncReconciliationDatainDb.IsNullOrEmpty())
            {
                Int32 lstReviewNumber = applicantCmplncReconciliationDatainDb.OrderByDescending(cond => cond.ACRD_ReviewNumber).FirstOrDefault().ACRD_ReviewNumber;
                reviewNumber = lstReviewNumber + 1;
            }
            XmlDocument doc = CreateRecomcillationReviewXml(verificationDetailsContract, creationModificationDateTime, applicantComplianceItemDataToUpdate);
            ApplicantComplianceReconciliationData applicantCmplncReconciliationData = new ApplicantComplianceReconciliationData();
            applicantCmplncReconciliationData.ACRD_ApplicantComplianceItemID = verificationDetailsContract.applicantItemData.ApplicantComplianceItemID;
            applicantCmplncReconciliationData.ACRD_ReviewerId = verificationDetailsContract.createdModifiedById;
            applicantCmplncReconciliationData.ACRD_ReviewerItemData = doc.InnerXml.ToString();
            applicantCmplncReconciliationData.ACRD_ReviewNumber = reviewNumber;
            applicantCmplncReconciliationData.ACRD_IsActive = true;
            applicantCmplncReconciliationData.ACRD_IsDeleted = false;
            applicantCmplncReconciliationData.ACRD_CreatedBy = verificationDetailsContract.createdModifiedById;
            applicantCmplncReconciliationData.ACRD_CreatedOn = creationModificationDateTime;
            applicantCmplncReconciliationData.ACRD_IsFinalReview = true;
            applicantCmplncReconciliationData.ACRD_CmplnceItemSubHistoryID = complianceItemSubmissionHistory.IsNullOrEmpty() ? (Int32?)null : complianceItemSubmissionHistory.CISH_ID;
            ClientDBContext.ApplicantComplianceReconciliationDatas.AddObject(applicantCmplncReconciliationData);

            ClientDBContext.SaveChanges();
            Int32 ACDR_ID = applicantCmplncReconciliationData.ACRD_ID;
            return ACDR_ID;
        }

        private void UpdateMatchedReviewStatus(Int32 ACDR_ID)
        {
            EntityConnection connection = _dbContext.Connection as EntityConnection;

            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand command = new SqlCommand("usp_CompareReconReviewerData", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@ApplicantComplianceReconciliationDataID", ACDR_ID);
                if (con.State == ConnectionState.Closed)
                    con.Open();
                command.ExecuteNonQuery();
                con.Close();
            }
        }

        private XmlDocument CreateRecomcillationReviewXml(VerificationDetailsContract verificationDetailsContract, DateTime creationModificationDateTime, ApplicantComplianceItemData applicantComplianceItemDataToUpdate)
        {
            XmlDocument doc = new XmlDocument();
            XmlElement subscriptn = (XmlElement)doc.AppendChild(doc.CreateElement("Subscription"));
            subscriptn.AppendChild(doc.CreateElement("ID")).InnerText = verificationDetailsContract.applicantCategoryData.PackageSubscriptionID.ToString();

            XmlElement category = (XmlElement)subscriptn.AppendChild(doc.CreateElement("Category"));
            category.AppendChild(doc.CreateElement("DataID")).InnerText = verificationDetailsContract.applicantCategoryData.ApplicantComplianceCategoryID.ToString();

            XmlElement item = (XmlElement)category.AppendChild(doc.CreateElement("Item"));
            item.AppendChild(doc.CreateElement("DataID")).InnerText = verificationDetailsContract.applicantItemData.ApplicantComplianceItemID.ToString();
            item.AppendChild(doc.CreateElement("StatusCode")).InnerText = verificationDetailsContract.newItemStatusCode.ToString();

            XmlNode attributes = item.AppendChild(doc.CreateElement("Attributes"));
            foreach (var attributeData in verificationDetailsContract.lstApplicantData)
            {

                ApplicantComplianceAttributeData attributeDataToUpdate = _dbContext.ApplicantComplianceAttributeDatas
                                                                        .Include("ComplianceAttribute")
                                                                        .Where(attrData => attrData.ApplicantComplianceAttributeID == attributeData.ApplicantComplianceAttributeID).FirstOrDefault();
                if (!attributeDataToUpdate.IsNullOrEmpty())
                {
                    string attributeTypecode = attributeDataToUpdate.ComplianceAttribute.lkpComplianceAttributeDatatype.Code.ToLower().Trim();
                    // do not include fileupload and view document type attribute.
                    if (attributeTypecode != ComplianceAttributeDatatypes.View_Document.GetStringValue().ToLower().Trim()
                        && attributeTypecode != ComplianceAttributeDatatypes.FileUpload.GetStringValue().ToLower().Trim()
                        && attributeTypecode != ComplianceAttributeDatatypes.Screening_Document.GetStringValue().ToLower().Trim()
                        )
                    {
                        XmlNode attribute = attributes.AppendChild(doc.CreateElement("Attribute"));
                        attribute.AppendChild(doc.CreateElement("DataID")).InnerText = attributeData.ApplicantComplianceAttributeID.ToString();
                        attribute.AppendChild(doc.CreateElement("Value")).InnerText = attributeData.AttributeValue.ToString();
                        //UAT-2023: Reconciliation: Addition of attribute-level setting to enable/disable trigger for reconciliation queue.
                        //Adding new element on the basis of which we will ignore this attribute while comparing.
                        Boolean IsIgnoredForComparison = !(attributeDataToUpdate.ComplianceAttribute.IsTriggersReconciliation);
                        attribute.AppendChild(doc.CreateElement("IsIgnoredForComparison")).InnerText = Convert.ToString(IsIgnoredForComparison);
                    }

                    // updatee fileupload attribute document count.
                    if (attributeTypecode == ComplianceAttributeDatatypes.FileUpload.GetStringValue().ToLower().Trim())
                    {
                        if (attributeDataToUpdate.AttributeValue != attributeData.AttributeValue)
                        {
                            attributeDataToUpdate.ModifiedByID = verificationDetailsContract.createdModifiedById;
                            attributeDataToUpdate.ModifiedOn = creationModificationDateTime;
                            attributeDataToUpdate.AttributeValue = attributeData.AttributeValue;
                        }
                    }
                }
            }
            return doc;
        }

        private bool CompareReconciliationReviews(VerificationDetailsContract verificationDetailsContract, Int32 tenantId, DateTime creationModificationDateTime,
                                                  Boolean dataNeedsToBeSaved, ApplicantComplianceCategoryData applicantCategoryDataToUpdate, ApplicantComplianceItemData applicantComplianceItemDataToUpdate,
                                                  List<ApplicantComplianceReconciliationData> applicantCmplncReconciliationDatainDb, out String itemReconcillationStatus)
        {
            var IfAlReviewsMatched = ClientDBContext.udf_CompareReconciliationXMLData(verificationDetailsContract.applicantItemData.ApplicantComplianceItemID).First();
            Boolean IfAllReviewsMatched = Convert.ToBoolean(IfAlReviewsMatched);
            if (IfAllReviewsMatched)
            {
                dataNeedsToBeSaved = true;
                verificationDetailsContract.applicantItemData.ReconciliationMatchingStatus = ReconciliationMatchingStatus.Matched.GetStringValue();
                itemReconcillationStatus = ItemSubmissionReconStatus.REVIEWS_MATCHED.GetStringValue();
            }
            else
            {
                itemReconcillationStatus = ItemSubmissionReconStatus.NEED_RECONCILIATION.GetStringValue();
                verificationDetailsContract.applicantItemData.ReconciliationMatchingStatus = ReconciliationMatchingStatus.Not_Matched.GetStringValue();
                var complianceCategory = applicantCategoryDataToUpdate.ComplianceCategory;
                var compliancePackage = applicantCategoryDataToUpdate.PackageSubscription.CompliancePackage;
                var complianceItem = applicantComplianceItemDataToUpdate.ComplianceItem;

                List<Int32> reviewerIds = applicantCmplncReconciliationDatainDb.Select(sel => sel.ACRD_ReviewerId).ToList();
                reviewerIds.Add(verificationDetailsContract.createdModifiedById);

                List<String> reviewerNames = new List<String>();

                List<Entity.OrganizationUser> LstReviewerInfo = SecurityContext.OrganizationUsers.Where(cond => reviewerIds.Contains(cond.OrganizationUserID)).ToList();
                foreach (var reviewerInfo in LstReviewerInfo)
                {
                    String userName = String.Format(reviewerInfo.FirstName + " " + reviewerInfo.LastName);
                    reviewerNames.Add(userName);
                }

                //Insert Data into Flat Table.
                Entity.FlatComplianceItemReconciliationData newFlatComplianceItemReconciliationData = new Entity.FlatComplianceItemReconciliationData();
                newFlatComplianceItemReconciliationData.FCIRD_TenantID = tenantId;
                newFlatComplianceItemReconciliationData.FCIRD_ApplicantComplianceItemId = verificationDetailsContract.applicantItemData.ApplicantComplianceItemID;
                newFlatComplianceItemReconciliationData.FCIRD_ApplicantComplianceCategoryId = verificationDetailsContract.applicantCategoryData.ApplicantComplianceCategoryID;
                newFlatComplianceItemReconciliationData.FCIRD_ApplicantId = verificationDetailsContract.applicantId;
                newFlatComplianceItemReconciliationData.FCIRD_ApplicantName = applicantCategoryDataToUpdate.PackageSubscription.OrganizationUser.FirstName
                                                                        + ' ' + applicantCategoryDataToUpdate.PackageSubscription.OrganizationUser.LastName;

                newFlatComplianceItemReconciliationData.FCIRD_ComplianceItemId = verificationDetailsContract.applicantItemData.ComplianceItemID;
                newFlatComplianceItemReconciliationData.FCIRD_ItemName = complianceItem.ItemLabel.IsNullOrEmpty() ?
                                                                                complianceItem.Name : complianceItem.ItemLabel;

                newFlatComplianceItemReconciliationData.FCIRD_PackageID = compliancePackage.CompliancePackageID;
                newFlatComplianceItemReconciliationData.FCIRD_PackageName = compliancePackage.PackageName;

                newFlatComplianceItemReconciliationData.FCIRD_CategoryID = complianceCategory.ComplianceCategoryID;
                newFlatComplianceItemReconciliationData.FCIRD_CategoryName = complianceCategory.CategoryLabel.IsNullOrEmpty() ?
                                                                            complianceCategory.CategoryName : complianceCategory.CategoryLabel;



                newFlatComplianceItemReconciliationData.FCIRD_AssignedToUserNames = String.Join(",", reviewerNames);

                newFlatComplianceItemReconciliationData.FCIRD_PackageSubscriptionID = applicantCategoryDataToUpdate.PackageSubscriptionID;
                newFlatComplianceItemReconciliationData.FCIRD_OrderId = applicantCategoryDataToUpdate.PackageSubscription.OrderID;

                newFlatComplianceItemReconciliationData.FCIRD_SubmissionDate = verificationDetailsContract.applicantItemData.SubmissionDate;//UAT-3373
                newFlatComplianceItemReconciliationData.FCIRD_IsActive = true;
                newFlatComplianceItemReconciliationData.FCIRD_IsDeleted = false;
                newFlatComplianceItemReconciliationData.FCIRD_CreatedBy = verificationDetailsContract.createdModifiedById;
                newFlatComplianceItemReconciliationData.FCIRD_CreatedOn = creationModificationDateTime;
                SecurityContext.FlatComplianceItemReconciliationDatas.AddObject(newFlatComplianceItemReconciliationData);
            }
            return dataNeedsToBeSaved;
        }


        private Int32? GetItemMovementTypeId(String oldItemStatus, ComplianceScreenModes screenMode, Boolean isAdminReviewRequired, List<lkpItemMovementType> lstItemMovementTypes)
        {
            if (screenMode == ComplianceScreenModes.DATAENTRY)
            {
                if (oldItemStatus == ApplicantItemComplianceStatus.Expired.GetStringValue())
                {
                    return GetItemMovementTypeByCode(LkpItemMovementStatus.VIA_EXPIRED.GetStringValue(), lstItemMovementTypes);
                }
                else if (oldItemStatus == ApplicantItemComplianceStatus.Not_Approved.GetStringValue())
                {
                    return GetItemMovementTypeByCode(LkpItemMovementStatus.VIA_DATA_ENTRY_FROM_REJECTED.GetStringValue(), lstItemMovementTypes);
                }
                else if (oldItemStatus == ApplicantItemComplianceStatus.Approved.GetStringValue())
                {
                    return GetItemMovementTypeByCode(LkpItemMovementStatus.VIA_DATA_ENTRY_FROM_APPROVED.GetStringValue(), lstItemMovementTypes);
                }
                else if (oldItemStatus == ApplicantItemComplianceStatus.Pending_Review.GetStringValue())
                {
                    return GetItemMovementTypeByCode(LkpItemMovementStatus.VIA_DATA_ENTRY_FROM_PENDING_REVIEW_FOR_ADMIN.GetStringValue(), lstItemMovementTypes);
                }
                else if (oldItemStatus == ApplicantItemComplianceStatus.Pending_Review_For_Client.GetStringValue())
                {
                    return GetItemMovementTypeByCode(LkpItemMovementStatus.VIA_DATA_ENTRY_FROM_PENDING_REVIEW_FOR_CLIENT_ADMIN.GetStringValue(), lstItemMovementTypes);
                }
                else if (oldItemStatus == ApplicantItemComplianceStatus.Pending_Review_For_Third_Party.GetStringValue())
                {
                    return GetItemMovementTypeByCode(LkpItemMovementStatus.VIA_DATA_ENTRY_FROM_PENDING_REVIEW_FOR_THIRD_PARTY.GetStringValue(), lstItemMovementTypes);
                }
            }
            else
            {
                if (oldItemStatus == ApplicantItemComplianceStatus.Pending_Review.GetStringValue())
                {
                    return GetItemMovementTypeByCode(LkpItemMovementStatus.VIA_VERIFICATION_FROM_PENDING_REVIEW_FOR_ADMIN.GetStringValue(), lstItemMovementTypes);
                }

                else if (screenMode == ComplianceScreenModes.VERIFICATION && oldItemStatus == ApplicantItemComplianceStatus.Pending_Review_For_Third_Party.GetStringValue())
                {
                    return GetItemMovementTypeByCode(LkpItemMovementStatus.VIA_VERIFICATION_FROM_PENDING_REVIEW_FOR_THIRD_PARTY.GetStringValue(), lstItemMovementTypes);
                }

                else if (oldItemStatus == ApplicantItemComplianceStatus.Approved.GetStringValue())
                {
                    return GetItemMovementTypeByCode(LkpItemMovementStatus.VIA_VERIFICATION_FROM_APPROVED.GetStringValue(), lstItemMovementTypes);
                }
                else if (oldItemStatus == ApplicantItemComplianceStatus.Not_Approved.GetStringValue())
                {
                    return GetItemMovementTypeByCode(LkpItemMovementStatus.VIA_VERIFICATION_FROM_REJECTED.GetStringValue(), lstItemMovementTypes);
                }
                else if (String.IsNullOrEmpty(oldItemStatus) || (oldItemStatus == ApplicantItemComplianceStatus.Incomplete.GetStringValue()))
                {
                    if (isAdminReviewRequired)
                        return GetItemMovementTypeByCode(LkpItemMovementStatus.VIA_VERIFICATION_FROM_INCOMPLETE_REVIEW_REQUIRED.GetStringValue(), lstItemMovementTypes);
                    else
                        return GetItemMovementTypeByCode(LkpItemMovementStatus.VIA_VERIFICATION_FROM_INCOMPLETE_REVIEW_NOT_REQUIRED.GetStringValue(), lstItemMovementTypes);
                }
                //Set MovementType to VIA VERIFICATION FROM ITEM DATA EXPIRED when status of expired item is set to approved or any other status.
                else if (oldItemStatus == ApplicantItemComplianceStatus.Expired.GetStringValue())
                {
                    return GetItemMovementTypeByCode(LkpItemMovementStatus.VIA_VERIFICATION_FROM_ITEM_DATA_EXPIRED.GetStringValue(), lstItemMovementTypes);
                }
                else if (oldItemStatus == ApplicantItemComplianceStatus.Pending_Review_For_Client.GetStringValue())
                {
                    return GetItemMovementTypeByCode(LkpItemMovementStatus.VIA_VERIFICATION_FROM_PENDING_REVIEW_FOR_CLIENT_ADMIN.GetStringValue(), lstItemMovementTypes);
                }
            }

            return null;
        }

        /// <summary>
        /// To update Item Status when submitted by the Admins
        ///
        private void SetItemProperties(ApplicantComplianceItemData itemData, Int32 statusId, Int16 reviewerTypeId, Int32? reviewerTenantId)
        {
            if (itemData.IsNotNull())
            {
                itemData.StatusID = statusId;
                //if (!comments.IsNullOrEmpty())
                //    itemData.VerificationComments += comments;

                //assign to user id will be set when send for further review to third party user
                //if (reviewerUserId > 0 && reviewerUserId != null)
                //    itemData.AssignedToUser = reviewerUserId;
                //else
                //    itemData.AssignedToUser = null;

                //Set  ReviewerTypeID as null when approve or reject 
                //and ReviewerTypeID will be clientAdminId if Sent To Client
                if (reviewerTypeId > 0)
                    itemData.ReviewerTypeID = reviewerTypeId;
                else
                    itemData.ReviewerTypeID = null;

                itemData.ReviewerTenantID = reviewerTenantId > 0 ? reviewerTenantId : null;
            }
        }

        private void SaveApplicantDocuments(Int32 createdModifiedById, Dictionary<Int32, Int32> attributeDocuments, DateTime creationDateTime, ApplicantComplianceAttributeData attributeData, Int32 attributeId = 0, Dictionary<Int32, Int32> viewAttributeDocuments = null)
        {
            if (!attributeDocuments.IsNullOrEmpty())
            {
                AddApplicantComplianceDocumentMap(createdModifiedById, attributeDocuments, creationDateTime, attributeData, attributeId);
            }
            else if (!viewAttributeDocuments.IsNullOrEmpty())
            {
                AddApplicantComplianceDocumentMap(createdModifiedById, viewAttributeDocuments, creationDateTime, attributeData, attributeId);
            }
        }

        private void AddApplicantComplianceDocumentMap(Int32 createdModifiedById, Dictionary<Int32, Int32> attributeDocuments, DateTime creationDateTime, ApplicantComplianceAttributeData attributeData, Int32 attributeId)
        {
            foreach (var document in attributeDocuments)
            {
                ApplicantComplianceDocumentMap documents = new ApplicantComplianceDocumentMap();
                if (attributeId == 0)
                    documents.ApplicantComplianceAttributeData = attributeData;
                else
                    documents.ApplicantComplianceAttributeID = attributeId;

                documents.ApplicantDocumentID = document.Key;
                documents.IsDeleted = false;
                documents.CreatedByID = createdModifiedById;
                documents.CreatedOn = creationDateTime;
                _dbContext.ApplicantComplianceDocumentMaps.AddObject(documents);
            }
        }

        private void SaveApplicantItemData(ApplicantComplianceItemData applicantItemData, Int32 createdModifiedById, DateTime creationDateTime)
        {
            applicantItemData.CreatedByID = createdModifiedById;
            applicantItemData.CreatedOn = creationDateTime;
            applicantItemData.IsDeleted = false;
            if (applicantItemData.SubmissionDate.IsNull())
            {
                applicantItemData.SubmissionDate = creationDateTime;
            }
            _dbContext.ApplicantComplianceItemDatas.AddObject(applicantItemData);
        }

        private void SaveApplicantAttributes(ApplicantComplianceItemData applicantItemData, Int32 createdModifiedById, Dictionary<Int32, Int32> attributeDocuments, DateTime creationDateTime, ApplicantComplianceAttributeData attributeData, Dictionary<Int32, Int32> viewAttributeDocuments)
        {
            attributeData.CreatedByID = createdModifiedById;
            attributeData.CreatedOn = creationDateTime;
            attributeData.IsDeleted = false;

            if (!attributeData.ComplianceAttributeDataLargeContents.IsNullOrEmpty())
            {
                foreach (var item in attributeData.ComplianceAttributeDataLargeContents)
                {
                    item.CADLC_CreatedBy = createdModifiedById;
                    item.CADLC_CreatedOn = creationDateTime;
                    item.CADLC_IsDeleted = false;
                    item.CADLC_ModifiedBy = null;
                    item.CADLC_ModifiedOn = null;
                }
            }

            //28/08/2014 Sumit Sood - Resolved issue : CSU Fresno Error on entering Manual Expiration date
            //attributeData.ApplicantComplianceItemData = applicantItemData;
            if (applicantItemData.ApplicantComplianceItemID == 0)
            {
                attributeData.ApplicantComplianceItemData = applicantItemData;
            }
            else
            {
                attributeData.ApplicantComplianceItemID = applicantItemData.ApplicantComplianceItemID;
            }


            String attributeCode;
            if (attributeData.ComplianceAttribute == null)
                attributeCode = GetAttributeTypeCode(attributeData.ComplianceAttributeID);
            else
                attributeCode = attributeData.ComplianceAttribute.lkpComplianceAttributeDatatype.Code.ToLower().Trim();

            //if (attributeData.ComplianceAttribute.lkpComplianceAttributeDatatype.Code.ToLower().Trim() == ComplianceAttributeDatatypes.FileUpload.GetStringValue().ToLower().Trim())
            if (attributeCode == ComplianceAttributeDatatypes.FileUpload.GetStringValue().ToLower().Trim())
            {
                SaveApplicantDocuments(createdModifiedById, attributeDocuments, creationDateTime, attributeData);
            }
            else if (attributeCode == ComplianceAttributeDatatypes.View_Document.GetStringValue().ToLower().Trim())
            {
                SaveApplicantDocuments(createdModifiedById, null, creationDateTime, attributeData, AppConsts.NONE, viewAttributeDocuments);
            }
        }

        /// <summary>
        /// Insert/Update Documents related data for all items 
        /// 1. EXCEPT incomplete
        /// 2. Data for other attributes has been already added but FileType attribute is being added for the first time
        /// </summary>
        /// <param name="toAddDocumentMap"></param>
        /// <param name="ToAddDocumentMapException"></param>
        /// <returns></returns>
        public Boolean AddUpdateApplicantComplianceDocumentMappingData(ApplicantComplianceDocumentMap toAddDocumentMap, ExceptionDocumentMapping toAddDocumentMapException, Int32 applicantComplianceItemDataId, Int32 complianceAttributeId)
        {
            if (toAddDocumentMap != null)
            {
                String _fileAttributeTypeCode = ComplianceAttributeDatatypes.FileUpload.GetStringValue();
                if (toAddDocumentMap.ApplicantComplianceAttributeID == AppConsts.NONE)
                {

                    ApplicantComplianceAttributeData _attributeData = _dbContext.ApplicantComplianceAttributeDatas
                                                                      .Where(attData => attData.ApplicantComplianceItemID == applicantComplianceItemDataId
                                                                      && attData.ComplianceAttribute.lkpComplianceAttributeDatatype.Code == _fileAttributeTypeCode)
                                                                      .FirstOrDefault();

                    if (_attributeData.IsNullOrEmpty()) // AttributeData is to be added for first time
                    {
                        _attributeData = new ApplicantComplianceAttributeData();
                        _attributeData.ApplicantComplianceItemID = applicantComplianceItemDataId;
                        _attributeData.CreatedByID = toAddDocumentMap.CreatedByID;
                        _attributeData.CreatedOn = toAddDocumentMap.CreatedOn;
                        _attributeData.ComplianceAttributeID = complianceAttributeId;
                        _attributeData.AttributeValue = "1";
                        _attributeData.IsDeleted = false;

                        _dbContext.ApplicantComplianceAttributeDatas.AddObject(_attributeData);
                        toAddDocumentMap.ApplicantComplianceAttributeID = _attributeData.ApplicantComplianceAttributeID;
                    }
                    else // AttributeData is already added
                    {
                        toAddDocumentMap.ApplicantComplianceAttributeID = _attributeData.ApplicantComplianceAttributeID;
                        _attributeData.AttributeValue = Convert.ToString(Convert.ToInt32(_attributeData.AttributeValue) + 1);
                    }
                }
                else
                {
                    ApplicantComplianceAttributeData _attributeData = _dbContext.ApplicantComplianceAttributeDatas
                                                                          .Where(attData => attData.ApplicantComplianceItemID == applicantComplianceItemDataId
                                                                          && attData.ComplianceAttribute.lkpComplianceAttributeDatatype.Code == _fileAttributeTypeCode)
                                                                          .FirstOrDefault();

                    _attributeData.AttributeValue = Convert.ToString(Convert.ToInt32(_attributeData.AttributeValue) + 1);
                    _attributeData.ModifiedByID = toAddDocumentMap.CreatedByID;
                    _attributeData.ModifiedOn = toAddDocumentMap.CreatedOn;

                }
                _dbContext.ApplicantComplianceDocumentMaps.AddObject(toAddDocumentMap);
            }
            if (toAddDocumentMapException != null)
            {
                _dbContext.ExceptionDocumentMappings.AddObject(toAddDocumentMapException);
            }

            _dbContext.SaveChanges();
            return true;
        }

        /// <summary>
        /// Add Category, Item, Attribute & Document mapping for Incomplete Items
        /// </summary>
        /// <param name="toAddDocumentMap"></param>
        /// <param name="categoryData"></param>
        /// <param name="itemData"></param>
        /// <param name="attributeData"></param>
        /// <returns></returns>
        public void AddIncompleteDocumentMapping(ApplicantComplianceDocumentMap toAddDocumentMap, ApplicantComplianceCategoryData categoryData,
              ApplicantComplianceItemData itemData, ApplicantComplianceAttributeData attributeData, Int32 packageSubscriptionId, Int32 applicantId, out Int32 itemDataId)
        {
            itemDataId = 0;
            if (!toAddDocumentMap.IsNullOrEmpty())
            {
                itemDataId = SaveUpdateIncompleteItemDocumentsSaveCase(toAddDocumentMap, categoryData, itemData, attributeData, packageSubscriptionId, applicantId, itemDataId);
            }
        }

        /// <summary>
        /// Add/Update the documents based on first time or not both for SAVE and Assign-UnAssign of documents from Verification details screen
        /// </summary>
        /// <param name="toAddDocumentMap"></param>
        /// <param name="categoryData"></param>
        /// <param name="itemData"></param>
        /// <param name="attributeData"></param>
        /// <param name="packageSubscriptionId"></param>
        /// <param name="applicantId"></param>
        /// <param name="isSaveCase">Property to differentiate the Save and Assign/Un-assign case. Based on this, the SaveChanges will be used.
        /// This function is called from SAVE (single call for each item) & BULK items document Assign/Un-Assign. So SaveChanges() is handled accordingly
        /// </param>
        /// <param name="itemDataId"></param>
        /// <returns></returns>
        private Int32 SaveUpdateIncompleteItemDocumentsAssignUnAssign(ApplicantComplianceDocumentMap toAddDocumentMap, ApplicantComplianceCategoryData categoryData, ApplicantComplianceItemData itemData, ApplicantComplianceAttributeData attributeData, Int32 packageSubscriptionId, Int32 applicantId, Int32 toDeleteCount)
        {
            //Int32 itemDataId = 0;
            String _categoryStatus = ApplicantCategoryComplianceStatus.Incomplete.GetStringValue();
            Int32 _categoryComplianceStatusId = _dbContext.lkpCategoryComplianceStatus.Where(catStatus => catStatus.Code.ToLower().Trim() == _categoryStatus.ToLower().Trim()).FirstOrDefault().CategoryComplianceStatusID;
            categoryData.StatusID = _categoryComplianceStatusId;

            Int32 _itemComplianceStatusId = GetReviewStatusByCode(ApplicantItemComplianceStatus.Incomplete.GetStringValue());
            itemData.StatusID = _itemComplianceStatusId;

            Int32 _applicantComplianceCategoryInitialId = GetApplicantComplianceCategoryId(packageSubscriptionId, categoryData.ComplianceCategoryID, applicantId);

            // First time insertion
            if (_applicantComplianceCategoryInitialId == AppConsts.NONE)
            {
                _dbContext.ApplicantComplianceCategoryDatas.AddObject(categoryData);
                _dbContext.ApplicantComplianceItemDatas.AddObject(itemData);
                _dbContext.ApplicantComplianceAttributeDatas.AddObject(attributeData);

                toAddDocumentMap.ApplicantComplianceAttributeID = attributeData.ApplicantComplianceAttributeID;
                _dbContext.ApplicantComplianceDocumentMaps.AddObject(toAddDocumentMap);

                return itemData.ApplicantComplianceItemID;
            }
            else  // Data already added by another item of same category
            {
                ApplicantComplianceItemData _itemData = _dbContext.ApplicantComplianceItemDatas.Where
                    (itm => itm.ApplicantComplianceCategoryID == _applicantComplianceCategoryInitialId
                    && itm.ComplianceItemID == itemData.ComplianceItemID
                    && itm.IsDeleted == false).FirstOrDefault();

                if (_itemData.IsNullOrEmpty()) // Case when only category data is saved - Can occur when only category data is saved by admin from the top of items, in verification details screen
                {
                    itemData.ApplicantComplianceCategoryID = _applicantComplianceCategoryInitialId;
                    _dbContext.ApplicantComplianceItemDatas.AddObject(itemData); // If NO item exists, then add new item and attribute for it

                    _dbContext.ApplicantComplianceAttributeDatas.AddObject(attributeData);
                    toAddDocumentMap.ApplicantComplianceAttributeID = attributeData.ApplicantComplianceAttributeID;
                    _dbContext.ApplicantComplianceDocumentMaps.AddObject(toAddDocumentMap);

                    return itemData.ApplicantComplianceItemID;
                }
                else
                {
                    //itemDataId = _itemData.ApplicantComplianceItemID;
                    String _fileUploadCode = ComplianceAttributeDatatypes.FileUpload.GetStringValue();
                    ApplicantComplianceAttributeData _attributeData = _dbContext.ApplicantComplianceAttributeDatas
                        .Where(att => att.ApplicantComplianceItemID == _itemData.ApplicantComplianceItemID
                            && att.ComplianceAttribute.lkpComplianceAttributeDatatype.Code == _fileUploadCode
                        && att.IsDeleted == false).FirstOrDefault();

                    if (_attributeData.IsNullOrEmpty())
                    {
                        // Get Applicant Compliance Item Id if exists, else attach new instance id
                        attributeData.ApplicantComplianceItemID = _itemData.ApplicantComplianceItemID;
                        _dbContext.ApplicantComplianceAttributeDatas.AddObject(attributeData);

                        toAddDocumentMap.ApplicantComplianceAttributeID = attributeData.ApplicantComplianceAttributeID;
                        _dbContext.ApplicantComplianceDocumentMaps.AddObject(toAddDocumentMap);
                    }
                    else
                    {
                        _attributeData.AttributeValue = Convert.ToString((Convert.ToInt32(_attributeData.AttributeValue) + Convert.ToInt32(attributeData.AttributeValue)) - toDeleteCount);
                        _attributeData.ModifiedOn = attributeData.CreatedOn;
                        _attributeData.ModifiedByID = attributeData.CreatedByID;
                        toAddDocumentMap.ApplicantComplianceAttributeID = _attributeData.ApplicantComplianceAttributeID;
                        _dbContext.ApplicantComplianceDocumentMaps.AddObject(toAddDocumentMap);
                    }

                    return _itemData.ApplicantComplianceItemID;
                }
            }

            //return itemData.ApplicantComplianceItemID;
            //return itemDataId;
        }

        private Int32 SaveUpdateIncompleteItemDocumentsAssignUnAssignNew(List<ApplicantComplianceDocumentMap> toAddDocumentMap, ApplicantComplianceCategoryData categoryData, ApplicantComplianceItemData itemData, ApplicantComplianceAttributeData attributeData, Int32 packageSubscriptionId, Int32 applicantId, Int32 toDeleteCount, List<ListItemAssignmentProperties> lstAssignmentProperties)
        {
            //Int32 itemDataId = 0;
            String _categoryStatus = ApplicantCategoryComplianceStatus.Incomplete.GetStringValue();
            Int32 _categoryComplianceStatusId = _dbContext.lkpCategoryComplianceStatus.Where(catStatus => catStatus.Code.ToLower().Trim() == _categoryStatus.ToLower().Trim()).FirstOrDefault().CategoryComplianceStatusID;
            categoryData.StatusID = _categoryComplianceStatusId;

            Int32 _itemComplianceStatusId = GetReviewStatusByCode(ApplicantItemComplianceStatus.Incomplete.GetStringValue());
            itemData.StatusID = _itemComplianceStatusId;

            Int32 _applicantComplianceCategoryInitialId = GetApplicantComplianceCategoryId(packageSubscriptionId, categoryData.ComplianceCategoryID, applicantId);

            // First time insertion
            if (_applicantComplianceCategoryInitialId == AppConsts.NONE)
            {
                _dbContext.ApplicantComplianceCategoryDatas.AddObject(categoryData);
                _dbContext.ApplicantComplianceItemDatas.AddObject(itemData);
                _dbContext.ApplicantComplianceAttributeDatas.AddObject(attributeData);

                foreach (var docMap in toAddDocumentMap)
                {
                    docMap.ApplicantComplianceAttributeID = attributeData.ApplicantComplianceAttributeID;
                    _dbContext.ApplicantComplianceDocumentMaps.AddObject(docMap);
                }

                _dbContext.SaveChanges();
                return itemData.ApplicantComplianceItemID;
            }
            else  // Data already added by another item of same category
            {
                ApplicantComplianceItemData _itemData = _dbContext.ApplicantComplianceItemDatas.Where
                    (itm => itm.ApplicantComplianceCategoryID == _applicantComplianceCategoryInitialId
                    && itm.ComplianceItemID == itemData.ComplianceItemID
                    && itm.IsDeleted == false).FirstOrDefault();

                if (_itemData.IsNullOrEmpty()) // Case when only category data is saved - Can occur when only category data is saved by admin from the top of items, in verification details screen
                {
                    itemData.ApplicantComplianceCategoryID = _applicantComplianceCategoryInitialId;
                    itemData = SetItemReviewerType(itemData.ComplianceItemID, lstAssignmentProperties, itemData);
                    _dbContext.ApplicantComplianceItemDatas.AddObject(itemData); // If NO item exists, then add new item and attribute for it

                    _dbContext.ApplicantComplianceAttributeDatas.AddObject(attributeData);

                    foreach (var docMap in toAddDocumentMap)
                    {
                        docMap.ApplicantComplianceAttributeID = attributeData.ApplicantComplianceAttributeID;
                        _dbContext.ApplicantComplianceDocumentMaps.AddObject(docMap);
                    }

                    //docMap.ApplicantComplianceAttributeID = attributeData.ApplicantComplianceAttributeID;
                    //_dbContext.ApplicantComplianceDocumentMaps.AddObject(toAddDocumentMap);
                    _dbContext.SaveChanges();
                    return itemData.ApplicantComplianceItemID;
                }
                else
                {
                    //itemDataId = _itemData.ApplicantComplianceItemID;
                    String _fileUploadCode = ComplianceAttributeDatatypes.FileUpload.GetStringValue();
                    ApplicantComplianceAttributeData _attributeData = _dbContext.ApplicantComplianceAttributeDatas
                        .Where(att => att.ApplicantComplianceItemID == _itemData.ApplicantComplianceItemID
                            && att.ComplianceAttribute.lkpComplianceAttributeDatatype.Code == _fileUploadCode
                        && att.IsDeleted == false).FirstOrDefault();

                    if (_attributeData.IsNullOrEmpty())
                    {
                        // Get Applicant Compliance Item Id if exists, else attach new instance id
                        attributeData.ApplicantComplianceItemID = _itemData.ApplicantComplianceItemID;
                        _dbContext.ApplicantComplianceAttributeDatas.AddObject(attributeData);

                        foreach (var docMap in toAddDocumentMap)
                        {
                            docMap.ApplicantComplianceAttributeID = attributeData.ApplicantComplianceAttributeID;
                            _dbContext.ApplicantComplianceDocumentMaps.AddObject(docMap);
                        }

                        //toAddDocumentMap.ApplicantComplianceAttributeID = attributeData.ApplicantComplianceAttributeID;
                        //_dbContext.ApplicantComplianceDocumentMaps.AddObject(toAddDocumentMap);
                    }
                    else
                    {
                        _attributeData.AttributeValue = Convert.ToString((Convert.ToInt32(_attributeData.AttributeValue) + Convert.ToInt32(attributeData.AttributeValue)) - toDeleteCount);
                        _attributeData.ModifiedOn = attributeData.CreatedOn;
                        _attributeData.ModifiedByID = attributeData.CreatedByID;

                        foreach (var docMap in toAddDocumentMap)
                        {
                            docMap.ApplicantComplianceAttributeID = _attributeData.ApplicantComplianceAttributeID;
                            _dbContext.ApplicantComplianceDocumentMaps.AddObject(docMap);
                        }

                        //toAddDocumentMap.ApplicantComplianceAttributeID = _attributeData.ApplicantComplianceAttributeID;
                        //_dbContext.ApplicantComplianceDocumentMaps.AddObject(toAddDocumentMap);
                    }
                    _dbContext.SaveChanges();
                    return _itemData.ApplicantComplianceItemID;
                }
            }

            //return itemData.ApplicantComplianceItemID;
            //return itemDataId;
        }


        /// <summary>
        /// Add/Update the documents based on first time or not both for SAVE and Assign-UnAssign of documents from Verification details screen
        /// </summary>
        /// <param name="toAddDocumentMap"></param>
        /// <param name="categoryData"></param>
        /// <param name="itemData"></param>
        /// <param name="attributeData"></param>
        /// <param name="packageSubscriptionId"></param>
        /// <param name="applicantId"></param>
        /// <param name="isSaveCase">Property to differentiate the Save and Assign/Un-assign case. Based on this, the SaveChanges will be used.
        /// This function is called from SAVE (single call for each item) & BULK items document Assign/Un-Assign. So SaveChanges() is handled accordingly
        /// </param>
        /// <param name="itemDataId"></param>
        /// <returns></returns>
        private Int32 SaveUpdateIncompleteItemDocumentsSaveCase(ApplicantComplianceDocumentMap toAddDocumentMap, ApplicantComplianceCategoryData categoryData, ApplicantComplianceItemData itemData, ApplicantComplianceAttributeData attributeData, Int32 packageSubscriptionId, Int32 applicantId, Int32 itemDataId = 0)
        {

            String _categoryStatus = ApplicantCategoryComplianceStatus.Incomplete.GetStringValue();
            Int32 _categoryComplianceStatusId = _dbContext.lkpCategoryComplianceStatus.Where(catStatus => catStatus.Code.ToLower().Trim() == _categoryStatus.ToLower().Trim()).FirstOrDefault().CategoryComplianceStatusID;
            categoryData.StatusID = _categoryComplianceStatusId;

            Int32 _itemComplianceStatusId = GetReviewStatusByCode(ApplicantItemComplianceStatus.Incomplete.GetStringValue());
            itemData.StatusID = _itemComplianceStatusId;

            Int32 _applicantComplianceCategoryInitialId = GetApplicantComplianceCategoryId(packageSubscriptionId, categoryData.ComplianceCategoryID, applicantId);

            // First time insertion
            if (_applicantComplianceCategoryInitialId == AppConsts.NONE)
            {
                _dbContext.ApplicantComplianceCategoryDatas.AddObject(categoryData);
                _dbContext.ApplicantComplianceItemDatas.AddObject(itemData);
                _dbContext.ApplicantComplianceAttributeDatas.AddObject(attributeData);

                toAddDocumentMap.ApplicantComplianceAttributeID = attributeData.ApplicantComplianceAttributeID;
                _dbContext.ApplicantComplianceDocumentMaps.AddObject(toAddDocumentMap);
                _dbContext.SaveChanges();
                itemDataId = itemData.ApplicantComplianceItemID;
            }
            else  // Data already added by another item of same category
            {
                ApplicantComplianceItemData _itemData = _dbContext.ApplicantComplianceItemDatas.Where
                    (itm => itm.ApplicantComplianceCategoryID == _applicantComplianceCategoryInitialId
                    && itm.ComplianceItemID == itemData.ComplianceItemID
                    && itm.IsDeleted == false).FirstOrDefault();

                if (_itemData.IsNullOrEmpty()) // Case when only category data is saved - Can occur when only category data is saved by admin from the top of items, in verification details screen
                {
                    itemData.ApplicantComplianceCategoryID = _applicantComplianceCategoryInitialId;
                    _dbContext.ApplicantComplianceItemDatas.AddObject(itemData); // If NO item exists, then add new item and attribute for it

                    _dbContext.ApplicantComplianceAttributeDatas.AddObject(attributeData);
                    toAddDocumentMap.ApplicantComplianceAttributeID = attributeData.ApplicantComplianceAttributeID;
                    _dbContext.ApplicantComplianceDocumentMaps.AddObject(toAddDocumentMap);
                    _dbContext.SaveChanges();
                }
                else
                {
                    itemDataId = _itemData.ApplicantComplianceItemID;
                    String _fileUploadCode = ComplianceAttributeDatatypes.FileUpload.GetStringValue();
                    //ApplicantComplianceAttributeData _attributeData = _dbContext.ApplicantComplianceAttributeDatas
                    //    .Where(att => att.ApplicantComplianceItemID == itemDataId
                    //    //.Where(att => att.ApplicantComplianceItemID == _itemData.ApplicantComplianceItemID
                    //        && att.ComplianceAttribute.lkpComplianceAttributeDatatype.Code == _fileUploadCode
                    //    && att.IsDeleted == false).FirstOrDefault();

                    ApplicantComplianceAttributeData _attributeData = _itemData.ApplicantComplianceAttributeDatas
                        .Where(att => att.ApplicantComplianceItemID == itemDataId
                            && att.ComplianceAttribute.lkpComplianceAttributeDatatype.Code == _fileUploadCode
                        && att.IsDeleted == false).FirstOrDefault();

                    if (_attributeData.IsNullOrEmpty())
                    {
                        // Get Applicant Compliance Item Id if exists, else attach new instance id
                        attributeData.ApplicantComplianceItemID = itemDataId;
                        _dbContext.ApplicantComplianceAttributeDatas.AddObject(attributeData);

                        toAddDocumentMap.ApplicantComplianceAttributeID = attributeData.ApplicantComplianceAttributeID;
                        _dbContext.ApplicantComplianceDocumentMaps.AddObject(toAddDocumentMap);
                    }
                    else
                    {
                        _attributeData.AttributeValue = Convert.ToString(Convert.ToInt32(_attributeData.AttributeValue) + Convert.ToInt32(attributeData.AttributeValue));
                        _attributeData.ModifiedOn = attributeData.CreatedOn;
                        _attributeData.ModifiedByID = attributeData.CreatedByID;
                        toAddDocumentMap.ApplicantComplianceAttributeID = _attributeData.ApplicantComplianceAttributeID;
                        _dbContext.ApplicantComplianceDocumentMaps.AddObject(toAddDocumentMap);
                    }
                    _dbContext.SaveChanges();
                }
                if (_itemData.IsNullOrEmpty())
                    itemDataId = itemData.ApplicantComplianceItemID;
                else
                    itemDataId = _itemData.ApplicantComplianceItemID;
            }
            return itemDataId;
        }


        public Boolean AssignUnAssignItemDocuments(List<ApplicantComplianceDocumentMap> toAddDocumentMap, List<ExceptionDocumentMapping> ToAddDocumentMapException
            , List<Int32> ToDeleteApplicantComplianceDocumentMapIDs, Boolean IsException, Int32 currentUserId, Int32 applicantComplianceItemId)
        {
            if (IsException)
            {
                if (ToAddDocumentMapException != null && ToAddDocumentMapException.Count > 0)
                {
                    foreach (ExceptionDocumentMapping documentMap in ToAddDocumentMapException)
                        _dbContext.ExceptionDocumentMappings.AddObject(documentMap);
                }

                if (ToDeleteApplicantComplianceDocumentMapIDs != null && ToDeleteApplicantComplianceDocumentMapIDs.Count > 0)
                {
                    foreach (Int32 applicantComplianceDocumentMapID in ToDeleteApplicantComplianceDocumentMapIDs)
                    {
                        ExceptionDocumentMapping applicantComplianceDocumentMapInDb =
                        _dbContext.ExceptionDocumentMappings.FirstOrDefault(x => x.ExceptionDocumentMappingID == applicantComplianceDocumentMapID);
                        if (applicantComplianceDocumentMapInDb != null)
                        {
                            applicantComplianceDocumentMapInDb.IsDeleted = true;
                            applicantComplianceDocumentMapInDb.ModifiedBy = currentUserId;
                            applicantComplianceDocumentMapInDb.ModifiedOn = DateTime.Now;
                        }
                    }
                }
            }
            else
            {
                DateTime currentDateTime = DateTime.Now;
                Int32 _applicntAttributeId = AppConsts.NONE;
                String _fileUplodeCode = ComplianceAttributeDatatypes.FileUpload.GetStringValue();
                String _viewDocCode = ComplianceAttributeDatatypes.View_Document.GetStringValue();
                ApplicantComplianceAttributeData _fileAttributeData = _dbContext.ApplicantComplianceAttributeDatas.Where
                     (x => x.ApplicantComplianceItemID == applicantComplianceItemId
                     && x.ComplianceAttribute.lkpComplianceAttributeDatatype.Code == _fileUplodeCode
                     && x.IsDeleted == false).FirstOrDefault();

                ApplicantComplianceAttributeData _viewDocAttributeData = _dbContext.ApplicantComplianceAttributeDatas.Where
                    (x => x.ApplicantComplianceItemID == applicantComplianceItemId
                    && x.ComplianceAttribute.lkpComplianceAttributeDatatype.Code == _viewDocCode
                    && x.IsDeleted == false).FirstOrDefault();


                List<Int32> toAddDocMapIDs = new List<int>();
                if (!toAddDocumentMap.IsNullOrEmpty())
                {
                    toAddDocumentMap.Select(cond => cond.ApplicantComplianceDocumentMapID).ToList();
                }

                if (_fileAttributeData.IsNotNull())
                {
                    _fileAttributeData.AttributeValue = Convert.ToString((Convert.ToInt32(_fileAttributeData.AttributeValue.IsNullOrEmpty() ? AppConsts.ZERO : _fileAttributeData.AttributeValue)
                        + toAddDocumentMap.Count()));
                    _fileAttributeData.ModifiedByID = currentUserId;
                    _fileAttributeData.ModifiedOn = currentDateTime;
                }

                Int32 viewDocMapIDs = 0;
                if (_viewDocAttributeData.IsNotNull() && !_viewDocAttributeData.ApplicantComplianceDocumentMaps.IsNullOrEmpty())
                {
                    viewDocMapIDs = (_viewDocAttributeData.ApplicantComplianceDocumentMaps.Where(cond => !cond.IsDeleted).FirstOrDefault()).IsNull() ? AppConsts.NONE :
                        (_viewDocAttributeData.ApplicantComplianceDocumentMaps.Where(cond => !cond.IsDeleted).FirstOrDefault()).ApplicantComplianceDocumentMapID;
                }

                if (ToDeleteApplicantComplianceDocumentMapIDs.Contains(viewDocMapIDs))
                {
                    _viewDocAttributeData.AttributeValue = Convert.ToString(Convert.ToInt32(_viewDocAttributeData.AttributeValue) - 1);
                    if (_fileAttributeData.IsNotNull())
                    {
                        _fileAttributeData.AttributeValue = Convert.ToString(Convert.ToInt32(_fileAttributeData.AttributeValue) - (ToDeleteApplicantComplianceDocumentMapIDs.Count() - 1));
                    }
                }
                else if (_fileAttributeData.IsNotNull())
                {
                    _fileAttributeData.AttributeValue = Convert.ToString(Convert.ToInt32(_fileAttributeData.AttributeValue) - ToDeleteApplicantComplianceDocumentMapIDs.Count());
                }


                if (toAddDocumentMap != null && toAddDocumentMap.Count > 0)
                {
                    foreach (ApplicantComplianceDocumentMap documentMap in toAddDocumentMap)
                    {
                        _applicntAttributeId = documentMap.ApplicantComplianceAttributeID;
                        _dbContext.ApplicantComplianceDocumentMaps.AddObject(documentMap);
                    }
                }

                if (ToDeleteApplicantComplianceDocumentMapIDs != null && ToDeleteApplicantComplianceDocumentMapIDs.Count > 0)
                {
                    Int32 _mappedDocumentId = AppConsts.NONE; // To store ID of any one Document which is being Un-Mapped, so that its AttributeValue can be also updated

                    foreach (Int32 applicantComplianceDocumentMapID in ToDeleteApplicantComplianceDocumentMapIDs)
                    {
                        ApplicantComplianceDocumentMap applicantComplianceDocumentMapInDb =
                        _dbContext.ApplicantComplianceDocumentMaps.FirstOrDefault(x => x.ApplicantComplianceDocumentMapID == applicantComplianceDocumentMapID);

                        _mappedDocumentId = applicantComplianceDocumentMapInDb.ApplicantComplianceDocumentMapID;

                        if (applicantComplianceDocumentMapInDb != null)
                        {
                            applicantComplianceDocumentMapInDb.IsDeleted = true;
                            applicantComplianceDocumentMapInDb.ModifiedByID = currentUserId;
                            applicantComplianceDocumentMapInDb.ModifiedOn = currentDateTime;
                        }
                    }
                }


            }
            _dbContext.SaveChanges();
            return true;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="toAddDocumentMap"></param>
        /// <param name="categoryData"></param>
        /// <param name="itemData"></param>
        /// <param name="attributeData"></param>
        /// <param name="packageSubscriptionId"></param>
        /// <param name="applicantId"></param>
        /// <param name="itemDataId">Return the ItemData Id to re-bind the documents grid</param>
        public void AssignUnAssignIncompleteItemDocuments(List<ApplicantComplianceDocumentMap> toAddDocumentMap, List<Int32> toDeleteDocumentMap, ApplicantComplianceCategoryData categoryData,
        ApplicantComplianceItemData itemData, ApplicantComplianceAttributeData attributeData, Int32 packageSubscriptionId, Int32 applicantId, Int32 currentUserId, out Int32 itemDataId, List<ListItemAssignmentProperties> lstAssignmentProperties)
        {
            itemDataId = AppConsts.NONE;

            itemDataId = SaveUpdateIncompleteItemDocumentsAssignUnAssignNew(toAddDocumentMap, categoryData, itemData, attributeData, packageSubscriptionId, applicantId, toDeleteDocumentMap.Count(), lstAssignmentProperties);

            //foreach (ApplicantComplianceDocumentMap documentMap in toAddDocumentMap)
            //{
            //    //Will return Itemdata id if the record is updated for already existing item else, if condition below will set the new ItemId
            //    itemDataId = SaveUpdateIncompleteItemDocumentsAssignUnAssign(documentMap, categoryData, itemData, attributeData, packageSubscriptionId, applicantId, toDeleteDocumentMap.Count());
            //}
            //_dbContext.SaveChanges();

            if (itemDataId == AppConsts.NONE) // Set ItemDataId only if it is new insertion of an item and its documents, else used exissting itemId
                itemDataId = itemData.ApplicantComplianceItemID;

            Int32 _mappedDocumentId = AppConsts.NONE; // To store ID of any one Document which is being Un-Mapped, so that its AttributeValue can be also updated
            if (!toDeleteDocumentMap.IsNullOrEmpty())
            {
                DateTime currentDateTime = DateTime.Now;
                foreach (Int32 documentId in toDeleteDocumentMap)
                {
                    ApplicantComplianceDocumentMap applicantComplianceDocumentMapInDb =
                       _dbContext.ApplicantComplianceDocumentMaps.FirstOrDefault(x => x.ApplicantComplianceDocumentMapID == documentId);

                    _mappedDocumentId = applicantComplianceDocumentMapInDb.ApplicantComplianceDocumentMapID;

                    if (applicantComplianceDocumentMapInDb.IsNotNull())
                    {
                        applicantComplianceDocumentMapInDb.IsDeleted = true;
                        applicantComplianceDocumentMapInDb.ModifiedByID = currentUserId;
                        applicantComplianceDocumentMapInDb.ModifiedOn = currentDateTime;
                    }


                    if (itemDataId == AppConsts.NONE) // Set the ItemData Id for Un-Assign of the Documents for Incomplete items
                        itemDataId = applicantComplianceDocumentMapInDb.ApplicantComplianceAttributeData.ApplicantComplianceItemData.ApplicantComplianceItemID;
                }
                //Int32 _documentsToDelete = toDeleteDocumentMap.Count();

                //if (_documentsToDelete > 0)
                //{
                //    // Update the AttributeValue
                //    ApplicantComplianceDocumentMap _mappedDoc = _dbContext.ApplicantComplianceDocumentMaps.FirstOrDefault(x => x.ApplicantComplianceDocumentMapID == _mappedDocumentId);
                //    ApplicantComplianceAttributeData _attributeData = _mappedDoc.ApplicantComplianceAttributeData;
                //    _attributeData.AttributeValue = Convert.ToString(Convert.ToInt32(_attributeData.AttributeValue) - _documentsToDelete);
                //    _attributeData.ModifiedByID = currentUserId;
                //    _attributeData.ModifiedOn = currentDateTime;
                //}
                _dbContext.SaveChanges();
            }
        }


        public DataTable GetApplicantComplianceItemDataTable(ItemVerificationQueueData verificationQueueData, CustomPagingArgsContract verificationGridCustomPaging, String customHTML, String DPMID)
        {
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                String ApplicantComplianceItemIds = String.Empty;
                SqlCommand command = new SqlCommand("GetVerificationQueueData", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@xmldata", verificationQueueData.XML);
                command.Parameters.AddWithValue("@filteringSortingData", verificationGridCustomPaging.XML);
                command.Parameters.AddWithValue("@CustomAtrributesData", customHTML);
                command.Parameters.AddWithValue("@InstitutionHierarchy", DPMID);
                command.Parameters.AddWithValue("@ApplicantComplianceItemIds", ApplicantComplianceItemIds);
                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > 1)
                {
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        verificationGridCustomPaging.CurrentPageIndex = Convert.ToInt32(Convert.ToString(ds.Tables[0].Rows[0]["CurrentPageIndex"]));
                        verificationGridCustomPaging.VirtualPageCount = Convert.ToInt32(Convert.ToString(ds.Tables[0].Rows[0]["VirtualCount"]));
                    }
                    return ds.Tables[1];
                }
            }

            return new DataTable();
        }


        /// <summary>
        /// Gets the active items for the assignment and user work queue based on the given parameters.
        /// </summary>
        /// <param name="tenantId">Tenant Id</param>
        /// <param name="statusCode">Status code</param>
        /// <param name="assignToUserId">Assign to User Id</param>
        /// <param name="reviewerType">Reviewer Type Code</param>
        /// <param name="showIncompleteItems">To Show incomplete Items</param>
        /// <returns>Query for showing active items</returns>
        public IQueryable<vwComplianceItemDataQueue> GetApplicantComplianceItemData(Int32 tenantId, List<String> lstStatusCode, Int32 assignToUserId, String reviewerType, Boolean showIncompleteItems, Int32 reviewerId)
        {
            //Checks if the request is for Assignment Queue or User Work Queue.
            //assignToUserId will be greater than zero only for User Work Queue.
            if (assignToUserId <= AppConsts.NONE)
            {
                //Checks if the request is for Verification Queue or Exception Queue.
                //reviewerType is null in case of Exception Queue.
                if (reviewerType.IsNotNull())
                {
                    //Gets the status code for Third party Pending review.
                    String statusPndgRvwThirdPty = ApplicantItemComplianceStatus.Pending_Review_For_Third_Party.GetStringValue();
                    String _incompleteItemStatusCode = ApplicantItemComplianceStatus.Incomplete.GetStringValue();
                    //Checks if the user is Third Party Admin.
                    if (lstStatusCode.Contains(statusPndgRvwThirdPty))
                    {
                        //Checks if the Show Incomplete Item Check box is checked or Not.
                        //If checked, Includes incomplete items along with the other items.
                        if (showIncompleteItems)
                        {
                            return _dbContext.vwComplianceItemDataQueues.Where(obj => ((lstStatusCode.Contains(obj.VerificationStatusCode)
                                && obj.ReviewerTenantId == reviewerId)) || (obj.ApplicantComplianceItemId == null && obj.ApplicantComplianceCategoryId != null)
                                || (obj.ApplicantComplianceItemId != null && obj.VerificationStatusCode == _incompleteItemStatusCode && obj.ApplicantComplianceCategoryId != null));
                        }
                        else
                        {
                            return _dbContext.vwComplianceItemDataQueues.Where(obj => lstStatusCode.Contains(obj.VerificationStatusCode)
                             && obj.ReviewerTenantId == reviewerId);
                        }
                    }
                    //case when user is Admin or Client Admin.
                    else
                    {
                        //Checks if the Show Incomplete Item Check box is checked or Not.
                        //If checked, Includes incomplete items along with the other items.
                        if (showIncompleteItems)
                        {
                            return _dbContext.vwComplianceItemDataQueues.Where(obj => (lstStatusCode.Contains(obj.VerificationStatusCode))
                                 || (obj.ApplicantComplianceItemId == null && obj.ApplicantComplianceCategoryId != null)
                                 || (obj.ApplicantComplianceItemId != null && obj.VerificationStatusCode == _incompleteItemStatusCode && obj.ApplicantComplianceCategoryId != null));
                        }
                        else
                        {
                            return _dbContext.vwComplianceItemDataQueues.Where(obj => lstStatusCode.Contains(obj.VerificationStatusCode));
                        }
                    }
                }
                //Case when request is for Exception Queue within Assignment Queue(Admin).
                else
                {
                    //Gets the items for the Exception Queue for Admin.
                    return _dbContext.vwComplianceItemDataQueues.Where(obj => lstStatusCode.Contains(obj.VerificationStatusCode));
                }
            }
            //Case when request is for User Work Queue.
            else
            {
                //Gets the items for the Verification Queue and Exception Queue for User Work Queue.
                return _dbContext.vwComplianceItemDataQueues.Where(obj => lstStatusCode.Contains(obj.VerificationStatusCode)
                           && obj.AssignedToUserID == assignToUserId);
            }
        }

        /// <summary>
        /// Gets the active items for the assignment and user work queue based on the given parameters for client users.
        /// </summary>
        /// <param name="tenantId">Tenant Id</param>
        /// <param name="statusCode">Status code</param>
        /// <param name="assignToUserId">Assign to User Id</param>
        /// <param name="reviewerType">Reviewer Type Code</param>
        /// <param name="showIncompleteItems">To Show incomplete Items</param>
        /// <returns>Query for showing active items</returns>
        public IQueryable<vwComplianceItemDataQueueRestricted> GetApplicantComplianceItemDataForClientUsers(Int32 tenantId, List<String> lstStatusCode, Int32 assignToUserId, String reviewerType, Boolean showIncompleteItems, Int32 reviewerId)
        {
            //Checks if the request is for Assignment Queue or User Work Queue.
            //assignToUserId will be greater than zero only for User Work Queue.
            if (assignToUserId <= AppConsts.NONE)
            {
                //Checks if the request is for Verification Queue or Exception Queue.
                //reviewerType is null in case of Exception Queue.
                if (reviewerType.IsNotNull())
                {
                    String _incompleteItemStatusCode = ApplicantItemComplianceStatus.Incomplete.GetStringValue();

                    //case when user is Client Admin.
                    //Checks if the Show Incomplete Item Check box is checked or Not.
                    //If checked, Includes incomplete items along with the other items.
                    if (showIncompleteItems)
                    {
                        return _dbContext.vwComplianceItemDataQueueRestricteds.Where(obj => (lstStatusCode.Contains(obj.VerificationStatusCode))
                             || (obj.ApplicantComplianceItemId == null && obj.ApplicantComplianceCategoryId != null)
                             || (obj.ApplicantComplianceItemId != null && obj.VerificationStatusCode == _incompleteItemStatusCode && obj.ApplicantComplianceCategoryId != null));
                    }
                    else
                    {
                        return _dbContext.vwComplianceItemDataQueueRestricteds.Where(obj => lstStatusCode.Contains(obj.VerificationStatusCode));
                    }
                }
                //Case when request is for Exception Queue within Assignment Queue(Client Admin).
                else
                {
                    //Gets the items for the Exception Queue for Admin.
                    return _dbContext.vwComplianceItemDataQueueRestricteds.Where(obj => lstStatusCode.Contains(obj.VerificationStatusCode));
                }
            }
            //Case when request is for User Work Queue.
            else
            {
                //Gets the items for the Verification Queue and Exception Queue for User Work Queue.
                return _dbContext.vwComplianceItemDataQueueRestricteds.Where(obj => lstStatusCode.Contains(obj.VerificationStatusCode)
                           && obj.AssignedToUserID == assignToUserId);
            }
        }

        /// <summary>
        /// Gets the active items for the assignment and user work queue based on the given parameters.
        /// </summary>
        /// <param name="tenantId">Tenant Id</param>
        /// <param name="statusCode">Status code</param>
        /// <param name="assignToUserId">Assign to User Id</param>
        /// <param name="reviewerType">Reviewer Type Code</param>
        /// <param name="showIncompleteItems">To Show incomplete Items</param>
        /// <returns>Query for showing active items</returns>
        public IQueryable<vwComplianceItemDataQueueUG> GetApplicantComplianceItemDataUG(Int32 tenantId, List<String> lstStatusCode, Int32 assignToUserId, String reviewerType, Boolean showIncompleteItems, Int32 reviewerId)
        {
            //Checks if the request is for Assignment Queue or User Work Queue.
            //assignToUserId will be greater than zero only for User Work Queue.
            if (assignToUserId <= AppConsts.NONE)
            {
                //Checks if the request is for Verification Queue or Exception Queue.
                //reviewerType is null in case of Exception Queue.
                if (reviewerType.IsNotNull())
                {
                    //Gets the status code for Third party Pending review.
                    String statusPndgRvwThirdPty = ApplicantItemComplianceStatus.Pending_Review_For_Third_Party.GetStringValue();
                    String _incompleteItemStatusCode = ApplicantItemComplianceStatus.Incomplete.GetStringValue();
                    //Checks if the user is Third Party Admin.
                    if (lstStatusCode.Contains(statusPndgRvwThirdPty))
                    {
                        //Checks if the Show Incomplete Item Check box is checked or Not.
                        //If checked, Includes incomplete items along with the other items.
                        if (showIncompleteItems)
                        {
                            return _dbContext.vwComplianceItemDataQueueUGs.Where(obj => ((lstStatusCode.Contains(obj.VerificationStatusCode)
                                && obj.ReviewerTenantId == reviewerId)) || (obj.ApplicantComplianceItemId == null && obj.ApplicantComplianceCategoryId != null)
                                || (obj.ApplicantComplianceItemId != null && obj.VerificationStatusCode == _incompleteItemStatusCode && obj.ApplicantComplianceCategoryId != null));
                        }
                        else
                        {
                            return _dbContext.vwComplianceItemDataQueueUGs.Where(obj => lstStatusCode.Contains(obj.VerificationStatusCode)
                             && obj.ReviewerTenantId == reviewerId);
                        }
                    }
                    //case when user is Admin or Client Admin.
                    else
                    {
                        //Checks if the Show Incomplete Item Check box is checked or Not.
                        //If checked, Includes incomplete items along with the other items.
                        if (showIncompleteItems)
                        {
                            return _dbContext.vwComplianceItemDataQueueUGs.Where(obj => (lstStatusCode.Contains(obj.VerificationStatusCode))
                                 || (obj.ApplicantComplianceItemId == null && obj.ApplicantComplianceCategoryId != null)
                                 || (obj.ApplicantComplianceItemId != null && obj.VerificationStatusCode == _incompleteItemStatusCode && obj.ApplicantComplianceCategoryId != null));
                        }
                        else
                        {
                            return _dbContext.vwComplianceItemDataQueueUGs.Where(obj => lstStatusCode.Contains(obj.VerificationStatusCode));
                        }
                    }
                }
                //Case when request is for Exception Queue within Assignment Queue(Admin).
                else
                {
                    //Gets the items for the Exception Queue for Admin.
                    return _dbContext.vwComplianceItemDataQueueUGs.Where(obj => lstStatusCode.Contains(obj.VerificationStatusCode));
                }
            }
            //Case when request is for User Work Queue.
            else
            {
                //Gets the items for the Verification Queue and Exception Queue for User Work Queue.
                return _dbContext.vwComplianceItemDataQueueUGs.Where(obj => lstStatusCode.Contains(obj.VerificationStatusCode)
                           && obj.AssignedToUserID == assignToUserId);
            }
        }

        /// <summary>
        /// Gets the active items for the assignment and user work queue based on the given parameters for client users.
        /// </summary>
        /// <param name="tenantId">Tenant Id</param>
        /// <param name="statusCode">Status code</param>
        /// <param name="assignToUserId">Assign to User Id</param>
        /// <param name="reviewerType">Reviewer Type Code</param>
        /// <param name="showIncompleteItems">To Show incomplete Items</param>
        /// <returns>Query for showing active items</returns>
        public IQueryable<vwComplianceItemDataQueueRestrictedUG> GetApplicantComplianceItemDataForClientUsersUG(Int32 tenantId, List<String> lstStatusCode, Int32 assignToUserId, String reviewerType, Boolean showIncompleteItems, Int32 reviewerId)
        {
            //Checks if the request is for Assignment Queue or User Work Queue.
            //assignToUserId will be greater than zero only for User Work Queue.
            if (assignToUserId <= AppConsts.NONE)
            {
                //Checks if the request is for Verification Queue or Exception Queue.
                //reviewerType is null in case of Exception Queue.
                if (reviewerType.IsNotNull())
                {
                    String _incompleteItemStatusCode = ApplicantItemComplianceStatus.Incomplete.GetStringValue();

                    //case when user is Client Admin.
                    //Checks if the Show Incomplete Item Check box is checked or Not.
                    //If checked, Includes incomplete items along with the other items.
                    if (showIncompleteItems)
                    {
                        return _dbContext.vwComplianceItemDataQueueRestrictedUGs.Where(obj => (lstStatusCode.Contains(obj.VerificationStatusCode))
                             || (obj.ApplicantComplianceItemId == null && obj.ApplicantComplianceCategoryId != null)
                             || (obj.ApplicantComplianceItemId != null && obj.VerificationStatusCode == _incompleteItemStatusCode && obj.ApplicantComplianceCategoryId != null));
                    }
                    else
                    {
                        return _dbContext.vwComplianceItemDataQueueRestrictedUGs.Where(obj => lstStatusCode.Contains(obj.VerificationStatusCode));
                    }
                }
                //Case when request is for Exception Queue within Assignment Queue(Client Admin).
                else
                {
                    //Gets the items for the Exception Queue for Admin.
                    return _dbContext.vwComplianceItemDataQueueRestrictedUGs.Where(obj => lstStatusCode.Contains(obj.VerificationStatusCode));
                }
            }
            //Case when request is for User Work Queue.
            else
            {
                //Gets the items for the Verification Queue and Exception Queue for User Work Queue.
                return _dbContext.vwComplianceItemDataQueueRestrictedUGs.Where(obj => lstStatusCode.Contains(obj.VerificationStatusCode)
                           && obj.AssignedToUserID == assignToUserId);
            }
        }

        public List<VerificationQueueData> GetVerificationQueueData(VerificationQueueContract verificationQueueContract)
        {
            return _dbContext.GetVerificationQueueData(verificationQueueContract.UserGroupId, verificationQueueContract.PackageId,
                verificationQueueContract.CategoryId, verificationQueueContract.ItemId, verificationQueueContract.ShowIncompleteItems, verificationQueueContract.ShowRushOrders,
                verificationQueueContract.ApplicantFirstName, verificationQueueContract.ApplicantLastName, verificationQueueContract.statusCodesXML, verificationQueueContract.AssignToUserName,
                verificationQueueContract.IsSuperAdmin, verificationQueueContract.OrderBy, verificationQueueContract.OrderDirection, verificationQueueContract.PageIndex,
                verificationQueueContract.PageSize, verificationQueueContract.CurrentLoggedInUserId).ToList();
        }

        //public List<Int32?> GetSubscriptionIdList(Int32? TenantId, Int32? PackageId, Int32? CategoryId, Int32? UserGroupId, Boolean? IncludeIncompleteItems, Boolean? ShowOnlyRushOrder, String StatusCodes, Int32? ReviewerId, String ReviewerType, Int32? AssignToUserId, Int32? SubscriptionId, Int32? orgUserId, out Int32 PageIndex, out Int32 TotalPage, Boolean isDefaultThirdParty)
        public DataTable GetSubscriptionIdList(Int32? TenantId, Int32? PackageId, Int32? CategoryId, Int32? UserGroupId, Boolean? IncludeIncompleteItems,
            Boolean? ShowOnlyRushOrder, String StatusCodes, Int32? ReviewerId, String ReviewerType, Int32? AssignToUserId, Int32? SubscriptionId, Int32 ApplicantComplianceItemID,
            Int32? orgUserId, Boolean isDefaultThirdParty, Boolean IsEscalationRecords, Int32 currentLoggedInUser)
        {
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand command = new SqlCommand("[dbo].[usp_GetSubscriptionIdList]", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@TenantId", TenantId);
                command.Parameters.AddWithValue("@PackageId", PackageId);
                command.Parameters.AddWithValue("@CategoryId", CategoryId);
                command.Parameters.AddWithValue("@UserGroupId", UserGroupId);
                command.Parameters.AddWithValue("@IncludeIncompleteItems", IncludeIncompleteItems);
                command.Parameters.AddWithValue("@ShowOnlyRushOrder", ShowOnlyRushOrder);
                command.Parameters.AddWithValue("@StatusCodes", StatusCodes);
                command.Parameters.AddWithValue("@ReviewerId", ReviewerId);
                command.Parameters.AddWithValue("@reviewerType", ReviewerType);
                command.Parameters.AddWithValue("@AssignedToUserID", AssignToUserId);
                command.Parameters.AddWithValue("@SubscribeId", SubscriptionId);
                command.Parameters.AddWithValue("@ApplicantComplianceItemID", ApplicantComplianceItemID);
                command.Parameters.AddWithValue("@OrganisationUserId", orgUserId);
                command.Parameters.AddWithValue("@BussinessProcessId", 1);
                command.Parameters.AddWithValue("@IsDefaultThirdParty", isDefaultThirdParty);
                command.Parameters.AddWithValue("@IsEscalationRecords", IsEscalationRecords);
                command.Parameters.AddWithValue("@CurrentLoggedInUser", currentLoggedInUser);
                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > 0)
                {
                    return ds.Tables[0];
                }
            }

            return new DataTable();
            //var _PageIndex = new ObjectParameter("PageIndex", typeof(Int32));
            //var _TotalPages = new ObjectParameter("RecordCount", typeof(Int32));
            //List<Int32?> list;
            ////Checks if the request is for Assignment Queue or User Work Queue.
            ////assignToUserId will be greater than zero only for User Work Queue.
            //if (AssignToUserId <= AppConsts.NONE)
            //{
            //    //Checks if the request is for Verification Queue or Exception Queue.
            //    //reviewerType is null in case of Exception Queue.
            //    if (ReviewerType.IsNotNull())
            //    {
            //        //Gets the status code for Third party Pending review.
            //        String statusPndgRvwThirdPty = ApplicantItemComplianceStatus.Pending_Review_For_Third_Party.GetStringValue();

            //        //Checks if the user is Third Party Admin.
            //        if (StatusCodes.Equals(statusPndgRvwThirdPty))
            //        {

            //            list = _dbContext.usp_GetSubscriptionIdList(TenantId, PackageId, CategoryId, UserGroupId, IncludeIncompleteItems, ShowOnlyRushOrder, StatusCodes, ReviewerId, null, null, SubscriptionId, orgUserId, 1, _PageIndex, _TotalPages, isDefaultThirdParty).ToList();
            //        }
            //        //case when user is Admin or Client Admin.
            //        else
            //        {
            //            //Checks if the Show Incomplete Item Check box is checked or Not.
            //            //If checked, Includes incomplete items along with the other items.
            //            list = _dbContext.usp_GetSubscriptionIdList(TenantId, PackageId, CategoryId, UserGroupId, IncludeIncompleteItems, ShowOnlyRushOrder, StatusCodes, null, ReviewerType, null, SubscriptionId, orgUserId, 1, _PageIndex, _TotalPages, isDefaultThirdParty).ToList();
            //        }
            //    }
            //    //Case when request is for Exception Queue within Assignment Queue(Admin).
            //    else
            //    {
            //        //Gets the items for the Exception Queue for Admin.
            //        list = _dbContext.usp_GetSubscriptionIdList(TenantId, PackageId, CategoryId, UserGroupId, IncludeIncompleteItems, ShowOnlyRushOrder, StatusCodes, null, null, null, SubscriptionId, orgUserId, 1, _PageIndex, _TotalPages, isDefaultThirdParty).ToList();
            //    }
            //}
            ////Case when request is for User Work Queue.
            //else
            //{

            //    //Gets the items for the Verification Queue and Exception Queue for User Work Queue.
            //    list = _dbContext.usp_GetSubscriptionIdList(TenantId, PackageId, CategoryId, UserGroupId, IncludeIncompleteItems, ShowOnlyRushOrder, StatusCodes, null, null, AssignToUserId, SubscriptionId, orgUserId, 1, _PageIndex, _TotalPages, isDefaultThirdParty).ToList();
            //}
            ////PageIndex = Convert.ToInt32(_PageIndex.Value);

            ////if (!String.IsNullOrEmpty(Convert.ToString(_TotalPages.Value)))
            ////    TotalPage = Convert.ToInt32(_TotalPages.Value);
            ////else
            ////    TotalPage = AppConsts.NONE;

            //TotalPage = AppConsts.NONE;
            //PageIndex = AppConsts.NONE;

            //return list;
        }

        public vwApplicantComplianceItemData GetApplicantVerificationDetails(Int32 subcriptionId)
        {
            return _dbContext.vwApplicantComplianceItemDatas.Where(appData => appData.PackageSubscriptionID == subcriptionId).FirstOrDefault();
        }

        /// <summary>
        /// Assigns the items corresponding to the given list of Compliance Item Ids to the selected user. 
        /// </summary>
        /// <param name="complianceItemIds">List of Compliance Item Ids</param>
        /// <param name="userId">Selected user Id</param>
        /// <param name="currentLoggedInUserId">Current Logged In User Id</param>
        /// <returns>True if items assigned successfully</returns>
        public Boolean AssignItemsToUser(List<Int32> complianceItemIds, Int32 userId, Int32 currentLoggedInUserId)
        {
            ApplicantComplianceItemData applicantComplianceItemData = null;
            foreach (Int32 complianceItemId in complianceItemIds)
            {
                applicantComplianceItemData = ClientDBContext.ApplicantComplianceItemDatas.FirstOrDefault(obj => obj.ApplicantComplianceItemID == complianceItemId && obj.IsDeleted == false);
                if (applicantComplianceItemData.IsNotNull())
                {
                    applicantComplianceItemData.AssignedToUser = userId;
                    applicantComplianceItemData.ModifiedByID = currentLoggedInUserId;
                    applicantComplianceItemData.ModifiedOn = DateTime.Now;
                }
            }
            ClientDBContext.SaveChanges();
            return true;
        }


        public DataTable AssignItemsToUserNew(Int32 tenantId, String xml, Int32 currentLoggedInUserId, Int32 assignToUserId, Boolean IsMutipleTimesAssignmentAllowed)
        {
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {

                SqlCommand command = new SqlCommand("usp_ManualAssignment", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@TenantID", tenantId);
                command.Parameters.AddWithValue("@CurrentLoggedInUserID", currentLoggedInUserId);
                command.Parameters.AddWithValue("@QueueRecordXML", xml);
                command.Parameters.AddWithValue("@AssignToUserID", assignToUserId);
                command.Parameters.AddWithValue("@IsMutipleTimesAssignmentAllowed", IsMutipleTimesAssignmentAllowed);
                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > 0)
                {
                    return ds.Tables[0];
                }
            }
            return new DataTable();
        }

        public List<ApplicantItemVerificationData> GetApplicantDataForVerification(Int32 complianceCategoryId, Int32 packageSubscriptionId)
        {
            return _dbContext.GetApplicantItemVerificationData(complianceCategoryId, packageSubscriptionId).ToList();
        }

        public Boolean UpdateDocumentPath(String newFileName, Int32 documentId)
        {
            ApplicantDocument applicantDocument = new ApplicantDocument();
            applicantDocument = _dbContext.ApplicantDocuments.FirstOrDefault(x => x.ApplicantDocumentID == documentId);

            applicantDocument.DocumentPath = newFileName;

            _dbContext.SaveChanges();

            return true;

        }

        /// <summary>
        /// CategoryNotes updated by the admins when all items are having exceptions applied.
        /// </summary>
        /// <param name="applicantComplianceCategoryId"></param>
        /// <param name="notes"></param>
        /// <param name="currentUserId"></param>
        public void UpdateApplicantCategoryNotes(Int32 applicantComplianceCategoryId, String notes, Int32 currentUserId)
        {
            if (applicantComplianceCategoryId > 0)
            {
                ApplicantComplianceCategoryData catData = _dbContext.ApplicantComplianceCategoryDatas.Where(applCatData => applCatData.ApplicantComplianceCategoryID == applicantComplianceCategoryId && !applCatData.IsDeleted).FirstOrDefault();
                catData.ModifiedOn = DateTime.Now;
                catData.ModifiedByID = currentUserId;
                catData.Notes = notes;

                _dbContext.SaveChanges();
            }
        }

        #endregion

        #region ApplicantComplianceItemData for Exception
        /// <summary>
        /// Get Applicant Compliance Item By itemid 
        /// </summary>
        /// <param name="tenantId"></param>
        /// <param name="categoryId"></param>
        /// <returns></returns>
        public ApplicantComplianceItemData GetApplicantComplianceItemDataByID(Int32 applicantComlianceCategoryID, Int32 itemID)
        {
            return _dbContext.ApplicantComplianceItemDatas.Where(obj => (obj.ComplianceItemID == itemID && obj.ApplicantComplianceCategoryID == applicantComlianceCategoryID) && obj.IsDeleted == false).FirstOrDefault();
        }

        /// <summary>
        /// To update Item Data Status
        /// </summary>
        /// <param name="ItemDataId"></param>
        /// <param name="currentStatusId"></param>
        /// <param name="currentLoggedInUserId"></param>
        /// <param name="currentLoggedInUserName"></param>
        /// <param name="ListOfIdToRemoveDocument"></param>
        /// <param name="itemId"></param>
        /// <param name="ListOfIdToAddDocument"></param>
        /// <returns></returns>
        public Boolean UpdateItemData(Int32 itemDataId, String comments, Int32 currentStatusId, Int32 currentLoggedInUserId, String currentLoggedInUserName, List<Int32> ListOfIdToRemoveDocument, Int32 itemId, List<Int32> ListOfIdToAddDocument)
        {
            ApplicantComplianceItemData applicantComplianceItemData = ClientDBContext.ApplicantComplianceItemDatas.FirstOrDefault(x => x.ApplicantComplianceItemID == itemDataId && x.IsDeleted == false);
            if (ListOfIdToRemoveDocument.Count > 0)
            {
                ClientDBContext.ExceptionDocumentMappings.Where(cond => ListOfIdToRemoveDocument.Contains(cond.ApplicantDocumentID) && (!cond.IsDeleted && cond.ApplicantComplianceItemID == itemDataId)).ToList()
                    .ForEach(x =>
                    {
                        x.IsDeleted = true;
                        x.ModifiedBy = currentLoggedInUserId;
                        x.ModifiedOn = DateTime.Now;
                    });
            }

            if (ListOfIdToAddDocument.Count > 0)
            {
                for (int i = 0; i < ListOfIdToAddDocument.Count; i++)
                {
                    ExceptionDocumentMapping exceptionDocumentMapping = new ExceptionDocumentMapping();
                    exceptionDocumentMapping.ApplicantDocumentID = ListOfIdToAddDocument[i];
                    exceptionDocumentMapping.ApplicantComplianceItemID = itemDataId;
                    exceptionDocumentMapping.IsDeleted = false;
                    exceptionDocumentMapping.CreatedBy = currentLoggedInUserId;
                    exceptionDocumentMapping.CreatedOn = DateTime.Now;
                    ClientDBContext.ExceptionDocumentMappings.AddObject(exceptionDocumentMapping);
                }
            }

            if (applicantComplianceItemData.IsNotNull())
            {
                applicantComplianceItemData.StatusID = currentStatusId;
                if (applicantComplianceItemData.ComplianceItemID != itemId)
                    applicantComplianceItemData.ComplianceItemID = itemId;
                if (!comments.IsNullOrEmpty())
                    applicantComplianceItemData.VerificationComments = "[" + currentLoggedInUserName + " " + DateTime.Now.ToShortDateString() + "] : " + comments
                        + Environment.NewLine + applicantComplianceItemData.VerificationComments;
                applicantComplianceItemData.ModifiedByID = currentLoggedInUserId;
                applicantComplianceItemData.ModifiedOn = DateTime.Now;
                applicantComplianceItemData.AssignedToUser = null;
                applicantComplianceItemData.ReviewerTypeID = null;

                ClientDBContext.SaveChanges();
                return true;
            }

            return false;
        }



        public Boolean UpdateExceptionVerificationItemData(Int32 itemDataId, Int32 itemId, String comments, Int32 statusId, Int32 currentLoggedInUserId, String currentLoggedInUserName, List<Int32> lstDocumentsToRemove, List<ListItemAssignmentProperties> lstAssignmentProperties, String recordActionType, String currentLoggedInUserInitials, String statusCode, DateTime? itemExpirationDate)
        {
            ApplicantComplianceItemData applicantComplianceItemData = ClientDBContext.ApplicantComplianceItemDatas.FirstOrDefault(applicantData => applicantData.ApplicantComplianceItemID == itemDataId && !applicantData.IsDeleted);

            if (applicantComplianceItemData.IsNotNull())
            {
                if (!comments.IsNullOrEmpty())
                {
                    applicantComplianceItemData.VerificationComments = "[" + currentLoggedInUserName + " " + DateTime.Now.ToShortDateString() + "] : " + comments + Environment.NewLine + applicantComplianceItemData.VerificationComments;
                    applicantComplianceItemData.VerificationCommentsWithInitials = "[" + currentLoggedInUserInitials + "] : " + comments + Environment.NewLine + applicantComplianceItemData.VerificationCommentsWithInitials;  //UAT 2807
                }
                // Only if attempted status is different from existing status i.e. Status is getting changed 
                if (applicantComplianceItemData.StatusID != statusId)
                    applicantComplianceItemData.ReviewerTypeID = null;

                applicantComplianceItemData = SetItemReviewerType(itemId, lstAssignmentProperties, applicantComplianceItemData);
                applicantComplianceItemData.ComplianceItemID = itemId;

                if (recordActionType == lkpQueueActionType.Next_Level_Review_Required.GetStringValue())
                {
                    applicantComplianceItemData.AssignedToUser = null;
                }
                else if (recordActionType == lkpQueueActionType.Proceed_To_Next_Queue.GetStringValue())
                {
                    //UAT-612
                    if (applicantComplianceItemData.StatusID != statusId)
                    {
                        if (statusCode.Equals(ApplicantItemComplianceStatus.Approved.GetStringValue()) || statusCode.Equals(ApplicantItemComplianceStatus.Approved_With_Exception.GetStringValue()))
                        {
                            if (comments.Equals(String.Empty))
                                applicantComplianceItemData.StatusComments = comments;
                            else
                                applicantComplianceItemData.StatusComments = Environment.NewLine + "[" + currentLoggedInUserInitials + " " + DateTime.Now.ToShortDateString() + "] : " + comments;
                        }
                        else
                            applicantComplianceItemData.StatusComments += Environment.NewLine + "[" + currentLoggedInUserInitials + " " + DateTime.Now.ToShortDateString() + "] : " + comments;
                    }



                    applicantComplianceItemData.StatusID = statusId;
                }
                /*else if (recordActionType == lkpQueueActionType.Escalation_Required.GetStringValue())
                {
                }*/
                applicantComplianceItemData.ModifiedByID = currentLoggedInUserId;
                applicantComplianceItemData.ModifiedOn = DateTime.Now;
                applicantComplianceItemData.ExpirationDate = itemExpirationDate;
                //applicantComplianceItemData.ExpirationDate = itemExpirationDate;
                //Update Submission date when item status changed to exception rejected 
                //if (applicantComplianceItemData.lkpItemComplianceStatu.Code.Equals(ApplicantItemComplianceStatus.Exception_Rejected.GetStringValue()))
                //{
                //    applicantComplianceItemData.SubmissionDate = DateTime.Now;
                //}
                ClientDBContext.SaveChanges();
                return true;
            }

            return false;
        }

        private ApplicantComplianceItemData SetItemReviewerType(Int32 itemId, List<ListItemAssignmentProperties> lstAssignmentProperties, ApplicantComplianceItemData applicantComplianceItemData)
        {
            lstAssignmentProperties = lstAssignmentProperties.Where(obj => obj.ComplianceItemId == itemId && obj.ApprovalRequired == true).ToList();
            if (lstAssignmentProperties.Any(obj => obj.ReviewerTypeCode == LkpReviewerType.Admin))
            {
                applicantComplianceItemData.IsReviewerTypeAdmin = true;
            }
            else
            {
                applicantComplianceItemData.IsReviewerTypeAdmin = false;
            }

            if (lstAssignmentProperties.Any(obj => obj.ReviewerTypeCode == LkpReviewerType.ClientAdmin))
            {
                applicantComplianceItemData.IsReviewerTypeClientAdmin = true;
            }
            else
            {
                applicantComplianceItemData.IsReviewerTypeClientAdmin = false;
            }

            if (lstAssignmentProperties.Any(obj => obj.ThirdPartyReviewerUserId.IsNotNull() || obj.ReviewerTenantId.IsNotNull()))
            {
                applicantComplianceItemData.IsReviewerTypeThirdParty = true;
            }
            else
            {
                applicantComplianceItemData.IsReviewerTypeThirdParty = false;
            }
            return applicantComplianceItemData;
        }

        public void RemoveExceptionDocumentMapping(Int32 mappingId, Int32 currentUserId)
        {
            ExceptionDocumentMapping documentMapping = _dbContext.ExceptionDocumentMappings.Where(edm => edm.ExceptionDocumentMappingID == mappingId).FirstOrDefault();
            if (documentMapping.IsNotNull())
            {
                documentMapping.ModifiedBy = currentUserId;
                documentMapping.ModifiedOn = DateTime.Now;
                documentMapping.IsDeleted = true;
                _dbContext.SaveChanges();
            }
        }

        /// <summary>
        /// Save the Applicant uploaded documents and map with ApplicantComplianceItemData
        /// </summary>
        /// <param name="applicantDocument"></param>
        /// <param name="applicantComplianceItemID"></param>
        /// <returns></returns>
        public Boolean SaveApplicantUploadedDocuments(List<ApplicantDocument> applicantDocumentList, Int32 applicantComplianceItemID)
        {
            foreach (ApplicantDocument applicantDocument in applicantDocumentList)
            {
                ExceptionDocumentMapping exceptionDocumentMapping = new ExceptionDocumentMapping();
                exceptionDocumentMapping.ApplicantComplianceItemID = applicantComplianceItemID;
                exceptionDocumentMapping.IsDeleted = false;
                exceptionDocumentMapping.CreatedBy = applicantDocument.CreatedByID;
                exceptionDocumentMapping.CreatedOn = applicantDocument.CreatedOn;
                exceptionDocumentMapping.ApplicantDocument = applicantDocument;
                ClientDBContext.ExceptionDocumentMappings.AddObject(exceptionDocumentMapping);
            }
            if (ClientDBContext.SaveChanges() > 0)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        public int SaveApplicantDocument(ApplicantDocument applicantDocument)
        {
            this.ResetClientContext();
            applicantDocument.IsDeleted = false;
            applicantDocument.Code = Guid.NewGuid();
            _dbContext.ApplicantDocuments.AddObject(applicantDocument);
            _dbContext.SaveChanges();
            return applicantDocument.ApplicantDocumentID;
        }

        /// <summary>
        /// Save the Applicant uploaded documents and map with ApplicantComplianceItemData and Add in ApplicantComplianceItemData
        /// </summary>
        /// <param name="applicantDocument"></param>
        /// <param name="applicantComplianceItemID"></param>
        /// <returns></returns>
        public Int32 SaveInApplicantItemDataAndMapTable(ApplicantDocument applicantDocument, ApplicantComplianceItemData applicantComplianceItemData)
        {

            if (applicantDocument != null)
            {
                ExceptionDocumentMapping exceptionDocumentMapping = new ExceptionDocumentMapping();
                exceptionDocumentMapping.IsDeleted = false;
                exceptionDocumentMapping.CreatedBy = applicantDocument.CreatedByID;
                exceptionDocumentMapping.CreatedOn = applicantDocument.CreatedOn;
                exceptionDocumentMapping.ApplicantDocument = applicantDocument;
                applicantComplianceItemData.ExceptionDocumentMappings.Add(exceptionDocumentMapping);
            }
            ClientDBContext.ApplicantComplianceItemDatas.AddObject(applicantComplianceItemData);
            if (ClientDBContext.SaveChanges() > 0)
            {
                return applicantComplianceItemData.ApplicantComplianceItemID;
            }
            else
            {
                return 0;
            }
        }
        #endregion

        public ComplianceSaveResponse SaveExceptionData(ApplicantComplianceCategoryData applicantComplianceCategoryData,
                                ApplicantComplianceItemData applicantComplianceItemData,
                                string statusCodeName, string categoryStatusCode, string reviewerTypeCode,
                                List<ExceptionDocumentMapping> exceptionDocumentMappings, List<int> savedApplicantDocumentIds, Boolean isCategory, String categoryExceptionStatusCode, Int32 orgnaizationUserID)
        {
            var createdDate = DateTime.Now;
            var isDeleted = false;
            var createdByUserId = (int)applicantComplianceItemData.CreatedByID;
            ComplianceSaveResponse complianceSaveResponse = new ComplianceSaveResponse();
            var categoryComplianceStatus = _dbContext.lkpCategoryComplianceStatus.FirstOrDefault(catStatus => catStatus.Code.ToLower().Trim() == categoryStatusCode.ToLower().Trim());
            var categoryExceptionStatus = _dbContext.lkpCategoryExceptionStatus.FirstOrDefault(catStatus => catStatus.CES_Code.ToLower().Trim() == categoryExceptionStatusCode.ToLower().Trim());

            var itemComplianceStatus = _dbContext.lkpItemComplianceStatus.FirstOrDefault(cond => cond.Code.ToLower().Trim() == statusCodeName.ToLower().Trim());
            var reviewType = _dbContext.lkpReviewerTypes.FirstOrDefault(cond => cond.Code.ToLower() == reviewerTypeCode.ToLower().Trim());
            //Changes as per UAT 1261, we cannot use currentuser id to fetch record as it may contains the id of Admin. Now use organizationUserID to fetch records.
            applicantComplianceCategoryData.ApplicantComplianceCategoryID = GetApplicantComplianceCategoryId(applicantComplianceCategoryData.PackageSubscriptionID, applicantComplianceCategoryData.ComplianceCategoryID, orgnaizationUserID);

            //Changes as per UAT-523 WB: Change "Category Exception" behavior to be an overall approval of the category, not just all Items filled in.
            //Changes as per UAT-819 WB: Category Exception enhancements
            // Step 1 :: Saving data to category 
            if (applicantComplianceCategoryData.ApplicantComplianceCategoryID == 0)
            {
                applicantComplianceCategoryData.CreatedOn = createdDate;
                applicantComplianceCategoryData.CreatedByID = createdByUserId;
                applicantComplianceCategoryData.IsDeleted = isDeleted;
                applicantComplianceCategoryData.StatusID = categoryComplianceStatus.CategoryComplianceStatusID;
                if (isCategory)
                    applicantComplianceCategoryData.CategoryExceptionStatusID = categoryExceptionStatus.CES_ID;
                _dbContext.ApplicantComplianceCategoryDatas.AddObject(applicantComplianceCategoryData);
            }
            else if (applicantComplianceCategoryData.ApplicantComplianceCategoryID > 0)
            {
                ApplicantComplianceCategoryData appCmpCatData = _dbContext.ApplicantComplianceCategoryDatas
                                                                .FirstOrDefault(x => x.ApplicantComplianceCategoryID == applicantComplianceCategoryData.ApplicantComplianceCategoryID);

                appCmpCatData.ModifiedByID = createdByUserId;
                appCmpCatData.ModifiedOn = DateTime.Now;
                if (isCategory)
                {
                    appCmpCatData.CategoryExceptionStatusID = categoryExceptionStatus.CES_ID;
                    appCmpCatData.StatusID = categoryComplianceStatus.CategoryComplianceStatusID;
                    appCmpCatData.ExpiryDate = null;
                }
            }

            Guid whlCatGuid = new Guid(AppConsts.WHOLE_CATEGORY_GUID);
            ApplicantComplianceItemData appCmpItmData = _dbContext.ApplicantComplianceItemDatas.Include("ComplianceItem")
                    .FirstOrDefault(x => x.ApplicantComplianceCategoryID == applicantComplianceCategoryData.ApplicantComplianceCategoryID
                    && x.ComplianceItemID == applicantComplianceItemData.ComplianceItemID
                    && (x.IsDeleted == false || x.ComplianceItem.Code == whlCatGuid));

            if (appCmpItmData.IsNull())
            {
                // Step  2 :: Saving data to item 
                applicantComplianceItemData.ApplicantComplianceCategoryID = applicantComplianceCategoryData.ApplicantComplianceCategoryID;
                applicantComplianceItemData.StatusID = itemComplianceStatus.ItemComplianceStatusID;
                applicantComplianceItemData.ReviewerTypeID = reviewType.ReviewerTypeID;
                applicantComplianceItemData.CreatedByID = createdByUserId;
                applicantComplianceItemData.CreatedOn = createdDate;
                applicantComplianceItemData.IsDeleted = isCategory == true ? true : false;
                if (applicantComplianceItemData.SubmissionDate.IsNull())
                {
                    applicantComplianceItemData.SubmissionDate = createdDate;
                }
                _dbContext.ApplicantComplianceItemDatas.AddObject(applicantComplianceItemData);

                complianceSaveResponse.ItemData = applicantComplianceItemData;
            }
            else
            {
                //UAT 4737
                //if (applicantComplianceItemData.SubmissionDate.IsNull())
                //{
                //    appCmpItmData.SubmissionDate = createdDate;
                //}
                //UAT 4737
                //if (
                //    ((itemComplianceStatus.Code == ApplicantItemComplianceStatus.Pending_Review.GetStringValue() && appCmpItmData.lkpItemComplianceStatu.Code != ApplicantItemComplianceStatus.Pending_Review_For_Client.GetStringValue())
                //    || (itemComplianceStatus.Code == ApplicantItemComplianceStatus.Pending_Review_For_Client.GetStringValue() && appCmpItmData.lkpItemComplianceStatu.Code != ApplicantItemComplianceStatus.Pending_Review.GetStringValue())
                //    || (appCmpItmData.lkpItemComplianceStatu.Code == ApplicantItemComplianceStatus.Incomplete.GetStringValue())
                //    || (appCmpItmData.lkpItemComplianceStatu.Code == ApplicantItemComplianceStatus.Exception_Rejected.GetStringValue() && itemComplianceStatus.Code == ApplicantItemComplianceStatus.Applied_For_Exception.GetStringValue())
                //    )
                //    && (appCmpItmData.lkpItemComplianceStatu.Code != itemComplianceStatus.Code)
                //    )

                String oldStatus = appCmpItmData.lkpItemComplianceStatu.Code;
                String newStatus = itemComplianceStatus.Code;

                if ((oldStatus == ApplicantItemComplianceStatus.Incomplete.GetStringValue() && newStatus != ApplicantItemComplianceStatus.Incomplete.GetStringValue())
                    || (oldStatus == ApplicantItemComplianceStatus.Pending_Review.GetStringValue()
                        && newStatus == ApplicantItemComplianceStatus.Pending_Review.GetStringValue())
                    || (oldStatus != ApplicantItemComplianceStatus.Pending_Review.GetStringValue()
                    &&
                        (newStatus == ApplicantItemComplianceStatus.Pending_Review.GetStringValue()
                        || newStatus == ApplicantItemComplianceStatus.Pending_Review_For_Client.GetStringValue()
                        || newStatus == ApplicantItemComplianceStatus.Applied_For_Exception.GetStringValue())
                    ))
                {
                    appCmpItmData.SubmissionDate = createdDate;
                }
                appCmpItmData.CreatedOn = createdDate;
                appCmpItmData.ModifiedByID = createdByUserId;
                appCmpItmData.ModifiedOn = DateTime.Now;
                appCmpItmData.ReviewerTypeID = reviewType.ReviewerTypeID;
                appCmpItmData.IsReviewerTypeAdmin = applicantComplianceItemData.IsReviewerTypeAdmin;
                appCmpItmData.IsReviewerTypeClientAdmin = applicantComplianceItemData.IsReviewerTypeClientAdmin;
                appCmpItmData.IsReviewerTypeThirdParty = applicantComplianceItemData.IsReviewerTypeThirdParty;
                appCmpItmData.ExceptionReason = applicantComplianceItemData.ExceptionReason;

                if (isCategory)
                    appCmpItmData.StatusID = itemComplianceStatus.ItemComplianceStatusID;

                complianceSaveResponse.ItemData = appCmpItmData;

                //applicantComplianceItemData.ApplicantComplianceItemID = appCmpItmData.ApplicantComplianceItemID;

                appCmpItmData.ExpirationDate = null;
                appCmpItmData.StatusID = itemComplianceStatus.ItemComplianceStatusID;
                //find already mapped Documents which need to be delted.
                var pendingDocuments = _dbContext.ExceptionDocumentMappings
                    .Where(cond => cond.ApplicantComplianceItemID == appCmpItmData.ApplicantComplianceItemID && !cond.IsDeleted);
                foreach (var pendingDoc in pendingDocuments)
                {
                    if (exceptionDocumentMappings.Count(cond => cond.ApplicantDocumentID == pendingDoc.ApplicantDocumentID) == 0)
                    {
                        pendingDoc.IsDeleted = true;
                        pendingDoc.ModifiedBy = createdByUserId;
                        pendingDoc.ModifiedOn = createdDate;
                    }
                }
            }

            // Step  3 :: Mapping Attacments
            foreach (var exceptionDocumentMapping in exceptionDocumentMappings)
            {
                Int32 appCmpItemID = appCmpItmData.IsNull() ? applicantComplianceItemData.ApplicantComplianceItemID : appCmpItmData.ApplicantComplianceItemID;
                var query = _dbContext.ExceptionDocumentMappings.FirstOrDefault(cond =>
                        cond.ApplicantComplianceItemID == appCmpItemID
                        && cond.ApplicantDocumentID == exceptionDocumentMapping.ApplicantDocumentID
                        && !cond.IsDeleted);

                if (query == null)
                {
                    _dbContext.ExceptionDocumentMappings.AddObject(
                        new ExceptionDocumentMapping
                        {
                            ApplicantComplianceItemID = appCmpItmData.IsNull() ? applicantComplianceItemData.ApplicantComplianceItemID : appCmpItmData.ApplicantComplianceItemID,
                            ApplicantDocumentID = exceptionDocumentMapping.ApplicantDocumentID,
                            IsDeleted = false,
                            CreatedBy = createdByUserId,
                            CreatedOn = createdDate
                        }
                        );
                }
            }


            if (savedApplicantDocumentIds != null && savedApplicantDocumentIds.Count != 0)
            {
                foreach (var savedApplicantDocumentId in savedApplicantDocumentIds)
                {
                    var exceptionDocumentMapping = new ExceptionDocumentMapping()
                    {

                        ApplicantComplianceItemID = appCmpItmData.IsNull() ? applicantComplianceItemData.ApplicantComplianceItemID : appCmpItmData.ApplicantComplianceItemID,
                        ApplicantDocumentID = savedApplicantDocumentId,
                        IsDeleted = false,
                        CreatedBy = createdByUserId,
                        CreatedOn = createdDate
                    };


                    _dbContext.ExceptionDocumentMappings.AddObject(exceptionDocumentMapping);
                }
            }
            _dbContext.SaveChanges();


            return complianceSaveResponse;
        }

        public ComplianceSaveResponse UpdateExceptionData(ApplicantComplianceItemData applicantComplianceItemData,
                   List<ExceptionDocumentMapping> exceptionDocumentMappings, List<int> savedApplicantDocumentIds, string reviewerTypeCode,
                   string itemstatusCodeName, String categoryStatusCode, String categoryExceptionStatusCode)
        {
            // var categoryStatusCode = ApplicantCategoryComplianceStatus.Incomplete.GetStringValue();
            var categoryComplianceStatus = _dbContext.lkpCategoryComplianceStatus.FirstOrDefault(catStatus => catStatus.Code.ToLower().Trim() == categoryStatusCode.ToLower().Trim());
            var categoryExceptionStatus = _dbContext.lkpCategoryExceptionStatus.FirstOrDefault(catStatus => catStatus.CES_Code.ToLower().Trim() == categoryExceptionStatusCode.ToLower().Trim());

            Guid whlCatGuid = new Guid(AppConsts.WHOLE_CATEGORY_GUID);
            var createdDate = DateTime.Now;
            var createdByUserId = (int)applicantComplianceItemData.CreatedByID;
            ComplianceSaveResponse complianceSaveResponse = new ComplianceSaveResponse();
            var applicantComplianceItem = _dbContext.ApplicantComplianceItemDatas.FirstOrDefault(cond => cond.ApplicantComplianceItemID == applicantComplianceItemData.ApplicantComplianceItemID);
            var itemComplianceStatus = _dbContext.lkpItemComplianceStatus.FirstOrDefault(cond => cond.Code.ToLower().Trim() ==
                itemstatusCodeName.ToLower().Trim());

            var reviewType = _dbContext.lkpReviewerTypes.FirstOrDefault(cond => cond.Code.ToLower() == reviewerTypeCode.ToLower().Trim());

            if (applicantComplianceItem != null)
            {
                String itemStatuscode = applicantComplianceItem.lkpItemComplianceStatu.Code;
                applicantComplianceItem.StatusID = itemComplianceStatus.ItemComplianceStatusID;
                applicantComplianceItem.ReviewerTypeID = reviewType.ReviewerTypeID;
                applicantComplianceItem.ExceptionReason = applicantComplianceItemData.ExceptionReason;
                applicantComplianceItem.IsReviewerTypeAdmin = applicantComplianceItemData.IsReviewerTypeAdmin;
                applicantComplianceItem.IsReviewerTypeClientAdmin = applicantComplianceItemData.IsReviewerTypeClientAdmin;
                applicantComplianceItem.IsReviewerTypeThirdParty = applicantComplianceItemData.IsReviewerTypeThirdParty;
                applicantComplianceItem.ModifiedByID = applicantComplianceItemData.CreatedByID;
                applicantComplianceItem.ModifiedOn = createdDate;
                //when admin reject the item and applicant again do his data entry,Submission date is entered again
                //if (itemStatuscode == ApplicantItemComplianceStatus.Incomplete.GetStringValue() ||
                //    itemStatuscode == ApplicantItemComplianceStatus.Not_Approved.GetStringValue() ||
                //   itemStatuscode == ApplicantItemComplianceStatus.Expired.GetStringValue())
                //{
                //Update submission date whenever applicant do his data entry. UAT 522- Submission Date on Verification Queues should be the most recent student submission date.
                //  applicantComplianceItem.SubmissionDate = createdDate;

                //old status -> itemStatuscode
                //new status -> itemComplianceStatus.Code
                String oldStatus = itemStatuscode;
                String newStatus = itemComplianceStatus.Code;

                if ((oldStatus == ApplicantItemComplianceStatus.Incomplete.GetStringValue() && newStatus != ApplicantItemComplianceStatus.Incomplete.GetStringValue())
                    || (oldStatus == ApplicantItemComplianceStatus.Pending_Review.GetStringValue()
                        && newStatus == ApplicantItemComplianceStatus.Pending_Review.GetStringValue())
                    || (oldStatus != ApplicantItemComplianceStatus.Pending_Review.GetStringValue()
                        &&
                            (newStatus == ApplicantItemComplianceStatus.Pending_Review.GetStringValue()
                            || newStatus == ApplicantItemComplianceStatus.Pending_Review_For_Client.GetStringValue()
                            || newStatus == ApplicantItemComplianceStatus.Applied_For_Exception.GetStringValue())
                        )
                  )
                {
                    applicantComplianceItem.SubmissionDate = createdDate;
                }



                //  (itemStatuscode == ApplicantItemComplianceStatus.Incomplete.GetStringValue() && itemComplianceStatus.Code != ApplicantItemComplianceStatus.Incomplete.GetStringValue())
                //  || (itemComplianceStatus.Code == ApplicantItemComplianceStatus.Pending_Review.GetStringValue())
                //  || (itemComplianceStatus.Code == ApplicantItemComplianceStatus.Pending_Review_For_Client.GetStringValue())
                //  || (itemComplianceStatus.Code == ApplicantItemComplianceStatus.Pending_Review_For_Third_Party.GetStringValue())
                //  || (itemStatuscode == itemComplianceStatus.Code)
                //)
                //{
                //    applicantComplianceItem.SubmissionDate = createdDate;
                //}


                //UAT 4737
                //if ((
                //    (itemComplianceStatus.Code == ApplicantItemComplianceStatus.Pending_Review.GetStringValue() 
                //    && itemStatuscode != ApplicantItemComplianceStatus.Pending_Review_For_Client.GetStringValue()) 
                //    || (itemComplianceStatus.Code == ApplicantItemComplianceStatus.Pending_Review_For_Client.GetStringValue() 
                //    && itemStatuscode != ApplicantItemComplianceStatus.Pending_Review.GetStringValue()) 
                //    || (itemStatuscode == ApplicantItemComplianceStatus.Incomplete.GetStringValue())
                //    || (itemStatuscode == ApplicantItemComplianceStatus.Exception_Rejected.GetStringValue() 
                //    && itemComplianceStatus.Code == ApplicantItemComplianceStatus.Applied_For_Exception.GetStringValue())
                //    ) && (itemStatuscode != itemComplianceStatus.Code))
                //{
                //    applicantComplianceItem.SubmissionDate = createdDate;
                //}

                if (applicantComplianceItem.ComplianceItem.Code == whlCatGuid)
                {
                    ApplicantComplianceCategoryData appCmpCatData = _dbContext.ApplicantComplianceCategoryDatas.Where(x => x.ApplicantComplianceCategoryID == applicantComplianceItem.ApplicantComplianceCategoryID
                        && x.IsDeleted == false).FirstOrDefault();
                    if (appCmpCatData.IsNotNull())
                    {
                        appCmpCatData.CategoryExceptionStatusID = categoryExceptionStatus.CES_ID;
                        appCmpCatData.StatusID = categoryComplianceStatus.CategoryComplianceStatusID;
                        appCmpCatData.ExpiryDate = null;
                        appCmpCatData.ModifiedByID = applicantComplianceItemData.CreatedByID;
                        appCmpCatData.ModifiedOn = createdDate;
                    }
                }
                //}
                complianceSaveResponse.ItemData = applicantComplianceItem;
            }

            // Step  3 :: Mapping Attacments
            foreach (var exceptionDocumentMapping in exceptionDocumentMappings)
            {
                var query = _dbContext.ExceptionDocumentMappings.FirstOrDefault(cond =>
                        cond.ApplicantComplianceItemID == applicantComplianceItemData.ApplicantComplianceItemID
                        && cond.ApplicantDocumentID == exceptionDocumentMapping.ApplicantDocumentID
                        && !cond.IsDeleted);

                if (query == null && !exceptionDocumentMapping.IsDeleted)
                {
                    exceptionDocumentMapping.ApplicantComplianceItemID = applicantComplianceItemData.ApplicantComplianceItemID;
                    exceptionDocumentMapping.IsDeleted = false;
                    exceptionDocumentMapping.CreatedBy = createdByUserId;
                    exceptionDocumentMapping.CreatedOn = createdDate;

                    _dbContext.ExceptionDocumentMappings.AddObject(exceptionDocumentMapping);
                }
            }

            //find Other Documents 
            var pendingDocuments = _dbContext.ExceptionDocumentMappings
                .Where(cond => cond.ApplicantComplianceItemID == applicantComplianceItemData.ApplicantComplianceItemID && !cond.IsDeleted);
            foreach (var pendingDoc in pendingDocuments)
            {
                if (exceptionDocumentMappings.Count(cond => cond.ApplicantDocumentID == pendingDoc.ApplicantDocumentID) == 0)
                {
                    pendingDoc.IsDeleted = true;
                    pendingDoc.ModifiedBy = createdByUserId;
                    pendingDoc.ModifiedOn = createdDate;
                }
            }

            if (savedApplicantDocumentIds != null && savedApplicantDocumentIds.Count != 0)
            {
                foreach (var savedApplicantDocumentId in savedApplicantDocumentIds)
                {
                    var exceptionDocumentMapping = new ExceptionDocumentMapping()
                    {

                        ApplicantComplianceItemID = applicantComplianceItemData.ApplicantComplianceItemID,
                        ApplicantDocumentID = savedApplicantDocumentId,
                        IsDeleted = false,
                        CreatedBy = createdByUserId,
                        CreatedOn = createdDate
                    };
                    _dbContext.ExceptionDocumentMappings.AddObject(exceptionDocumentMapping);
                }
            }
            _dbContext.SaveChanges();
            return complianceSaveResponse;
        }

        public ComplianceSaveResponse RemoveExceptionData(Int32 applicantComplianceItem, Int32 organizationUserId)
        {
            ComplianceSaveResponse complianceSaveResponse = new ComplianceSaveResponse();
            var applicantComplianceItems = _dbContext.ApplicantComplianceItemDatas.First(cond => cond.ApplicantComplianceItemID == applicantComplianceItem);

            if (applicantComplianceItems == null)
            {
                complianceSaveResponse = null;
                return complianceSaveResponse;
            }

            DateTime modifiedDateTime = DateTime.Now;

            applicantComplianceItems.IsDeleted = true;
            applicantComplianceItems.ModifiedOn = modifiedDateTime;
            applicantComplianceItems.ModifiedByID = organizationUserId;

            var exceptionDocuments = _dbContext.ExceptionDocumentMappings.Where(cond => cond.ApplicantComplianceItemID == applicantComplianceItems.ApplicantComplianceItemID && !cond.IsDeleted);
            foreach (var exceptionDocument in exceptionDocuments)
            {
                exceptionDocument.IsDeleted = true;
                exceptionDocument.ModifiedOn = modifiedDateTime;
                exceptionDocument.ModifiedBy = organizationUserId;
            }
            if (_dbContext.SaveChanges() > AppConsts.NONE)
                complianceSaveResponse.SaveStatus = true;

            complianceSaveResponse.StatusCode = applicantComplianceItems.lkpItemComplianceStatu.Code;
            return complianceSaveResponse;
        }

        public ComplianceSaveResponse DeleteApplicantItemAttributeData(Int32 applicantComplianceItemId, Int32 currentUserId, String DeletedReasonCode, Int32 AppOrgUserID)
        {
            ComplianceSaveResponse complianceSaveResponse = new ComplianceSaveResponse();
            var applicantItemData = _dbContext.ApplicantComplianceItemDatas.Include(SysXEntityConstants.APPLICANT_ATTRIBUTEDATA_DOCUMENTMAP).Where(itemData => itemData.ApplicantComplianceItemID == applicantComplianceItemId).FirstOrDefault();

            if (applicantItemData.IsNull())
            {
                complianceSaveResponse = null;
                return complianceSaveResponse;
            }
            else
            {
                //UAT-2490
                Boolean IsItemDeletionHistoryMaintained = SaveAppComplianceItemDataDeletedHistory(applicantItemData, currentUserId, DeletedReasonCode, AppOrgUserID);
                DateTime modifiedOnDateTime = DateTime.Now;
                if (applicantItemData.ApplicantComplianceAttributeDatas.IsNotNull() && applicantItemData.ApplicantComplianceAttributeDatas.Count() > 0)
                {
                    foreach (var attribute in applicantItemData.ApplicantComplianceAttributeDatas)
                    {
                        if (attribute.ComplianceAttribute.lkpComplianceAttributeDatatype.Code.ToLower() == ComplianceAttributeDatatypes.FileUpload.GetStringValue().ToLower()
                            || attribute.ComplianceAttribute.lkpComplianceAttributeDatatype.Code.ToLower() == ComplianceAttributeDatatypes.View_Document.GetStringValue().ToLower())
                        {
                            // Delete Documents mapped 
                            foreach (var document in attribute.ApplicantComplianceDocumentMaps)
                            {
                                document.IsDeleted = true;
                                document.ModifiedByID = currentUserId;
                                document.ModifiedOn = modifiedOnDateTime;
                            }
                        }
                        attribute.IsDeleted = true;
                        attribute.ModifiedByID = currentUserId;
                        attribute.ModifiedOn = modifiedOnDateTime;
                    }
                }
                applicantItemData.ModifiedByID = currentUserId;
                applicantItemData.ModifiedOn = modifiedOnDateTime;
                applicantItemData.IsDeleted = true;

                _dbContext.SaveChanges();
                complianceSaveResponse.ItemData = applicantItemData;
                complianceSaveResponse.StatusCode = applicantItemData.lkpItemComplianceStatu.Code;
            }
            return complianceSaveResponse;
        }

        public OrganizationUser AddOrganizationUser(OrganizationUser organizationUser)
        {
            try
            {
                _dbContext.AddToOrganizationUsers(organizationUser);
                _dbContext.SaveChanges();
                return organizationUser;

            }
            catch (SysXException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw (new SysXException(ex.Message, ex));
            }
        }

        public OrganizationUserDepartment AddOrganizationUserDept(OrganizationUserDepartment orguserDept)
        {
            try
            {
                _dbContext.AddToOrganizationUserDepartments(orguserDept);
                _dbContext.SaveChanges();
                return orguserDept;

            }
            catch (SysXException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw (new SysXException(ex.Message, ex));
            }

        }

        public OrganizationUserProfile AddOrganizationUserProfile(OrganizationUserProfile orgUserProfile)
        {
            try
            {
                _dbContext.AddToOrganizationUserProfiles(orgUserProfile);
                _dbContext.SaveChanges();
                return orgUserProfile;

            }
            catch (SysXException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw (new SysXException(ex.Message, ex));
            }


        }
        public Boolean AddAddress(Address address)
        {
            try
            {
                _dbContext.AddToAddresses(address);
                _dbContext.SaveChanges();
                return true;
            }
            catch (SysXException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw (new SysXException(ex.Message, ex));
            }
        }

        public Boolean AddAddressHandle(AddressHandle addressHandle)
        {
            try
            {
                _dbContext.AddToAddressHandles(addressHandle);
                _dbContext.SaveChanges();
                return true;
            }
            catch (SysXException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw (new SysXException(ex.Message, ex));
            }
        }
        public Boolean UpdateOrganizationData(OrganizationUser organizationUser)
        {
            try
            {
                _dbContext.SaveChanges();
                return true;
            }
            catch (SysXException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw (new SysXException(ex.Message, ex));
            }
        }

        public OrganizationUser GetOrganisationUser(Entity.OrganizationUser orgUser)
        {
            try
            {
                return _dbContext.OrganizationUsers.FirstOrDefault(x => x.OrganizationUserID == orgUser.OrganizationUserID);
            }
            catch (SysXException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw (new SysXException(ex.Message, ex));
            }
        }

        public OrganizationUserProfile GetOrganizationUserProfile(Entity.OrganizationUser orgUsr)
        {
            try
            {
                return _dbContext.OrganizationUserProfiles.FirstOrDefault(x => x.OrganizationUserID == orgUsr.OrganizationUserID);
            }
            catch (SysXException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw (new SysXException(ex.Message, ex));
            }

        }

        public Boolean IsItemStatusApproved(Int32 itemId)
        {
            ApplicantComplianceItemData _appItemData = _dbContext.ApplicantComplianceItemDatas.Where(cond => cond.ApplicantComplianceItemID == itemId).FirstOrDefault();
            String itemStatusCode = _appItemData.lkpItemComplianceStatu.Code;
            if (itemStatusCode == ApplicantCategoryComplianceStatus.Approved.GetStringValue() || itemStatusCode == ApplicantCategoryComplianceStatus.Approved_With_Exception.GetStringValue())
                return true;
            return false;
        }



        #region Search

        public IQueryable<T> PerformSearch<T>(Dictionary<String, String> searchOptions, String orderByFieldName)
        {
            //To retrieve the EntitySet from Context
            String entitySetName = _dbContext.MetadataWorkspace.GetEntityContainer(_dbContext.DefaultContainerName, DataSpace.CSpace).BaseEntitySets
                .Where(bes => bes.ElementType.Name.Equals(typeof(T).Name)).FirstOrDefault().Name;

            return (new ObjectQuery<T>(entitySetName, _dbContext, MergeOption.NoTracking).AdvanceTextSearch(searchOptions).OrderBy(orderByFieldName, true));
        }

        public IQueryable<T> PerformSearch<T>(Dictionary<String, String> searchOptions, CustomPagingArgsContract customPagingArgsContract)
        {
            //To retrieve the EntitySet from Context
            String entitySetName = _dbContext.MetadataWorkspace.GetEntityContainer(_dbContext.DefaultContainerName, DataSpace.CSpace).BaseEntitySets
                .Where(bes => bes.ElementType.Name.Equals(typeof(T).Name)).FirstOrDefault().Name;

            Entity.CustomPagingArgs searchRepository = new Entity.CustomPagingArgs();
            return searchRepository.ApplyFilterOrSort<T>(new ObjectQuery<T>(entitySetName, _dbContext, MergeOption.NoTracking).AdvanceTextSearch(searchOptions),
                customPagingArgsContract);
        }

        // Method for "Use SP for Compliance Item Data Search"
        public ObjectResult<ComplianceItemData> GetComplianceItemDataSearch(SearchItemDataContract searchItemDataContract, CustomPagingArgsContract customPagingArgsContract)
        {
            //int? pkgId = null;
            //int? catId = null;
            //if (searchItemDataContract.PackageID > 0)
            //    pkgId = searchItemDataContract.PackageID;
            //if (searchItemDataContract.CategoryID > 0)
            //    catId = searchItemDataContract.CategoryID;
            //return _dbContext.usp_GetComplianceItemData(null, null, null, null, null, null, null, null, null, null, 1, 50);
            return _dbContext.usp_GetComplianceItemData(null, null, String.Empty, String.Empty, null, String.Empty, String.Empty, null, null, String.Empty, null, null, null);
            // return _dbContext.usp_GetComplianceItemData(pkgId, catId, searchItemDataContract.ApplicantFirstName,
            //    searchItemDataContract.ApplicantLastName, searchItemDataContract.DateOfBirth, searchItemDataContract.ItemLabel, searchItemDataContract.XMLStatusCodes,
            //    searchItemDataContract.OrganizationUserId, searchItemDataContract.AssignedToUserID, customPagingArgsContract.SortExpression, customPagingArgsContract.SortDirectionDescending,
            //    customPagingArgsContract.CurrentPageIndex, customPagingArgsContract.PageSize);
        }


        //public ObjectResult<ComplianceRecord> GetComplianceRecordsSearch(SearchItemDataContract searchItemDataContract, CustomPagingArgsContract customPagingArgsContract)
        //{
        //    return _dbContext.usp_GetComplianceRecordsSearch(searchItemDataContract.ApplicantFirstName, searchItemDataContract.ApplicantLastName,
        //        searchItemDataContract.ApplicantSSN, searchItemDataContract.DateOfBirth, searchItemDataContract.OrderID,
        //        searchItemDataContract.CustomFields, searchItemDataContract.CategoryStatusID, searchItemDataContract.ItemStatusID,
        //        searchItemDataContract.OverAllStatusID, searchItemDataContract.SelectedDPMIds, customPagingArgsContract.SortExpression,
        //        customPagingArgsContract.SortDirectionDescending, customPagingArgsContract.CurrentPageIndex, customPagingArgsContract.PageSize,
        //        searchItemDataContract.ArchieveStateId, searchItemDataContract.MatchUserGroupID, searchItemDataContract.OrganizationUserId);
        //}

        public List<ComplianceRecord> GetComplianceRecordsSearch(SearchItemDataContract searchItemDataContract, CustomPagingArgsContract customPagingArgsContract)
        {
            List<ComplianceRecord> lstComplianceRecord = new List<ComplianceRecord>();
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand command = new SqlCommand("usp_GetComplianceRecordsSearch", con);
                command.CommandType = CommandType.StoredProcedure;

                command.Parameters.AddWithValue("@ApplicantFirstName", searchItemDataContract.ApplicantFirstName);
                command.Parameters.AddWithValue("@ApplicantLastName", searchItemDataContract.ApplicantLastName);
                command.Parameters.AddWithValue("@SSN", searchItemDataContract.ApplicantSSN);
                command.Parameters.AddWithValue("@DateOfBirth", searchItemDataContract.DateOfBirth);
                command.Parameters.AddWithValue("@OrderId", searchItemDataContract.OrderNumber);
                command.Parameters.AddWithValue("@CustomAtrributesData", searchItemDataContract.CustomFields);
                command.Parameters.AddWithValue("@CategoryStatus", searchItemDataContract.CategoryStatusID);
                command.Parameters.AddWithValue("@ItemStatus", searchItemDataContract.ItemStatusID);
                command.Parameters.AddWithValue("@CompliancePackageStatus", searchItemDataContract.OverAllStatusID);
                command.Parameters.AddWithValue("@InstitutionHierarchy", searchItemDataContract.SelectedDPMIds);
                command.Parameters.AddWithValue("@OrderBy", customPagingArgsContract.SortExpression);
                command.Parameters.AddWithValue("@OrderDirection", customPagingArgsContract.SortDirectionDescending);
                command.Parameters.AddWithValue("@PageIndex", customPagingArgsContract.CurrentPageIndex);
                command.Parameters.AddWithValue("@PageSize", customPagingArgsContract.PageSize);
                command.Parameters.AddWithValue("@ArchivedState", searchItemDataContract.ArchieveStateId);
                command.Parameters.AddWithValue("@UserGroupID", searchItemDataContract.UserGroupIds);//MatchUserGroupID);
                command.Parameters.AddWithValue("@OrganisationUserId", searchItemDataContract.OrganizationUserId);
                command.Parameters.AddWithValue("@IsClientAdminLoggedIn", searchItemDataContract.IsClientAdminLoggedIn); //UAT 2834
                command.Parameters.AddWithValue("@ExpiryState", searchItemDataContract.SelectedExpiryStateCode); //UAT 2834

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > 0)
                {
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        customPagingArgsContract.CurrentPageIndex = Convert.ToInt32(Convert.ToString(ds.Tables[0].Rows[0]["CurrentPageIndex"]));
                        customPagingArgsContract.VirtualPageCount = Convert.ToInt32(Convert.ToString(ds.Tables[0].Rows[0]["VirtualCount"]));
                    }
                    if (ds.Tables[1].Rows.Count > 0)
                    {

                        IEnumerable<DataRow> rows = ds.Tables[1].AsEnumerable();
                        lstComplianceRecord = rows.Select(col =>
                              new ComplianceRecord
                              {
                                  OrderId = Convert.ToInt32(col["OrderId"]),
                                  ApplicantFirstName = col["ApplicantFirstName"] == DBNull.Value ? String.Empty : Convert.ToString(col["ApplicantFirstName"]),
                                  ApplicantLastName = col["ApplicantLastName"] == DBNull.Value ? String.Empty : Convert.ToString(col["ApplicantLastName"]),
                                  InstitutionHierarchy = col["InstitutionHierarchy"] == DBNull.Value ? String.Empty : Convert.ToString(col["InstitutionHierarchy"]),
                                  DateOfBirth = col["DateOfBirth"] == DBNull.Value ? (DateTime?)null : Convert.ToDateTime(col["DateOfBirth"]),
                                  CompliancePackageStatus = col["CompliancePackageStatus"] == DBNull.Value ? String.Empty : Convert.ToString(col["CompliancePackageStatus"]),
                                  PackageSubscriptionID = col["PackageSubscriptionID"] == DBNull.Value ? (Int32?)null : Convert.ToInt32(col["PackageSubscriptionID"]),
                                  CompliancePackageID = col["CompliancePackageID"] == DBNull.Value ? (Int32?)null : Convert.ToInt32(col["CompliancePackageID"]),
                                  ComplianceCategoryID = col["ComplianceCategoryID"] == DBNull.Value ? (Int32?)null : Convert.ToInt32(col["ComplianceCategoryID"]),
                                  ApplicantComplianceItemID = col["ApplicantComplianceItemID"] == DBNull.Value ? (Int32?)null : Convert.ToInt32(col["ApplicantComplianceItemID"]),
                                  PackageName = col["PackageName"] == DBNull.Value ? String.Empty : Convert.ToString(col["PackageName"]),
                                  TotalCount = Convert.ToInt32(col["TotalCount"]),
                                  UserGroupName = col["UserGroupName"] == DBNull.Value ? String.Empty : Convert.ToString(col["UserGroupName"]),
                                  ApplicantId = Convert.ToInt32(col["ApplicantId"]),
                                  CustomAttributes = col["CustomAttributes"] == DBNull.Value ? String.Empty : Convert.ToString(col["CustomAttributes"]),
                                  PermissionCode = col["PermissionCode"] == DBNull.Value ? String.Empty : Convert.ToString(col["PermissionCode"]),
                                  SubscriptionExpirationDate = String.Format("{0:M/d/yyyy}", col["SubscriptionExpirationDate"]),
                                  OrderNumber = col["OrderNumber"] == DBNull.Value ? String.Empty : Convert.ToString(col["OrderNumber"]),
                                  Notes = col["Notes"] == DBNull.Value ? String.Empty : Convert.ToString(col["Notes"]),
                                  NonCompliantCategories = col["NonCompliantCategories"] == DBNull.Value ? String.Empty : Convert.ToString(col["NonCompliantCategories"]).Substring(1)
                              }).ToList();
                    }
                }
            }
            return lstComplianceRecord;
        }

        #endregion

        #region Client Relation
        public Boolean CopyTenantToClient(List<ClientRelation> clientChildRelationListToCopy)
        {
            foreach (ClientRelation clientChildRelationCopy in clientChildRelationListToCopy)
            {
                _dbContext.ClientRelations.AddObject(clientChildRelationCopy);
            }
            _dbContext.SaveChanges();
            return true;
        }

        public List<Int32> checkIfTenantExist(List<Int32> relatedTenantIds)
        {
            List<Int32> notExistingTenantId = new List<Int32>();
            foreach (Int32 tenantId in relatedTenantIds)
            {
                if (_dbContext.Tenants.Where(obj => obj.TenantID == tenantId && obj.IsDeleted == false).Any())
                {
                    continue;
                }
                else
                {
                    notExistingTenantId.Add(tenantId);
                }
            }

            return notExistingTenantId;
        }

        public List<Tenant> getTenantsToBeCopied(List<Int32> listTenantIdToCopy)
        {
            return _dbContext.Tenants.Where(obj => listTenantIdToCopy.Contains(obj.TenantID) && obj.IsDeleted == false).ToList();
        }

        public Boolean CopyTenantToClient(List<Tenant> TenantsToBeCopied)
        {
            foreach (Tenant tenantCopy in TenantsToBeCopied)
            {
                _dbContext.Tenants.AddObject(tenantCopy);
            }
            _dbContext.SaveChanges();
            return true;
        }

        /// <summary>
        /// retrieve supplier relation byrelated supplier id and supplier id.
        /// </summary>
        /// <param name="supplierId">supplierId</param>
        /// <param name="relatedSupplierId">relatedSupplierId</param>
        /// <returns></returns>
        public Boolean DeleteSubTenant(Int32 tenantId, Int32 relatedTenantId, Int32 currentUserId)
        {
            ClientRelation relationToBeDeleted = _dbContext.ClientRelations.Where(condition => condition.TenantID == tenantId && condition.RelatedTenantID == relatedTenantId && condition.IsActive && !condition.IsDeleted).FirstOrDefault();
            if (relationToBeDeleted != null)
            {
                relationToBeDeleted.IsDeleted = true;
                relationToBeDeleted.IsActive = false;
                relationToBeDeleted.ModifiedByID = currentUserId;
                relationToBeDeleted.ModifiedOn = DateTime.Now;
                _dbContext.SaveChanges();
                return true;
            }
            return false;
        }

        /// <summary>
        /// Retrieve the tenant which has to be updated 
        /// </summary>
        /// <param name="tenantId">Tenant Id</param>
        /// <returns></returns>
        public Tenant getTenantToBeUpdated(Int32 tenantId)
        {
            return _dbContext.Tenants.Where(obj => obj.TenantID == tenantId && !obj.IsDeleted).FirstOrDefault();
        }

        /// <summary>
        /// Retrieve a list of institution Type tenant.
        /// </summary>
        /// <returns>list of institution Type tenant</returns>
        public List<Tenant> getClientTenant(Int32 defaultTenantId)
        {
            String TenantTypeCodeForInstitution = TenantType.Institution.GetStringValue();
            Int32 tenantTypeIdForInstitution = _dbContext.lkpTenantTypes.FirstOrDefault(condition => condition.TenantTypeCode == TenantTypeCodeForInstitution && condition.IsActive).TenantTypeID;
            return _dbContext.Tenants.OrderBy(o => o.TenantName).Where(condition => condition.TenantTypeID == tenantTypeIdForInstitution && condition.TenantID != defaultTenantId && !condition.IsDeleted).ToList();
        }

        /// <summary>
        /// Retrieve a list of institution Type and super admin tenants.
        /// </summary>
        /// <param name="tenantId">Super admin tenant id</param>
        /// <returns>list of institution Type and super admin tenants</returns>
        public List<Tenant> GetMasterAndInstitutionTypeTenants(Int32 defaultTenantId)
        {
            String TenantTypeCodeForInstitution = TenantType.Institution.GetStringValue();
            Int32 tenantTypeIdForInstitution = _dbContext.lkpTenantTypes.FirstOrDefault(condition => condition.TenantTypeCode == TenantTypeCodeForInstitution && condition.IsActive).TenantTypeID;
            return _dbContext.Tenants.OrderBy(o => o.TenantName).Where(condition => (condition.TenantTypeID == tenantTypeIdForInstitution || condition.TenantID == defaultTenantId) && !condition.IsDeleted).ToList();
        }

        /// <summary>
        /// Retrieve a list of Parent tenant.
        /// </summary>
        /// <returns>list of parent tenant</returns>
        public List<Tenant> getParentTenant(Int32 subTenantId)
        {
            List<Int32> parentTenantId = _dbContext.ClientRelations.Where(condition => condition.RelatedTenantID == subTenantId && condition.IsDeleted.Equals(false)).Select(x => x.TenantID).ToList();
            return _dbContext.Tenants.OrderBy(o => o.TenantName).Where(cond => parentTenantId.Contains(cond.TenantID) && cond.IsDeleted == false).ToList();
        }
        #endregion

        #region Order selection & Payment

        /// <summary>
        /// Get Department ProgramPackageSubscriptionDetail
        /// </summary>
        /// <param name="programPackageSubscriptionId">DPPSID</param>
        /// <returns></returns>
        public DeptProgramPackageSubscription GetDeptProgramPackageSubscriptionForPaymentOption(Int32 DPPSID)
        {
            //Removed ps.DPPS_IsDeleted == false check to get Payment Options for Order
            DeptProgramPackageSubscription programPackageSubscription = _dbContext.DeptProgramPackageSubscriptions.Where(ps => ps.DPPS_ID == DPPSID).FirstOrDefault();
            return programPackageSubscription;
        }

        public List<DeptProgramPaymentOption> GetDeptProgramPaymentOptionsByDepProgramMappingId(Int32 deptProgramMappingId)
        {
            return _dbContext.DeptProgramPaymentOptions.Where(dppo => dppo.DPPO_DeptProgramMappingID == deptProgramMappingId && dppo.DPPO_IsDeleted == false).ToList();
        }

        public DeptProgramPackageSubscription GetApplicantPackageDetails(Int32 dppsId)
        {
            return _dbContext.DeptProgramPackageSubscriptions
                .Include("DeptProgramPackage")
                .Include("SubscriptionOption")
                .Where(dpps => dpps.DPPS_ID == dppsId && !dpps.DPPS_IsDeleted).FirstOrDefault();
        }

        /// <summary>
        /// Get the institute Hierarchy Label, when Order review screen is opened
        /// </summary>
        /// <param name="dpmId"></param>
        /// <param name="tenantId"></param>
        /// <returns></returns>
        public String GetInstituteHierarchyLabel(Int32 dpmId)
        {
            DeptProgramMapping _deptProgramMapping = _dbContext.DeptProgramMappings.Where(dpm => dpm.DPM_ID == dpmId).FirstOrDefault();
            if (_deptProgramMapping.IsNullOrEmpty())
                return String.Empty;
            else
                return _deptProgramMapping.DPM_Label;
        }

        /// <summary>
        /// Generate New Compliance and Background orders 
        /// </summary>
        /// <param name="organizationUserProfile"></param>
        /// <param name="addressId"></param>
        /// <param name="addressHandleId"></param>
        /// <param name="userOrder"></param>
        /// <param name="programPackageSubscriptionId"></param>
        /// <param name="selectedPaymentModeId"></param>
        /// <param name="tenantId"></param>
        /// <param name="lstAttributeValues"></param>
        /// <param name="lastNodeDPMId"></param>
        /// <param name="lstBackgroundPackages"></param>
        /// <param name="paymentModeCode"></param>
        /// <param name="orderId"></param>
        /// <returns></returns>
        public Dictionary<String, String> SaveApplicantOrderProcessClient(Order applicantOrder, ApplicantOrderDataContract applicantOrderDataContract, Int16 svcLineItemDispatchStatusId, out String paymentModeCode, out Int32 orderId, Int32 orgUserID, Int32? orderRequestNewOrderTypeId = null, List<OrderCartCompliancePackage> compliancePackages = null, Boolean isLocationServiceTenant = false, FingerPrintAppointmentContract FingerPrintData = null, PreviousAddressContract mailingAddress = null)
        {
            Dictionary<String, String> _dicInvoiceNumbers = new Dictionary<String, String>();

            var _invoiceNumber = String.Empty;

            #region UAT 916 Changes
            ////paymentModeCode = GetPaymentOptionCodeById(applicantOrderDataContract.SelectedPaymentModeId);
            ////String _status = String.Empty;
            ////if (applicantOrder.GrandTotal == AppConsts.NONE)
            ////{
            ////    _status = ApplicantOrderStatus.Paid.GetStringValue();
            ////}
            ////else
            ////{
            ////    if (paymentModeCode.ToLower() == PaymentOptions.Credit_Card.GetStringValue().ToLower() || paymentModeCode.ToLower() == PaymentOptions.Paypal.GetStringValue().ToLower())
            ////    {
            ////        _status = ApplicantOrderStatus.Send_For_Online_Payment.GetStringValue();
            ////    }
            ////    //// UAT-573 * 2.This should depend on if it is invoice with approval should need to be reviewed, while invoice no approval would be automatically approved.
            ////    //else if (paymentModeCode.ToLower() == PaymentOptions.InvoiceWithOutApproval.GetStringValue().ToLower())
            ////    //{
            ////    //    _status = ApplicantOrderStatus.Paid.GetStringValue();
            ////    //}
            ////    else
            ////    {
            ////        _status = ApplicantOrderStatus.Pending_Payment_Approval.GetStringValue();
            ////    }
            ////}
            ////Int32 orderStatusId = GetOrderStatusCode(_status);

            paymentModeCode = String.Empty; //To be removed 
            #endregion

            DeptProgramPackageSubscription programPackageSubscription = new DeptProgramPackageSubscription();

            if (applicantOrderDataContract.ProgramPackageSubscriptionId.IsNotNull() && applicantOrderDataContract.ProgramPackageSubscriptionId > AppConsts.NONE)
                programPackageSubscription = GetDeptProgramPackageSubscriptionDetail(applicantOrderDataContract.ProgramPackageSubscriptionId);

            //DateTime _creationDateTime = DateTime.Now;
            DateTime _creationDateTime = DateTime.Now;
            //Int32 _createdById = applicantOrderDataContract.OrganizationUserProfile.OrganizationUserID;
            Int32 _createdById = orgUserID;
            Int32 _organizationUserID = applicantOrderDataContract.OrganizationUserProfile.OrganizationUserID;

            #region Store Áddress Exts, Residential Histories etc.

            if (applicantOrderDataContract.OrganizationUserProfile.AddressHandle.IsNotNull() && applicantOrderDataContract.OrganizationUserProfile.AddressHandle.Addresses.IsNotNull())
            {
                AddressHandle addressHandleClient = applicantOrderDataContract.OrganizationUserProfile.AddressHandle;
                addressHandleClient.AddressHandleID = applicantOrderDataContract.AddressHandleIdMaster;
                _dbContext.AddressHandles.AddObject(addressHandleClient);
                Entity.ResidentialHistoryProfile currentAddress = applicantOrderDataContract.lstResidentialHistoryProfile.Where(x => x.RHIP_IsCurrentAddress).FirstOrDefault();
                Address addressClient = applicantOrderDataContract.OrganizationUserProfile.AddressHandle.Addresses.FirstOrDefault();
                if (addressClient.ZipCodeID == 0)
                {
                    if (currentAddress.IsNotNull())
                    {
                        if (currentAddress.Address.AddressExts.IsNotNull() && currentAddress.Address.AddressExts.Count > 0)
                        {
                            Entity.AddressExt masterAddressExt = currentAddress.Address.AddressExts.FirstOrDefault();
                            AddressExt addressExt = new AddressExt();
                            addressExt.AE_ID = masterAddressExt.AE_ID;
                            addressExt.AE_AddressID = applicantOrderDataContract.AddressIdMaster;
                            addressExt.AE_CountryID = masterAddressExt.AE_CountryID;
                            addressExt.AE_StateName = masterAddressExt.AE_StateName;
                            addressExt.AE_CityName = masterAddressExt.AE_CityName;
                            addressExt.AE_ZipCode = masterAddressExt.AE_ZipCode;
                            addressExt.AE_County = masterAddressExt.AE_County;
                            addressClient.AddressExts.Add(addressExt);
                        }
                    }
                }
                addressClient.AddressID = applicantOrderDataContract.AddressIdMaster;
                addressClient.AddressHandleID = applicantOrderDataContract.AddressHandleIdMaster;
                addressClient.CreatedOn = _creationDateTime;
                addressClient.CreatedByID = _createdById;
                addressClient.IsActive = true;
                _dbContext.Addresses.AddObject(addressClient);
                applicantOrderDataContract.OrganizationUserProfile.AddressHandleID = applicantOrderDataContract.AddressHandleIdMaster;
                //Add current address into residential history profile table.
                ResidentialHistoryProfile currentResHistoryProfile = new ResidentialHistoryProfile();
                currentResHistoryProfile.RHIP_ID = currentAddress.RHIP_ID;
                currentResHistoryProfile.RHIP_IsCurrentAddress = true;
                currentResHistoryProfile.RHIP_IsPrimaryResidence = currentAddress.RHIP_IsPrimaryResidence;
                currentResHistoryProfile.RHIP_ResidenceStartDate = currentAddress.RHIP_ResidenceStartDate;
                currentResHistoryProfile.RHIP_ResidenceEndDate = currentAddress.RHIP_ResidenceEndDate;
                currentResHistoryProfile.RHIP_IsDeleted = currentAddress.RHIP_IsDeleted;
                currentResHistoryProfile.RHIP_CreatedBy = currentAddress.RHIP_CreatedBy;
                currentResHistoryProfile.RHIP_CreatedOn = currentAddress.RHIP_CreatedOn;
                currentResHistoryProfile.RHIP_SequenceOrder = currentAddress.RHIP_SequenceOrder;
                currentResHistoryProfile.RHIP_MotherMaidenName = currentAddress.RHIP_MotherMaidenName;
                currentResHistoryProfile.RHIP_IdentificationNumber = currentAddress.RHIP_IdentificationNumber;
                currentResHistoryProfile.RHIP_DriverLicenseNumber = currentAddress.RHIP_DriverLicenseNumber;
                currentResHistoryProfile.OrganizationUserProfile = applicantOrderDataContract.OrganizationUserProfile;
                currentResHistoryProfile.Address = addressClient;
                _dbContext.ResidentialHistoryProfiles.AddObject(currentResHistoryProfile);
                //applicantOrderDataContract.lstResidentialHistoryProfile.Remove(currentAddress);
            }

            if (applicantOrderDataContract.lstResidentialHistoryProfile.IsNotNull())
            {
                if (applicantOrderDataContract.lstResidentialHistoryProfile.Count > 0)
                {
                    foreach (var newResHisProfile in applicantOrderDataContract.lstResidentialHistoryProfile)
                    {
                        if (!newResHisProfile.RHIP_IsCurrentAddress)
                        {
                            AddAddressHandle(newResHisProfile.Address.AddressHandleID);
                            Address addressNew = new Address();
                            addressNew.AddressID = newResHisProfile.Address.AddressID;
                            addressNew.Address1 = newResHisProfile.Address.Address1;
                            addressNew.Address2 = newResHisProfile.Address.Address2;
                            addressNew.ZipCodeID = newResHisProfile.Address.ZipCodeID;
                            if (addressNew.ZipCodeID == 0)
                            {
                                if (newResHisProfile.Address.AddressExts.IsNotNull() && newResHisProfile.Address.AddressExts.Count > 0)
                                {
                                    Entity.AddressExt masterAddressExt = newResHisProfile.Address.AddressExts.FirstOrDefault();
                                    AddressExt addressExtNew = new AddressExt();
                                    addressExtNew.AE_ID = masterAddressExt.AE_ID;
                                    addressExtNew.AE_CountryID = masterAddressExt.AE_CountryID;
                                    addressExtNew.AE_StateName = masterAddressExt.AE_StateName;
                                    addressExtNew.AE_CityName = masterAddressExt.AE_CityName;
                                    addressExtNew.AE_ZipCode = masterAddressExt.AE_ZipCode;
                                    addressNew.AddressExts.Add(addressExtNew);
                                }
                            }
                            addressNew.AddressHandleID = newResHisProfile.Address.AddressHandleID;
                            addressNew.CreatedOn = _creationDateTime;
                            addressNew.CreatedByID = _createdById;
                            _dbContext.Addresses.AddObject(addressNew);

                            Entity.ClientEntity.ResidentialHistoryProfile objResHistoryProfile = new ResidentialHistoryProfile();
                            objResHistoryProfile.RHIP_ID = newResHisProfile.RHIP_ID;
                            objResHistoryProfile.RHIP_IsCurrentAddress = false;
                            objResHistoryProfile.RHIP_IsPrimaryResidence = newResHisProfile.RHIP_IsPrimaryResidence;
                            objResHistoryProfile.RHIP_ResidenceStartDate = newResHisProfile.RHIP_ResidenceStartDate;
                            objResHistoryProfile.RHIP_ResidenceEndDate = newResHisProfile.RHIP_ResidenceEndDate;
                            objResHistoryProfile.RHIP_IsDeleted = newResHisProfile.RHIP_IsDeleted;
                            objResHistoryProfile.RHIP_CreatedBy = _createdById;
                            objResHistoryProfile.RHIP_CreatedOn = _creationDateTime;
                            objResHistoryProfile.RHIP_SequenceOrder = newResHisProfile.RHIP_SequenceOrder;
                            objResHistoryProfile.RHIP_MotherMaidenName = newResHisProfile.RHIP_MotherMaidenName;
                            objResHistoryProfile.RHIP_IdentificationNumber = newResHisProfile.RHIP_IdentificationNumber;
                            objResHistoryProfile.RHIP_DriverLicenseNumber = newResHisProfile.RHIP_DriverLicenseNumber;
                            objResHistoryProfile.OrganizationUserProfile = applicantOrderDataContract.OrganizationUserProfile;
                            objResHistoryProfile.Address = addressNew;
                            _dbContext.ResidentialHistoryProfiles.AddObject(objResHistoryProfile);
                        }
                    }
                }
            }

            #endregion

            #region Store Personal Aliases

            if (applicantOrderDataContract.lstPersonAliasProfile.IsNotNull())
            {
                foreach (Entity.PersonAliasProfile tempPersonAlias in applicantOrderDataContract.lstPersonAliasProfile)
                {
                    PersonAliasProfile newPersonAliasPofile = new PersonAliasProfile();
                    newPersonAliasPofile.PAP_ID = tempPersonAlias.PAP_ID;
                    newPersonAliasPofile.PAP_FirstName = tempPersonAlias.PAP_FirstName;
                    newPersonAliasPofile.PAP_MiddleName = tempPersonAlias.PAP_MiddleName;
                    newPersonAliasPofile.PAP_LastName = tempPersonAlias.PAP_LastName;
                    newPersonAliasPofile.PAP_IsDeleted = tempPersonAlias.PAP_IsDeleted;
                    newPersonAliasPofile.PAP_CreatedBy = _createdById;
                    newPersonAliasPofile.PAP_CreatedOn = _creationDateTime;

                    if (!tempPersonAlias.PersonAliasProfileExtensions.IsNullOrEmpty())
                    {
                        PersonAliasProfileExtension personalAliasProfileExtension = new PersonAliasProfileExtension();
                        personalAliasProfileExtension.PAPE_ID = tempPersonAlias.PersonAliasProfileExtensions.FirstOrDefault().PAPE_ID;
                        personalAliasProfileExtension.PAPE_PersonAliasProfileID = tempPersonAlias.PersonAliasProfileExtensions.FirstOrDefault().PAPE_PersonAliasProfileID;
                        personalAliasProfileExtension.PAPE_Suffix = tempPersonAlias.PersonAliasProfileExtensions.FirstOrDefault().PAPE_Suffix;
                        personalAliasProfileExtension.PAPE_CreatedBy = _createdById;
                        personalAliasProfileExtension.PAPE_CreatedOn = _creationDateTime;
                        newPersonAliasPofile.PersonAliasProfileExtensions.Add(personalAliasProfileExtension);
                    }
                    applicantOrderDataContract.OrganizationUserProfile.PersonAliasProfiles.Add(newPersonAliasPofile);
                }
            }
            #endregion

            applicantOrderDataContract.OrganizationUserProfile.CreatedByID = _createdById;
            applicantOrderDataContract.OrganizationUserProfile.CreatedOn = _creationDateTime;
            _dbContext.OrganizationUserProfiles.AddObject(applicantOrderDataContract.OrganizationUserProfile);

            if (applicantOrderDataContract.ProgramPackageSubscriptionId > AppConsts.NONE)
            {
                applicantOrder.DeptProgramPackageID = programPackageSubscription.DPPS_DeptProgramPackageID;
                applicantOrder.SubscriptionLabel = programPackageSubscription.SubscriptionOption.Label;
            }

            applicantOrder.OrganizationUserProfileID = applicantOrderDataContract.OrganizationUserProfile.OrganizationUserProfileID;

            //applicantOrder.OrderStatusID = orderStatusId;
            if (applicantOrder.RushOrderPrice != null)
            {
                var paymentOptnCode = GetPaymentOptionCodeById(applicantOrderDataContract.CompliancePkgPaymentOptionId);
                applicantOrder.RushOrderStatusID = GetOrderStatusId(paymentOptnCode);
            }

            applicantOrder.OrderDate = _creationDateTime;
            if (applicantOrder.SubscriptionMonth == null && applicantOrderDataContract.ProgramPackageSubscriptionId > AppConsts.NONE)
            {
                applicantOrder.SubscriptionMonth = programPackageSubscription.SubscriptionOption.Month;
                applicantOrder.SubscriptionYear = programPackageSubscription.SubscriptionOption.Year;
            }

            //if (programPackageSubscriptionId > AppConsts.NONE)
            //    applicantOrder.SubscriptionLabel = programPackageSubscription.SubscriptionOption.Label;

            applicantOrder.IsDeleted = false;
            applicantOrder.CreatedOn = _creationDateTime;
            applicantOrder.CreatedByID = _createdById;
            applicantOrder.SelectedNodeID = applicantOrderDataContract.LastNodeDPMId;
            applicantOrder.OrderStatusID = 1; // TO be Reomved
            //Set the Archived State to Active.
            applicantOrder.ArchiveStateID = GetArchiveStateIDByCode(ArchiveState.Active);

            //UAT 264
            //Update the Previous Order as Cancelled            
            //if (_status == ApplicantOrderStatus.Paid.GetStringValue()) -- UAT 916 change
            if (applicantOrder.GrandTotal == AppConsts.NONE)
            {
                applicantOrder.ApprovalDate = _creationDateTime;
                //Get the previous Order using the current Order PreviousOrderID
                Order previousOrder = GetPreviousOrderDetail(applicantOrder.PreviousOrderID);
                if (previousOrder.IsNotNull())
                {
                    String _prevStatus = ApplicantOrderStatus.Cancelled.GetStringValue();
                    previousOrder.OrderStatusID = GetOrderStatusCode(_prevStatus);
                }
            }

            #region Store Browser agent

            if (!String.IsNullOrEmpty(applicantOrderDataContract.UserBrowserAgentString))
            {
                UserBrowserAgent _browserAgent = new UserBrowserAgent
                {
                    UBA_OrderID = applicantOrder.OrderID,
                    UBA_String = applicantOrderDataContract.UserBrowserAgentString,
                    UBA_IsDeleted = false,
                    UBA_CreatedByID = _createdById,
                    UBA_CreatedOn = _creationDateTime
                };
                applicantOrder.UserBrowserAgents.Add(_browserAgent);
            }

            #endregion

            #region Set Previous order ID For Repurchasing of Archived and Expired Package [UAT-977: Additional work towards archive ability]
            Int32? prevOrderIdRepurchasingOrder = null;
            if (orderRequestNewOrderTypeId.IsNotNull() && applicantOrder.OrderRequestTypeID == orderRequestNewOrderTypeId && !programPackageSubscription.IsNullOrEmpty() && !programPackageSubscription.DeptProgramPackage.IsNullOrEmpty())
            {
                PackageSubscription packageSubscriptionOfRepurchaseOrder = null;
                packageSubscriptionOfRepurchaseOrder = GetPackageSubscriptionByPackageID(programPackageSubscription.DeptProgramPackage.DPP_CompliancePackageID, _organizationUserID);

                if (!packageSubscriptionOfRepurchaseOrder.IsNullOrEmpty() && ((packageSubscriptionOfRepurchaseOrder.lkpArchiveState.IsNotNull()
                      && packageSubscriptionOfRepurchaseOrder.lkpArchiveState.AS_Code == ArchiveState.Archived.GetStringValue()
                      && packageSubscriptionOfRepurchaseOrder.ExpiryDate.Value.Date < DateTime.Now.Date)
                      //UAT-1220: WB: As an applicant, I should be able to place a new order for a package which is already expired and retain my entered data
                      || packageSubscriptionOfRepurchaseOrder.ExpiryDate.Value.Date < DateTime.Now.Date)
                    )
                {
                    prevOrderIdRepurchasingOrder = packageSubscriptionOfRepurchaseOrder.OrderID;
                }
            }

            if (prevOrderIdRepurchasingOrder.IsNotNull() && prevOrderIdRepurchasingOrder > AppConsts.NONE)
            {
                applicantOrder.PreviousOrderID = prevOrderIdRepurchasingOrder;
            }
            #endregion

            _dbContext.Orders.AddObject(applicantOrder);

            #region UAT-1185 Save extra compliance Orders here
            if (compliancePackages.IsNotNull())
            {
                List<OrderCartCompliancePackage> lstExtraCompliancePackages = compliancePackages.FindAll(cp => cp.DPP_Id != applicantOrder.DeptProgramPackageID).ToList();
                if (lstExtraCompliancePackages.IsNotNull())
                {
                    foreach (OrderCartCompliancePackage cp in lstExtraCompliancePackages)
                    {
                        Order newOrder = new Order();
                        newOrder.OrganizationUserProfileID = applicantOrder.OrganizationUserProfileID;
                        newOrder.DeptProgramPackageID = cp.DPP_Id;
                        newOrder.OrderStatusID = applicantOrder.OrderStatusID;
                        newOrder.OrderDate = applicantOrder.OrderDate;
                        newOrder.OrderMachineIP = applicantOrder.OrderMachineIP;
                        newOrder.CreatedByID = applicantOrder.CreatedByID;
                        newOrder.CreatedOn = applicantOrder.CreatedOn;
                        newOrder.OrderRequestTypeID = applicantOrder.OrderRequestTypeID;
                        newOrder.ArchiveStateID = applicantOrder.ArchiveStateID;
                        newOrder.HierarchyNodeID = applicantOrder.HierarchyNodeID;
                        newOrder.SelectedNodeID = applicantOrder.SelectedNodeID;
                        newOrder.OrderPackageType = applicantOrderDataContract.lstOrderPackageTypes.Where(opt => opt.OPT_Code == OrderPackageTypes.COMPLIANCE_PACKAGE.GetStringValue()).FirstOrDefault().OPT_ID;

                        newOrder.TotalPrice = cp.CurrentPackagePrice;
                        newOrder.ProgramDuration = cp.ProgramDuration;
                        newOrder.GrandTotal = cp.GrandTotal;
                        //newOrder.PackageBundleId = applicantOrder.PackageBundleId;  //UAT-3283
                        programPackageSubscription = GetDeptProgramPackageSubscriptionDetail(cp.DPPS_ID);
                        if (programPackageSubscription.IsNotNull())
                        {
                            newOrder.SubscriptionLabel = programPackageSubscription.SubscriptionOption.Label;
                            newOrder.SubscriptionMonth = programPackageSubscription.SubscriptionOption.Month;
                            newOrder.SubscriptionYear = programPackageSubscription.SubscriptionOption.Year;
                        }

                        applicantOrder.OrderGroupOrderNavProp.Add(newOrder);
                        // _dbContext.Orders.AddObject(newOrder);
                        //_dbContext.SaveChanges();

                        //cp.OrderId = newOrder.OrderID;

                    }
                    //UAT-3283
                    if (!applicantOrder.OrderBundlePackages.IsNullOrEmpty() && applicantOrder.OrderBundlePackages.Count > AppConsts.NONE)
                    {
                        foreach (OrderBundlePackage orderBundlePackage in applicantOrder.OrderBundlePackages)
                        {
                            orderBundlePackage.Order = applicantOrder;
                            orderBundlePackage.OBP_CreatedBy = applicantOrder.CreatedByID;
                            orderBundlePackage.OBP_CreatedOn = _creationDateTime;
                        }
                    }
                    //UTA-3757
                    if (!applicantOrder.OrderApplicantSignatures.IsNullOrEmpty() && applicantOrder.OrderApplicantSignatures.Count > AppConsts.NONE)
                    {
                        foreach (OrderApplicantSignature orderApplicantSignature in applicantOrder.OrderApplicantSignatures)
                        {
                            orderApplicantSignature.Order = applicantOrder;
                            orderApplicantSignature.OAS_CreatedBy = applicantOrder.CreatedByID;
                            orderApplicantSignature.OAS_CreatedOn = _creationDateTime;
                        }
                    }
                }
            }
            #endregion

            #region Add data of Background Packages
            var _lstBkgOrderPkg = new List<BkgOrderPackage>();
            //Start UAT-4498
            List<BkgOrderPackageSvcLineItem> lstDummyLineItems = new List<BkgOrderPackageSvcLineItem>();

            //End UAT-4498
            if (!applicantOrderDataContract.lstBackgroundPackages.IsNullOrEmpty())
            {
                #region Add BkgOrder Table Data

                BkgOrder _bkgOrder = new BkgOrder();
                _bkgOrder.Order = applicantOrder;
                _bkgOrder.BOR_OrganizationUserProfileID = applicantOrderDataContract.OrganizationUserProfile.OrganizationUserProfileID; //
                //_bkgOrder.BOR_GrandTotal = applicantOrderDataContract.lstBackgroundPackages.Sum(x => x.BasePrice) + applicantOrderDataContract.lstBackgroundPackages.Sum(x => x.TotalBkgPackagePrice);
                //_bkgOrder.BOR_TotalPrice = applicantOrderDataContract.lstBackgroundPackages.Sum(x => x.BasePrice) + applicantOrderDataContract.lstBackgroundPackages.Sum(x => x.TotalBkgPackagePrice);
                _bkgOrder.BOR_GrandTotal = applicantOrderDataContract.lstBackgroundPackages.Sum(x => x.TotalBkgPackagePrice);
                _bkgOrder.BOR_TotalPrice = applicantOrderDataContract.lstBackgroundPackages.Sum(x => x.TotalBkgPackagePrice);
                _bkgOrder.BOR_InstitutionStatusColorID = null;
                _bkgOrder.BOR_BkgOrderClientStatus = null;
                _bkgOrder.BOR_ADBAdminNotes = null;
                _bkgOrder.BOR_InstitutionAcceptanceStatusTypeID = null;
                _bkgOrder.BOR_InstitutionRejectionReasonID = null;
                //_bkgOrder.BOR_OrderResultsRequestedByApplicant = false;
                _bkgOrder.BOR_IsArchived = false;
                _bkgOrder.BOR_IsDeleted = false;
                _bkgOrder.BOR_CreatedByID = _createdById;
                _bkgOrder.BOR_CreatedOn = _creationDateTime;
                _bkgOrder.BOR_OrderStatusTypeID = applicantOrderDataContract.BkgOrderStatusTypeId;
                _bkgOrder.BOR_OrderResultsRequestedByApplicant = applicantOrderDataContract.IsSendBackgroundReport;
                //UAT-3268
                //_bkgOrder.BOR_AdditionalPrice = applicantOrderDataContract.lstBackgroundPackages.Where(cond => cond.IsReqToQualifyInRotation).Select(Sel => Sel.AdditionalPrice);

                #endregion

                #region Add TransactionGroup table data

                TransactionGroup _transactionGrp = new TransactionGroup();
                _transactionGrp.Order = applicantOrder;
                _transactionGrp.TG_TxnDate = _creationDateTime;
                _transactionGrp.TG_CreatedByID = _createdById;
                _transactionGrp.TG_CreatedOn = _creationDateTime;

                #endregion

                List<Int32> _lstPackageIds = applicantOrderDataContract.lstBackgroundPackages.Select(bp => bp.BPAId).ToList();

                // Get the list of All the Service groups of the selected packages
                // Check if Nullable type should be there 
                List<BkgPackageSvcGroup> _lstBkgPackageSvcGroups = _dbContext.BkgPackageSvcGroups.Include("BkgPackageSvcs")
                                                         .Where(bpsg => _lstPackageIds.Contains(bpsg.BPSG_BackgroundPackageID) && !bpsg.BPSG_IsDeleted
                                                         && !bpsg.BkgSvcGroup.BSG_IsDeleted && !bpsg.BackgroundPackage.BPA_IsDeleted && bpsg.BackgroundPackage.BPA_IsActive)
                                                         .ToList();
                List<Int32> _lstPHMIds = new List<Int32>();


                foreach (var pkg in applicantOrderDataContract.lstBackgroundPackages)
                {
                    #region Bkg Package
                    var _pkgPricingData = applicantOrderDataContract.lstPricingData.Where(pd => pd.PackageId == pkg.BPAId).FirstOrDefault();
                    _lstPHMIds.Add(pkg.BPHMId);

                    #region  Add BkgOrderPackage Table Data

                    BkgOrderPackage _bkgOrderPackage = new BkgOrderPackage();
                    _bkgOrderPackage.BkgOrder = _bkgOrder;
                    _bkgOrderPackage.BOP_IsDeleted = false;
                    _bkgOrderPackage.BOP_CreatedByID = _createdById;
                    _bkgOrderPackage.BOP_CreatedOn = _creationDateTime;
                    _bkgOrderPackage.BOP_BkgPackageHierarchyMappingID = pkg.BPHMId;
                    _bkgOrderPackage.BOP_BasePrice = pkg.TotalBkgPackagePrice == AppConsts.NONE ? AppConsts.NONE : pkg.BasePrice;
                    //_bkgOrderPackage.BOP_TotalLineItemPrice = pkg.TotalLineItemPrice;
                    _bkgOrderPackage.BOP_TotalLineItemPrice = pkg.TotalBkgPackagePrice == AppConsts.NONE ? AppConsts.NONE : (pkg.TotalBkgPackagePrice - pkg.BasePrice);
                    //UAT-3268
                    if (pkg.IsReqToQualifyInRotation)
                        _bkgOrderPackage.BOP_AdditionalPrice = pkg.AdditionalPrice;

                    _lstBkgOrderPkg.Add(_bkgOrderPackage);
                    #endregion

                    // Get Service Group of Package being iterated
                    //List<BkgPackageSvcGroup> _lstTempPkgSvcGroups = _lstBkgPackageSvcGroups.Where(bpsg => bpsg.BPSG_BackgroundPackageID == pkg.BPAId).ToList();

                    //changes done for UAT - 1371 - WB: Service group without line items should not be created with order
                    List<Int32> lstBkgSvcGrpIdsWithLineItems = new List<Int32>();
                    if (!_pkgPricingData.lstOrderLineItems.IsNullOrEmpty())
                    {
                        lstBkgSvcGrpIdsWithLineItems = _pkgPricingData.lstOrderLineItems.Select(col => col.PackageSvcGrpID).Distinct().ToList();
                    }
                    List<BkgPackageSvcGroup> _lstTempPkgSvcGroups = _lstBkgPackageSvcGroups
                                                .Where(bpsg => bpsg.BPSG_BackgroundPackageID == pkg.BPAId && lstBkgSvcGrpIdsWithLineItems.Contains(bpsg.BPSG_ID))
                                                .ToList();

                    // Add all the service groups related to the particular Package
                    foreach (var pkgSvcGroup in _lstTempPkgSvcGroups)
                    {
                        #region  Add BkgOrderPackageSvcGroup Table Data

                        BkgOrderPackageSvcGroup _bkgOrderPackageSvcGroup = new BkgOrderPackageSvcGroup();
                        _bkgOrderPackageSvcGroup.BkgOrderPackage = _bkgOrderPackage;
                        _bkgOrderPackageSvcGroup.OPSG_BkgSvcGroupID = Convert.ToInt32(pkgSvcGroup.BPSG_BkgSvcGroupID);
                        _bkgOrderPackageSvcGroup.OPSG_IsDeleted = false;
                        _bkgOrderPackageSvcGroup.OPSG_CreatedByID = _createdById;
                        _bkgOrderPackageSvcGroup.OPSG_CreatedOn = _creationDateTime;
                        _bkgOrderPackageSvcGroup.OPSG_SvcGrpReviewStatusTypeID = applicantOrderDataContract.NewSvcGrpReviewStatusTypeId;
                        _bkgOrderPackageSvcGroup.OPSG_SvcGrpStatusTypeID = applicantOrderDataContract.NewSvcGrpStatusTypeId;

                        //Below code is added in UAT-4498//

                        if (!pkgSvcGroup.BkgPackageSvcs.ToList().IsNullOrEmpty() && pkgSvcGroup.BkgPackageSvcs.ToList().Count == AppConsts.ONE
                             && !_pkgPricingData.lstOrderLineItems.IsNullOrEmpty() && _pkgPricingData.lstOrderLineItems.Where(oli => oli.PackageServiceId == pkgSvcGroup.BkgPackageSvcs.ToList().FirstOrDefault().BPS_ID).ToList().Count == AppConsts.ONE
                               && _pkgPricingData.lstOrderLineItems.Where(oli => oli.PackageServiceId == pkgSvcGroup.BkgPackageSvcs.ToList().FirstOrDefault().BPS_ID).ToList().FirstOrDefault().IsDummyLineItem)
                        {
                            _bkgOrderPackageSvcGroup.OPSG_SvcGrpReviewStatusTypeID = applicantOrderDataContract.AutoReviewSvcGrpReviewStatusTypeId;
                            _bkgOrderPackageSvcGroup.OPSG_SvcGrpStatusTypeID = applicantOrderDataContract.CompletedSvcGrpStatusTypeId;
                            _bkgOrderPackageSvcGroup.OPSG_SvcGrpCompletionDate = _creationDateTime;
                        }
                        //End UAT-4498

                        #endregion

                        foreach (var service in pkgSvcGroup.BkgPackageSvcs)
                        {
                            if (!service.BPS_IsDeleted && !service.BackgroundService.BSE_IsDeleted)
                            {
                                #region Add BkgOrderPackageSvc Table Data

                                BkgOrderPackageSvc _bkgOrderPackageSvc = new BkgOrderPackageSvc();
                                _bkgOrderPackageSvc.BkgOrderPackageSvcGroup = _bkgOrderPackageSvcGroup;
                                _bkgOrderPackageSvc.BOPS_BackgroundServiceID = service.BPS_BackgroundServiceID;
                                _bkgOrderPackageSvc.BOPS_IsDeleted = false;
                                _bkgOrderPackageSvc.BOPS_CreatedByID = _createdById;
                                _bkgOrderPackageSvc.BOPS_CreatedOn = _creationDateTime;

                                #endregion

                                if (!_pkgPricingData.IsNullOrEmpty() && !_pkgPricingData.lstOrderLineItems.IsNullOrEmpty())
                                {
                                    List<OrderLineItem_PricingData> _lstLineItems = _pkgPricingData.lstOrderLineItems.Where(oli => oli.PackageServiceId == service.BPS_ID).ToList();
                                    foreach (var _lineItem in _lstLineItems)
                                    {
                                        #region Add BkgOrderPackageSvcLineItem Table Data
                                        BkgOrderPackageSvcLineItem _bkgOrdPkgSvcLineItem = new BkgOrderPackageSvcLineItem();
                                        _bkgOrdPkgSvcLineItem.BkgOrderPackageSvc = _bkgOrderPackageSvc;
                                        _bkgOrdPkgSvcLineItem.PSLI_OrderLineItemStatusID = _lineItem.IsDummyLineItem ? applicantOrderDataContract.AutoCompletedOrderLineItemStatusId
                                                                                            : applicantOrderDataContract.OrderLineItemStatusId; //UAT-4498 added condition
                                        _bkgOrdPkgSvcLineItem.PSLI_ServiceItemID = _lineItem.PackageServiceItemId;
                                        _bkgOrdPkgSvcLineItem.PSLI_IsDeleted = false;
                                        _bkgOrdPkgSvcLineItem.PSLI_CreatedByID = _createdById;
                                        _bkgOrdPkgSvcLineItem.PSLI_CreatedOn = _creationDateTime;
                                        _bkgOrdPkgSvcLineItem.PSLI_DispatchedExternalVendor = _lineItem.IsDummyLineItem ? applicantOrderDataContract.DispatchedSvcLineItemDispatchStatusId
                                                                                                : svcLineItemDispatchStatusId; //UAT-4498
                                        _bkgOrdPkgSvcLineItem.PSLI_NeedsExternalDispatch = _lineItem.IsDummyLineItem ? false : true; //UAT-4498
                                        _bkgOrdPkgSvcLineItem.PSLI_Description = _lineItem.Description;
                                        //UAT-4498
                                        _bkgOrdPkgSvcLineItem.PSLI_IsDummyLineItem = _lineItem.IsDummyLineItem;
                                        if (_lineItem.IsDummyLineItem)
                                            lstDummyLineItems.Add(_bkgOrdPkgSvcLineItem);
                                        //End UAT-4498
                                        //UAT-4162//
                                        if (_bkgOrdPkgSvcLineItem.BkgOrderPackageSvc.BackgroundService.lkpBkgSvcType.BST_Code == BkgServiceType.ELECTRONICDRUGSCREEN.GetStringValue())
                                        {
                                            String dueDataPullStatusTypeCode = DataPullStatusType.DUE_STATUS.GetStringValue();
                                            _bkgOrdPkgSvcLineItem.PSLI_DataPulledStatusTypeID = _dbContext.lkpDataPullStatusTypes.Where(cond => cond.DPST_Code == dueDataPullStatusTypeCode && !cond.DPST_IsDeleted).FirstOrDefault().DPST_ID;
                                        }
                                        #endregion

                                        if (!_lineItem.Price.IsNullOrEmpty())
                                        {
                                            #region Add Transaction Table Data if Line Item Price is available
                                            if (!_lineItem.PackageOrderItemPriceId.IsNullOrEmpty() && _lineItem.PackageOrderItemPriceId != AppConsts.NONE)
                                            {
                                                Transaction _transaction = new Transaction();
                                                _transaction.TransactionGroup = _transactionGrp;
                                                _transaction.BkgOrderPackageSvcLineItem = _bkgOrdPkgSvcLineItem;
                                                _transaction.TD_PackageServiceItemPriceID = _lineItem.PackageOrderItemPriceId;
                                                _transaction.TD_Amount = _lineItem.Price;
                                                _transaction.TD_IsDeleted = false;
                                                _transaction.TD_CreatedByID = _createdById;
                                                _transaction.TD_CreatedOn = _creationDateTime;
                                                _transaction.TD_Description = _lineItem.PriceDescription;
                                                _bkgOrdPkgSvcLineItem.Transactions.Add(_transaction);
                                            }
                                            #endregion
                                        }
                                        if (!_lineItem.lstFees.IsNullOrEmpty())
                                        {
                                            foreach (var fee in _lineItem.lstFees)
                                            {
                                                #region Add Transaction Table Data if Line Item Fees is available
                                                if (!fee.PackageOrderItemFeeId.IsNullOrEmpty() && fee.PackageOrderItemFeeId != AppConsts.NONE)
                                                {
                                                    Transaction _transaction = new Transaction();
                                                    _transaction.TransactionGroup = _transactionGrp;
                                                    _transaction.BkgOrderPackageSvcLineItem = _bkgOrdPkgSvcLineItem;
                                                    _transaction.TD_PackageServiceItemFeeID = fee.PackageOrderItemFeeId;
                                                    _transaction.TD_Amount = fee.Amount;
                                                    _transaction.TD_IsDeleted = false;
                                                    _transaction.TD_CreatedByID = _createdById;
                                                    _transaction.TD_CreatedOn = _creationDateTime;
                                                    _transaction.TD_Description = fee.Description;
                                                    _bkgOrdPkgSvcLineItem.Transactions.Add(_transaction);
                                                }
                                                #endregion
                                            }
                                        }

                                        foreach (var _bkgSvcAttDataGroup in _lineItem.lstBkgSvcAttributeDataGroup)
                                        {
                                            Int32? _instanceId = AppConsts.NONE;
                                            //if (!String.IsNullOrEmpty(_bkgSvcAttDataGroup.InstanceId))
                                            if (_bkgSvcAttDataGroup.InstanceId != AppConsts.NONE)
                                                _instanceId = this.GetInstanceId(applicantOrderDataContract, _bkgSvcAttDataGroup.AttributeGroupId, _bkgSvcAttDataGroup.InstanceId);
                                            else
                                                _instanceId = null;

                                            if (_instanceId != AppConsts.NONE)
                                            {
                                                BkgOrderLineItemDataMapping _lineItemDataMapping = new BkgOrderLineItemDataMapping();

                                                _lineItemDataMapping.BkgOrderPackageSvcLineItem = _bkgOrdPkgSvcLineItem;
                                                _lineItemDataMapping.OLIDM_BkgSvcAttributeGroupID = _bkgSvcAttDataGroup.AttributeGroupId;
                                                _lineItemDataMapping.OLIDM_InstanceID = _instanceId;
                                                _lineItemDataMapping.OLIDM_CreatedByID = _createdById;
                                                _lineItemDataMapping.OLIDM_CreatedOn = _creationDateTime;
                                                _lineItemDataMapping.OLIDM_IsDeleted = false;
                                                _bkgOrdPkgSvcLineItem.BkgOrderLineItemDataMappings.Add(_lineItemDataMapping);

                                                foreach (var _attrData in _bkgSvcAttDataGroup.lstAttributeData)
                                                {
                                                    BkgOrderLineItemDataUsedAttrb _lineItemDataUsedAttr = new BkgOrderLineItemDataUsedAttrb();
                                                    _lineItemDataUsedAttr.BkgOrderLineItemDataMapping = _lineItemDataMapping;
                                                    _lineItemDataUsedAttr.OLIDUA_BkgAttributeGroupMappingID = _attrData.AttributeGroupMappingID;
                                                    _lineItemDataUsedAttr.OLIDUA_AttributeValue = _attrData.AttributeValue;

                                                    _lineItemDataMapping.BkgOrderLineItemDataUsedAttrbs.Add(_lineItemDataUsedAttr);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    #endregion
                }

                Int16? _supplementaTypeId = null;
                _bkgOrder.BOR_NeedFirstReview = this.GetPackageSettings(_lstPHMIds, out _supplementaTypeId);
                _bkgOrder.BOR_PackageSupplementalTypeID = _supplementaTypeId;

                #region Add BkgOrderEventHistory table data

                BkgOrderEventHistory _bkgOrderEventHistory = new BkgOrderEventHistory
                {
                    BkgOrder = _bkgOrder,
                    BOEH_OrderEventDetail = AppConsts.Bkg_Order_Created,
                    BOEH_IsDeleted = false,
                    BOEH_CreatedByID = applicantOrderDataContract.OrganizationUserProfile.CreatedByID,
                    BOEH_CreatedOn = _creationDateTime,
                    BOEH_EventHistoryId = applicantOrderDataContract.OrderCreatedStatusId
                };

                #endregion

                #region Add Dynamic custom form data
                if (!applicantOrderDataContract.lstBkgOrderData.IsNullOrEmpty())
                {
                    foreach (var bkgOrderData in applicantOrderDataContract.lstBkgOrderData)
                    {
                        CustomFormDataGroup _customFormDataGroup = new CustomFormDataGroup
                        {
                            BkgOrder = _bkgOrder,
                            CFDG_BkgSvcAttributeGroupID = bkgOrderData.BkgSvcAttributeGroupId,
                            CFDG_CustomFormID = bkgOrderData.CustomFormId,
                            CFDG_InstanceID = bkgOrderData.InstanceId,
                            CFDG_IsDeleted = false,
                            CFDG_CreatedBy = applicantOrderDataContract.OrganizationUserProfile.CreatedByID,
                            CFDG_CreatedOn = _creationDateTime
                        };

                        foreach (var customFormData in bkgOrderData.CustomFormData)
                        {
                            CustomFormOrderData _customFormOrderData = new CustomFormOrderData
                            {
                                CustomFormDataGroup = _customFormDataGroup,
                                CFOD_BkgAttributeGroupMappingID = customFormData.Key,
                                CFOD_Value = customFormData.Value,
                                CFOD_IsDeleted = false,
                                CFOD_ModifiedBy = applicantOrderDataContract.OrganizationUserProfile.CreatedByID,
                                CFOD_ModifiedOn = _creationDateTime
                            };

                            //UAT-2447
                            if (!bkgOrderData.CustomFormIntPhoneNumExtraData.IsNullOrEmpty() && bkgOrderData.CustomFormIntPhoneNumExtraData.ContainsKey(customFormData.Key)
                                && Convert.ToBoolean(bkgOrderData.CustomFormIntPhoneNumExtraData[customFormData.Key]))
                            {
                                CustomFormOrderExtraData _customFormOrderExtraData = new CustomFormOrderExtraData();
                                _customFormOrderExtraData.CustomFormOrderData = _customFormOrderData;
                                _customFormOrderExtraData.CFOED_IsInternationalPhone = Convert.ToBoolean(bkgOrderData.CustomFormIntPhoneNumExtraData[customFormData.Key]);
                                _customFormOrderExtraData.CFOED_IsDeleted = false;
                                _customFormOrderExtraData.CFOED_CreatedBy = applicantOrderDataContract.OrganizationUserProfile.CreatedByID;
                                _customFormOrderExtraData.CFOED_CreatedOn = _creationDateTime;
                            }

                        }
                    }
                }

                #endregion

                _dbContext.BkgOrders.AddObject(_bkgOrder);
            }
            #endregion

            _dbContext.SaveChanges();

            //Start UAT-4498
            //Add [usp_InsertDummyLineItemResultCopy] calling here, after all data has saved.
            if (!lstDummyLineItems.IsNullOrEmpty() && lstDummyLineItems.Count > AppConsts.NONE)
            {
                List<Int32> lstDummyLineItemsID = new List<Int32>();
                lstDummyLineItemsID = lstDummyLineItems.Where(con => !con.PSLI_IsDeleted).Select(sel => sel.PSLI_ID).ToList();
                InsertDummyLineItemResultCopy(String.Join(",", lstDummyLineItemsID), _createdById);
            }

            #region Add data to CABS Service Order Detail

            if (!applicantOrderDataContract.lstBackgroundPackages.IsNullOrEmpty() && applicantOrderDataContract.lstBackgroundPackages.Count > 0 && isLocationServiceTenant && applicantOrder.OrderID > 0 && !mailingAddress.IsNullOrEmpty())
            {
                StringBuilder xmlStringData = new StringBuilder();
                xmlStringData.Append("<BkgpkgAttributes>");
                Decimal mailingPrice = Convert.ToDecimal(0.00);

                char[] splitParams = new char[] { '(', ')' };

                if (!mailingAddress.MailingOptionPrice.IsNullOrEmpty())
                {
                    String[] MailingPrice1 = mailingAddress.MailingOptionPrice.Split(splitParams);
                    mailingPrice = Convert.ToDecimal(MailingPrice1[1]);
                }
                foreach (BackgroundPackagesContract item in applicantOrderDataContract.lstBackgroundPackages)
                {
                    if (item.ServiceCode != BkgServiceType.SIMPLE.GetStringValue() && mailingAddress.MailingOptionId != "0")
                    {
                        xmlStringData.Append("<BkgpkgData><NumberOfCopies>" + item.CopiesCount + "</NumberOfCopies><BasePrice>" + item.BasePrice + "</BasePrice><ServiceType>" + item.ServiceCode + "</ServiceType><IsConsent>" + FingerPrintData.IsConsent + "</IsConsent><TotalBkgPackagePrice>" + item.TotalBkgPackagePrice + "</TotalBkgPackagePrice><IsFromArchivedOrderScreen>" + FingerPrintData.IsFromArchivedOrderScreen + "</IsFromArchivedOrderScreen><ReferencedOrderID>" + item.ReferencedOrderID + "</ReferencedOrderID><IsMailingOnly>" + FingerPrintData.IsMailingOnly + "</IsMailingOnly><MailingOptionId>" + mailingAddress.MailingOptionId + "</MailingOptionId><MailingOptionPrice>" + mailingPrice + "</MailingOptionPrice><MailingAddressHandleId>" + mailingAddress.MailingAddressHandleId + "</MailingAddressHandleId><FCAdditionalPrice>" + item.FCAdditionalPrice + "</FCAdditionalPrice><PPCopiesCount>" + item.PPCopiesCount + "</PPCopiesCount><PPAdditionalPrice>" + item.PPAdditionalPrice + "</PPAdditionalPrice> </BkgpkgData>");
                    }
                    else
                    {
                        xmlStringData.Append("<BkgpkgData><NumberOfCopies>" + item.CopiesCount + "</NumberOfCopies><BasePrice>" + item.BasePrice + "</BasePrice><ServiceType>" + item.ServiceCode + "</ServiceType><IsConsent>" + FingerPrintData.IsConsent + "</IsConsent><TotalBkgPackagePrice>" + item.TotalBkgPackagePrice + "</TotalBkgPackagePrice><IsFromArchivedOrderScreen>" + FingerPrintData.IsFromArchivedOrderScreen + "</IsFromArchivedOrderScreen><ReferencedOrderID>" + item.ReferencedOrderID + "</ReferencedOrderID><IsMailingOnly>" + FingerPrintData.IsMailingOnly + "</IsMailingOnly></BkgpkgData>");
                    }

                }
                xmlStringData.Append("</BkgpkgAttributes>");
                CABSServiceOrderDetail cABSServiceOrderDetail = new CABSServiceOrderDetail();
                cABSServiceOrderDetail.CSOD_OrderID = applicantOrder.OrderID;
                cABSServiceOrderDetail.CSOD_ServiceDetails = xmlStringData.ToString();
                cABSServiceOrderDetail.CSOD_IsActive = true;
                cABSServiceOrderDetail.CSOD_CreatedBy = _createdById;
                cABSServiceOrderDetail.CSOD_CreatedOn = _creationDateTime;
                cABSServiceOrderDetail.CSOD_IsDeleted = false;
                _dbContext.CABSServiceOrderDetails.AddObject(cABSServiceOrderDetail);
                _dbContext.SaveChanges();
            }
            #endregion

            //END UAT-4498


            ////Changes related to UAT-1790.
            //applicantOrder.OrderNumber = UpdateOrderNumber(applicantOrder.OrderID);

            //if (applicantOrder.OrderGroupOrderNavProp.IsNotNull() && applicantOrder.OrderGroupOrderNavProp.Count > AppConsts.NONE)
            //{
            //    Order extraOrder = applicantOrder.OrderGroupOrderNavProp.FirstOrDefault();
            //    if (extraOrder.IsNotNull())
            //    {
            //        extraOrder.OrderNumber = UpdateOrderNumber(extraOrder.OrderID);
            //    }
            //}

            _dbContext.Refresh(RefreshMode.StoreWins, applicantOrder);

            #region UAT-1185 get OrderID for each Compliance Packages
            if (compliancePackages.IsNotNull() && compliancePackages.Count > AppConsts.NONE)
            {
                foreach (OrderCartCompliancePackage cp in compliancePackages)
                {
                    if (applicantOrder.DeptProgramPackageID.Equals(cp.DPP_Id))
                    {
                        cp.OrderId = applicantOrder.OrderID;
                        cp.OrderNumber = applicantOrder.OrderNumber;
                    }
                    else
                    {
                        if (applicantOrder.OrderGroupOrderNavProp.IsNotNull() && applicantOrder.OrderGroupOrderNavProp.Count > AppConsts.NONE)
                        {
                            Order o = applicantOrder.OrderGroupOrderNavProp.FirstOrDefault(ord => ord.DeptProgramPackageID == cp.DPP_Id);
                            if (o.IsNotNull())
                            {
                                _dbContext.Refresh(RefreshMode.StoreWins, o);
                                cp.OrderId = o.OrderID;
                                cp.OrderNumber = o.OrderNumber;
                            }
                        }
                    }
                }
            }
            #endregion

            #region UAT 1067 - Hierarchy for orders (background and screening) should display as the full hierarchy sleected during the order, not the node the package lives on.

            List<Int32> dpmIDS = new List<int>();
            dpmIDS.Add(Convert.ToInt32(applicantOrder.SelectedNodeID));

            //Get id of compliance package node in case there was a compliance package in the order. Else it should be the id of the background package node. Or both 
            /* if (applicantOrderDataContract.IsCompliancePackageSelected && applicantOrderDataContract.lstBackgroundPackages != null && applicantOrderDataContract.lstBackgroundPackages.Count > 0)
             {
                 dpmIDS.Add(applicantOrder.HierarchyNodeID.Value);
                 Int32 bhpmID = applicantOrderDataContract.lstBackgroundPackages[0].BPHMId;
                 Int32 bkgDPMId = _dbContext.BkgPackageHierarchyMappings.FirstOrDefault(x => x.BPHM_ID == bhpmID).BPHM_InstitutionHierarchyNodeID;
                 dpmIDS.Add(bkgDPMId);
             }
             else if (!applicantOrderDataContract.IsCompliancePackageSelected && applicantOrderDataContract.lstBackgroundPackages != null && applicantOrderDataContract.lstBackgroundPackages.Count > 0)
             {
                 dpmIDS.Add(applicantOrder.HierarchyNodeID.Value);
             }
             else
             {
                 dpmIDS.Add(applicantOrder.HierarchyNodeID.Value);
             }*/

            #endregion

            #region Applicant Hierarchy Mapping and custom attribute value Entry
            List<ApplicantHierarchyMapping> _applicantHierarchyMappings = _dbContext.ApplicantHierarchyMappings.Where(ahm =>
                            dpmIDS.Contains(ahm.AHM_HierarchyNodeID)
                          && ahm.AHM_OrganizationUserID == _organizationUserID && ahm.AHM_IsDeleted == false).ToList();

            Int32 _ahmId = 0;
            List<ApplicantHierarchyMapping> lstAppHierMapping;

            if (_applicantHierarchyMappings == null && _applicantHierarchyMappings.Count == AppConsts.NONE)
            {
                lstAppHierMapping = new List<ApplicantHierarchyMapping>();

                //Save id of compliance package node in case there was a compliance package in the order. Else it should be the id of the background package node. Or both 
                foreach (var dpmID in dpmIDS)
                {
                    ApplicantHierarchyMapping appHierMapping = new ApplicantHierarchyMapping();
                    appHierMapping.AHM_OrganizationUserID = _organizationUserID;
                    appHierMapping.AHM_HierarchyNodeID = Convert.ToInt32(dpmID);
                    appHierMapping.AHM_IsDeleted = false;
                    appHierMapping.AHM_CreatedByID = _createdById;
                    appHierMapping.AHM_CreatedOn = _creationDateTime;
                    _dbContext.ApplicantHierarchyMappings.AddObject(appHierMapping);
                    lstAppHierMapping.Add(appHierMapping);
                }

                _dbContext.SaveChanges();

                foreach (var attributeValues in applicantOrderDataContract.lstAttributeValues)
                {
                    _ahmId = lstAppHierMapping.FirstOrDefault(x => x.AHM_HierarchyNodeID == attributeValues.HierarchyNodeID).AHM_ID;
                    _dbContext.CustomAttributeValues.AddObject(new CustomAttributeValue
                    {
                        CAV_CustomAttributeMappingID = Convert.ToInt32(attributeValues.CAMId),
                        CAV_AttributeValue = attributeValues.CAValue,
                        CAV_IsDeleted = false,
                        CAV_CreatedByID = _createdById,
                        CAV_CreatedOn = _creationDateTime,
                        CAV_RecordID = _ahmId
                    });
                }
            }
            else
            {
                List<Int32> nodeIds = new List<int>();
                foreach (var appHierMapping in _applicantHierarchyMappings)
                {
                    _ahmId = appHierMapping.AHM_ID;
                    Int32 _hierarchyNodeId = appHierMapping.AHM_HierarchyNodeID;
                    nodeIds.Add(_hierarchyNodeId);
                    //List<CustomAttributeValue> lstCustomAttrValues = _dbContext.CustomAttributeValues.Where(cav => cav.CAV_RecordID == _ahmId).ToList();
                    List<TypeCustomAttributes> tempCustomAttributes = applicantOrderDataContract.lstAttributeValues.IsNotNull() ? applicantOrderDataContract.lstAttributeValues.Where(x => x.HierarchyNodeID == _hierarchyNodeId).ToList() : new List<TypeCustomAttributes>();

                    foreach (var _customAttrValue in tempCustomAttributes)
                    {
                        if (_customAttrValue.CAVId == AppConsts.NONE)
                        {
                            _dbContext.CustomAttributeValues.AddObject(new CustomAttributeValue
                            {
                                CAV_IsDeleted = false,
                                CAV_CreatedByID = _createdById,
                                CAV_CreatedOn = _creationDateTime,
                                CAV_CustomAttributeMappingID = Convert.ToInt32(_customAttrValue.CAMId),
                                CAV_AttributeValue = _customAttrValue.CAValue,
                                CAV_RecordID = _ahmId
                            });
                        }
                        else
                        {
                            CustomAttributeValue _customAttributeValueToUpdate = _dbContext.CustomAttributeValues.Where(cav => cav.CAV_CustomAttributeValueID == _customAttrValue.CAVId).FirstOrDefault();

                            if (_customAttributeValueToUpdate.IsNotNull())
                            {
                                _customAttributeValueToUpdate.CAV_ModifiedByID = _createdById;
                                _customAttributeValueToUpdate.CAV_ModifiedOn = _creationDateTime;
                                _customAttributeValueToUpdate.CAV_AttributeValue = _customAttrValue.CAValue;
                            }
                        }
                    }
                }

                nodeIds = dpmIDS.Where(x => !nodeIds.Contains(x)).ToList();

                if (nodeIds != null && nodeIds.Count > 0)
                {
                    lstAppHierMapping = new List<ApplicantHierarchyMapping>();
                    //Save id of compliance package node in case there was a compliance package in the order. Else it should be the id of the background package node. Or both 
                    foreach (var dpmID in nodeIds)
                    {
                        ApplicantHierarchyMapping appHierMapping = new ApplicantHierarchyMapping();
                        appHierMapping.AHM_OrganizationUserID = _organizationUserID;
                        appHierMapping.AHM_HierarchyNodeID = Convert.ToInt32(dpmID);
                        appHierMapping.AHM_IsDeleted = false;
                        appHierMapping.AHM_CreatedByID = _createdById;
                        appHierMapping.AHM_CreatedOn = _creationDateTime;
                        _dbContext.ApplicantHierarchyMappings.AddObject(appHierMapping);
                        lstAppHierMapping.Add(appHierMapping);
                    }

                    _dbContext.SaveChanges();

                    foreach (var dpmID in nodeIds)
                    {
                        List<TypeCustomAttributes> tempCustomAttributes = applicantOrderDataContract.lstAttributeValues.IsNotNull() ? applicantOrderDataContract.lstAttributeValues.Where(x => x.HierarchyNodeID == dpmID).ToList() : new List<TypeCustomAttributes>();

                        foreach (var attributeValues in tempCustomAttributes)
                        {
                            _ahmId = lstAppHierMapping.FirstOrDefault(x => x.AHM_HierarchyNodeID == attributeValues.HierarchyNodeID).AHM_ID;
                            _dbContext.CustomAttributeValues.AddObject(new CustomAttributeValue
                            {
                                CAV_CustomAttributeMappingID = Convert.ToInt32(attributeValues.CAMId),
                                CAV_AttributeValue = attributeValues.CAValue,
                                CAV_IsDeleted = false,
                                CAV_CreatedByID = _createdById,
                                CAV_CreatedOn = _creationDateTime,
                                CAV_RecordID = _ahmId
                            });
                        }
                    }
                }
            }

            _dbContext.SaveChanges();
            #endregion

            var _orderStatusId = 0;

            var _bkgPkgTypeId = applicantOrderDataContract.lstOrderPackageTypes.Where(opt => opt.OPT_Code == OrderPackageTypes.BACKGROUND_PACKAGE.GetStringValue()).FirstOrDefault().OPT_ID;
            var _compliancePkgTypeId = applicantOrderDataContract.lstOrderPackageTypes.Where(opt => opt.OPT_Code == OrderPackageTypes.COMPLIANCE_PACKAGE.GetStringValue()).FirstOrDefault().OPT_ID;

            foreach (var poId in applicantOrderDataContract.lstGroupedData)
            {
                bool mainOrderPaymentDetailEntry = false;
                if (poId.TotalAmount > AppConsts.NONE)
                {
                    if (poId.PaymentModeCode.Contains("Additional") == true)
                    {
                        var paymentCode = poId.PaymentModeCode.Split('-')[0];
                        _orderStatusId = GetOrderStatusId(paymentCode);
                    }
                    else
                        _orderStatusId = GetOrderStatusId(poId.PaymentModeCode);
                }
                else
                {
                    _orderStatusId = GetOrderStatusCode(ApplicantOrderStatus.Paid.GetStringValue());
                }

                #region UAT-1185 Adjust amount of main order payment details if it has extra compliance too
                decimal adjustedAmount = 0;
                List<Int32> childOrderIds = new List<int>();
                if (!poId.lstPackages.IsNullOrEmpty())   //Check in UAT-3268
                {
                    foreach (var pkg in poId.lstPackages)
                    {
                        if (!pkg.Value)
                        {
                            var pkgId = Convert.ToInt32(pkg.Key.Split('_')[0]);
                            if (pkgId == applicantOrder.DeptProgramPackage.DPP_CompliancePackageID)
                                mainOrderPaymentDetailEntry = true;
                            else
                            {
                                OrderCartCompliancePackage cp = compliancePackages.First(ocp => ocp.CompliancePackageID == pkgId && ocp.OrderId > AppConsts.NONE);
                                if (pkgId == cp.CompliancePackageID)
                                {
                                    adjustedAmount += cp.GrandTotal.IsNull() ? AppConsts.NONE : Convert.ToDecimal(cp.GrandTotal);
                                    childOrderIds.Add(cp.OrderId);
                                }
                            }
                        }
                        else
                            mainOrderPaymentDetailEntry = true;
                    }
                }
                else
                {
                    mainOrderPaymentDetailEntry = true;  //UAT-3268
                }

                #endregion
                // Store Invoice Number and Payment Mode
                OrderPaymentDetail paymentDetails = null;
                Int32 firstExtraOrderID = 0;
                if (mainOrderPaymentDetailEntry)
                {
                    _invoiceNumber = GenerateInvoiceNumber(applicantOrder.OrderID, applicantOrderDataContract.TenantId, false, childOrderIds);
                    paymentDetails = AddOnlinePaymentTransaction(applicantOrder, _creationDateTime, _invoiceNumber,
                                               poId.TotalAmount, poId.PaymentModeId, _orderStatusId, applicantOrder.CreatedByID, adjustedAmount);

                    int cmpPkgId = 0;
                    if (compliancePackages.IsNotNull() && compliancePackages.Count > AppConsts.NONE)
                    {
                        var compliancePackage = compliancePackages.Find(cp => cp.OrderId.Equals(applicantOrder.OrderID));
                        if (compliancePackage.IsNotNull() && compliancePackage.CompliancePackageID > AppConsts.NONE)
                            cmpPkgId = compliancePackage.CompliancePackageID;
                    }

                    AddOrderPaymentPackageDetail(poId, _lstBkgOrderPkg, paymentDetails, _bkgPkgTypeId, _compliancePkgTypeId, applicantOrder.CreatedByID, _creationDateTime, cmpPkgId);
                }
                else if (childOrderIds.Count > 0)
                {
                    firstExtraOrderID = childOrderIds[0];
                    childOrderIds.RemoveAt(0);

                    _invoiceNumber = GenerateInvoiceNumber(firstExtraOrderID, applicantOrderDataContract.TenantId, false, childOrderIds);

                }
                //UAT 4537 Allow the CC payment method packages that don’t require approval to go through, even while other packages within the same order are still pending approval 
                if (poId.IsApprovalRequiredPaymentGrouping && applicantOrderDataContract.lstGroupedData.Any(x => x.PaymentModeCode == PaymentOptions.Credit_Card.GetStringValue() && x.IsApprovalRequiredPaymentGrouping == false) && poId.PaymentModeCode == PaymentOptions.Credit_Card.GetStringValue())
                    _dicInvoiceNumbers.Add(PaymentOptions.Credit_Card_With_Approval_Required.GetStringValue(), _invoiceNumber);
                else
                    _dicInvoiceNumbers.Add(poId.PaymentModeCode, _invoiceNumber);

                #region UAT-1185 generate order payment details entries
                if (compliancePackages.IsNotNull() && compliancePackages.Count > AppConsts.NONE && applicantOrder.OrderGroupOrderNavProp.IsNotNull() && applicantOrder.OrderGroupOrderNavProp.Count > AppConsts.NONE)
                {
                    foreach (var pkg in poId.lstPackages)
                    {
                        if (!pkg.Value)
                        {
                            var pkgId = Convert.ToInt32(pkg.Key.Split('_')[0]);

                            OrderCartCompliancePackage cp = compliancePackages.Find(p => p.CompliancePackageID.Equals(pkgId));
                            if (cp.IsNotNull())
                            {
                                Order extraOrder = applicantOrder.OrderGroupOrderNavProp.FirstOrDefault(eo => eo.OrderID.Equals(cp.OrderId));
                                if (extraOrder.IsNotNull())
                                {
                                    if (paymentDetails.IsNull())
                                    {
                                        decimal cpAdjustedAmount = adjustedAmount - (cp.GrandTotal.IsNull() ? AppConsts.NONE : Convert.ToDecimal(cp.GrandTotal));
                                        paymentDetails = AddOnlinePaymentTransaction(extraOrder, _creationDateTime, _invoiceNumber,
                                            poId.TotalAmount, poId.PaymentModeId, _orderStatusId, applicantOrder.CreatedByID, cpAdjustedAmount);

                                        AddOrderPaymentPackageDetail(poId, null, paymentDetails, _bkgPkgTypeId, _compliancePkgTypeId, applicantOrder.CreatedByID, _creationDateTime, cp.CompliancePackageID);
                                    }
                                    else
                                    {
                                        OrderPaymentDetail opd = AddOrderPaymentDetail(extraOrder, paymentDetails.OnlinePaymentTransaction, _creationDateTime, (cp.GrandTotal.IsNull() ? AppConsts.NONE : Convert.ToDecimal(cp.GrandTotal)), poId.PaymentModeId, _orderStatusId, applicantOrder.CreatedByID);
                                        AddOrderPaymentPackageDetail(poId, null, opd, _bkgPkgTypeId, _compliancePkgTypeId, applicantOrder.CreatedByID, _creationDateTime, cp.CompliancePackageID);
                                    }
                                }
                            }
                        }
                    }
                }
                _dbContext.SaveChanges();
                #endregion

            }

            orderId = applicantOrder.OrderID;
            return _dicInvoiceNumbers;
        }

        public List<LookupContract> FetchFingerprintOrderKeyData(List<BackgroundOrderData> lstBkgOrderData, List<string> attributesToFetch)
        {
            List<LookupContract> lstItems = _dbContext.BkgAttributeGroupMappings
                                    .Where(bgm => attributesToFetch
                                    .Any(att => att == bgm.BkgSvcAttribute.BSA_Name))
                                    .Select(bgm => new LookupContract
                                    {
                                        ID = bgm.BAGM_ID,
                                        Name = bgm.BkgSvcAttribute.BSA_Name,

                                    })
                                        .ToList();

            lstItems.ForEach(lst =>
            {
                lst.Code = lstBkgOrderData
               .SelectMany(ap => ap.CustomFormData)
               .Where(k => k.Key == lst.ID)
               .Select(k => k.Value)
               .FirstOrDefault();
            });
            return lstItems;
        }

        private void AddOrderPaymentPackageDetail(PkgPaymentGrouping poId, List<BkgOrderPackage> _lstBkgOrderPkg, OrderPaymentDetail paymentDetails, int _bkgPkgTypeId, int _compliancePkgTypeId, int createdByID, DateTime _creationDateTime, int cmpPkgId)
        {
            foreach (var pkg in poId.lstPackages)
            {
                var pkgId = Convert.ToInt32(pkg.Key.Split('_')[0]);
                var _bopId = 0;
                Int32 bkgAdditionalOrderPackageID = _dbContext.lkpOrderPackageTypes.Where(cond => !cond.OPT_IsDeleted && cond.OPT_Code == "AAAG").Select(sel => sel.OPT_ID).FirstOrDefault(); //UAT-3268
                if (pkg.Value)
                {
                    if (_lstBkgOrderPkg.IsNotNull() && _lstBkgOrderPkg.Count > AppConsts.NONE)
                        _bopId = _lstBkgOrderPkg.Where(bop => bop.BkgPackageHierarchyMapping.BPHM_BackgroundPackageID == pkgId
                                           && bop.BOP_IsDeleted == false).FirstOrDefault().BOP_ID;
                    else
                        continue;
                }
                else if (!pkgId.Equals(cmpPkgId) && cmpPkgId != AppConsts.NONE)
                    continue;
                OrderPkgPaymentDetail pkgPaymentDetails = new OrderPkgPaymentDetail
                {
                    OrderPaymentDetail = paymentDetails,
                    OPPD_BkgOrderPackageID = pkg.Value ? _bopId : (int?)null,
                    //OPPD_OrderPackageTypeID = pkg.Value ? _bkgPkgTypeId : _compliancePkgTypeId, // Changed as per UAT-3268
                    OPPD_OrderPackageTypeID = pkg.Value ? (pkg.Key.Contains("Additional") ? bkgAdditionalOrderPackageID : _bkgPkgTypeId) : _compliancePkgTypeId,
                    OPPD_IsDeleted = false,
                    OPPD_CreatedBy = createdByID,
                    OPPD_CreatedOn = _creationDateTime
                };
                paymentDetails.OrderPkgPaymentDetails.Add(pkgPaymentDetails);

            }

        }

        /// <summary>
        /// Attaches the OnlinePaymentTransaction instance for the current Order,
        /// which further attaches the OrderPaymentDetails and OrderPkgPaymentDetails
        /// </summary>
        /// <param name="applicantOrder"></param>
        /// <param name="creationDateTime"></param>
        /// <param name="invoiceNumber"></param>
        /// <param name="totalAmount"></param>
        /// <param name="paymentModeId"></param>
        /// <param name="orderStatusId"></param>
        /// <returns></returns>
        public OrderPaymentDetail AddOnlinePaymentTransaction(Order applicantOrder, DateTime creationDateTime, String invoiceNumber,
                                                 Decimal totalAmount, Int32 paymentModeId, Int32 orderStatusId, Int32 currentUserId, decimal adjustedAmount = 0)
        {
            OnlinePaymentTransaction paymentTransaction = new OnlinePaymentTransaction();
            paymentTransaction.Amount = totalAmount;
            //paymentTransaction.CreatedByID = applicantOrder.CreatedByID;
            paymentTransaction.CreatedByID = currentUserId;
            paymentTransaction.CreatedOn = creationDateTime;
            paymentTransaction.IsDeleted = false;
            paymentTransaction.Invoice_num = invoiceNumber;
            _dbContext.OnlinePaymentTransactions.AddObject(paymentTransaction);

            return AddOrderPaymentDetail(applicantOrder, paymentTransaction, creationDateTime, totalAmount - adjustedAmount, paymentModeId, orderStatusId, currentUserId);
        }


        /// <summary>
        /// Attaches the OrderPaymentDetail instance for the Normal Order Flow Order
        /// </summary>
        /// <param name="applicantOrder"></param>
        /// <param name="paymentTransaction"></param>
        /// <param name="creationDateTime"></param>
        private OrderPaymentDetail AddOrderPaymentDetail(Order applicantOrder, OnlinePaymentTransaction paymentTransaction,
                                           DateTime creationDateTime, Decimal totalAmount, Int32 paymentModeId, Int32 orderStatusId, Int32 currentUserId)
        {
            OrderPaymentDetail paymentDetails = new OrderPaymentDetail();
            paymentDetails.OPD_OrderID = applicantOrder.OrderID;
            paymentDetails.OnlinePaymentTransaction = paymentTransaction;
            paymentDetails.OPD_IsDeleted = false;
            paymentDetails.OPD_CreatedOn = creationDateTime;
            //paymentDetails.OPD_CreatedByID = applicantOrder.CreatedByID;
            paymentDetails.OPD_CreatedByID = currentUserId;
            paymentDetails.OPD_PaymentOptionID = paymentModeId;
            paymentDetails.OPD_Amount = totalAmount;
            paymentDetails.OPD_OrderStatusID = orderStatusId;

            _dbContext.OrderPaymentDetails.AddObject(paymentDetails);
            return paymentDetails;
        }


        /// <summary>
        /// Gets the OrderStatusId by Payment Type Code
        /// </summary>
        /// <param name="paymentModeCode"></param>
        /// <returns></returns>
        private Int32 GetOrderStatusId(String paymentModeCode)
        {
            var _statusCode = String.Empty;
            if (paymentModeCode.ToLower() == PaymentOptions.Credit_Card.GetStringValue().ToLower() || paymentModeCode.ToLower() == PaymentOptions.Paypal.GetStringValue().ToLower())
                _statusCode = ApplicantOrderStatus.Send_For_Online_Payment.GetStringValue();
            else
                _statusCode = ApplicantOrderStatus.Pending_Payment_Approval.GetStringValue();

            return GetOrderStatusCode(_statusCode);
        }

        /// <summary>
        /// Add attribute related data for those, having NO InstanceId or -1
        /// </summary>
        /// <param name="_bkgOrdPkgSvcLineItem"></param>
        /// <param name="_bkgSvcAttDataGroup"></param>
        private static void AddAttributes(BkgOrderPackageSvcLineItem _bkgOrdPkgSvcLineItem, BkgSvcAttributeDataGroup_PricingData _bkgSvcAttDataGroup)
        {
            if (!_bkgSvcAttDataGroup.lstAttributeData.IsNullOrEmpty())
                foreach (var attrData in _bkgSvcAttDataGroup.lstAttributeData)
                {
                    _bkgOrdPkgSvcLineItem.BkgOrderLineItemDataMappings.Add(new BkgOrderLineItemDataMapping
                    {
                        BkgOrderPackageSvcLineItem = _bkgOrdPkgSvcLineItem,
                        OLIDM_BkgSvcAttributeGroupID = _bkgSvcAttDataGroup.AttributeGroupId,
                        //OLIDM_AttributeGroupMappingID = attrData.AttributeGroupMappingID,
                        //OLIDM_AttributeValue = attrData.AttributeValue
                    });
                }
        }

        /// <summary>
        /// Gets the package settings of :
        /// 1. NeedsFirstReview - Will be False if no package is having True or any value set for it or supplementalTypeId is Null
        /// 2. PackageSupplementalType
        /// </summary>
        /// <param name="_lstPHMIds"></param>
        /// <param name="supplementalTypeId"></param>
        /// <returns></returns>
        private Boolean GetPackageSettings(List<Int32> _lstPHMIds, out Int16? supplementalTypeId)
        {
            supplementalTypeId = null;
            Boolean _needsFirstReview = false;
            List<BkgPackageHierarchyMapping> _lstHierarchyMapping = _dbContext.BkgPackageHierarchyMappings.Include("lkpPackageSupplementalType")
                                                                    .Where(bphm => _lstPHMIds.Contains(bphm.BPHM_ID)
                                                                     && !bphm.BPHM_IsDeleted && bphm.BPHM_IsActive).ToList();

            _needsFirstReview = _lstHierarchyMapping.Any(bphm => bphm.BPHM_NeedFirstReview == true
                                                        && !bphm.BPHM_NeedFirstReview.IsNullOrEmpty()
                                                        && bphm.BPHM_IsActive && !bphm.BPHM_IsDeleted);

            foreach (var hiearchyMapping in _lstHierarchyMapping)
            {
                if (!hiearchyMapping.BPHM_PkgSupplementalTypeID.IsNullOrEmpty())
                {
                    if (hiearchyMapping.lkpPackageSupplementalType.PST_Code == BkgPackageSupplementalType.ANY.GetStringValue())
                    {
                        supplementalTypeId = hiearchyMapping.BPHM_PkgSupplementalTypeID;
                        break;
                    }
                    else if (hiearchyMapping.lkpPackageSupplementalType.PST_Code == BkgPackageSupplementalType.FLAGGED.GetStringValue())
                    {
                        supplementalTypeId = hiearchyMapping.BPHM_PkgSupplementalTypeID;
                        break;
                    }
                    else if (hiearchyMapping.lkpPackageSupplementalType.PST_Code == BkgPackageSupplementalType.NONE.GetStringValue())
                    {
                        supplementalTypeId = hiearchyMapping.BPHM_PkgSupplementalTypeID;
                        break;
                    }
                }
            }
            if (supplementalTypeId.IsNullOrEmpty())
                _needsFirstReview = false;

            return _needsFirstReview;
        }

        /// <summary>
        /// Get the instanceId, based on the SvcAttributeGroup
        /// </summary>
        /// <param name="orderDataContract"></param>
        /// <param name="attributeGrpId"></param>
        /// <param name="uniqueIdentifier"></param>
        /// <returns></returns>
        //private Int32 GetInstanceId(ApplicantOrderDataContract orderDataContract, Int32 attributeGrpId, String uniqueIdentifier)
        private Int32 GetInstanceId(ApplicantOrderDataContract orderDataContract, Int32 attributeGrpId, Int32 sequenceId)
        {
            BkgSvcAttributeGroup _attributeGrp = orderDataContract.lstSvcAttributeGrps.Where(attrGrp => attrGrp.BSAD_ID == attributeGrpId
                                                                        && !attrGrp.BSAD_IsDeleted).FirstOrDefault();

            if (_attributeGrp.IsNullOrEmpty())
                return AppConsts.MINUS_ONE;

            if (_attributeGrp.BSAD_Name == SvcAttributeGroups.PERSONAL_INFORMATION.GetStringValue())
            {
                return orderDataContract.OrganizationUserProfile.OrganizationUserProfileID;
            }
            else if (_attributeGrp.BSAD_Name == SvcAttributeGroups.RESIDENTIAL_HISTORY.GetStringValue())
            {
                return orderDataContract.lstResidentialHistoryProfile.Where(rhp => rhp.RHIP_SequenceOrder == sequenceId).FirstOrDefault().RHIP_ID;
            }
            else if (_attributeGrp.BSAD_Name == SvcAttributeGroups.PERSONAL_ALIAS.GetStringValue())
            {
                return orderDataContract.lstPersonAliasProfile.Where(pap => pap.PAP_SequenceId == sequenceId).FirstOrDefault().PAP_ID;
            }

            //Int32 _instanceId = AppConsts.MINUS_ONE;
            //if (Int32.TryParse(uniqueIdentifier, out _instanceId))
            //    return _instanceId;
            //else
            //return AppConsts.MINUS_ONE;
            return sequenceId;
        }

        public DeptProgramPackageSubscription GetDeptProgramPackageSubscriptionDetail(Int32 programPackageSubscriptionId)
        {
            DeptProgramPackageSubscription programPackageSubscription = _dbContext.DeptProgramPackageSubscriptions.Where(ps => ps.DPPS_ID == programPackageSubscriptionId).FirstOrDefault();
            return programPackageSubscription;
        }

        public Order GetPreviousOrderDetail(Int32? orderID)
        {
            return _dbContext.Orders.Where(cond => cond.OrderID == orderID).FirstOrDefault();
        }

        public void AddMailingAddress(PreviousAddressContract mailingAddress, Guid addressHandleId, Int32 currentUserId, Address addressNew, AddressExt addressExtNew = null)
        {
            addressNew.Address1 = Convert.ToString(mailingAddress.Address1);
            addressNew.Address2 = Convert.ToString(mailingAddress.Address2);
            addressNew.ZipCodeID = Convert.ToInt32(mailingAddress.ZipCodeID);
            addressNew.AddressID = Convert.ToInt32(mailingAddress.MailingAddressId);
            addressNew.AddressHandleID = addressHandleId;

            if (addressExtNew.IsNotNull())
            {
                addressExtNew.AE_AddressID = mailingAddress.MailingAddressId;
                addressExtNew.AE_ID = mailingAddress.MailingExtensionAddressId;
                addressNew.AddressExts.Add(addressExtNew);
            }

            addressNew.CreatedOn = DateTime.Now;
            addressNew.IsActive = true;
            addressNew.CreatedByID = currentUserId;
            _dbContext.Addresses.AddObject(addressNew);
            _dbContext.SaveChanges();
        }

        public void UpdateApplicanDetailsClient(OrganizationUser organizationUser, Dictionary<String, Object> dicAddressData, Int32 addressIdMaster, List<Entity.ResidentialHistory> lstResendentialHistory, List<Entity.PersonAlia> lstPersonAlias, PreviousAddressContract mailingAddress = null)
        {
            DALUtils.LoggerService.GetLogger().Info("Control Transfered to Method 'UpdateApplicanDetailsClient' to copy data for the organisationsation User with Id :" + organizationUser.OrganizationUserID + ".");
            OrganizationUser orgUserToUpdate = _dbContext.OrganizationUsers
                                                .Include("AddressHandle").Include("AddressHandle.Addresses")
                                                .Where(orgUsers => orgUsers.OrganizationUserID == organizationUser.OrganizationUserID).FirstOrDefault();
            if (orgUserToUpdate.IsNotNull())
            {
                DALUtils.LoggerService.GetLogger().Info("Organisation User to be updated is found.");
                orgUserToUpdate.FirstName = organizationUser.FirstName;
                orgUserToUpdate.MiddleName = organizationUser.MiddleName;
                orgUserToUpdate.LastName = organizationUser.LastName;
                orgUserToUpdate.Alias1 = organizationUser.Alias1;
                orgUserToUpdate.Alias2 = organizationUser.Alias2;
                orgUserToUpdate.Alias3 = organizationUser.Alias3;
                orgUserToUpdate.Gender = organizationUser.Gender;
                orgUserToUpdate.DOB = organizationUser.DOB;
                orgUserToUpdate.SSN = organizationUser.SSN;
                orgUserToUpdate.SecondaryPhone = organizationUser.SecondaryPhone;
                orgUserToUpdate.SecondaryEmailAddress = organizationUser.SecondaryEmailAddress.Trim();
                orgUserToUpdate.PrimaryEmailAddress = organizationUser.PrimaryEmailAddress.Trim();
                orgUserToUpdate.PhoneNumber = organizationUser.PhoneNumber;
                orgUserToUpdate.ModifiedByID = organizationUser.ModifiedByID;
                orgUserToUpdate.ModifiedOn = DateTime.Now;
                //UAT-2447
                orgUserToUpdate.IsInternationalPhoneNumber = organizationUser.IsInternationalPhoneNumber;
                orgUserToUpdate.IsInternationalSecondaryPhone = organizationUser.IsInternationalSecondaryPhone;
                //CBI|| CABS
                orgUserToUpdate.UserTypeID = organizationUser.UserTypeID.IsNullOrEmpty() ? (Int32?)null : organizationUser.UserTypeID;

                if (orgUserToUpdate.AddressHandle.IsNotNull() && orgUserToUpdate.AddressHandle.Addresses.IsNotNull())
                {
                    DALUtils.LoggerService.GetLogger().Info("Address Handle row exists for the Organisation User.");
                    Address userAddress = orgUserToUpdate.AddressHandle.Addresses.Where(add => add.AddressHandleID == orgUserToUpdate.AddressHandleID).FirstOrDefault();
                    var curResHisAddress = lstResendentialHistory.FirstOrDefault(cond => cond.RHI_IsCurrentAddress == true && cond.RHI_IsDeleted == false);
                    if (userAddress.IsNotNull() && curResHisAddress.IsNotNull())
                    {
                        DALUtils.LoggerService.GetLogger().Info("Address from the Security DB to be copied :" + curResHisAddress.RHI_AddressId + ".");
                        DALUtils.LoggerService.GetLogger().Info("Address Id Exists for the user in tenant DB :" + userAddress.AddressID + ".");
                        if (userAddress.AddressID != curResHisAddress.RHI_AddressId)
                        {
                            DALUtils.LoggerService.GetLogger().Info("Address Id in Security and Tenant DB are different and needs to be updated.");
                            AddressExt addressExtNew = null;
                            AddressExt mailingadressExtNew = null;
                            Address newmailingaddress = new Address();
                            if (curResHisAddress.Address.ZipCodeID == 0)
                            {
                                DALUtils.LoggerService.GetLogger().Info("Address to be copied is Non US Address.");
                                if (curResHisAddress.Address.AddressExts.FirstOrDefault().IsNotNull())
                                {
                                    DALUtils.LoggerService.GetLogger().Info("Address Extension Row found in the Security DB.");
                                    Entity.AddressExt currentAddressExt = curResHisAddress.Address.AddressExts.FirstOrDefault();
                                    addressExtNew = new AddressExt();
                                    addressExtNew.AE_ID = currentAddressExt.AE_ID;
                                    addressExtNew.AE_CountryID = currentAddressExt.AE_CountryID;
                                    addressExtNew.AE_StateName = currentAddressExt.AE_StateName;
                                    addressExtNew.AE_CityName = currentAddressExt.AE_CityName;
                                    addressExtNew.AE_ZipCode = currentAddressExt.AE_ZipCode;
                                    addressExtNew.AE_County = currentAddressExt.AE_County;//UAT-3910
                                }
                            }

                            if (!mailingAddress.IsNullOrEmpty())
                            {
                                mailingadressExtNew = new AddressExt();
                                mailingadressExtNew.AE_CountryID = mailingAddress.CountryId;
                                mailingadressExtNew.AE_StateName = mailingAddress.StateName;
                                mailingadressExtNew.AE_ZipCode = mailingAddress.Zipcode;
                                mailingadressExtNew.AE_County = mailingAddress.CountyName;
                                mailingadressExtNew.AE_CityName = mailingAddress.CityName;

                            }

                            addressIdMaster = curResHisAddress.RHI_AddressId;
                            Guid addressHandleId = curResHisAddress.Address.AddressHandleID.IsNotNull() ? curResHisAddress.Address.AddressHandleID : Guid.NewGuid();
                            DALUtils.LoggerService.GetLogger().Info("Address ID from Security DB :" + addressIdMaster + ".");
                            DALUtils.LoggerService.GetLogger().Info("Address Handle ID from Security DB :" + addressHandleId + ".");
                            AddAddressHandle(addressHandleId);
                            //AddAddress(dicAddressData, addressHandleId, organizationUser.OrganizationUserID, addressIdMaster, addressExtNew);
                            AddAddress(dicAddressData, addressHandleId, Convert.ToInt32(organizationUser.ModifiedByID), addressIdMaster, addressExtNew);
                            orgUserToUpdate.AddressHandleID = addressHandleId;
                            if (mailingAddress.IsNotNull())
                            {
                                Guid mailingaddressHandleId = mailingAddress.MailingAddressHandleId;
                                AddAddressHandle(mailingaddressHandleId);
                                AddMailingAddress(mailingAddress, mailingaddressHandleId, Convert.ToInt32(organizationUser.ModifiedByID), newmailingaddress, mailingadressExtNew);
                            }
                        }
                    }
                }

                if (lstResendentialHistory.IsNotNull())
                {
                    if (lstResendentialHistory.Count > 0)
                    {
                        var curResHisAddress = lstResendentialHistory.FirstOrDefault(cond => cond.RHI_IsCurrentAddress == true && cond.RHI_IsDeleted == false);
                        if (curResHisAddress.IsNotNull())
                        {
                            ResidentialHistory currentResedentialHistory = orgUserToUpdate.ResidentialHistories.FirstOrDefault(x => x.RHI_IsDeleted == false && x.RHI_IsCurrentAddress == true);
                            if (currentResedentialHistory.IsNotNull())
                            {
                                //if (orgUserToUpdate.AddressHandle.IsNotNull())
                                //{
                                //    currentResedentialHistory.Address = orgUserToUpdate.AddressHandle.Addresses.FirstOrDefault();
                                //}
                                //else
                                //{
                                //    currentResedentialHistory.RHI_AddressId = addressIdMaster;
                                //}
                                currentResedentialHistory.RHI_AddressId = curResHisAddress.RHI_AddressId;
                                currentResedentialHistory.RHI_ResidenceStartDate = curResHisAddress.RHI_ResidenceStartDate;
                                //currentResedentialHistory.RHI_ModifiedByID = orgUserToUpdate.OrganizationUserID;
                                currentResedentialHistory.RHI_ModifiedByID = orgUserToUpdate.ModifiedByID;
                                currentResedentialHistory.RHI_ModifiedOn = DateTime.Now;
                                currentResedentialHistory.RHI_SequenceOrder = curResHisAddress.RHI_SequenceOrder;
                                currentResedentialHistory.RHI_MotherMaidenName = curResHisAddress.RHI_MotherMaidenName;
                                currentResedentialHistory.RHI_IdentificationNumber = curResHisAddress.RHI_IdentificationNumber;
                                currentResedentialHistory.RHI_DriverLicenseNumber = curResHisAddress.RHI_DriverLicenseNumber;
                            }
                            else
                            {
                                currentResedentialHistory = new ResidentialHistory();
                                currentResedentialHistory.RHI_ID = curResHisAddress.RHI_ID;
                                currentResedentialHistory.RHI_AddressId = curResHisAddress.RHI_AddressId;
                                currentResedentialHistory.RHI_IsCurrentAddress = true;
                                currentResedentialHistory.RHI_IsPrimaryResidence = false;
                                currentResedentialHistory.RHI_ResidenceStartDate = curResHisAddress.RHI_ResidenceStartDate;
                                currentResedentialHistory.RHI_IsDeleted = false;
                                //currentResedentialHistory.RHI_CreatedByID = orgUserToUpdate.OrganizationUserID;
                                currentResedentialHistory.RHI_CreatedByID = Convert.ToInt32(orgUserToUpdate.ModifiedByID);
                                currentResedentialHistory.RHI_CreatedOn = DateTime.Now;
                                currentResedentialHistory.RHI_OrganizationUserID = orgUserToUpdate.OrganizationUserID;
                                currentResedentialHistory.RHI_SequenceOrder = curResHisAddress.RHI_SequenceOrder;
                                currentResedentialHistory.RHI_MotherMaidenName = curResHisAddress.RHI_MotherMaidenName;
                                currentResedentialHistory.RHI_IdentificationNumber = curResHisAddress.RHI_IdentificationNumber;
                                currentResedentialHistory.RHI_DriverLicenseNumber = curResHisAddress.RHI_DriverLicenseNumber;
                                //if (orgUserToUpdate.AddressHandle.IsNotNull())
                                //{
                                //    currentResedentialHistory.Address = orgUserToUpdate.AddressHandle.Addresses.FirstOrDefault();
                                //}
                                //else
                                //{
                                //    currentResedentialHistory.RHI_AddressId = addressIdMaster;
                                //}
                                _dbContext.ResidentialHistories.AddObject(currentResedentialHistory);
                            }
                            lstResendentialHistory.Remove(curResHisAddress);
                        }
                    }

                    if (lstResendentialHistory.Count > 0)
                    {
                        // List of Resedential Histories associated with the organisaion User ID.
                        List<ResidentialHistory> lstCurrentResidentialHistory = orgUserToUpdate.ResidentialHistories.Where(x => x.RHI_IsDeleted == false).ToList();

                        foreach (var prevAddress in lstResendentialHistory)
                        {
                            ResidentialHistory newResHisObj = lstCurrentResidentialHistory.FirstOrDefault(x => x.RHI_ID == prevAddress.RHI_ID);
                            if (newResHisObj.IsNotNull())
                            {
                                if (newResHisObj.RHI_AddressId != prevAddress.RHI_AddressId)
                                {
                                    AddAddressHandle(prevAddress.Address.AddressHandleID);
                                    //AddNewPreviousAddress(prevAddress, organizationUser.OrganizationUserID);
                                    AddNewPreviousAddress(prevAddress, Convert.ToInt32(organizationUser.ModifiedByID));
                                    newResHisObj.RHI_AddressId = prevAddress.RHI_AddressId;
                                }
                                newResHisObj.RHI_ResidenceStartDate = prevAddress.RHI_ResidenceStartDate;
                                newResHisObj.RHI_ResidenceEndDate = prevAddress.RHI_ResidenceEndDate;
                                newResHisObj.RHI_IsCurrentAddress = prevAddress.RHI_IsCurrentAddress;
                                newResHisObj.RHI_IsDeleted = prevAddress.RHI_IsDeleted;
                                //newResHisObj.RHI_ModifiedByID = organizationUser.OrganizationUserID;
                                newResHisObj.RHI_ModifiedByID = organizationUser.ModifiedByID;
                                newResHisObj.RHI_ModifiedOn = DateTime.Now;
                                newResHisObj.RHI_SequenceOrder = prevAddress.RHI_SequenceOrder;
                                newResHisObj.RHI_MotherMaidenName = prevAddress.RHI_MotherMaidenName;
                                newResHisObj.RHI_IdentificationNumber = prevAddress.RHI_IdentificationNumber;
                                newResHisObj.RHI_DriverLicenseNumber = prevAddress.RHI_DriverLicenseNumber;
                            }
                            else
                            {
                                AddAddressHandle(prevAddress.Address.AddressHandleID);
                                //AddNewResidentialHistory(prevAddress, organizationUser.OrganizationUserID);
                                AddNewResidentialHistory(prevAddress, organizationUser.OrganizationUserID, Convert.ToInt32(organizationUser.ModifiedByID));
                            }
                        }
                    }
                }
                if (lstPersonAlias.IsNotNull())
                {
                    foreach (Entity.PersonAlia tempPersonAlias in lstPersonAlias)
                    {
                        PersonAlia personAlias = orgUserToUpdate.PersonAlias.FirstOrDefault(x => x.PA_IsDeleted == false && x.PA_ID == tempPersonAlias.PA_ID);
                        if (personAlias.IsNotNull())
                        {
                            personAlias.PA_FirstName = tempPersonAlias.PA_FirstName;
                            personAlias.PA_LastName = tempPersonAlias.PA_LastName;
                            //UAT-2212:Addition of Alias Middle name that is required and has "no middle name"/"-----" functionality
                            personAlias.PA_MiddleName = tempPersonAlias.PA_MiddleName;
                            personAlias.PA_IsDeleted = tempPersonAlias.PA_IsDeleted;
                            //personAlias.PA_ModifiedBy = orgUserToUpdate.OrganizationUserID;
                            personAlias.PA_ModifiedBy = orgUserToUpdate.ModifiedByID;
                            personAlias.PA_ModifiedOn = DateTime.Now;

                            //CBI|| CABS 
                            PersonAliasExtension personAliasExtension = _dbContext.PersonAliasExtensions.Where(con => !con.PAE_IsDeleted && con.PAE_PersonAliasID == personAlias.PA_ID).FirstOrDefault();
                            if (!tempPersonAlias.PersonAliasExtensions.IsNullOrEmpty())
                            {
                                if (!personAliasExtension.IsNullOrEmpty())
                                {
                                    personAliasExtension.PAE_Suffix = tempPersonAlias.PersonAliasExtensions.FirstOrDefault().PAE_Suffix;
                                    personAliasExtension.PAE_ModifiedBy = Convert.ToInt32(organizationUser.ModifiedByID);
                                    personAliasExtension.PAE_ModifiedOn = DateTime.Now;
                                }

                                else
                                {
                                    personAliasExtension = new PersonAliasExtension();
                                    personAliasExtension.PAE_Suffix = tempPersonAlias.PersonAliasExtensions.FirstOrDefault().PAE_Suffix;
                                    personAliasExtension.PAE_CreatedBy = Convert.ToInt32(organizationUser.ModifiedByID);
                                    personAliasExtension.PAE_CreatedOn = DateTime.Now;

                                    personAlias.PersonAliasExtensions.Add(personAliasExtension);
                                }

                            }
                            else if (!personAliasExtension.IsNullOrEmpty())
                            {
                                personAliasExtension.PAE_ModifiedBy = Convert.ToInt32(organizationUser.ModifiedByID);
                                personAliasExtension.PAE_ModifiedOn = DateTime.Now;
                                personAliasExtension.PAE_IsDeleted = true;
                            }
                        }
                        else
                        {
                            personAlias = new PersonAlia();
                            personAlias.PA_ID = tempPersonAlias.PA_ID;
                            personAlias.PA_AliasIdentifier = tempPersonAlias.PA_AliasIdentifier;
                            personAlias.PA_OrganizationUserID = tempPersonAlias.PA_OrganizationUserID;
                            personAlias.PA_FirstName = tempPersonAlias.PA_FirstName;
                            personAlias.PA_LastName = tempPersonAlias.PA_LastName;
                            personAlias.PA_MiddleName = tempPersonAlias.PA_MiddleName;
                            personAlias.PA_IsDeleted = tempPersonAlias.PA_IsDeleted;
                            //personAlias.PA_CreatedBy = organizationUser.OrganizationUserID;
                            personAlias.PA_CreatedBy = Convert.ToInt32(organizationUser.ModifiedByID);
                            personAlias.PA_CreatedOn = DateTime.Now;
                            orgUserToUpdate.PersonAlias.Add(personAlias);

                            //CBI|| CABS
                            if (!tempPersonAlias.PersonAliasExtensions.IsNullOrEmpty())
                            {
                                PersonAliasExtension personAliasExtension = new PersonAliasExtension();
                                personAliasExtension.PAE_Suffix = tempPersonAlias.PersonAliasExtensions.FirstOrDefault().PAE_Suffix;
                                personAliasExtension.PAE_CreatedBy = Convert.ToInt32(organizationUser.ModifiedByID);
                                personAliasExtension.PAE_CreatedOn = DateTime.Now;

                                personAlias.PersonAliasExtensions.Add(personAliasExtension);
                            }
                        }
                    }
                }
                _dbContext.SaveChanges();
            }
        }

        public void UpdateMailingAddress(PreviousAddressContract mailingAddress, Boolean isLocationServiceTenant, Int32 orgUserID)
        {
            AddressExt mailingadressExtNew = null;
            Address newmailingaddress = new Address();
            if (!mailingAddress.IsNullOrEmpty())
            {
                mailingadressExtNew = new AddressExt();
                mailingadressExtNew.AE_CountryID = mailingAddress.CountryId;
                mailingadressExtNew.AE_StateName = mailingAddress.StateName;
                mailingadressExtNew.AE_ZipCode = mailingAddress.Zipcode;
                mailingadressExtNew.AE_County = mailingAddress.CountyName;
                mailingadressExtNew.AE_CityName = mailingAddress.CityName;

            }

            AddAddressHandle(mailingAddress.MailingAddressHandleId);
            AddMailingAddress(mailingAddress, mailingAddress.MailingAddressHandleId, orgUserID, newmailingaddress, mailingadressExtNew);
        }

        public void AddNewResidentialHistory(Entity.ResidentialHistory newResHisObj, Int32 currentUserId, Int32 orgUserId)
        {
            //AddNewPreviousAddress(newResHisObj, currentUserId);
            AddNewPreviousAddress(newResHisObj, orgUserId);

            Entity.ClientEntity.ResidentialHistory objResHistory = new ResidentialHistory();
            objResHistory.RHI_ID = newResHisObj.RHI_ID;
            objResHistory.RHI_IsCurrentAddress = false;
            objResHistory.RHI_IsPrimaryResidence = newResHisObj.RHI_IsPrimaryResidence;
            objResHistory.RHI_ResidenceStartDate = newResHisObj.RHI_ResidenceStartDate;
            objResHistory.RHI_ResidenceEndDate = newResHisObj.RHI_ResidenceEndDate;
            objResHistory.RHI_IsDeleted = false;
            //objResHistory.RHI_CreatedByID = currentUserId;
            objResHistory.RHI_CreatedByID = orgUserId;
            objResHistory.RHI_CreatedOn = DateTime.Now;
            objResHistory.RHI_OrganizationUserID = currentUserId;
            objResHistory.RHI_AddressId = newResHisObj.RHI_AddressId;
            objResHistory.RHI_SequenceOrder = newResHisObj.RHI_SequenceOrder;
            objResHistory.RHI_MotherMaidenName = newResHisObj.RHI_MotherMaidenName;
            objResHistory.RHI_IdentificationNumber = newResHisObj.RHI_IdentificationNumber;
            objResHistory.RHI_DriverLicenseNumber = newResHisObj.RHI_DriverLicenseNumber;
            _dbContext.ResidentialHistories.AddObject(objResHistory);
        }

        private void AddNewPreviousAddress(Entity.ResidentialHistory newResHisObj, Int32 currentUserId)
        {
            Address addressNew = new Address();
            addressNew.AddressID = newResHisObj.Address.AddressID;
            addressNew.Address1 = newResHisObj.Address.Address1;
            addressNew.Address2 = newResHisObj.Address.Address2;
            if (newResHisObj.Address.ZipCodeID > 0)
                addressNew.ZipCodeID = newResHisObj.Address.ZipCodeID;
            else
            {
                if (newResHisObj.Address.AddressExts.IsNotNull() && newResHisObj.Address.AddressExts.Count > 0)
                {
                    Entity.AddressExt MasterAddressExt = newResHisObj.Address.AddressExts.FirstOrDefault();
                    AddressExt addressExtNew = new AddressExt();
                    addressExtNew.AE_ID = MasterAddressExt.AE_ID;
                    addressExtNew.AE_CountryID = MasterAddressExt.AE_CountryID;
                    addressExtNew.AE_StateName = MasterAddressExt.AE_StateName;
                    addressExtNew.AE_CityName = MasterAddressExt.AE_CityName;
                    addressExtNew.AE_ZipCode = MasterAddressExt.AE_ZipCode;
                    addressNew.AddressExts.Add(addressExtNew);
                }
            }
            addressNew.AddressHandleID = newResHisObj.Address.AddressHandleID;
            addressNew.CreatedOn = DateTime.Now;
            addressNew.CreatedByID = currentUserId;
            _dbContext.Addresses.AddObject(addressNew);
        }

        private void AddAddress(Dictionary<String, Object> dicAddressData, Guid addressHandleId, Int32 currentUserId, Int32 addressIdMaster, AddressExt addressExtn)
        {
            Address addressNew = new Address
            {
                AddressID = addressIdMaster,
                Address1 = Convert.ToString(dicAddressData.GetValue("address1")),
                Address2 = Convert.ToString(dicAddressData.GetValue("address2")),
                ZipCodeID = Convert.ToInt32(dicAddressData.GetValue("zipcodeid")),
                AddressHandleID = addressHandleId,
                CreatedOn = DateTime.Now,
                CreatedByID = currentUserId
            };
            if (addressExtn.IsNotNull())
                addressNew.AddressExts.Add(addressExtn);
            _dbContext.Addresses.AddObject(addressNew);
        }

        private void AddAddressHandle(Guid addressHandleId)
        {
            AddressHandle addressHandleNew = new AddressHandle();
            addressHandleNew.AddressHandleID = addressHandleId;
            _dbContext.AddressHandles.AddObject(addressHandleNew);
        }


        public OnlinePaymentTransaction GetPaymentTransactionDetails(String invoiceNumber, Boolean requiredOrder = false)
        {
            if (requiredOrder == false)
            {
                return _dbContext.OnlinePaymentTransactions.Include("OrderPaymentDetails").
                    Where(pTrans => !pTrans.IsDeleted && pTrans.Invoice_num.Trim().ToLower() == invoiceNumber.Trim().ToLower())
                    .OrderByDescending(createdOn => createdOn.CreatedOn).FirstOrDefault();
            }
            else
            {
                return _dbContext.OnlinePaymentTransactions.Include("OrderPaymentDetails").Include("OrderPaymentDetails.Order").
                    Include("OrderPaymentDetails.Order.lkpOrderStatu").Include("OrderPaymentDetails.Order.OrganizationUserProfile").Where(pTrans => !pTrans.IsDeleted &&
                        pTrans.Invoice_num.Trim().ToLower() == invoiceNumber.Trim().ToLower()).OrderByDescending(createdOn => createdOn.CreatedOn).FirstOrDefault();
            }
        }

        public OnlinePaymentTransaction UpdateOnlineTransactionResults(String invoiceNumber, NameValueCollection transactionDetails, Int32 modifiedUserID)
        {
            OnlinePaymentTransaction onlinePaymentTransactionToUpdate = GetPaymentTransactionDetails(invoiceNumber, true);

            if (onlinePaymentTransactionToUpdate.IsNotNull())
            {
                DateTime currentDateTime = DateTime.Now;
                UpdateOnlinePaymentTransaction(onlinePaymentTransactionToUpdate, transactionDetails, currentDateTime, modifiedUserID);
                AddTransactionDetails(transactionDetails, modifiedUserID, currentDateTime, onlinePaymentTransactionToUpdate.OnlinePaymentTransactionID);

                _dbContext.SaveChanges();
            }
            return onlinePaymentTransactionToUpdate;
        }

        public Boolean SaveIPNResponse(String invoiceNumber, String transactionID, String ipnTransactionStatus, String ipnPostData)
        {
            if (_dbContext.PaypalIPNNotifications.Where(x => x.PIN_InvoiceNumber == invoiceNumber && x.PIN_TransactionID == transactionID).Count() >= 4)
            {
                return true;
            }
            else
            {
                PaypalIPNNotification paypalIPNNotification = new PaypalIPNNotification()
                {
                    PIN_InvoiceNumber = invoiceNumber,
                    PIN_TransactionID = transactionID,
                    PIN_Status = ipnTransactionStatus,
                    PIN_PostData = ipnPostData
                };
                _dbContext.PaypalIPNNotifications.AddObject(paypalIPNNotification);
                _dbContext.SaveChanges();
            }
            return false;
        }


        private void UpdateOnlinePaymentTransaction(OnlinePaymentTransaction onlinePaymentTransactionToUpdate, NameValueCollection transactionDetailsCollection,
            DateTime currentDateTime, Int32 modifiedUserID)
        {
            onlinePaymentTransactionToUpdate.ModifiedByID = modifiedUserID;
            onlinePaymentTransactionToUpdate.ModifiedOn = currentDateTime;
            //Saves x_trans_id in transaction id when payment is done using Authorize.Net.
            if (transactionDetailsCollection["x_trans_id"].IsNotNull())
            {
                onlinePaymentTransactionToUpdate.Trans_id = !transactionDetailsCollection["x_trans_id"].IsNullOrEmpty() ?
                    Convert.ToString(transactionDetailsCollection["x_trans_id"]) : String.Empty;
            }

            //Saves txn_id in transaction id when payment is done using Paypal(in dev environment).
            if (transactionDetailsCollection["txn_id"].IsNotNull())
            {
                onlinePaymentTransactionToUpdate.Trans_id = !transactionDetailsCollection["txn_id"].IsNullOrEmpty() ?
                    Convert.ToString(transactionDetailsCollection["txn_id"]) : String.Empty;
            }

            //Saves tx in transaction id when payment is done using Paypal(in QA environment).
            if (transactionDetailsCollection["tx"].IsNotNull())
            {
                onlinePaymentTransactionToUpdate.Trans_id = !transactionDetailsCollection["tx"].IsNullOrEmpty() ?
                    Convert.ToString(transactionDetailsCollection["tx"]) : String.Empty;
            }

            onlinePaymentTransactionToUpdate.Response_code = !transactionDetailsCollection["x_response_code"].IsNullOrEmpty() ?
                Convert.ToInt32(transactionDetailsCollection["x_response_code"]) : 0;
            onlinePaymentTransactionToUpdate.Response_reason_code = !transactionDetailsCollection["x_response_reason_code"].IsNullOrEmpty() ?
                Convert.ToInt32(transactionDetailsCollection["x_response_reason_code"]) : 0;
            onlinePaymentTransactionToUpdate.Response_reason_text = !transactionDetailsCollection["x_response_reason_text"].IsNullOrEmpty() ?
                Convert.ToString(transactionDetailsCollection["x_response_reason_text"]) : String.Empty;
            onlinePaymentTransactionToUpdate.Avs_code = !transactionDetailsCollection["x_avs_code"].IsNullOrEmpty() ?
                Convert.ToString(transactionDetailsCollection["x_avs_code"]) : String.Empty;
            onlinePaymentTransactionToUpdate.Auth_code = !transactionDetailsCollection["x_auth_code"].IsNullOrEmpty() ?
                Convert.ToString(transactionDetailsCollection["x_auth_code"]) : String.Empty;

            onlinePaymentTransactionToUpdate.Payer_Id = !transactionDetailsCollection["payer_id"].IsNullOrEmpty() ?
                Convert.ToString(transactionDetailsCollection["payer_id"]) : String.Empty;
            onlinePaymentTransactionToUpdate.Payment_Date = !transactionDetailsCollection["payment_date"].IsNullOrEmpty() ?
                Convert.ToString(transactionDetailsCollection["payment_date"]) : String.Empty;
            onlinePaymentTransactionToUpdate.Payment_Status = !transactionDetailsCollection["payment_status"].IsNullOrEmpty() ?
                Convert.ToString(transactionDetailsCollection["payment_status"]) : String.Empty;
            onlinePaymentTransactionToUpdate.PaypalPDTStatus = !transactionDetailsCollection["PaypalPDTStatus"].IsNullOrEmpty() ?
                Convert.ToString(transactionDetailsCollection["PaypalPDTStatus"]) : String.Empty;
            onlinePaymentTransactionToUpdate.CCNumber = !transactionDetailsCollection["x_account_number"].IsNullOrEmpty() ?
                Convert.ToString(transactionDetailsCollection["x_account_number"]) : String.Empty;
            onlinePaymentTransactionToUpdate.CCType = !transactionDetailsCollection["x_card_type"].IsNullOrEmpty() ?
                Convert.ToString(transactionDetailsCollection["x_card_type"]) : String.Empty;
            onlinePaymentTransactionToUpdate.Description = !transactionDetailsCollection["Description"].IsNullOrEmpty() ?
    Convert.ToString(transactionDetailsCollection["Description"]) : String.Empty;
        }

        private void AddTransactionDetails(NameValueCollection transactionDetailsCollection, Int32 currentUserId, DateTime currentDateTime, Int32 onlineTransactionId)
        {
            List<TransactionDetail> lst = new List<TransactionDetail>();
            foreach (String key in transactionDetailsCollection)
            {
                TransactionDetail tDetail = new TransactionDetail();

                tDetail.SettingName = key;
                tDetail.SettingValue = transactionDetailsCollection[key].IsNotNull() ? transactionDetailsCollection[key] : String.Empty;
                tDetail.CreatedByID = currentUserId;
                tDetail.CreatedOn = currentDateTime;
                tDetail.IsDeleted = false;
                tDetail.OnlinePaymentTransactionID = onlineTransactionId;

                _dbContext.TransactionDetails.AddObject(tDetail);
            }
        }

        public Int32 GetOrderStatusCode(String status)
        {
            return _dbContext.lkpOrderStatus
                             .Where(orderSts => orderSts.Code.ToLower() == status.ToLower() && !orderSts.IsDeleted)
                             .FirstOrDefault().OrderStatusID;
        }

        /// <summary>
        /// Deletes the existing OnlinePaymentTransaction record and Adds new records for
        /// OnlinePaymentTransaction, OrderPaymentDetails and Updates the OrderPkgPaymentDetail
        /// When applicant change the payment option for any same type of package i.e. Paypal, Money Order etc.
        /// </summary>
        /// <param name="order"></param>
        /// <param name="orderStatuscode"></param>
        /// <param name="tenantId"></param>
        /// <returns></returns>
        public String UpdateOrderByID(Order order, String orderStatuscode, Int32 ordPayDetailId, Int32 paymentModeId, out Int32 insertedOrdPayDetailId, Int32 tenantId, Boolean IsRevertToMoneyOrder)
        {
            insertedOrdPayDetailId = 0;
            var orderExist = _dbContext.Orders.FirstOrDefault(x => x.OrderID == order.OrderID && x.IsDeleted == false);
            DateTime creationDateTime = DateTime.Now;
            String invoiceNumber = String.Empty;
            var currentUserId = order.ModifiedByID;

            //TODO get orderpaymentdetail from orderpaymentdetailid
            if (orderExist.IsNotNull())
            {
                Int32 orderStatusId = _dbContext.lkpOrderStatus.FirstOrDefault(x => x.Code == orderStatuscode).OrderStatusID;
                orderExist.PaymentOptionID = order.PaymentOptionID;
                orderExist.OrderStatusID = orderStatusId;
                //TODO: order status will not update. Rather new status will go into the new orderpaymentdetail
                orderExist.Notes = "Payment Type changed for Order Number " + Convert.ToString(order.OrderID);
                //TODO: update notes in OPD table instead
                orderExist.ModifiedByID = currentUserId;
                orderExist.ModifiedOn = creationDateTime;

                //UAT-3427: To delete the ampping with the applicant document, so that new document mapping can be insert with the new payment type.
                orderExist.ApplicantDocumentID = IsRevertToMoneyOrder ? orderExist.ApplicantDocumentID : null;

                //_dbContext.SaveChanges(); 
                var ordPayDetailDeleted = DeleteOnlinePaymentTransaction(order, ordPayDetailId, creationDateTime);
                invoiceNumber = GenerateInvoiceNumber(order.OrderID, tenantId, false);


                var ordPayDetailInserted = AddOnlinePaymentTransaction(orderExist, creationDateTime, invoiceNumber,
                                                Convert.ToDecimal(ordPayDetailDeleted.OPD_Amount), paymentModeId, orderStatusId, Convert.ToInt32(currentUserId));

                _dbContext.SaveChanges();
                UpdateOrdPkgPaymentDetails(ordPayDetailDeleted.OPD_ID, ordPayDetailInserted.OPD_ID, Convert.ToInt32(currentUserId), creationDateTime);
                insertedOrdPayDetailId = ordPayDetailInserted.OPD_ID;
                //TODO: update orderpaymentdetailid in orderpkgpaymentdetail
            }
            return invoiceNumber;
        }

        /// <summary>
        /// Update the Status of the OPD for the Credit Card, to the status specified and payment profile Id
        /// </summary>
        /// <param name="statusId"></param>
        /// <param name="currentUserId"></param>
        /// <param name="opdId"></param>
        /// <param name="paymentProfileId"></param>
        void IComplianceDataRepository.UpdateOPDStatus(Int32 statusId, Int32 currentUserId, Int32 opdId, long paymentProfileId)
        {
            var _opd = _dbContext.OrderPaymentDetails.Where(opd => opd.OPD_ID == opdId).First();
            _opd.OPD_OrderStatusID = statusId;
            if (paymentProfileId > 0)
                _opd.OPD_CustomerPaymentProfileID = Convert.ToString(paymentProfileId);
            _opd.OPD_ModifiedOn = DateTime.Now;
            _opd.OPD_ModifiedByID = currentUserId;
            _dbContext.SaveChanges();
        }

        /// <summary>
        /// To delete data from Online Payment Transaction, Order Payment Details and OrderPkg Payment Details 
        /// </summary>
        /// <param name="order"></param>
        /// <param name="invoiceNumber"></param>
        /// <param name="creationDateTime"></param>
        private OrderPaymentDetail DeleteOnlinePaymentTransaction(Order order, Int32 ordPaymentDetailId, DateTime currentDateTime)
        {
            var paymentdetail = GetOrderPaymentDetailById(ordPaymentDetailId);
            OnlinePaymentTransaction optToDelete = paymentdetail.OnlinePaymentTransaction;

            // UAT 916 changes
            //OnlinePaymentTransaction onlinePaymentTransactionToDelete = paymentdetail.OnlinePaymentTransaction;
            //if (optToDelete.IsNotNull())
            //{
            //    optToDelete.IsDeleted = true;
            //    optToDelete.ModifiedByID = order.ModifiedByID;
            //    optToDelete.ModifiedOn = currentDateTime;

            // UAT 916 changes
            //var orderPaymentDetails = onlinePaymentTransactionToDelete.OrderPaymentDetails.FirstOrDefault(); 
            if (!paymentdetail.IsNullOrEmpty())
            {
                paymentdetail.OPD_IsDeleted = true;
                paymentdetail.OPD_ModifiedByID = order.ModifiedByID;
                paymentdetail.OPD_ModifiedOn = currentDateTime;

                //if (!paymentdetail.OrderPkgPaymentDetails.IsNullOrEmpty())
                //{
                //    foreach (var oppd in paymentdetail.OrderPkgPaymentDetails)
                //    {
                //        oppd.OPPD_IsDeleted = true;
                //        oppd.OPPD_ModifiedBy = order.ModifiedByID;
                //        oppd.OPPD_ModifiedOn = currentDateTime;
                //    }
                //}
            }
            //}
            return paymentdetail;
        }

        /// <summary>
        /// Update the OrderPkgPaymentDetails with new OrdPaymentDetailsId, when applicant changes the payment Options for any package
        /// </summary>
        /// <param name="deletedId"></param>
        /// <param name="insertedId"></param>
        /// <param name="modifiedById"></param>
        /// <param name="modifiedOn"></param>
        private void UpdateOrdPkgPaymentDetails(Int32 deletedId, Int32 insertedId, Int32 modifiedById, DateTime modifiedOn)
        {
            var _ordPkgPayDetailsLst = _dbContext.OrderPkgPaymentDetails.Where(oppd => oppd.OPPD_OrderPaymentDetailID == deletedId).ToList();

            foreach (var oppd in _ordPkgPayDetailsLst)
            {
                oppd.OPPD_OrderPaymentDetailID = insertedId;
                oppd.OPPD_ModifiedBy = modifiedById;
                oppd.OPPD_ModifiedOn = modifiedOn;
            }
            _dbContext.SaveChanges();
        }

        #region UAT-2073: New Payment setting: School approval for MO and CC Kaplan would like a way to keep students from paying for orders of a specific package without their approval.

        /// <summary>
        /// To get Payment Approval Required setting for credit card
        /// </summary>
        /// <param name="orderIDs"></param>
        /// <returns>Payment Approval Status ID</returns>
        Int32 IComplianceDataRepository.GetPaymentApprovalRequiredSetting(String orderIDs)
        {
            Int32 paymentApprovalStatusID = 0;
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {

                SqlCommand command = new SqlCommand("usp_GetPaymentApprovalRequiredSetting", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@MasterOrderIds", orderIDs);
                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > 0)
                {
                    paymentApprovalStatusID = Convert.ToInt32(ds.Tables[0].Rows[0]["PaymentApprovalStatusID"]);
                    if (paymentApprovalStatusID != null)
                        return paymentApprovalStatusID;
                }
            }
            return paymentApprovalStatusID;
        }

        /// <summary>
        /// Update the Status of the OPD for the Credit Card, to the status specified and payment profile Id
        /// </summary>
        /// <param name="statusId"></param>
        /// <param name="currentUserId"></param>
        /// <param name="ccOPDList"></param>
        /// <param name="paymentProfileId"></param>
        void IComplianceDataRepository.UpdateOPDStatusAndPaymentProfileId(Int32 statusId, Int32 currentUserId, List<Int32> ccOPDList, long paymentProfileId)
        {
            var _orderPaymentDetails = _dbContext.OrderPaymentDetails.Where(opd => ccOPDList.Contains(opd.OPD_ID) && !opd.OPD_IsDeleted).ToList();
            foreach (var _opd in _orderPaymentDetails)
            {
                _opd.OPD_OrderStatusID = statusId;
                if (paymentProfileId > 0)
                    _opd.OPD_CustomerPaymentProfileID = Convert.ToString(paymentProfileId);
                _opd.OPD_ModifiedOn = DateTime.Now;
                _opd.OPD_ModifiedByID = currentUserId;
            }

            _dbContext.SaveChanges();
        }

        #endregion

        #endregion

        #region Rush Order Review

        /// <summary>
        /// To get DeptProgramPackageSubscription object
        /// </summary>
        /// <param name="orderId"></param>
        /// <param name="subscriptionId"></param>
        /// <returns></returns>
        public DeptProgramPackageSubscription GetDeptProgramPackageSubscription(Int32 orderId, Int32 subscriptionId)
        {
            DeptProgramPackageSubscription deptProgramPackageSubscription = new DeptProgramPackageSubscription();
            var order = _dbContext.Orders.Where(x => x.OrderID == orderId && x.IsDeleted == false);

            if (order.IsNotNull())
            {
                Int32 deptProgramPackageID = Convert.ToInt32(order.FirstOrDefault().DeptProgramPackageID);
                deptProgramPackageSubscription = _dbContext.DeptProgramPackageSubscriptions
                                                      .Include("DeptProgramPackage")
                                                      .Include("SubscriptionOption")
                                                      .Where(dpps => dpps.DPPS_DeptProgramPackageID == deptProgramPackageID
                                                           && dpps.DPPS_SubscriptionID == subscriptionId
                                                           && dpps.DPPS_IsDeleted == false).FirstOrDefault();
            }
            return deptProgramPackageSubscription;
        }

        /// <summary>
        /// To update rush order detail
        /// </summary>
        /// <param name="order"></param>
        /// <param name="orderStatuscode"></param>
        /// <param name="paymentModeId"></param>
        /// <returns></returns>
        public String UpdateRushOrderByOrderID(Order order, String orderStatuscode, Int32 paymentModeId, Int32 tenantId,
            out OrderPaymentDetail ordPayDetail, Int32 optTypeId)
        {
            var orderExist = _dbContext.Orders.FirstOrDefault(x => x.OrderID == order.OrderID && x.IsDeleted == false);
            DateTime creationDateTime = DateTime.Now;
            String invoiceNumber = String.Empty;
            ordPayDetail = new OrderPaymentDetail();
            if (orderExist.IsNotNull())
            {
                Int32 orderStatusId = _dbContext.lkpOrderStatus.FirstOrDefault(x => x.Code == orderStatuscode).OrderStatusID;
                orderExist.RushOrderStatusID = orderStatusId;
                orderExist.RushOrderMachineIP = order.RushOrderMachineIP;
                orderExist.RushOrderPrice = order.RushOrderPrice;
                orderExist.GrandTotal = order.GrandTotal;
                orderExist.IsRushOrderForExistingOrder = true;
                orderExist.ModifiedByID = order.ModifiedByID;
                orderExist.ModifiedOn = creationDateTime;
                // orderExist.OrderPackageType = order.OrderPackageType;
                ordPayDetail = AddRushOrderOnlinePaymentTransaction(order, Convert.ToDecimal(order.RushOrderPrice), creationDateTime, paymentModeId,
                    out invoiceNumber, tenantId, orderStatusId, optTypeId);
            }
            return invoiceNumber;
        }

        /// <summary>
        /// To update rush order detail
        /// </summary>
        /// <param name="order"></param>
        /// <param name="orderStatuscode"></param>
        /// <returns></returns>
        public Boolean UpdateRushOrderExistByID(Order order, String orderStatuscode)
        {
            var orderExist = _dbContext.Orders.FirstOrDefault(x => x.OrderID == order.OrderID && x.IsDeleted == false);
            DateTime creationDateTime = DateTime.Now;
            String invoiceNumber = String.Empty;

            if (orderExist.IsNotNull())
            {
                Int32 orderStatusId = _dbContext.lkpOrderStatus.FirstOrDefault(x => x.Code == orderStatuscode).OrderStatusID;
                orderExist.RushOrderStatusID = orderStatusId;
                orderExist.ModifiedByID = order.ModifiedByID;
                orderExist.ModifiedOn = creationDateTime;
                orderExist.IsRushOrderForExistingOrder = true;
                _dbContext.SaveChanges();
                return true;
            }
            return false;
        }

        /// <summary>
        /// To get Invoice Number
        /// </summary>
        /// <param name="orderID"></param>
        /// <param name="tenantId"></param>
        /// <param name="isRushOrder"></param>
        /// <param name="orderPaymentCount"></param>
        /// <returns></returns>
        public String GenerateInvoiceNumber(Int32 orderID, Int32 tenantId, Boolean isRushOrder, List<Int32> childOrderIds = null)
        {
            Int32 orderPaymentCount = GetOrderPaymentCount(orderID);
            string _invoiceNumber = "COM" + "-" + tenantId + "-" + orderID;
            if (childOrderIds.IsNotNull() && childOrderIds.Count > AppConsts.NONE)
            {
                foreach (Int32 childOrderId in childOrderIds)
                    _invoiceNumber = _invoiceNumber + "," + childOrderId;
            }
            if (orderPaymentCount > 0)
            {
                //InvoiceNumber: F + orderPaymentCount + I + OrderID + T + TenantID
                _invoiceNumber = _invoiceNumber + "-" + "F" + orderPaymentCount;
            }
            return _invoiceNumber;
            //Rajeev Jha Commenting out unreachable code below
            /*
            if (isRushOrder)
            {
                //InvoiceNumber: R + orderPaymentCount + I + OrderID + T + TenantID
                return "COM" + "-" + tenantId + "-" + orderID + "-" + "R" + orderPaymentCount;
            }*/
        }

        /// <summary>
        /// To add and save Rush Order Online Payment Transaction object
        /// </summary>
        /// <param name="applicantOrder"></param>
        /// <param name="amount"></param>
        /// <param name="creationDateTime"></param>
        /// <param name="paymentModeId"></param>
        /// <param name="invoiceNumber"></param>
        /// <param name="tenantId"></param>
        private OrderPaymentDetail AddRushOrderOnlinePaymentTransaction(Order applicantOrder, Decimal amount, DateTime creationDateTime, Int32 paymentModeId,
            out String invoiceNumber, Int32 tenantId, Int32 rushOrderStatusId, Int32 optTypeId)
        {
            //Check Order Id in OrderPaymentDetail table, Increment the count to make Invoice Number unique
            //for Rush Order for existing order
            Int32 orderPaymentCount = GetOrderPaymentCount(applicantOrder.OrderID);

            //Update Invoice number for Rush Order
            // invoiceNumber = GenerateInvoiceNumber(applicantOrder.OrderID, tenantId, true, orderPaymentCount);
            invoiceNumber = GenerateInvoiceNumber(applicantOrder.OrderID, tenantId, true);

            //Insert into OnlinePaymentTransaction object
            OnlinePaymentTransaction paymentTransaction = new OnlinePaymentTransaction();
            paymentTransaction.Amount = amount;
            paymentTransaction.CreatedByID = Convert.ToInt32(applicantOrder.ModifiedByID);
            paymentTransaction.CreatedOn = creationDateTime;
            paymentTransaction.IsDeleted = false;
            paymentTransaction.Invoice_num = invoiceNumber;
            _dbContext.OnlinePaymentTransactions.AddObject(paymentTransaction);

            //Insert into OrderPaymentDetail object
            var _orderPaymentDetail = AddRushOrderPaymentDetail(applicantOrder, paymentTransaction, creationDateTime, paymentModeId, rushOrderStatusId, optTypeId);

            _dbContext.SaveChanges();
            return _orderPaymentDetail;
        }

        public Int32 GetOrderPaymentCount(Int32 orderID)
        {
            //Remove OrderPaymentDetail 'IsDeleted' check, this is required in case of Applicant ChangePaymentType. when Applicant ChangePaymentType, 
            //old invoice orderpaymentdetails gets deleted and system generates duplicate invoice number due to OrderPaymentDetail Count().
            //Int32 orderPaymentCount = _dbContext.OrderPaymentDetails.Count(x => x.OPD_OrderID == orderID && x.OPD_IsDeleted == false);
            Int32 orderPaymentCount = _dbContext.OrderPaymentDetails.Count(x => x.OPD_OrderID == orderID);
            orderPaymentCount += 1;
            return orderPaymentCount;
        }

        /// <summary>
        /// To add Rush Order Payment Detail object
        /// </summary>
        /// <param name="applicantOrder"></param>
        /// <param name="paymentTransaction"></param>
        /// <param name="creationDateTime"></param>
        /// <param name="paymentModeId"></param>
        private OrderPaymentDetail AddRushOrderPaymentDetail(Order applicantOrder, OnlinePaymentTransaction paymentTransaction, DateTime creationDateTime,
            Int32 paymentModeId, Int32 rushOrderStatusId, Int32 optTypeId)
        {
            OrderPaymentDetail paymentDetails = new OrderPaymentDetail();
            paymentDetails.OPD_OrderID = applicantOrder.OrderID;
            paymentDetails.OPD_OnlinePaymentTransactionID = paymentTransaction.OnlinePaymentTransactionID;
            paymentDetails.OPD_PaymentOptionID = paymentModeId;
            paymentDetails.OPD_IsDeleted = false;
            paymentDetails.OPD_CreatedOn = creationDateTime;
            paymentDetails.OPD_CreatedByID = Convert.ToInt32(applicantOrder.ModifiedByID);
            paymentDetails.OPD_Amount = paymentTransaction.Amount;
            paymentDetails.OPD_OrderStatusID = rushOrderStatusId;

            OrderPkgPaymentDetail _pkgPaymentDetails = new OrderPkgPaymentDetail();
            _pkgPaymentDetails.OrderPaymentDetail = paymentDetails;
            _pkgPaymentDetails.OPPD_BkgOrderPackageID = null;
            _pkgPaymentDetails.OPPD_OrderPackageTypeID = optTypeId; // O TO
            _pkgPaymentDetails.OPPD_CreatedBy = Convert.ToInt32(applicantOrder.ModifiedByID);
            _pkgPaymentDetails.OPPD_CreatedOn = creationDateTime;
            _pkgPaymentDetails.OPPD_IsDeleted = false;

            _dbContext.OrderPaymentDetails.AddObject(paymentDetails);

            return paymentDetails;
        }


        #endregion

        #region Create Order

        #region Public Methods

        /// <summary>
        /// A copy of this method is - GetCompliancePackages
        /// ANY CHANGES TO THIS SHOULD ALSO BE DONE IN GetCompliancePackages METHOD
        /// </summary>
        /// <param name="organizationUserId"></param>
        /// <param name="deptProgramMappingIds"></param>
        /// <param name="NoUserMode"></param>
        /// <returns></returns>
        public List<DeptProgramPackage> GetDeptProgramPackage(Int32 organizationUserId, List<Int32> deptProgramMappingIds, Boolean NoUserMode = false)
        {
            List<DeptProgramPackage> deptProgramPackages = null;
            List<DeptProgramPackage> deptProgramPackagesList = new List<DeptProgramPackage>();
            Guid subscriptionOptionCode = new Guid(SubscriptionOptions.CustomMonthly.GetStringValue());

            if (deptProgramMappingIds != null)
            {
                String code = PackageAvailability.AVAILABLE_FOR_ORDER.GetStringValue();
                List<DeptProgramPackage> lstDeptProgramPackage = _dbContext.DeptProgramPackages.Include("lkpPackageAvailability")
                    .Where(dpp => deptProgramMappingIds.Contains(dpp.DPP_DeptProgramMappingID) && !dpp.DPP_IsDeleted && dpp.CompliancePackage.IsActive == true
                        && !dpp.CompliancePackage.IsDeleted && (dpp.lkpPackageAvailability == null || dpp.lkpPackageAvailability.PA_Code == code)).OrderBy(dpp => dpp.DPP_Priority.Value).ToList();

                foreach (DeptProgramPackage deptProgramPackage in lstDeptProgramPackage)
                {
                    var deptProgramPackageSubscriptions = deptProgramPackage.DeptProgramPackageSubscriptions
                                   .Where(dpps => dpps.SubscriptionOption.IsSystem == false &&
                                   dpps.SubscriptionOption.Code != subscriptionOptionCode && dpps.DPPS_TotalPrice != null &&
                                   dpps.SubscriptionOption.IsDeleted == false && dpps.DPPS_IsDeleted == false); //&& dpps.DPPS_TotalPrice > 0); include packages with 0 price :[UAT-360]:- WB: Compliance Order: Applicant receives error message when attempting to purchase a subscription with the price of $0.00
                    if (deptProgramPackageSubscriptions.Count() > 0)
                    {
                        deptProgramPackagesList.Add(deptProgramPackage);
                    }
                }
                if (deptProgramPackagesList != null)
                {
                    if (deptProgramPackagesList.Count > 0)
                    {//initialize deptProgramPackages only if there were some packages in corresponding hierarchy. logic required to show appropriate mesage to end user.
                        deptProgramPackages = new List<DeptProgramPackage>();
                    }
                    String _pendingPaymentApprovalStatus = ApplicantOrderStatus.Pending_Payment_Approval.GetStringValue();
                    String _cancellationRequestedStatus = ApplicantOrderStatus.Cancellation_Requested.GetStringValue();
                    Boolean _isPackageOrdered = true;
                    if (NoUserMode)
                    {
                        return deptProgramPackagesList;
                    }
                    List<Int32> userProfileIds = _dbContext.OrganizationUserProfiles
                          .Where(orgUserProfile => orgUserProfile.OrganizationUserID == organizationUserId && !orgUserProfile.IsDeleted)
                          .Select(orgUserProfile => orgUserProfile.OrganizationUserProfileID).ToList();

                    foreach (DeptProgramPackage deptProgramPackage in deptProgramPackagesList)
                    {
                        if (userProfileIds.IsNotNull() && userProfileIds.Count > 0)
                        {

                            Boolean noPendingPurschasedSubscription = !_dbContext.PackageSubscriptions
                                .Any(ps => !ps.IsDeleted && ps.OrganizationUserID == organizationUserId &&
                                    ps.CompliancePackageID == deptProgramPackage.DPP_CompliancePackageID);

                            String compliancePackageTypeCode = OrderPackageTypes.COMPLIANCE_PACKAGE.GetStringValue();

                            //List<Int32?> deptProgramPackageIDs = _dbContext.Orders.Where(x => userProfileIds.Contains(x.OrganizationUserProfileID)
                            //        && !x.IsDeleted && (x.lkpOrderStatu.Code.Equals(_pendingPaymentApprovalStatus) ||
                            //        x.lkpOrderStatu.Code.Equals(_cancellationRequestedStatus))).Select(cnd => cnd.DeptProgramPackageID).ToList();

                            List<Int32?> deptProgramPackageIDs = _dbContext.Orders
                                        .Where(ord => userProfileIds.Contains(ord.OrganizationUserProfileID)
                                         && !ord.IsDeleted
                                         && ord.OrderPaymentDetails
                                               .Any(opd => opd.OrderPkgPaymentDetails
                                                              .Any(oppd => oppd.lkpOrderPackageType.OPT_Code == compliancePackageTypeCode && !oppd.OPPD_IsDeleted)
                                                 && !opd.OPD_IsDeleted && (opd.lkpOrderStatu.Code.Equals(_pendingPaymentApprovalStatus) || opd.lkpOrderStatu.Code.Equals(_cancellationRequestedStatus))))
                                        .Select(col => col.DeptProgramPackageID).ToList();

                            if (deptProgramPackage.CompliancePackage.DeptProgramPackages.Any(cond => deptProgramPackageIDs.Contains(cond.DPP_ID)))
                                _isPackageOrdered = false;
                            else
                                _isPackageOrdered = true;

                            if (_isPackageOrdered && noPendingPurschasedSubscription == true)
                                deptProgramPackages.Add(deptProgramPackage);
                        }
                    }
                }
            }
            return deptProgramPackages;
        }

        /// <summary>
        /// Gets the list of Compliance Packages available for purchase, for applicant, in Pending order screen 
        /// </summary>
        /// <param name="organizationUserId"></param>
        /// <param name="deptProgramMappingIds"></param>
        /// <param name="NoUserMode"></param>
        /// <returns></returns>
        public Dictionary<String, List<DeptProgramPackage>> GetCompliancePackages(Int32 organizationUserId, Dictionary<Int32, Int32> deptProgramMappingIds
                                                                                    , Int32? previousPkgId, Int32? previousNodeId, Boolean NoUserMode = false)
        {
            //UAT-977 :Additional work towards archive ability
            DateTime todayDate = DateTime.Now;
            List<DeptProgramPackage> _finalList = new List<DeptProgramPackage>();
            List<DeptProgramPackage> deptProgramPackages = null;
            List<DeptProgramPackage> deptProgramPackagesList = new List<DeptProgramPackage>();
            List<DeptProgramPackage> deptProgramPackagesAlreadyPurchased = new List<DeptProgramPackage>();
            Dictionary<String, List<DeptProgramPackage>> dicAvailableAndPurchasedPackage = new Dictionary<String, List<DeptProgramPackage>>();

            String notAvailableForOrderCode = PackageAvailability.NOT_AVAILABLE_FOR_ORDER.GetStringValue();
            String code = PackageAvailability.AVAILABLE_FOR_ORDER.GetStringValue();

            List<OrderPaymentDetail> lstOPDs = new List<OrderPaymentDetail>();

            List<PackageSubscription> _lstApplicantSubscriptions = new List<PackageSubscription>();

            Guid subscriptionOptionCode = new Guid(SubscriptionOptions.CustomMonthly.GetStringValue());
            if (deptProgramMappingIds != null)
            {

                List<DeptProgramPackage> lstDeptProgramPackage = _dbContext.DeptProgramPackages
                    .Include("CompliancePackage.DeptProgramPackages")
                    .Include("DeptProgramPackageSubscriptions.SubscriptionOption")
                    .Include("lkpPackageAvailability")
                    .Include("CompliancePackage.lkpCompliancePackageType")
                    .Where(dpp => deptProgramMappingIds.Values.Contains(dpp.DPP_DeptProgramMappingID) &&
                  !dpp.DPP_IsDeleted && dpp.CompliancePackage.IsActive == true && !dpp.CompliancePackage.IsDeleted
                    //&& (dpp.lkpPackageAvailability == null || dpp.lkpPackageAvailability.PA_Code == code)
                  )
                  .OrderBy(dpp => dpp.DPP_Priority.Value).ToList();

                foreach (DeptProgramPackage deptProgramPackage in lstDeptProgramPackage)
                {
                    //  UAT 3699 : Packages available for order fix from ONBD-31742
                    if (deptProgramPackage.lkpPackageAvailability.PA_Code != notAvailableForOrderCode)
                    {
                        var deptProgramPackageSubscriptions = deptProgramPackage.DeptProgramPackageSubscriptions
                                       .Where(dpps => dpps.SubscriptionOption.IsSystem == false &&
                                       dpps.SubscriptionOption.Code != subscriptionOptionCode && dpps.DPPS_TotalPrice != null &&
                                       dpps.SubscriptionOption.IsDeleted == false && dpps.DPPS_IsDeleted == false); //&& dpps.DPPS_TotalPrice > 0); include packages with 0 price :[UAT-360]:- WB: Compliance Order: Applicant receives error message when attempting to purchase a subscription with the price of $0.00
                        if (deptProgramPackageSubscriptions.Count() > 0)
                        {
                            deptProgramPackagesList.Add(deptProgramPackage);
                        }
                    }
                }
                if (deptProgramPackagesList != null)
                {
                    if (deptProgramPackagesList.Count > 0)
                    {//initialize deptProgramPackages only if there were some packages in corresponding hierarchy. logic required to show appropriate mesage to end user.
                        deptProgramPackages = new List<DeptProgramPackage>();
                    }
                    String _pendingPaymentApprovalStatus = ApplicantOrderStatus.Pending_Payment_Approval.GetStringValue();
                    String _cancellationRequestedStatus = ApplicantOrderStatus.Cancellation_Requested.GetStringValue();
                    //UAT-2073: New Payment setting: School approval for MO and CC Kaplan would like a way to keep students from paying for orders of a specific package without their approval.
                    String _pendingSchoolApprovalStatus = ApplicantOrderStatus.Pending_School_Approval.GetStringValue();
                    Boolean _isPackageOrdered = true;
                    if (NoUserMode)
                    {
                        if (!dicAvailableAndPurchasedPackage.ContainsKey("AlreadyPurchasedPkg"))
                            dicAvailableAndPurchasedPackage.Add("AlreadyPurchasedPkg", deptProgramPackagesAlreadyPurchased);
                        if (!dicAvailableAndPurchasedPackage.ContainsKey("AvailablePurchasedPkg"))
                            dicAvailableAndPurchasedPackage.Add("AvailablePurchasedPkg", deptProgramPackagesList);
                        //return deptProgramPackagesList;
                        return dicAvailableAndPurchasedPackage;
                    }
                    List<Int32> userProfileIds = _dbContext.OrganizationUserProfiles
                          .Where(orgUserProfile => orgUserProfile.OrganizationUserID == organizationUserId && !orgUserProfile.IsDeleted)
                          .Select(orgUserProfile => orgUserProfile.OrganizationUserProfileID).ToList();

                    List<Int32> _lstPackageIds = deptProgramPackagesList.Select(dpp => dpp.DPP_CompliancePackageID).ToList();

                    List<PackageSubscription> _lstPackageSubscriptions = _dbContext.PackageSubscriptions.Where(ps => _lstPackageIds.Contains(ps.CompliancePackageID)).ToList();

                    //commented for UAT - 916
                    //List<Int32?> deptProgramPackageIDs = _dbContext.Orders.Where(x => userProfileIds.Contains(x.OrganizationUserProfileID)
                    //        && !x.IsDeleted && (x.lkpOrderStatu.Code.Equals(_pendingPaymentApprovalStatus) ||
                    //        x.lkpOrderStatu.Code.Equals(_cancellationRequestedStatus))).Select(cnd => cnd.DeptProgramPackageID).ToList();

                    String compliancePackageTypeCode = OrderPackageTypes.COMPLIANCE_PACKAGE.GetStringValue();

                    List<Int32?> deptProgramPackageIDs = new List<int?>();
                    //UAT-2073- Added _pendingSchoolApprovalStatus check

                    //UAT-2236:Student not able to order tracking package (even cancelled) until Money Order payment is approved or complete order is cancelled.
                    String partialOrderCancellationTypeCode = PartialOrderCancellationType.BACKGROUND_PACKAGE.GetStringValue();
                    Int32 partialOrderCancellationTypeID = _dbContext.lkpPartialOrderCancellationTypes.FirstOrDefault(
                                                                                    cond => cond.Code == partialOrderCancellationTypeCode).PartialOrderCancellationTypeID;

                    lstOPDs = _dbContext.OrderPaymentDetails.Where(x => userProfileIds.Contains(x.Order.OrganizationUserProfileID)
                          && !x.Order.IsDeleted && !x.OPD_IsDeleted && (x.lkpOrderStatu.Code.Equals(_pendingPaymentApprovalStatus) ||
                          x.lkpOrderStatu.Code.Equals(_cancellationRequestedStatus) || x.lkpOrderStatu.Code.Equals(_pendingSchoolApprovalStatus))
                           && (x.Order.PartialOrderCancellationTypeID == null || x.Order.PartialOrderCancellationTypeID == partialOrderCancellationTypeID)
                          && x.OrderPkgPaymentDetails.Any(cond => cond.lkpOrderPackageType.OPT_Code.Equals(compliancePackageTypeCode) && !cond.OPPD_IsDeleted)
                          ).ToList();

                    deptProgramPackageIDs = lstOPDs.Select(cnd => cnd.Order.DeptProgramPackageID).ToList();


                    foreach (DeptProgramPackage deptProgramPackage in deptProgramPackagesList)
                    {
                        if (userProfileIds.IsNotNull() && userProfileIds.Count > 0)
                        {
                            Boolean noPendingPurschasedSubscription;
                            if (previousPkgId.IsNotNull() && deptProgramPackage.DPP_CompliancePackageID == previousPkgId
                                && deptProgramPackage.DeptProgramMapping.DPM_ID != previousNodeId)
                            {
                                noPendingPurschasedSubscription = true;
                            }
                            else
                            {
                                noPendingPurschasedSubscription = !_lstPackageSubscriptions
                                 .Any(ps => !ps.IsDeleted && ps.OrganizationUserID == organizationUserId &&
                                  ps.CompliancePackageID == deptProgramPackage.DPP_CompliancePackageID && //Added below check to get the Expired  and Archived package for repurchase [UAT-977:Additional work towards archive ability]
                                  ((ps.ArchiveStateID == null && ps.ExpiryDate > todayDate.Date) || ((ps.lkpArchiveState != null
                                    && !ps.lkpArchiveState.AS_Code.Equals("AB") && ps.ExpiryDate > todayDate.Date)
                                    || (ps.lkpArchiveState != null && ps.lkpArchiveState.AS_Code.Equals("AB") && ps.ExpiryDate > todayDate.Date)))
                                  );//UAT-1220:WB: As an applicant, I should be able to place a new order for a package which is already expired and retain my entered data
                            }
                            _lstApplicantSubscriptions.AddRange(_lstPackageSubscriptions
                                             .Where(ps => !ps.IsDeleted && ps.OrganizationUserID == organizationUserId &&
                                              ps.CompliancePackageID == deptProgramPackage.DPP_CompliancePackageID
                                              && (previousPkgId.IsNull() || ps.CompliancePackageID != previousPkgId)).ToList());

                            if (deptProgramPackage.CompliancePackage.DeptProgramPackages.Any(cond => deptProgramPackageIDs.Contains(cond.DPP_ID)))
                                _isPackageOrdered = false;
                            else
                                _isPackageOrdered = true;

                            if (_isPackageOrdered && noPendingPurschasedSubscription == true)
                                deptProgramPackages.Add(deptProgramPackage);
                            else
                                deptProgramPackagesAlreadyPurchased.Add(deptProgramPackage);//UAT-729 As an applicant, if I have an active Compliance package, that package should not appear as an option in the order process.
                        }
                    }
                }
                deptProgramMappingIds = deptProgramMappingIds.OrderByDescending(dpmId => dpmId.Key).ToDictionary(pair => pair.Key, pair => pair.Value);

                foreach (var node in deptProgramMappingIds)
                {
                    if (!deptProgramPackages.IsNullOrEmpty() && deptProgramPackages.Any(dpp => dpp.DPP_DeptProgramMappingID == node.Value
                        && (dpp.lkpPackageAvailability == null || dpp.lkpPackageAvailability.PA_Code == code)))
                    {
                        _finalList.AddRange(
                            deptProgramPackages.Where(dpp => dpp.DPP_DeptProgramMappingID == node.Value && (dpp.lkpPackageAvailability == null || dpp.lkpPackageAvailability.PA_Code == code)).ToList());
                        break;
                    }

                    // Check for UAT 1736-The system should only look up if there are zero packages marked available for order on the node.
                    // 1. Check in the list of available packages, for the current node
                    // 2. Check in the list of already purchased subscriptions.
                    // 3. Check in the list of Cancellation requested or Pending payment approval status 
                    // 4. UAT 3339 Tracking packages at parent node should not be displayed when there is a package at the child node, even when the child node package has already been purchased.                    
                    if (
                         !deptProgramPackages.IsNullOrEmpty() &&
                         (
                                     deptProgramPackages.Any(dppAvailable =>
                                     dppAvailable.DPP_DeptProgramMappingID == node.Value
                                                    && (dppAvailable.lkpPackageAvailability == null
                                                         || (dppAvailable.lkpPackageAvailability != null && dppAvailable.lkpPackageAvailability.PA_Code == code)))

                                       || _lstApplicantSubscriptions.Any(ps => ps.Order.DeptProgramPackage.DPP_DeptProgramMappingID == node.Value
                                                    && (ps.Order.DeptProgramPackage.lkpPackageAvailability == null
                                                         || (ps.Order.DeptProgramPackage.lkpPackageAvailability != null && ps.Order.DeptProgramPackage.lkpPackageAvailability.PA_Code == code)))

                                       || lstOPDs.Any(opd => opd.Order.DeptProgramPackage.DPP_DeptProgramMappingID == node.Value
                                                    && (opd.Order.DeptProgramPackage.lkpPackageAvailability == null
                                                         || (opd.Order.DeptProgramPackage.lkpPackageAvailability != null && opd.Order.DeptProgramPackage.lkpPackageAvailability.PA_Code == code)))

                                        || deptProgramPackagesAlreadyPurchased.IsNotNull() && deptProgramPackagesAlreadyPurchased.Count > 0 && deptProgramPackages.Any(dppAvailable => deptProgramPackagesAlreadyPurchased.Any(x => x.DeptProgramMapping.DPM_ParentNodeID.HasValue && x.DeptProgramMapping.DPM_ParentNodeID.Value == dppAvailable.DPP_DeptProgramMappingID)
                                                   && (dppAvailable.lkpPackageAvailability == null
                                                        || (dppAvailable.lkpPackageAvailability != null && dppAvailable.lkpPackageAvailability.PA_Code == code)))

                         )
                        )
                    {
                        break;
                    }
                }
            }
            //UAT-729 As an applicant, if I have an active Compliance package, that package should not appear as an option in the order process.
            if (!dicAvailableAndPurchasedPackage.ContainsKey("AlreadyPurchasedPkg"))
                dicAvailableAndPurchasedPackage.Add("AlreadyPurchasedPkg", deptProgramPackagesAlreadyPurchased);
            if (!dicAvailableAndPurchasedPackage.ContainsKey("AvailablePurchasedPkg"))
                dicAvailableAndPurchasedPackage.Add("AvailablePurchasedPkg", _finalList);

            return dicAvailableAndPurchasedPackage;
        }

        /// <summary>
        /// UAT-3259
        /// </summary>
        /// <param name="organizationUserId"></param>
        /// <returns></returns>
        List<Int32> IComplianceDataRepository.GetAlreadyExpiredComplPackageIds(Int32 organizationUserId)
        {
            return _dbContext.PackageSubscriptions.Where(con => con.OrganizationUserID == organizationUserId && con.ExpiryDate <= DateTime.Now && !con.IsDeleted).Select(sel => sel.CompliancePackageID).Distinct().ToList();
        }


        public DeptProgramPackage GetDeptProgramPackageById(Int32 deptProgramPackageId)
        {
            return _dbContext.DeptProgramPackages.FirstOrDefault(x => x.DPP_ID == deptProgramPackageId && !x.DPP_IsDeleted);
        }

        public List<MobilityNodePackages> GetMobilityNodePackages(Int32 selectedNodeId, Int32 selectedNodeDPPId)
        {

            List<MobilityNodePackages> _lstMobilityNodePackages = new List<MobilityNodePackages>();

            if (IsMobilityNode(selectedNodeId))
                _lstMobilityNodePackages = _dbContext.GetMobilityNodePackages(selectedNodeId, selectedNodeDPPId).ToList();

            return _lstMobilityNodePackages;
        }

        public List<DeptProgramMapping> GetHierarchyNode(Int32 nodeId, Boolean isParent, out Int32 possibleNodeId, Int32 changeSubscriptionSourceNodeId = 0, Int32 changeSubscriptionSourceNodeDPPId = 0, String languageCode = default(String))
        {
            possibleNodeId = 0;
            List<DeptProgramMapping> _lstDeptProgramMapping;
            if (isParent)
            {
                Int32 _parentId = 0;
                DeptProgramMapping _deptPrgrmMapping = null;
                _deptPrgrmMapping = _dbContext.DeptProgramMappings.Where(mapping => mapping.DPM_ParentNodeID == null && !mapping.DPM_IsDeleted
                     && (mapping.DPM_IsAvailableForOrder == null || (mapping.DPM_IsAvailableForOrder != null && mapping.DPM_IsAvailableForOrder == true))
                     ).FirstOrDefault();

                if (_deptPrgrmMapping.IsNotNull())
                {
                    _parentId = _deptPrgrmMapping.DPM_ID;
                    _lstDeptProgramMapping = _dbContext.DeptProgramMappings.Include("InstitutionNode.InstitutionNodeType").
                 Where(mapping => mapping.DPM_ParentNodeID == _parentId && !mapping.DPM_IsDeleted
                 && (mapping.DPM_IsAvailableForOrder == null || (mapping.DPM_IsAvailableForOrder != null && mapping.DPM_IsAvailableForOrder == true))).OrderBy(x => x.DPM_DisplayOrder).ToList();
                }
                else
                    return _lstDeptProgramMapping = new List<DeptProgramMapping>();
            }

            else
            {
                _lstDeptProgramMapping = _dbContext.DeptProgramMappings.Include("InstitutionNode.InstitutionNodeType")
                                 .Where(mapping => mapping.DPM_ParentNodeID == nodeId
                                               && !mapping.DPM_IsDeleted
                                              && (mapping.DPM_IsAvailableForOrder == null || (mapping.DPM_IsAvailableForOrder != null && mapping.DPM_IsAvailableForOrder == true)))
                                 .OrderBy(x => x.DPM_DisplayOrder).ToList();
            }


            if (changeSubscriptionSourceNodeId > AppConsts.NONE && IsMobilityNode(changeSubscriptionSourceNodeId))
            {
                Int32? _previousNodesDuration = _dbContext.GetPreviousNodesDuration(changeSubscriptionSourceNodeId, changeSubscriptionSourceNodeDPPId).FirstOrDefault();
                List<InstHierarchyMobility> _lst = GetMobilityNodes(_lstDeptProgramMapping).OrderBy(x => x.DeptProgramMapping.DPM_DisplayOrder).ToList();
                if (_lst.IsNotNull() && _lst.Count() > 0)
                {
                    List<InstHierarchyMobility> _possibleNodes = GetMobilityNodeDurationInDays(Convert.ToInt32(_previousNodesDuration), _lst, changeSubscriptionSourceNodeId).ToList();
                    if (_possibleNodes.IsNotNull() && _possibleNodes.Count() > 0)
                    {
                        _possibleNodes = _possibleNodes.OrderBy(ihm => ihm.DurationInDays).ToList();
                        possibleNodeId = _possibleNodes.Take(1).FirstOrDefault().IHM_HierarchyID;
                    }
                }
            }

            //Globalization code
            if (languageCode.IsNullOrEmpty())
            {
                languageCode = Languages.ENGLISH.GetStringValue();
            }

            if (!_lstDeptProgramMapping.IsNullOrEmpty() && !languageCode.IsNullOrEmpty() && languageCode == Languages.SPANISH.GetStringValue())
            {
                foreach (DeptProgramMapping deptProgramMapping in _lstDeptProgramMapping)
                {
                    if (!deptProgramMapping.InstitutionNode.IsNullOrEmpty() && !deptProgramMapping.InstitutionNode.InstitutionNodeType.IsNullOrEmpty())
                    {
                        Int32 entityId = deptProgramMapping.InstitutionNode.InstitutionNodeType.INT_ID;
                        String entitytypeCode = LanguageTranslationEntityType.InstitutionNodeType.GetStringValue();
                        deptProgramMapping.InstitutionNode.InstitutionNodeType.INT_Name = GetEntityTypeTranslatedText(entityId, entitytypeCode);
                    }
                }
                return _lstDeptProgramMapping;
            }

            return _lstDeptProgramMapping;
        }

        public List<DeptProgramPackageSubscription> GetDeptProgramPackageSubscription(Int32 deptProgramPackageId)
        {
            return _dbContext.DeptProgramPackageSubscriptions.Where(x => x.DPPS_DeptProgramPackageID == deptProgramPackageId && !x.DPPS_IsDeleted).ToList();
        }

        public String GetPaymentOptionCodeById(Int32 paymentOptionId)
        {
            return _dbContext.lkpPaymentOptions.Where(payOptns => payOptns.PaymentOptionID == paymentOptionId && !payOptns.IsDeleted).FirstOrDefault().Code;
        }

        public Boolean SaveOrganizationUserDepartment(OrganizationUserDepartment organizationUserDepartment)
        {
            _dbContext.OrganizationUserDepartments.AddObject(organizationUserDepartment);
            return true;
        }

        public OrganizationUserDepartment GetOrganizationUserDepartment(Int32 organizationUserId)
        {
            return _dbContext.OrganizationUserDepartments.Where(cond => cond.OUD_OrganizationUserID == organizationUserId && !cond.OUD_IsDeleted).FirstOrDefault();
        }

        public Boolean UpdateChanges()
        {
            if (_dbContext.SaveChanges() > 0)
                return true;
            return false;
        }

        public Int32 GetDefaultNodeId()
        {
            return _dbContext.InstitutionNodes.Where(inst => inst.IN_Code.Equals("AAAA")).FirstOrDefault().IN_ID;
        }

        public Int32 GetInstitutionDPMID()
        {
            var deptProgramMapping = _dbContext.DeptProgramMappings.FirstOrDefault(x => x.DPM_ParentNodeID == null && x.DPM_IsDeleted == false);

            if (deptProgramMapping.IsNotNull())
            {
                return deptProgramMapping.DPM_ID;
            }
            return 0;
        }

        public Int32 GetLastNodeInstitutionId(Int32 lastNodeDPMId)
        {
            var deptProgramMapping = _dbContext.DeptProgramMappings.FirstOrDefault(dpm => dpm.DPM_ID == lastNodeDPMId && dpm.DPM_IsDeleted == false);

            if (deptProgramMapping.IsNotNull())
            {
                return deptProgramMapping.DPM_InstitutionNodeID;
            }
            return AppConsts.NONE;
        }
        /// <summary>
        /// Get the DeptProgramPackage of the change subscription 
        /// </summary>
        /// <param name="orderId"></param>
        /// <returns></returns>
        public DeptProgramPackage GetChangeSubscriptionSourceNode(Int32 orderId)
        {

            return _dbContext.Orders.Where(order => order.OrderID == orderId
                                           && order.IsDeleted == false).FirstOrDefault().DeptProgramPackage;
        }

        #endregion

        #region Private Methods

        /// <summary>
        /// Check if the current node is a Mobility Node
        /// </summary>
        /// <param name="selectedNodeId"></param>
        /// <returns></returns>
        private Boolean IsMobilityNode(Int32 selectedNodeId)
        {
            Boolean _isMobilityNode = false;
            InstHierarchyMobility _mobilityHierarchy = _dbContext.InstHierarchyMobilities
                      .Where(ihm => ihm.IHM_HierarchyID == selectedNodeId && ihm.IHM_IsActive && !ihm.IHM_IsDeleted).FirstOrDefault();
            if (_mobilityHierarchy.IsNotNull())
            {
                Int32 _miHierarchyMobilityID = _mobilityHierarchy.IHM_ID;
                _isMobilityNode = _mobilityHierarchy.MobilityInstances.Where(mi => mi.MI_IsActive == true && mi.MI_IsDeleted == false).Any();
            }

            return _isMobilityNode;
        }

        /// <summary>
        /// Get all the nodes which are Mobility Nodes
        /// </summary>
        /// <param name="lst"></param>
        /// <returns></returns>
        private IEnumerable<InstHierarchyMobility> GetMobilityNodes(List<DeptProgramMapping> lst)
        {
            List<InstHierarchyMobility> _lst = _dbContext.InstHierarchyMobilities
                     .Where(ihm => ihm.IHM_IsActive && !ihm.IHM_IsDeleted).ToList();

            foreach (var dpm in lst)
            {
                if (_lst.Where(ihm => ihm.IHM_HierarchyID == dpm.DPM_ID && ihm.IHM_IsActive && !ihm.IHM_IsDeleted)
                     .Join(_dbContext.MobilityInstances
                          .Where(mi => mi.MI_IsActive && !mi.MI_IsDeleted),
                           ihm => ihm.IHM_ID, mi => mi.MI_HierarchyMobilityID,
                          (ihm, mi) => new { ihm }).Select(m => m.ihm).Any())

                    yield return _lst.Where(ihm => ihm.IHM_HierarchyID == dpm.DPM_ID && ihm.IHM_IsActive && !ihm.IHM_IsDeleted).FirstOrDefault();
            }
        }

        /// <summary>
        /// Get the Duration in Days of all mobility nodes having greater then current node
        /// </summary>
        /// <param name="actualNodeDuration"></param>
        /// <param name="lstInstHierarchyMobility"></param>
        /// <returns></returns>
        private IEnumerable<InstHierarchyMobility> GetMobilityNodeDurationInDays(Int32 durationCovered, List<InstHierarchyMobility> lstInstHierarchyMobility, Int32
            currentNodeId)
        {
            foreach (var instHierarchyMobility in lstInstHierarchyMobility)
            {
                if (instHierarchyMobility.IHM_HierarchyID != currentNodeId)
                {
                    instHierarchyMobility.DurationInDays = Convert.ToInt32(_dbContext.ConvertMobilityNodeDurationToDays(instHierarchyMobility.IHM_Duration, instHierarchyMobility.IHM_DurationTypeID).FirstOrDefault());
                    if (durationCovered < instHierarchyMobility.DurationInDays)
                        yield return instHierarchyMobility;
                }
            }
        }

        #endregion

        #endregion

        #region Order Queue And Order Detail Screen

        /// <summary>
        /// Gets the list Of Active Orders filtered on the bases of statuses.
        /// </summary>
        /// <param name="lstStatusCode">List Of Status Code</param>
        /// <returns>Query for fetching active orders</returns>
        public IQueryable<vwOrderDetail> GetOrderDetailList(List<String> lstStatusCode, Int32 currentUserId)
        {
            if (lstStatusCode.Count() > 0)
            {
                return _dbContext.vwOrderDetails.Where(obj => lstStatusCode.Contains(obj.OrderStatusCode) && obj.OrganizationUserID == currentUserId);
            }
            else
            {
                return _dbContext.vwOrderDetails.Where(obj => obj.OrganizationUserID == currentUserId).OrderByDescending(od => od.OrderId);
            }
        }

        /// <summary>
        /// Returns the list of the Orders, for which Rush Order can be placed
        /// </summary>
        /// <returns></returns>
        public List<Int32> GetPossibleRushOrderIds(List<vwOrderDetail> lstOrderDetails)
        {

            List<Int32> _lstTemp = new List<Int32>();
            List<DeptProgramPackageSubscription> _lstSubscriptions = _dbContext.DeptProgramPackageSubscriptions.Where(dpps => dpps.DPPS_IsDeleted == false).ToList();

            foreach (var order in lstOrderDetails)
            {
                if (_lstSubscriptions.Where(dpps => dpps.DPPS_SubscriptionID == order.SubscriptionOptionID
                          && dpps.DPPS_DeptProgramPackageID == order.DeptProgramPackageID
                          && !String.IsNullOrEmpty(Convert.ToString(dpps.DPPS_RushOrderAdditionalPrice)) && dpps.DPPS_RushOrderAdditionalPrice != 0).Any())
                {
                    _lstTemp.Add(order.OrderId);
                }
            }
            return _lstTemp;
        }


        /// <summary>
        /// Gets the details for the given Order Id.
        /// </summary>
        /// <param name="orderId">Order Id</param>
        /// <returns></returns>
        public OrderPaymentDetail GetOrderDetailById(Int32 orderId)
        {
            OrderPaymentDetail _orderPaymentDetails = _dbContext.OrderPaymentDetails
                                                        .Include("Order")
                                                        .Include("Order.PackageSubscriptions")
                                                        .Include("Order.OrganizationUserProfile")
                                                        .Include("Order.OrganizationUserProfile.AddressHandle.Addresses")
                                                        .Include("Order.lkpPaymentOption")
                                                        .Include("Order.DeptProgramPackage.CompliancePackage")
                                                        .Include("Order.DeptProgramPackage.DeptProgramMapping")
                                                        .Include("Order.DeptProgramPackage.DeptProgramPackageSubscriptions")
                                                        .Include("Order.lkpOrderStatu")
                                                        .Include("Order.lkpOrderPackageType")
                                                        .Include("Order.DeptProgramMapping")
                                                        .Include("OnlinePaymentTransaction")
                                                        .FirstOrDefault(obj => obj.OPD_OrderID == orderId && obj.OPD_IsDeleted == false);

            if (_orderPaymentDetails.IsNullOrEmpty())
            {
                _orderPaymentDetails = new OrderPaymentDetail();

                Order _order = _dbContext.Orders.Include("PackageSubscriptions")
                             .Include("OrganizationUserProfile")
                             .Include("OrganizationUserProfile.AddressHandle.Addresses")
                             .Include("lkpPaymentOption")
                             .Include("DeptProgramPackage.CompliancePackage")
                             .Include("DeptProgramPackage.DeptProgramMapping")
                             .Include("DeptProgramPackage.DeptProgramPackageSubscriptions")
                             .Include("lkpOrderStatu")
                             .Include("DeptProgramMapping")
                             .Include("OrderPaymentDetails.OnlinePaymentTransaction")
                             .FirstOrDefault(ord => ord.OrderID == orderId && ord.IsDeleted == false);

                // Resolved Issue 3: Getting exception when admin approve an invoice order from order queue grid. 
                //Assigned OnlinePaymentTransaction and CreatedOn date to OrderPaymentDetail because these are not null in OrderPaymentDetail
                OnlinePaymentTransaction _onlinePaymentTransaction = new OnlinePaymentTransaction();
                _onlinePaymentTransaction.CreatedOn = DateTime.Now;

                _orderPaymentDetails.OPD_OrderID = _order.OrderID;
                _orderPaymentDetails.Order = _order;
                _orderPaymentDetails.OPD_CreatedOn = DateTime.Now;
                _orderPaymentDetails.OnlinePaymentTransaction = _onlinePaymentTransaction;

            }

            return _orderPaymentDetails;
        }

        /// <summary>
        /// Gets the successfull Online Payment Transaction details, for an Order
        /// </summary>
        /// <param name="orderId">Order Id</param>
        /// <returns></returns>
        public OnlinePaymentTransaction GetSuccessfullOrderPaymentDetails(Int32 orderId)
        {
            var _orderPaymentDetails = _dbContext.OrderPaymentDetails
                             .Include("OnlinePaymentTransaction")
                             .Where(ord => ord.OPD_OrderID == orderId && ord.OPD_IsDeleted == false).ToList();


            foreach (var opd in _orderPaymentDetails)
            {
                if (!opd.OnlinePaymentTransaction.CCNumber.IsNullOrEmpty() && !opd.OnlinePaymentTransaction.Trans_id.IsNullOrEmpty()
                      && opd.OnlinePaymentTransaction.Response_code == AppConsts.ONE)
                {
                    return opd.OnlinePaymentTransaction;
                }

            }
            return new OnlinePaymentTransaction();
        }

        /// <summary>
        /// Gets the Online payment transaction record by invoice number
        /// </summary>
        /// <param name="orderId">Order Id</param>
        /// <returns></returns>
        public OnlinePaymentTransaction GetOnlinePayTransactionByInvNum(String invoiceNumber)
        {
            return _dbContext.OnlinePaymentTransactions.Where(opt => opt.Invoice_num == invoiceNumber).FirstOrDefault();
        }

        /// <summary>
        /// Generates an entry for the Refund request in Order Details screen
        /// </summary>
        /// <param name="refundHistory"></param>
        public void AddRefundHistory(RefundHistory refundHistory)
        {
            _dbContext.RefundHistories.AddObject(refundHistory);
            _dbContext.SaveChanges();
        }

        /// <summary>
        /// Returns the list of Refunds associated with the current order
        /// </summary>
        /// <param name="orderId"></param>
        /// <returns></returns>
        public List<RefundHistory> GetRefundHistory(Int32 orderId)
        {
            return _dbContext.RefundHistories.Where(rh => rh.RH_IsDeleted == false && rh.RH_OrderID == orderId
                && rh.RH_IsSuccess == true).ToList();
        }

        public Boolean CheckIsInvoiceOnly(Int32 hierarchyId)
        {
            List<DeptProgramPaymentOption> deptProgramPaymentOption = _dbContext.DeptProgramPaymentOptions.Include("lkpPaymentOption").Where(x => x.DPPO_DeptProgramMappingID == hierarchyId && !x.DPPO_IsDeleted).ToList();
            if (deptProgramPaymentOption.Count == AppConsts.ONE)
            {
                if (deptProgramPaymentOption.Any(x => x.lkpPaymentOption.Code == PaymentOptions.InvoiceWithApproval.GetStringValue() || x.lkpPaymentOption.Code == PaymentOptions.InvoiceWithOutApproval.GetStringValue()))
                {
                    return true;
                }
            }
            else if (deptProgramPaymentOption.Count == AppConsts.TWO)
            {
                if (deptProgramPaymentOption.Any(x => x.lkpPaymentOption.Code == PaymentOptions.InvoiceWithApproval.GetStringValue()) && deptProgramPaymentOption.Any(x => x.lkpPaymentOption.Code == PaymentOptions.InvoiceWithOutApproval.GetStringValue()))
                {
                    return true;
                }
            }
            return false;
        }
        /// <summary>
        /// Gets the Package Subscription Details for the given Order Id.
        /// </summary>
        /// <param name="orderId">Order Id</param>
        /// <returns></returns>
        public PackageSubscription GetPackageSubscriptionDetailByOrderId(Int32 orderId)
        {
            return _dbContext.PackageSubscriptions
                .Include("Order")
                .Include("Order.OrganizationUserProfile")
                .Include("Order.lkpPaymentOption")
                .Include("CompliancePackage")
                .Include("Order.DeptProgramPackage.CompliancePackage")
                .Include("Order.DeptProgramPackage.DeptProgramMapping")
                .FirstOrDefault(obj => obj.OrderID == orderId && obj.IsDeleted == false);
        }
        /// <summary>
        /// Saves the reference number in th order table and changes th status from Pending paymnt Approved to Paid..
        /// </summary>
        /// <param name="orderId">Order Id</param>
        /// <param name="orderStatusCode">StatusCode to be updated</param>
        /// <param name="currentLoggedInUserId">CurrentLoggedInUserId</param>
        /// <param name="referenceNumber">Reference Number</param>
        /// <returns>True, if status is updated. Else false.</returns>
        public Boolean UpdateOrderStatus(Int32 orderId, String orderStatusCode, Int32 currentLoggedInUserId, String referenceNumber,
            List<lkpEventHistory> lstEvents, List<lkpOrderStatusType> lstOrderStatusType, Int32 tenantId, Int32 orderPaymentDetailId = 0)
        {
            Int32 orderStatusId = _dbContext.lkpOrderStatus.FirstOrDefault(x => x.Code.Equals(orderStatusCode) && x.IsDeleted == false).OrderStatusID;

            //OrderPaymentDetail orderPaymentDetail = _dbContext.OrderPaymentDetails.FirstOrDefault(x => x.OPD_OrderID == orderId && x.OPD_IsDeleted == false);
            var orderPaymentDetail = _dbContext.OrderPaymentDetails.FirstOrDefault(opd => opd.OPD_OrderID == orderId
                                                                                                && opd.OPD_IsDeleted == false
                                                                                                && opd.OPD_ID == orderPaymentDetailId);

            //For UAT -2379
            string paymentDueOrderStatus = ApplicantOrderStatus.Payment_Due.GetStringValue();
            Int32 paymentDueOrderStatusId = _dbContext.lkpOrderStatus.FirstOrDefault(x => x.Code.Equals(paymentDueOrderStatus) && x.IsDeleted == false).OrderStatusID;
            string offllineSettlementPaymentType = PaymentOptions.OfflineSettlement.GetStringValue();
            Int32 offllineSettlementPaymentTypeId = _dbContext.lkpPaymentOptions.FirstOrDefault(x => x.Code.Equals(offllineSettlementPaymentType) && x.IsDeleted == false).PaymentOptionID;



            if (orderPaymentDetail.IsNotNull())
            {
                var currentDateTime = DateTime.Now;
                // UAT -2379 , if payment due is getting approved in bulk, set paymenttype as offlinestatement
                if (orderPaymentDetail.OPD_OrderStatusID == paymentDueOrderStatusId && orderPaymentDetail.OPD_PaymentOptionID.IsNull())
                {
                    orderPaymentDetail.OPD_PaymentOptionID = offllineSettlementPaymentTypeId;
                }
                orderPaymentDetail.Order.ApprovedBy = currentLoggedInUserId;
                orderPaymentDetail.Order.ApprovalDate = currentDateTime;
                orderPaymentDetail.OPD_ReferenceNo = referenceNumber;
                orderPaymentDetail.Order.OrderStatusID = orderStatusId;
                orderPaymentDetail.Order.ModifiedByID = currentLoggedInUserId;
                orderPaymentDetail.Order.ModifiedOn = currentDateTime;
                orderPaymentDetail.OPD_ModifiedByID = currentLoggedInUserId;
                orderPaymentDetail.OPD_ModifiedOn = currentDateTime;
                orderPaymentDetail.OPD_OrderStatusID = orderStatusId; // UAT 916
                orderPaymentDetail.OPD_ApprovedBy = currentLoggedInUserId;
                orderPaymentDetail.OPD_ApprovalDate = currentDateTime;


                if (orderPaymentDetail.Order.RushOrderStatusID.IsNotNull() && orderPaymentDetail.Order.RushOrderStatusID != orderStatusId)
                    orderPaymentDetail.Order.RushOrderStatusID = orderStatusId;

                String _orderPackageTypeCode = orderPaymentDetail.Order.lkpOrderPackageType.OPT_Code;
                String _orderBKgPkgTypeCode = OrderPackageTypes.BACKGROUND_PACKAGE.GetStringValue();

                List<OrderPkgPaymentDetail> lstOrderPkgPaymentDetail = _dbContext.OrderPkgPaymentDetails.Where(cnd => cnd.lkpOrderPackageType.OPT_Code == _orderBKgPkgTypeCode
                                                                                                        && cnd.OPPD_IsDeleted == false
                                                                                                        && cnd.OrderPaymentDetail.OPD_OrderID == orderId
                                                                                                        && cnd.OrderPaymentDetail.OPD_IsDeleted == false).ToList();
                // Confirm
                if (orderStatusCode == ApplicantOrderStatus.Paid.GetStringValue() &&
                     (_orderPackageTypeCode == OrderPackageTypes.COMPLIANCE_AND_BACKGROUMD_PACKAGE.GetStringValue() ||
                     _orderPackageTypeCode == OrderPackageTypes.BACKGROUND_PACKAGE.GetStringValue()))
                {
                    Int32 _orderId = orderPaymentDetail.OPD_OrderID;
                    Int32 _bkgOrderStatusTypeId = lstOrderStatusType.Where(ost => ost.Code == BackgroundOrderStatus.NEW.GetStringValue()).FirstOrDefault().OrderStatusTypeID;
                    AddBkgOrderEventHistory(lstEvents, _orderId, currentLoggedInUserId, AppConsts.Bkg_Order_Approved, BkgOrderEvents.ORDER_APPROVED.GetStringValue()
                                            , orderPaymentDetailId, _bkgOrderStatusTypeId);
                }
                //_dbContext.SaveChanges();
                return true;
            }
            return false;
        }


        /// <summary>
        /// UAT-685 Implemented.
        /// </summary>
        public Boolean SaveScheduleTask(List<ScheduledTask> lstScheduleTask)
        {
            foreach (ScheduledTask scheduledTask in lstScheduleTask)
            {
                _dbContext.ScheduledTasks.AddObject(scheduledTask);
            }
            _dbContext.SaveChanges();
            return true;
        }

        /// <summary>
        /// Cancel the order with the staus Cancellation requested and updates the status to Cancelled.
        /// </summary>
        /// <param name="orderId"></param>
        /// <param name="orderStatusCode"></param>
        /// <param name="currentLoggedInUserId"></param>
        /// <param name="rejectionReason"></param>
        /// <param name="isCancelledByApplicant"></param>
        /// <param name="lstEventHistory"></param>
        /// <param name="orderPaymentDetailID"></param>
        /// <param name="IsCompliancePackageInclude"></param>
        /// <param name="isInstantCancellation"></param>
        /// <returns></returns>
        public Boolean CancelPlacedOrder(Int32 orderId, String orderStatusCode, Int32 currentLoggedInUserId, String rejectionReason, Boolean isCancelledByApplicant,
            List<lkpEventHistory> lstEventHistory = null, Int32? orderPaymentDetailID = null, Boolean? IsCompliancePackageInclude = null, Boolean isInstantCancellation = false, Boolean isLocationTenant = false)
        {
            Boolean IsTrackingOrder = false;
            Int32 TrackingPkgId = 0, ordPkgPaymentDetaildId = 0;
            string cancelledOrderStatusCode = "OSCNL";
            if (IsCompliancePackageInclude.IsNull() || IsCompliancePackageInclude.Value)
            {
                PackageSubscription packageSubscription = _dbContext.PackageSubscriptions.FirstOrDefault(obj => obj.OrderID == orderId && obj.IsDeleted == false);
                if (packageSubscription.IsNotNull())
                {
                    IsTrackingOrder = true;
                    //TrackingPkgId = packageSubscription.CompliancePackageID;
                    packageSubscription.IsDeleted = true;
                    packageSubscription.ModifiedByID = currentLoggedInUserId;
                    packageSubscription.ModifiedOn = DateTime.Now;
                }
            }
            Order order = _dbContext.Orders.FirstOrDefault(obj => obj.OrderID == orderId && obj.IsDeleted == false);
            Int32 orderStatusId = _dbContext.lkpOrderStatus.FirstOrDefault(x => x.Code.Equals(orderStatusCode) && x.IsDeleted == false).OrderStatusID;
            Int32 cancelledOrderStatusId = _dbContext.lkpOrderStatus.FirstOrDefault(x => x.Code.Equals(cancelledOrderStatusCode) && x.IsDeleted == false).OrderStatusID;
            List<OrderPaymentDetail> listOrderPaymentDetail = new List<OrderPaymentDetail>();
            Boolean _isAllBkgOrderPaymentCancel = false;

            String bkgOrderPackageTypeCode = OrderPackageTypes.BACKGROUND_PACKAGE.GetStringValue();
            String compOrderPackageTypeCode = OrderPackageTypes.COMPLIANCE_PACKAGE.GetStringValue();
            String comp_bkgOrderPackageTypeCode = OrderPackageTypes.COMPLIANCE_AND_BACKGROUMD_PACKAGE.GetStringValue();

            String orderCancelStatusCode = OrderStatusType.CANCELLED.GetStringValue();
            //UAT-916 changes aaded checks of orderPaymentDetailID to cancel only selected payment Detail.
            if (orderPaymentDetailID.IsNotNull())
            {
                listOrderPaymentDetail = _dbContext.OrderPaymentDetails.Where(cnd => cnd.OPD_ID == orderPaymentDetailID && !cnd.OPD_IsDeleted).ToList();
                _isAllBkgOrderPaymentCancel = !_dbContext.OrderPkgPaymentDetails.Any(x => !x.OPPD_IsDeleted && x.lkpOrderPackageType.OPT_Code == bkgOrderPackageTypeCode && x.OrderPaymentDetail.OPD_OrderID == orderId && !x.OrderPaymentDetail.OPD_IsDeleted && x.OrderPaymentDetail.lkpOrderStatu.Code != orderCancelStatusCode && x.OrderPaymentDetail.OPD_ID != orderPaymentDetailID);
            }
            else
            {
                listOrderPaymentDetail = _dbContext.OrderPaymentDetails.Where(cnd => cnd.OPD_OrderID == orderId && !cnd.OPD_IsDeleted).ToList();
                if (rejectionReason.IsNotNull())
                    order.RejectionReason = rejectionReason;

            }
            String _orderPackagetypecpde = order.lkpOrderPackageType.OPT_Code;
            String cancellationRequested = ApplicantOrderStatus.Cancellation_Requested.GetStringValue();
            //UAT-1269: As an applicant, I should not be able to cancel a screening order
            //UAT-2021: Auto Approve cancellation requests- Added isInstantCancellation check
            if (_orderPackagetypecpde == OrderPackageTypes.COMPLIANCE_AND_BACKGROUMD_PACKAGE.GetStringValue() && isCancelledByApplicant
                && (listOrderPaymentDetail.Any(cond => cond.lkpOrderStatu.Code == cancellationRequested) || isInstantCancellation))
            {
                foreach (OrderPaymentDetail eachOrderPaymentDetail in listOrderPaymentDetail)
                {
                    OrderPaymentDetailHistory orderPaymentDetailHistory = _dbContext.OrderPaymentDetailHistories.Where(x => x.OPDH_OrderPaymentDetailID == eachOrderPaymentDetail.OPD_ID
                                                                                              && x.OPDH_IsDeleted == false && x.OPDH_OrderStatusID != eachOrderPaymentDetail.OPD_OrderStatusID)
                                                                                              .OrderByDescending(x => x.OPDH_CreatedOn).FirstOrDefault();
                    if (orderPaymentDetailHistory.IsNotNull() && !isInstantCancellation)
                    {
                        eachOrderPaymentDetail.OPD_OrderStatusID = orderPaymentDetailHistory.OPDH_OrderStatusID;
                        eachOrderPaymentDetail.OPD_RejectionReason = rejectionReason;
                        eachOrderPaymentDetail.OPD_ModifiedByID = currentLoggedInUserId;
                        eachOrderPaymentDetail.OPD_ModifiedOn = DateTime.Now;
                    }
                }
                String partialOrderCancellationTypeCode = PartialOrderCancellationType.COMPLIANCE_PACKAGE.GetStringValue();
                Int32 partialOrderCancellationTypeID = _dbContext.lkpPartialOrderCancellationTypes.FirstOrDefault(
                                                                                cond => cond.Code == partialOrderCancellationTypeCode).PartialOrderCancellationTypeID;
                order.PartialOrderCancellationTypeID = partialOrderCancellationTypeID;
            }
            else
            {
                foreach (OrderPaymentDetail orderPaymentDetail in listOrderPaymentDetail)
                {
                    orderPaymentDetail.OPD_OrderStatusID = orderStatusId;
                    orderPaymentDetail.OPD_ModifiedByID = currentLoggedInUserId;
                    orderPaymentDetail.OPD_ModifiedOn = DateTime.Now;
                    if (rejectionReason.IsNotNull())
                        orderPaymentDetail.OPD_RejectionReason = rejectionReason;
                }
            }

            if (order.RushOrderStatusID.IsNotNull() && (IsCompliancePackageInclude.IsNull() || IsCompliancePackageInclude.Value))
                order.RushOrderStatusID = orderStatusId;
            order.ModifiedOn = DateTime.Now;
            order.ModifiedByID = currentLoggedInUserId;


            if ((orderPaymentDetailID.IsNull() && (_orderPackagetypecpde == OrderPackageTypes.COMPLIANCE_AND_BACKGROUMD_PACKAGE.GetStringValue() ||
                  _orderPackagetypecpde == OrderPackageTypes.BACKGROUND_PACKAGE.GetStringValue())) || (orderPaymentDetailID.IsNotNull() && _isAllBkgOrderPaymentCancel))
            {
                AddBkgOrderEventHistory(lstEventHistory, order.OrderID, currentLoggedInUserId, AppConsts.Bkg_Order_Rejected, BkgOrderEvents.ORDER_REJECTED.GetStringValue()
                                        , AppConsts.NONE, AppConsts.NONE);
            }
            //Commented Below code For UAT-916
            /* order = _dbContext.Orders.FirstOrDefault(obj => obj.OrderID == orderId && obj.IsDeleted == false);
             if (order.IsNotNull())
             {
                 order.OrderStatusID = orderStatusId;
                 order.ModifiedByID = currentLoggedInUserId;
                 order.ModifiedOn = DateTime.Now;
                 if (rejectionReason.IsNotNull())
                     order.RejectionReason = rejectionReason;
                 if (order.RushOrderStatusID.IsNotNull())
                     order.RushOrderStatusID = orderStatusId;

                 String _orderPackagetypecpde = order.lkpOrderPackageType.OPT_Code;

                 if (_orderPackagetypecpde == OrderPackageTypes.COMPLIANCE_AND_BACKGROUMD_PACKAGE.GetStringValue() ||
                    _orderPackagetypecpde == OrderPackageTypes.BACKGROUND_PACKAGE.GetStringValue())
                 {
                     AddBkgOrderEventHistory(lstEventHistory, order.OrderID, currentLoggedInUserId, AppConsts.Bkg_Order_Rejected, BkgOrderEvents.ORDER_REJECTED.GetStringValue());
                 }
             }*/

            #region Get Order Package IDs and OrderPkgPaymentDetailID for respective pkgs

            List<KeyValuePair<int, int>> OrdPkgIDsAndOrdPkgPayDetailslst = new List<KeyValuePair<int, int>>();
            if (_orderPackagetypecpde == compOrderPackageTypeCode)
            {
                TrackingPkgId = _dbContext.Orders
                    .Include("DeptProgramPackage")
                    .Include("DeptProgramPackage.CompliancePackage")
                    .Include("OrderPaymentDetails")
                    .Where(cond => cond.OrderID == orderId && !cond.IsDeleted).FirstOrDefault().DeptProgramPackage.CompliancePackage.CompliancePackageID;

                var ordPkgPaymentDetaildIdQuery = from or in _dbContext.Orders
                                                  join opd in _dbContext.OrderPaymentDetails on or.OrderID equals opd.OPD_OrderID
                                                  join oppd in _dbContext.OrderPkgPaymentDetails on opd.OPD_ID equals oppd.OPPD_OrderPaymentDetailID
                                                  where or.OrderID == orderId
                                                  && oppd.OPPD_BkgOrderPackageID == null
                                                  && opd.OPD_IsDeleted == false
                                                  && oppd.OPPD_IsDeleted == false
                                                  select new { oppd.OPPD_ID };
                ordPkgPaymentDetaildId = ordPkgPaymentDetaildIdQuery.FirstOrDefault().OPPD_ID;
                OrdPkgIDsAndOrdPkgPayDetailslst.Add(new KeyValuePair<int, int>(TrackingPkgId, ordPkgPaymentDetaildId));
            }
            if (_orderPackagetypecpde == bkgOrderPackageTypeCode)
            {

                var query = from ord in _dbContext.Orders
                            join bo in _dbContext.BkgOrders on ord.OrderID equals bo.BOR_MasterOrderID
                            join bop in _dbContext.BkgOrderPackages on bo.BOR_ID equals bop.BOP_BkgOrderID
                            join bphm in _dbContext.BkgPackageHierarchyMappings on bop.BOP_BkgPackageHierarchyMappingID equals bphm.BPHM_ID
                            join opd in _dbContext.OrderPaymentDetails on ord.OrderID equals opd.OPD_OrderID
                            join oppd in _dbContext.OrderPkgPaymentDetails on opd.OPD_ID equals oppd.OPPD_OrderPaymentDetailID
                            where ord.OrderID == orderId
                            && oppd.OPPD_BkgOrderPackageID != null
                            && bop.BOP_ID == oppd.OPPD_BkgOrderPackageID
                            && bo.BOR_IsDeleted == false && bop.BOP_IsDeleted == false && bphm.BPHM_IsDeleted == false
                            && opd.OPD_IsDeleted == false && oppd.OPPD_IsDeleted == false
                            select new
                            {
                                BPHM_BackgroundPackageID = bphm.BPHM_BackgroundPackageID,
                                OPPD_ID = oppd.OPPD_ID
                            };

                foreach (var x in query)
                {
                    OrdPkgIDsAndOrdPkgPayDetailslst.Add(new KeyValuePair<int, int>(x.BPHM_BackgroundPackageID, x.OPPD_ID));
                }
            }
            if (_orderPackagetypecpde == comp_bkgOrderPackageTypeCode)
            {
                TrackingPkgId = _dbContext.Orders
                    .Include("DeptProgramPackage")
                    .Include("DeptProgramPackage.CompliancePackage")
                    .Include("OrderPaymentDetails")
                    .Where(cond => cond.OrderID == orderId && !cond.IsDeleted).FirstOrDefault().DeptProgramPackage.CompliancePackage.CompliancePackageID;

                var ordPkgPaymentDetaildIdQuery = from or in _dbContext.Orders
                                                  join opd in _dbContext.OrderPaymentDetails on or.OrderID equals opd.OPD_OrderID
                                                  join oppd in _dbContext.OrderPkgPaymentDetails on opd.OPD_ID equals oppd.OPPD_OrderPaymentDetailID
                                                  where or.OrderID == orderId
                                                  && oppd.OPPD_BkgOrderPackageID == null
                                                  && opd.OPD_IsDeleted == false
                                                  && oppd.OPPD_IsDeleted == false
                                                  select new { oppd.OPPD_ID };
                ordPkgPaymentDetaildId = ordPkgPaymentDetaildIdQuery.FirstOrDefault().OPPD_ID;

                OrdPkgIDsAndOrdPkgPayDetailslst.Add(new KeyValuePair<int, int>(TrackingPkgId, ordPkgPaymentDetaildId));

                if (isCancelledByApplicant == false && isLocationTenant == false)
                {
                    var query = from ord in _dbContext.Orders
                                join bo in _dbContext.BkgOrders on ord.OrderID equals bo.BOR_MasterOrderID
                                join bop in _dbContext.BkgOrderPackages on bo.BOR_ID equals bop.BOP_BkgOrderID
                                join bphm in _dbContext.BkgPackageHierarchyMappings on bop.BOP_BkgPackageHierarchyMappingID equals bphm.BPHM_ID
                                join opd in _dbContext.OrderPaymentDetails on ord.OrderID equals opd.OPD_OrderID
                                join oppd in _dbContext.OrderPkgPaymentDetails on opd.OPD_ID equals oppd.OPPD_OrderPaymentDetailID
                                where ord.OrderID == orderId
                                && oppd.OPPD_BkgOrderPackageID != null
                                && bop.BOP_ID == oppd.OPPD_BkgOrderPackageID
                                && bo.BOR_IsDeleted == false && bop.BOP_IsDeleted == false && bphm.BPHM_IsDeleted == false
                                && opd.OPD_IsDeleted == false && oppd.OPPD_IsDeleted == false
                                select new
                                {
                                    BPHM_BackgroundPackageID = bphm.BPHM_BackgroundPackageID,
                                    OPPD_ID = oppd.OPPD_ID
                                };

                    foreach (var x in query)
                    {
                        OrdPkgIDsAndOrdPkgPayDetailslst.Add(new KeyValuePair<int, int>(x.BPHM_BackgroundPackageID, x.OPPD_ID));
                    }
                }

            }

            #endregion

            if (_dbContext.SaveChanges() > AppConsts.NONE)
            {
                var isAdded = false;
                OrdPkgIDsAndOrdPkgPayDetailslst
                .ForEach(item =>
                {
                    var pkgId = item.Key;
                    var oppId = item.Value;
                    if (!_dbContext.PackageCancellationHistories
                        .Where(x => x.PCH_PkgID == pkgId && x.PCH_OPPDID == oppId)
                        .Any())
                    {
                        PackageCancellationHistory pkgCancellationHistory = new PackageCancellationHistory()
                        {
                            PCH_CancelledByUserID = currentLoggedInUserId,
                            PCH_CreatedBy = currentLoggedInUserId,
                            PCH_CreatedOn = DateTime.Now,
                            PCH_IsDeleted = false,
                            PCH_PkgID = item.Key,
                            PCH_OrderId = order.OrderID,
                            PCH_OPPDID = item.Value,
                            PCH_IsPartialOrderCancelled = order.PartialOrderCancellationTypeID != null
                        };
                        _dbContext.PackageCancellationHistories.AddObject(pkgCancellationHistory);
                        isAdded = true;
                    }

                });

                if (isAdded)
                {
                    _dbContext.SaveChanges();
                }

                if (order.OrderPaymentDetails.All(x => x.OPD_OrderStatusID == cancelledOrderStatusId))
                {
                    _dbContext.PackageCancellationHistories.Where(x => x.PCH_OrderId == order.OrderID)
                        .ForEach(item =>
                            item.PCH_IsPartialOrderCancelled = false
                            );

                    _dbContext.SaveChanges();
                }
            }
            return true;
        }

        /// <summary>
        /// Adds the Event history for the Order, when Approved/Rejected by admin
        /// Also called when online order is being approved
        /// Currently only for Order Creation, Approved & Rejected (No other case)
        /// </summary>
        /// <param name="lstEvents"></param>
        /// <param name="_orderId"></param>
        /// <param name="currentLoggedInUserId"></param>
        /// <param name="bkgOrderStatusTypeId"></param>
        /// <param name="orderEventMessage"></param>
        /// <param name="orderEventCode"></param>
        private void AddBkgOrderEventHistory(List<lkpEventHistory> lstEvents, Int32 _orderId, Int32 currentLoggedInUserId,
            String orderEventMessage, String orderEventCode, Int32 orderPaymentDetailID, Int32 bkgOrderStatusTypeId)
        {
            BkgOrder _bkgOrder = _dbContext.BkgOrders.Where(bo => bo.BOR_MasterOrderID == _orderId && !bo.BOR_IsDeleted).FirstOrDefault();
            DateTime _dtCreationDateTime = DateTime.Now;

            if (!_bkgOrder.IsNullOrEmpty() && !lstEvents.IsNullOrEmpty())
            {
                // In Case of Payment Rejected, keep it Under PAYMENT_PENDING, bkgOrderStatusTypeId would be 0.
                if (bkgOrderStatusTypeId != AppConsts.NONE)
                {
                    //Check whether All Background Packages are Paid using View. View also contains check with BOP to consider Partial Cancelled Order.
                    if (orderPaymentDetailID != AppConsts.NONE && AreAllBkgPackagesPaid_ExceptOrderPaymentDetailID(_bkgOrder.BOR_ID, _bkgOrder.BOR_MasterOrderID,
                                                                                                                   orderPaymentDetailID)
                         && (_bkgOrder.lkpOrderStatusType.Code == OrderStatusType.PAYMENTPENDING.GetStringValue()))
                    {
                        _bkgOrder.BOR_OrderStatusTypeID = bkgOrderStatusTypeId;
                        _bkgOrder.BOR_ModifiedByID = currentLoggedInUserId;
                        _bkgOrder.BOR_ModifiedOn = _dtCreationDateTime;

                    }
                }

                Int32 _orderEventId = lstEvents.Where(ev => ev.EH_Code == orderEventCode && !ev.EH_IsDeleted).FirstOrDefault().EH_ID;
                BkgOrderEventHistory _bgkOrderEventHistory = new BkgOrderEventHistory
                {
                    BOEH_EventHistoryId = _orderEventId,
                    BOEH_BkgOrderID = _bkgOrder.BOR_ID,
                    BOEH_CreatedByID = currentLoggedInUserId,
                    BOEH_CreatedOn = _dtCreationDateTime,
                    BOEH_IsDeleted = false,
                    BOEH_OrderEventDetail = orderEventMessage
                };

                _dbContext.BkgOrderEventHistories.AddObject(_bgkOrderEventHistory);
            }
        }

        /// <summary>
        /// Request to Cancel the order with the staus Pending to Approve and updates the status to Cancellation requested.
        /// </summary>
        /// <param name="order">order entity object</param>
        /// <param name="orderStatuscode">StatusCode to be updated</param>
        /// <param name="isNewOrder">Identifies, whether the order is New order/New RushOrder or not,
        /// as Currently Events are captured ONLY are for BKG NEW ORDERS,APPROVED & REJECTED</param>
        /// <param name="lstOrderEvents"></param>
        /// <returns>True/False</returns>
        public Order UpdateOrderByOrderID(Order order, String orderStatuscode, Boolean isNewOrder = false,
            List<lkpEventHistory> lstOrderEvents = null, List<lkpOrderStatusType> lstBkgOrderStatusTypes = null,
            Int32 orderPaymentDetailId = 0, Boolean isRushOrderForExistingOrder = false)
        {
            var orderExist = _dbContext.Orders.FirstOrDefault(x => x.OrderID == order.OrderID && x.IsDeleted == false);
            List<OrderPaymentDetail> tempOrderPaymentDetailList = new List<OrderPaymentDetail>();
            if (orderExist.IsNotNull())
            {
                var _currentDateTime = DateTime.Now;
                tempOrderPaymentDetailList = _dbContext.OrderPaymentDetails.Where(cnd => cnd.OPD_OrderID == orderExist.OrderID && !cnd.OPD_IsDeleted).ToList();
                var _opdToUpdate = new OrderPaymentDetail();

                if (orderStatuscode.IsNotNull())
                {
                    Int32 orderStatusId = _dbContext.lkpOrderStatus.FirstOrDefault(x => x.Code == orderStatuscode).OrderStatusID;
                    /*UAt-916
                    orderExist.OrderStatusID = orderStatusId;
                    order.OrderStatusID = orderStatusId;*/
                    //Update all order payments of corresponding order with status Cancellation_Requested by applicant.
                    if (orderPaymentDetailId == 0)
                    {
                        tempOrderPaymentDetailList.ForEach(x =>
                        {
                            x.OPD_OrderStatusID = orderStatusId;
                            x.OPD_ModifiedByID = order.ModifiedByID;
                            x.OPD_ModifiedOn = _currentDateTime;
                        });
                    }
                    else
                    {
                        _opdToUpdate = tempOrderPaymentDetailList.Where(opd => opd.OPD_ID == orderPaymentDetailId).First();
                        _opdToUpdate.OPD_OrderStatusID = orderStatusId;
                        _opdToUpdate.OPD_ModifiedByID = order.ModifiedByID;
                        _opdToUpdate.OPD_ModifiedOn = _currentDateTime;
                        //orderExist.OrderStatusID = orderStatusId;
                        //order.OrderStatusID = orderStatusId; //TO DO
                        if (order.OrderPaymentDetails.IsNull())
                        {
                            order.OrderPaymentDetails = new System.Data.Entity.Core.Objects.DataClasses.EntityCollection<OrderPaymentDetail>();
                            order.OrderPaymentDetails.Add(_opdToUpdate); // Test If OrderPkgDetails are also assigned
                        }
                    }
                }

                //if (order.ApprovalDate.IsNotNull())
                if (orderPaymentDetailId > AppConsts.NONE && !isRushOrderForExistingOrder)
                {
                    _opdToUpdate.OPD_ApprovalDate = order.ApprovalDate;
                    _opdToUpdate.OPD_ApprovedBy = order.ModifiedByID;
                }

                if (order.RushOrderStatusID.IsNotNull()) // Update the OPD for Rush Order
                {
                    orderExist.RushOrderStatusID = order.RushOrderStatusID;
                    _opdToUpdate.OPD_ApprovalDate = _currentDateTime;
                    _opdToUpdate.OPD_ApprovedBy = order.ModifiedByID;
                }

                orderExist.ModifiedByID = order.ModifiedByID;
                orderExist.ModifiedOn = _currentDateTime;

                // Add order history only in case
                // 1. It is New Online order or New Rush Order - Identified by 'isNewOrder' AND
                // 2. It contains Background packages AND
                // 3. List of Possible events is not null
                if (orderExist.lkpOrderPackageType.OPT_Code != OrderPackageTypes.COMPLIANCE_PACKAGE.GetStringValue() &&
                    isNewOrder && !lstOrderEvents.IsNullOrEmpty() && !lstBkgOrderStatusTypes.IsNullOrEmpty())
                {
                    if (orderStatuscode == ApplicantOrderStatus.Paid.GetStringValue())
                    {
                        Int32 _bkgOrderStatusTypeId = lstBkgOrderStatusTypes.Where(ost => ost.Code == BackgroundOrderStatus.NEW.GetStringValue()).FirstOrDefault().OrderStatusTypeID;
                        AddBkgOrderEventHistory(lstOrderEvents, orderExist.OrderID, Convert.ToInt32(order.ModifiedByID), AppConsts.Bkg_Order_Approved,
                                                BkgOrderEvents.ORDER_APPROVED.GetStringValue(), orderPaymentDetailId, _bkgOrderStatusTypeId);
                    }
                    else if (orderStatuscode == ApplicantOrderStatus.Payment_Rejected.GetStringValue())
                        AddBkgOrderEventHistory(lstOrderEvents, orderExist.OrderID, Convert.ToInt32(order.ModifiedByID), AppConsts.Bkg_Order_Rejected
                                                , BkgOrderEvents.ORDER_REJECTED.GetStringValue(), orderPaymentDetailId, AppConsts.NONE);
                }
                _dbContext.SaveChanges();
            }
            return orderExist;
        }

        /// <summary>
        /// UpdateOrderPayment.
        /// </summary>
        /// <param name="applicantOrderCart">applicantOrderCart</param>      
        public void UpdateOrderPayment(ApplicantOrderCart applicantOrderCart, Int32 orgUserID)
        {
            int _modifyShippingSentforOnline = _dbContext.lkpOrderStatus.Where(x => x.Code == "OSPMS").FirstOrDefault().OrderStatusID;
            int orderId = applicantOrderCart.lstApplicantOrder[0].OrderId;

            List<OrderPaymentDetail> tempOrderPaymentDetailList = new List<OrderPaymentDetail>();
            tempOrderPaymentDetailList = _dbContext.OrderPaymentDetails.Where(cnd => cnd.OPD_OrderID == orderId && cnd.OPD_OrderStatusID == _modifyShippingSentforOnline && !cnd.OPD_IsDeleted).ToList();

            if (tempOrderPaymentDetailList.Count > 0)
            {
                foreach (var item in tempOrderPaymentDetailList)
                {
                    item.OPD_IsDeleted = true;
                    item.OPD_ModifiedOn = DateTime.Now;
                    item.OPD_ModifiedByID = orgUserID;
                }
            }
            _dbContext.SaveChanges();
        }

        /// <summary>
        /// Rejects the cancellation request and updates the order its previous status.
        /// </summary>
        /// <param name="orderId">Order id</param>
        /// <param name="currentLoggedInUserId">currentLoggedInUserId</param>
        /// <param name="rejectionReason">Rejection Reason</param>
        /// <returns>True if order is updated</returns>
        public Boolean RejectCancellationRequest(Int32 orderId, Int32 currentLoggedInUserId, String rejectionReason)
        {
            Order order = _dbContext.Orders.FirstOrDefault(x => x.OrderID == orderId && x.IsDeleted == false);
            if (order.IsNotNull())
            {
                List<OrderPaymentDetail> lstOrderpaymentdetail = _dbContext.OrderPaymentDetails.Where(x => x.OPD_OrderID == order.OrderID && x.OPD_IsDeleted == false).ToList();
                foreach (OrderPaymentDetail eachOrderPaymentDetail in lstOrderpaymentdetail)
                {
                    OrderPaymentDetailHistory orderPaymentDetailHistory = _dbContext.OrderPaymentDetailHistories.Where(x => x.OPDH_OrderPaymentDetailID == eachOrderPaymentDetail.OPD_ID && x.OPDH_IsDeleted == false && x.OPDH_OrderStatusID != eachOrderPaymentDetail.OPD_OrderStatusID).OrderByDescending(x => x.OPDH_CreatedOn).FirstOrDefault();
                    if (orderPaymentDetailHistory.IsNotNull())
                    {
                        eachOrderPaymentDetail.OPD_OrderStatusID = orderPaymentDetailHistory.OPDH_OrderStatusID;
                        eachOrderPaymentDetail.OPD_RejectionReason = rejectionReason;
                        eachOrderPaymentDetail.OPD_ModifiedByID = currentLoggedInUserId;
                        eachOrderPaymentDetail.OPD_ModifiedOn = DateTime.Now;
                    }
                    //OrderHistory orderHistory = _dbContext.OrderHistories.Where(x => x.OrderID == orderId && x.IsDeleted == false && x.OrderStatusID != order.OrderStatusID).OrderByDescending(x => x.CreatedOn).FirstOrDefault();
                    //if (orderHistory.IsNotNull())
                    //{
                    //    order.OrderStatusID = orderHistory.OrderStatusID;
                    //    order.RejectionReason = rejectionReason;
                    //    order.ModifiedByID = currentLoggedInUserId;
                    //    order.ModifiedOn = DateTime.Now;
                    //    _dbContext.SaveChanges();
                    //    return true;
                    //}
                }
                if (_dbContext.SaveChanges() > AppConsts.NONE)
                    return true;
            }
            return false;
        }

        /// <summary>
        /// check Package Subscription Details for the given orderids.
        /// </summary>
        /// <param name="orderId">Order Id List</param>
        /// <returns></returns>
        public Boolean IsPackageSubscribedForOrderIds(List<Int32> orderIds)
        {
            return _dbContext.PackageSubscriptions.Any(cond => orderIds.Contains(cond.OrderID.Value) && !cond.IsDeleted);
        }

        #endregion

        #region Subscription

        public IQueryable<vwSubscription> GetSubscriptionList(Int32 currentUserId)
        {
            return _dbContext.vwSubscriptions.Where(x => x.OrganizationUserID == currentUserId);
        }

        #endregion

        #region Client Setings

        public List<ClientSetting> GetClientSetting(Int32 tenantId)
        {
            try
            {
                return _dbContext.ClientSettings.Where(cond => cond.CS_TenantID == tenantId && cond.CS_IsDeleted == false).ToList();
            }
            catch (SysXException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw (new SysXException(ex.Message, ex));
            }
        }

        public Boolean AddClientSetting(ClientSetting clientSetting)
        {
            _dbContext.ClientSettings.AddObject(clientSetting);
            if (_dbContext.SaveChanges() > 0)
                return true;
            else
                return false;
        }

        public Boolean UpdateClientSetting()
        {
            if (_dbContext.SaveChanges() > 0)
                return true;
            else
                return false;
        }

        public Boolean GetReviewPackageMappingEveryTransitionValue(Int32 tenantId, String code)
        {
            try
            {
                ClientSetting clientSetting = _dbContext.ClientSettings.Where(cond => cond.CS_TenantID == tenantId && !cond.CS_IsDeleted && cond.lkpSetting.Code.Equals(code)).FirstOrDefault();
                if (clientSetting.IsNotNull())
                {
                    if (clientSetting.CS_SettingValue.Contains("true") || clientSetting.CS_SettingValue.Contains("false"))
                    {
                        return Convert.ToBoolean(clientSetting.CS_SettingValue);
                    }
                    else
                    {
                        return Convert.ToBoolean(Convert.ToInt32(clientSetting.CS_SettingValue));
                    }
                }
                return true;
            }
            catch (SysXException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw (new SysXException(ex.Message, ex));
            }
        }

        public Boolean GetAutoApprovalTransition(Int32 tenantId, String code)
        {
            try
            {
                ClientSetting clientSetting = _dbContext.ClientSettings.Where(cond => cond.CS_TenantID == tenantId && !cond.CS_IsDeleted && cond.lkpSetting.Code.Equals(code)).FirstOrDefault();
                if (clientSetting.IsNotNull())
                {
                    if (clientSetting.CS_SettingValue.Contains("true") || clientSetting.CS_SettingValue.Contains("false"))
                    {
                        return Convert.ToBoolean(clientSetting.CS_SettingValue);
                    }
                    else
                    {
                        return Convert.ToBoolean(Convert.ToInt32(clientSetting.CS_SettingValue));
                    }
                }
                return true;
            }
            catch (SysXException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw (new SysXException(ex.Message, ex));
            }
        }

        public Int32 GetPendingPackageFrequencyDays(Int32 tenantId, String code)
        {
            try
            {
                ClientSetting clientSetting = _dbContext.ClientSettings.Where(cond => cond.CS_TenantID == tenantId && !cond.CS_IsDeleted && cond.lkpSetting.Code.Equals(code)).FirstOrDefault();
                if (clientSetting.IsNotNull())
                {
                    return Convert.ToInt32(clientSetting.CS_SettingValue == "0" ? "15" : clientSetting.CS_SettingValue);
                }
                return 15;
            }
            catch (SysXException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw (new SysXException(ex.Message, ex));
            }
        }

        public Int32 GetSubscriptionNotificationBeforeExpiryDays(Int32 tenantId, String code)
        {
            try
            {
                ClientSetting clientSetting = _dbContext.ClientSettings.Where(cond => cond.CS_TenantID == tenantId && !cond.CS_IsDeleted && cond.lkpSetting.Code.Equals(code)).FirstOrDefault();
                if (clientSetting.IsNotNull())
                {
                    return Convert.ToInt32(clientSetting.CS_SettingValue == "0" ? "30" : clientSetting.CS_SettingValue);
                }
                return 30;
            }
            catch (SysXException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw (new SysXException(ex.Message, ex));
            }
        }

        public Int32 GetSubscriptionNotificationAfterExpiryDays(Int32 tenantId, String code)
        {
            try
            {
                ClientSetting clientSetting = _dbContext.ClientSettings.Where(cond => cond.CS_TenantID == tenantId && !cond.CS_IsDeleted && cond.lkpSetting.Code.Equals(code)).FirstOrDefault();
                if (clientSetting.IsNotNull())
                {
                    return Convert.ToInt32(clientSetting.CS_SettingValue == "0" ? "30" : clientSetting.CS_SettingValue);
                }
                return 30;
            }
            catch (SysXException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw (new SysXException(ex.Message, ex));
            }
        }

        public List<SubscriptionFrequency> GetSubscriptionNotificationFrequencyDays()
        {
            try
            {
                EntityConnection connection = _dbContext.Connection as EntityConnection;
                using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
                {
                    SqlCommand command = new SqlCommand("usp_GetSupscriptionFrequency", con);
                    command.CommandType = CommandType.StoredProcedure;
                    SqlDataAdapter adp = new SqlDataAdapter();
                    adp.SelectCommand = command;
                    DataSet ds = new DataSet();
                    adp.Fill(ds);
                    if (ds.Tables.Count > 0)
                    {
                        List<SubscriptionFrequency> lstSubscriptionFrequency = new List<SubscriptionFrequency>();
                        lstSubscriptionFrequency = ds.Tables[0].AsEnumerable().Select(col =>
                              new SubscriptionFrequency
                              {
                                  DPM_ID = Convert.ToInt32(col["DeptProgramMappingID"]),
                                  CompliancePackageID = Convert.ToInt32(col["CompliancePackageID"]),
                                  DPM_SubscriptionAfterExpFrequency = Convert.ToInt32(col["DPM_SubscriptionAfterExpFrequency"]),
                                  DPM_SubscriptionBeforeExpFrequency = Convert.ToInt32(col["DPM_SubscriptionBeforeExpFrequency"]),
                                  DPM_SubscriptionEmailFrequency = Convert.ToInt32(col["DPM_SubscriptionEmailFrequency"]),
                                  DPM_Label = col["DPM_Label"] == DBNull.Value ? String.Empty : Convert.ToString(col["DPM_Label"]),
                                  PackageLabel = col["PackageLabel"] == DBNull.Value ? String.Empty : Convert.ToString(col["PackageLabel"]),
                                  PackageName = col["PackageName"] == DBNull.Value ? String.Empty : Convert.ToString(col["PackageName"]),

                              }).ToList();
                        return lstSubscriptionFrequency;
                    }
                    return new List<SubscriptionFrequency>();
                }
            }
            catch (SysXException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw (new SysXException(ex.Message, ex));
            }
        }

        public Int32 GetComplianceNotificationBeforeExpiryDays(Int32 tenantId, String code)
        {
            try
            {
                ClientSetting clientSetting = _dbContext.ClientSettings.Where(cond => cond.CS_TenantID == tenantId && !cond.CS_IsDeleted && cond.lkpSetting.Code.Equals(code)).FirstOrDefault();
                if (clientSetting.IsNotNull())
                {
                    return Convert.ToInt32(clientSetting.CS_SettingValue == "0" ? "30" : clientSetting.CS_SettingValue);
                }
                return 30;
            }
            catch (SysXException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw (new SysXException(ex.Message, ex));
            }
        }

        public Int32 GetComplianceNotificationFrequencyDays(Int32 tenantId, String code)
        {
            try
            {
                ClientSetting clientSetting = _dbContext.ClientSettings.Where(cond => cond.CS_TenantID == tenantId && !cond.CS_IsDeleted && cond.lkpSetting.Code.Equals(code)).FirstOrDefault();
                if (clientSetting.IsNotNull())
                {
                    return Convert.ToInt32(clientSetting.CS_SettingValue == "0" ? "15" : clientSetting.CS_SettingValue);
                }
                return 15;
            }
            catch (SysXException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw (new SysXException(ex.Message, ex));
            }
        }

        public Boolean GetRushOrderValue(Int32 tenantId, String code)
        {
            try
            {
                ClientSetting clientSetting = _dbContext.ClientSettings.Where(cond => cond.CS_TenantID == tenantId && !cond.CS_IsDeleted && cond.lkpSetting.Code.Equals(code)).FirstOrDefault();
                if (clientSetting.IsNotNull())
                {
                    if (clientSetting.CS_SettingValue.Contains("true") || clientSetting.CS_SettingValue.Contains("false"))
                    {
                        return Convert.ToBoolean(clientSetting.CS_SettingValue);
                    }
                    else
                    {
                        return Convert.ToBoolean(Convert.ToInt32(clientSetting.CS_SettingValue));
                    }
                }
                return false;
            }
            catch (SysXException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw (new SysXException(ex.Message, ex));
            }
        }

        public Boolean GetRushOrderForInvoiceValue(Int32 tenantId, String code)
        {
            try
            {
                ClientSetting clientSetting = _dbContext.ClientSettings.Where(cond => cond.CS_TenantID == tenantId && !cond.CS_IsDeleted && cond.lkpSetting.Code.Equals(code)).FirstOrDefault();
                if (clientSetting.IsNotNull())
                {
                    if (clientSetting.CS_SettingValue.Contains("true") || clientSetting.CS_SettingValue.Contains("false"))
                    {
                        return Convert.ToBoolean(clientSetting.CS_SettingValue);
                    }
                    else
                    {
                        return Convert.ToBoolean(Convert.ToInt32(clientSetting.CS_SettingValue));
                    }
                }
                return false;
            }
            catch (SysXException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw (new SysXException(ex.Message, ex));
            }
        }

        public Int32 GetMobilityInstanceLeadDays(Int32 tenantId, String code)
        {
            try
            {
                ClientSetting clientSetting = _dbContext.ClientSettings.Where(cond => cond.CS_TenantID == tenantId && !cond.CS_IsDeleted && cond.lkpSetting.Code.Equals(code)).FirstOrDefault();
                if (clientSetting.IsNotNull())
                {
                    return Convert.ToInt32(clientSetting.CS_SettingValue == "0" ? "15" : clientSetting.CS_SettingValue);
                }
                return 15;
            }
            catch (SysXException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw (new SysXException(ex.Message, ex));
            }
        }

        public Int32 GetMobilityTansitionLeadDays(Int32 tenantId, String code)
        {
            try
            {
                ClientSetting clientSetting = _dbContext.ClientSettings.Where(cond => cond.CS_TenantID == tenantId && !cond.CS_IsDeleted && cond.lkpSetting.Code.Equals(code)).FirstOrDefault();
                if (clientSetting.IsNotNull())
                {
                    return Convert.ToInt32(clientSetting.CS_SettingValue == "0" ? "10" : clientSetting.CS_SettingValue);
                }
                return 10;
            }
            catch (SysXException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw (new SysXException(ex.Message, ex));
            }
        }

        #region Uat-646
        public List<GetPaymentOptions> GetPaymentOptions()
        {
            try
            {
                return _dbContext.usp_GetPaymentOptions().ToList();
            }
            catch (SysXException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw (new SysXException(ex.Message, ex));
            }
        }

        public Boolean UpdatePaymentOptions(List<GetPaymentOptions> newPaymentOption, Int32 loggedInUser)
        {
            try
            {
                List<lkpPaymentOption> oldPaymentOption = _dbContext.lkpPaymentOptions.ToList();
                foreach (lkpPaymentOption item in oldPaymentOption)
                {
                    String newOption = newPaymentOption.Where(code => code.Code == item.Code).Select(code => code.TenantName).FirstOrDefault();
                    if (!newOption.IsNullOrEmpty())
                    {
                        if (item.Name != newOption)
                        {
                            item.Name = newOption;
                            item.ModifiedByID = loggedInUser;
                            item.ModifiedOn = DateTime.Now;
                        }
                    }
                }
                return _dbContext.SaveChanges() > 0;
            }
            catch (SysXException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw (new SysXException(ex.Message, ex));
            }
        }

        #endregion

        #endregion

        #region Package Subscription

        public List<ReminderContract> GetExpiryPackageSubscriptions(String entitySetName, Int32 chunkSize)
        {
            try
            {
                String code = LkpSubscriptionMobilityStatus.MobilitySwitched;

                Int32 subscriptionMobilityStatusID = _dbContext.lkpSubscriptionMobilityStatus.Where(item => !item.IsDeleted && item.Code.Equals(code)).FirstOrDefault().SubscriptionMobilityStatusID;
                String archieveStateCode = ArchiveState.Active.GetStringValue();
                Int32 archieveStateId = _dbContext.lkpArchiveStates.Where(cond => cond.AS_Code == archieveStateCode && !cond.AS_IsDeleted).FirstOrDefault().AS_ID;
                //UAT-4060 : Updates to client settings screen to have hierarchy overrides of Compliance Notification Settings and Subscription Notification Settings

                EntityConnection connection = _dbContext.Connection as EntityConnection;
                using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
                {
                    SqlCommand command = new SqlCommand("usp_GetExpiryPackageSubscriptions", con);
                    command.CommandType = CommandType.StoredProcedure;
                    //command.Parameters.AddWithValue("@BeforeExpiry", beforeExpiry);
                    //command.Parameters.AddWithValue("@ExpiryFrequency", expiryFrequency);
                    command.Parameters.AddWithValue("@EntitySetName", entitySetName);
                    command.Parameters.AddWithValue("@ChunkSize", chunkSize);
                    command.Parameters.AddWithValue("@ArchieveStateId", archieveStateId);
                    command.Parameters.AddWithValue("@SubscriptionMobilityStatusID", subscriptionMobilityStatusID);

                    SqlDataAdapter adp = new SqlDataAdapter();
                    adp.SelectCommand = command;
                    DataSet ds = new DataSet();
                    adp.Fill(ds);
                    if (ds.Tables.Count > 0)
                    {
                        List<ReminderContract> lstReminder = new List<ReminderContract>();
                        lstReminder = ds.Tables[0].AsEnumerable().Select(col =>
                              new ReminderContract
                              {
                                  OrganizationUserID = Convert.ToInt32(col["OrganizationUserId"]),
                                  ExpiryDate = Convert.ToDateTime(col["ExpiryDate"]),
                                  HierarchyNodeID = Convert.ToInt32(col["HierarchyNodeID"]),
                                  //DateOfBirth = Convert.ToDateTime(col["DateOfBirth"]),
                                  FirstName = col["FirstName"] == DBNull.Value ? String.Empty : Convert.ToString(col["FirstName"]),
                                  PrimaryEmailAddress = col["PrimaryEmailAddress"] == DBNull.Value ? String.Empty : Convert.ToString(col["PrimaryEmailAddress"]),
                                  LastName = col["LastName"] == DBNull.Value ? String.Empty : Convert.ToString(col["LastName"]),
                                  NodeHierarchy = col["NodeHierarchy"] == DBNull.Value ? String.Empty : Convert.ToString(col["NodeHierarchy"]),
                                  OrderDate = Convert.ToDateTime(col["OrderDate"]),
                                  OrderNumber = col["OrderNumber"] == DBNull.Value ? String.Empty : Convert.ToString(col["OrderNumber"]),
                                  PackageSubscriptionID = Convert.ToInt32(col["PackageSubscriptionID"]),
                                  PackageName = col["PackageName"] == DBNull.Value ? String.Empty : Convert.ToString(col["PackageName"]), //UAT-2949
                                  OrderID = Convert.ToInt32(col["OrderID"]),
                              }).ToList();
                        return lstReminder;
                    }
                    return new List<ReminderContract>();


                    //List<Int32> pckgIds = (from ps in _dbContext.PackageSubscriptions
                    //                       join nd in _dbContext.NotificationDeliveries
                    //                       on ps.PackageSubscriptionID equals nd.ND_EntityId
                    //                       where nd.ND_EntityName == entitySetName && EntityFunctions.DiffDays(nd.ND_CreatedOn, DateTime.Now) < expiryFrequency
                    //                       && ps.ExpiryDate >= today && ps.ExpiryDate <= beforeExpiry && !nd.ND_IsDeleted && !ps.IsDeleted
                    //                       select ps.PackageSubscriptionID).Distinct().ToList();

                    //List<ReminderContract> lstReminder = (from ps in _dbContext.PackageSubscriptions
                    //                                      join orgusr in _dbContext.OrganizationUsers on ps.OrganizationUserID equals orgusr.OrganizationUserID
                    //                                      join cp in _dbContext.CompliancePackages on ps.CompliancePackageID equals cp.CompliancePackageID
                    //                                      join ord in _dbContext.Orders on ps.OrderID equals ord.OrderID
                    //                                      join dpp in _dbContext.DeptProgramPackages on ord.DeptProgramPackageID equals dpp.DPP_ID
                    //                                      join dpm in _dbContext.DeptProgramMappings on dpp.DPP_DeptProgramMappingID equals dpm.DPM_ID
                    //                                      where !ps.IsDeleted && !orgusr.IsDeleted && !ord.IsDeleted && !dpp.DPP_IsDeleted && !dpm.DPM_IsDeleted
                    //                                      && ps.ExpiryDate >= today && ps.ExpiryDate <= beforeExpiry && !(pckgIds.Contains(ps.PackageSubscriptionID))
                    //                                      && (ps.SubscriptionMobilityStatusID == null || ps.SubscriptionMobilityStatusID != subscriptionMobilityStatusID)
                    //                                      && (ps.ArchiveStateID == null || ps.ArchiveStateID == archieveStateId)
                    //                                      select new ReminderContract
                    //                                      {
                    //                                          PackageSubscriptionID = ps.PackageSubscriptionID,
                    //                                          PackageName = String.IsNullOrEmpty(cp.PackageLabel) ? cp.PackageName : cp.PackageLabel, //UAT-2949
                    //                                          ExpiryDate = ps.ExpiryDate.HasValue ? ps.ExpiryDate.Value : DateTime.Now,
                    //                                          OrderID = ord.OrderID,
                    //                                          OrderDate = ord.OrderDate.HasValue ? ord.OrderDate.Value : DateTime.Now,
                    //                                          OrganizationUserID = orgusr.OrganizationUserID,
                    //                                          FirstName = orgusr.FirstName,
                    //                                          LastName = orgusr.LastName,
                    //                                          PrimaryEmailAddress = orgusr.PrimaryEmailAddress,
                    //                                          NodeHierarchy = dpm.DPM_Label,
                    //                                          HierarchyNodeID = dpm.DPM_ID
                    //                                      }).Take(chunkSize).ToList();

                    //return lstReminder;
                }
            }
            catch (SysXException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw (new SysXException(ex.Message, ex));
            }
        }

        public List<ReminderContract> GetExpiredPackageSubscriptions(String entitySetName, Int32 chunkSize, Int32? archieveStateId)
        {
            try
            {
                String code = LkpSubscriptionMobilityStatus.MobilitySwitched;
                Int32 subscriptionMobilityStatusID = _dbContext.lkpSubscriptionMobilityStatus.Where(item => !item.IsDeleted && item.Code.Equals(code)).FirstOrDefault().SubscriptionMobilityStatusID;
                //Int32? aftExp = Convert.ToInt32(afterExpiry);

                //UAT-4060 : Updates to client settings screen to have hierarchy overrides of Compliance Notification Settings and Subscription Notification Settings

                EntityConnection connection = _dbContext.Connection as EntityConnection;
                using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
                {
                    SqlCommand command = new SqlCommand("usp_GetExpiredPackageSubscriptions", con);
                    command.CommandType = CommandType.StoredProcedure;
                    //command.Parameters.AddWithValue("@AfterExpiry", afterExpiry);
                    //command.Parameters.AddWithValue("@ExpiryFrequency", expiryFrequency);
                    command.Parameters.AddWithValue("@EntitySetName", entitySetName);
                    command.Parameters.AddWithValue("@ChunkSize", chunkSize);
                    command.Parameters.AddWithValue("@ArchieveStateId", archieveStateId);
                    command.Parameters.AddWithValue("@SubscriptionMobilityStatusID", subscriptionMobilityStatusID);

                    SqlDataAdapter adp = new SqlDataAdapter();
                    adp.SelectCommand = command;
                    DataSet ds = new DataSet();
                    adp.Fill(ds);
                    if (ds.Tables.Count > 0)
                    {
                        List<ReminderContract> lstReminder = new List<ReminderContract>();
                        lstReminder = ds.Tables[0].AsEnumerable().Select(col =>
                              new ReminderContract
                              {
                                  OrganizationUserID = Convert.ToInt32(col["OrganizationUserId"]),
                                  ExpiryDate = Convert.ToDateTime(col["ExpiryDate"]),
                                  HierarchyNodeID = Convert.ToInt32(col["HierarchyNodeID"]),
                                  //DateOfBirth = Convert.ToDateTime(col["DateOfBirth"]),
                                  FirstName = col["FirstName"] == DBNull.Value ? String.Empty : Convert.ToString(col["FirstName"]),
                                  PrimaryEmailAddress = col["PrimaryEmailAddress"] == DBNull.Value ? String.Empty : Convert.ToString(col["PrimaryEmailAddress"]),
                                  LastName = col["LastName"] == DBNull.Value ? String.Empty : Convert.ToString(col["LastName"]),
                                  NodeHierarchy = col["NodeHierarchy"] == DBNull.Value ? String.Empty : Convert.ToString(col["NodeHierarchy"]),
                                  OrderDate = Convert.ToDateTime(col["OrderDate"]),
                                  OrderNumber = col["OrderNumber"] == DBNull.Value ? String.Empty : Convert.ToString(col["OrderNumber"]),
                                  PackageSubscriptionID = Convert.ToInt32(col["PackageSubscriptionID"]),
                                  PackageName = col["PackageName"] == DBNull.Value ? String.Empty : Convert.ToString(col["PackageName"]), //UAT-2949
                                  OrderID = Convert.ToInt32(col["OrderID"]),
                              }).ToList();
                        return lstReminder;
                    }
                    return new List<ReminderContract>();





                    //List<Int32> pckgIds = (from ps in _dbContext.PackageSubscriptions
                    //                       join nd in _dbContext.NotificationDeliveries
                    //                       on ps.PackageSubscriptionID equals nd.ND_EntityId
                    //                       where nd.ND_EntityName == entitySetName && EntityFunctions.DiffDays(nd.ND_CreatedOn, DateTime.Now) < expiryFrequency
                    //                       && ps.ExpiryDate < today && EntityFunctions.AddDays(ps.ExpiryDate.Value, aftExp) > today && !nd.ND_IsDeleted && !ps.IsDeleted
                    //                       select ps.PackageSubscriptionID).Distinct().ToList();

                    //List<ReminderContract> lstReminder = (from ps in _dbContext.PackageSubscriptions
                    //                                      join orgusr in _dbContext.OrganizationUsers on ps.OrganizationUserID equals orgusr.OrganizationUserID
                    //                                      join cp in _dbContext.CompliancePackages on ps.CompliancePackageID equals cp.CompliancePackageID
                    //                                      join ord in _dbContext.Orders on ps.OrderID equals ord.OrderID
                    //                                      join dpp in _dbContext.DeptProgramPackages on ord.DeptProgramPackageID equals dpp.DPP_ID
                    //                                      join dpm in _dbContext.DeptProgramMappings on dpp.DPP_DeptProgramMappingID equals dpm.DPM_ID
                    //                                      where !ps.IsDeleted && !orgusr.IsDeleted && !ord.IsDeleted && !dpp.DPP_IsDeleted
                    //                                      && (ps.ArchiveStateID == null || ps.ArchiveStateID == archieveStateId) //UAT-2949
                    //                                      && !dpm.DPM_IsDeleted && ps.ExpiryDate < today && EntityFunctions.AddDays(ps.ExpiryDate.Value, aftExp) > today
                    //                                      && !(pckgIds.Contains(ps.PackageSubscriptionID))
                    //                                      && (ps.SubscriptionMobilityStatusID == null || ps.SubscriptionMobilityStatusID != subscriptionMobilityStatusID)
                    //                                      select new ReminderContract
                    //                                      {
                    //                                          PackageSubscriptionID = ps.PackageSubscriptionID,
                    //                                          PackageName = String.IsNullOrEmpty(cp.PackageLabel) ? cp.PackageName : cp.PackageLabel, //UAT-2949
                    //                                          ExpiryDate = ps.ExpiryDate.HasValue ? ps.ExpiryDate.Value : DateTime.Now,
                    //                                          OrderID = ord.OrderID,
                    //                                          OrderDate = ord.OrderDate.HasValue ? ord.OrderDate.Value : DateTime.Now,
                    //                                          OrganizationUserID = orgusr.OrganizationUserID,
                    //                                          FirstName = orgusr.FirstName,
                    //                                          LastName = orgusr.LastName,
                    //                                          PrimaryEmailAddress = orgusr.PrimaryEmailAddress,
                    //                                          NodeHierarchy = dpm.DPM_Label,
                    //                                          HierarchyNodeID = dpm.DPM_ID,
                    //                                          OrderNumber = ord.OrderNumber
                    //                                      }).Take(chunkSize).ToList();

                    //return lstReminder;
                }
            }
            catch (SysXException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw (new SysXException(ex.Message, ex));
            }
        }

        public List<ReminderContract> GetPendingPackageSubscriptions(Int32 pendingFrequency, String entitySetName, DateTime today, Int32 chunkSize, Int32 tenantID)
        {

            try
            {

                #region UAT-3223
                //Get client settings
                Boolean isNeedToStopAccWithoutPurNotification = false;
                Int32 stopAccWithoutPurNotificationThresholdPeriod = AppConsts.NONE;

                String stopAccWithoutPurchaseNotAfterThresholdPeriodCode = Setting.STOP_ACCOUNT_WITHOUT_PURCHASE_NOTIFICATION_AFTER_THRESHOLD_PERIOD.GetStringValue();
                String thresholdPeriodForStoppingNotificationCode = Setting.THRESHOLD_PERIOD_FOR_STOPPING_ACCOUNT_WITHOUT_PURCHASE_NOTIFICATION.GetStringValue();

                List<String> lstCodes = new List<String>();
                lstCodes.Add(stopAccWithoutPurchaseNotAfterThresholdPeriodCode);
                lstCodes.Add(thresholdPeriodForStoppingNotificationCode);
                List<ClientSetting> lstClientSetting = _dbContext.ClientSettings.Where(cond => cond.CS_TenantID == tenantID && !cond.CS_IsDeleted && lstCodes.Contains(cond.lkpSetting.Code)).ToList();
                //if (!lstClientSetting.IsNullOrEmpty())
                //{
                var stopAccWithoutPurchaseNotAfterThresholdPeriodValue = lstClientSetting.Where(col => col.lkpSetting.Code == stopAccWithoutPurchaseNotAfterThresholdPeriodCode).FirstOrDefault();
                if (!stopAccWithoutPurchaseNotAfterThresholdPeriodValue.IsNullOrEmpty())
                {
                    isNeedToStopAccWithoutPurNotification = Convert.ToBoolean(Convert.ToInt32(stopAccWithoutPurchaseNotAfterThresholdPeriodValue.CS_SettingValue));
                }
                else
                {
                    isNeedToStopAccWithoutPurNotification = true;
                }
                if (isNeedToStopAccWithoutPurNotification)
                {
                    var thresholdPeriodForStoppingNotificationValue = lstClientSetting.Where(col => col.lkpSetting.Code == thresholdPeriodForStoppingNotificationCode).FirstOrDefault();
                    if (!thresholdPeriodForStoppingNotificationValue.IsNullOrEmpty())
                    {
                        stopAccWithoutPurNotificationThresholdPeriod = Convert.ToInt32(thresholdPeriodForStoppingNotificationValue.CS_SettingValue);
                    }
                    else
                    {
                        stopAccWithoutPurNotificationThresholdPeriod = AppConsts.HUNDRED;
                    }
                }
                //}

                #endregion

                //UAT-887: WB: Delay Automatic emails going out after activation
                Int32 delayActiveHour = AppConsts.NONE;
                DateTime delayNotificationDate = DateTime.Now;
                String sendNotificationWaithourKey = AppConsts.SEND_NOTIFICATION_WAIT_HOURS_KEY;
                Entity.AppConfiguration appConfiguration = this.SecurityContext.AppConfigurations.FirstOrDefault(cond => cond.AC_Key == sendNotificationWaithourKey);
                if (appConfiguration.IsNotNull())
                    delayActiveHour = Convert.ToInt32(appConfiguration.AC_Value);
                delayNotificationDate = delayNotificationDate.AddHours(-delayActiveHour);
                List<Int32> orgUsrIds = (from orgusr in _dbContext.OrganizationUsers
                                         join nd in _dbContext.NotificationDeliveries
                                         on orgusr.OrganizationUserID equals nd.ND_EntityId
                                         where nd.ND_EntityName == entitySetName && EntityFunctions.DiffDays(nd.ND_CreatedOn, DateTime.Now) < pendingFrequency
                                         && !nd.ND_IsDeleted && !orgusr.IsDeleted
                                         select orgusr.OrganizationUserID).Distinct().ToList();

                List<ReminderContract> userwithoutpckg = (from orgusr in _dbContext.OrganizationUsers
                                                          join appHirMapp in _dbContext.ApplicantHierarchyMappings on
                                                          orgusr.OrganizationUserID equals appHirMapp.AHM_OrganizationUserID
                                                          into lstOrgUser
                                                          from neworgusr in lstOrgUser.DefaultIfEmpty()
                                                          where neworgusr == null && orgusr.IsApplicant == true && !orgusr.IsDeleted && orgusr.IsActive == true
                                                          && (orgusr.ActiveDate == null || (orgusr.ActiveDate != null && orgusr.ActiveDate.Value <= delayNotificationDate))// EntityFunctions.DiffHours(orgusr.ActiveDate.Value, DateTime.Now) > delayActiveHour
                                                          select new ReminderContract
                                                          {
                                                              PackageSubscriptionID = 0,
                                                              ExpiryDate = today,
                                                              OrderID = 0,
                                                              OrderDate = today,
                                                              OrganizationUserID = orgusr.OrganizationUserID,
                                                              FirstName = orgusr.FirstName,
                                                              LastName = orgusr.LastName,
                                                              PrimaryEmailAddress = orgusr.PrimaryEmailAddress,
                                                              NodeHierarchy = String.Empty,
                                                              HierarchyNodeID = 0,
                                                              OrgUserActiveDate = orgusr.ActiveDate//UAT-3223

                                                          }).DistinctBy(x => x.OrganizationUserID).ToList();
                //Commented below code to ignore the pending subscription notification mail to applicant after purchashing order[ UAT-887: WB: Delay Automatic emails going out after activation]
                //List<ReminderContract> userhvngpndgpckg = (from pndgpckg in _dbContext.GetPendingPackages()
                //                                           select new ReminderContract
                //                                           {
                //                                               PackageSubscriptionID = 0,
                //                                               ExpiryDate = today,
                //                                               OrderID = 0,
                //                                               OrderDate = today,
                //                                               OrganizationUserID = pndgpckg.OrganizationUserID,
                //                                               FirstName = pndgpckg.FirstName,
                //                                               LastName = pndgpckg.LastName,
                //                                               PrimaryEmailAddress = pndgpckg.PrimaryEmailAddress,
                //                                               NodeHierarchy = String.Empty,
                //                                               HierarchyNodeID = 0
                //                                           }).DistinctBy(x => x.OrganizationUserID).ToList();

                //userwithoutpckg = userwithoutpckg.Union(userhvngpndgpckg).ToList();

                //UAT-3223
                if (isNeedToStopAccWithoutPurNotification)
                {

                    userwithoutpckg = userwithoutpckg.Where(con => (con.OrgUserActiveDate == null
                        || (con.OrgUserActiveDate != null && (DateTime.Now.Date - con.OrgUserActiveDate.Value.Date).TotalDays <= stopAccWithoutPurNotificationThresholdPeriod))).ToList();
                }

                userwithoutpckg = userwithoutpckg.Where(x => !(orgUsrIds.Contains(x.OrganizationUserID))).Take(chunkSize).ToList();

                return userwithoutpckg.DistinctBy(x => x.OrganizationUserID).ToList();
            }
            catch (SysXException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw (new SysXException(ex.Message, ex));
            }
        }

        #endregion

        #region Notification Delivery

        public Boolean AddNotificationDelivery(NotificationDelivery notificationDelivery)
        {
            try
            {
                _dbContext.NotificationDeliveries.AddObject(notificationDelivery);
                if (_dbContext.SaveChanges() > 0)
                    return true;
                else
                    return false;
            }
            catch (SysXException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw (new SysXException(ex.Message, ex));
            }
        }

        public Boolean AddNotificationDeliveryList(List<NotificationDelivery> lstNotificationDelivery)
        {
            try
            {
                foreach (NotificationDelivery notificationDelivery in lstNotificationDelivery)
                {
                    _dbContext.NotificationDeliveries.AddObject(notificationDelivery);
                }
                if (_dbContext.SaveChanges() > 0)
                    return true;
                else
                    return false;
            }
            catch (SysXException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw (new SysXException(ex.Message, ex));
            }
        }

        #endregion

        #region Renewal Order
        /// <summary>
        /// Gets the order details for the given Order Id.
        /// </summary>
        /// <param name="tenantId">Tenant Id</param>
        /// <param name="orderId">Order Id</param>
        /// <returns></returns>
        public Order GetOrderById(Int32 orderId)
        {
            return _dbContext.Orders
                .Include("DeptProgramPackage")
                .Include("DeptProgramMapping")
                .Include("DeptProgramPackage.CompliancePackage")
                .Include("DeptProgramPackage.DeptProgramMapping")
                .Include("OrderPaymentDetails")
                .Where(cond => cond.OrderID == orderId && !cond.IsDeleted).FirstOrDefault();
        }

        public Order GetOrderDetailsByOrderId(Int32 orderId)
        {
            return _dbContext.Orders
                .Where(cond => cond.OrderID == orderId && !cond.IsDeleted).FirstOrDefault();
        }

        /// <summary>
        /// Get Package Subscription by orderId
        /// </summary>
        /// <param name="orderId">orderId</param>
        /// <returns>PackageSubscription</returns>
        public PackageSubscription GetPackageSubscriptionByOrderId(Int32 orderId)
        {
            return _dbContext.PackageSubscriptions.Where(cond => cond.OrderID == orderId && !cond.IsDeleted).FirstOrDefault();
        }

        /// <summary>
        /// Save changes for Package Subscription
        /// </summary>
        /// <returns>Boolean</returns>
        public Boolean UpdatePackageSubscription()
        {
            if (_dbContext.SaveChanges() > 0)
                return true;
            else
                return false;
        }

        /// <summary>
        /// Get the list of Order of previous order
        /// </summary>
        /// <param name="orderDetail"> order</param>
        /// <returns>List of Order</returns>
        public List<Order> GetOrderListOfPreviousOrder(Order orderDetail)
        {
            Int32 orderStatusId = Convert.ToInt32(ApplicantOrderStatus.Paid);
            return _dbContext.Orders.Where(cond => cond.OrganizationUserProfile.OrganizationUserID == orderDetail.OrganizationUserProfile.OrganizationUserID
                && cond.DeptProgramPackageID == orderDetail.DeptProgramPackageID
                && cond.OrderStatusID == orderStatusId
                && !cond.IsDeleted).ToList();
        }

        public List<Order> GetChangeSubscriptionOrderList(Int32 OrderID)
        {
            List<String> orderStatusIdList = new List<String>();
            orderStatusIdList.Add(ApplicantOrderStatus.Pending_Payment_Approval.GetStringValue());

            List<String> orderRequestTypeList = new List<String>();
            orderRequestTypeList.Add(OrderRequestType.ChangeSubscription.GetStringValue());
            orderRequestTypeList.Add(OrderRequestType.RenewalOrder.GetStringValue());
            String compliancePackageTypeCode = OrderPackageTypes.COMPLIANCE_PACKAGE.GetStringValue();

            //return _dbContext.Orders.Where(cond => orderStatusIdList.Contains(cond.lkpOrderStatu.Code)
            //    && orderRequestTypeList.Contains(cond.lkpOrderRequestType.ORT_Code)
            //    && cond.PreviousOrderID == OrderID
            //    && !cond.IsDeleted).ToList();

            return _dbContext.Orders
                .Where(ord => ord.OrderPaymentDetails
                    .Any(opd => opd.OrderPkgPaymentDetails
                .Any(oppd => oppd.lkpOrderPackageType.OPT_Code == compliancePackageTypeCode && !oppd.OPPD_IsDeleted)
                  && !opd.OPD_IsDeleted && orderStatusIdList.Contains(opd.lkpOrderStatu.Code))
                && orderRequestTypeList.Contains(ord.lkpOrderRequestType.ORT_Code)
                && ord.PreviousOrderID == OrderID
                && !ord.IsDeleted).ToList();
        }

        public Boolean GetRenewSubscriptionOrder(Int32 OrderID)
        {
            var _order = GetOrder(OrderID);
            if (_order.IsNotNull())
            {
                if (_order.lkpOrderRequestType.IsNotNull())
                {
                    if (_order.lkpOrderRequestType.ORT_Code == OrderRequestType.RenewalOrder.GetStringValue())
                    {
                        return true;
                    }
                }
            }
            return false;
        }

        private Order GetOrder(Int32 OrderID)
        {
            return _dbContext.Orders.Where(cond => cond.PreviousOrderID == OrderID).FirstOrDefault();
        }

        public Int32 GetParentOrderByOrderId(Int32 orderId)
        {
            Int32 parentOrderId = 0;
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {

                SqlCommand command = new SqlCommand("usp_GetParentOrderByOrderId", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@OrderID", orderId);
                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > 0)
                {
                    parentOrderId = Convert.ToInt32(ds.Tables[0].Rows[0]["OrderId"]);
                    if (parentOrderId != null)
                        return parentOrderId;
                }
            }
            return parentOrderId;
        }

        #endregion

        #region Mail and Message Content

        public Dictionary<String, object> GetOrderCreationMoneyOrderMailData(Order applicantOrder, Entity.ClientEntity.OrganizationUserProfile orgUserProfile, Int32 tenantId, String _paymentModeCode)
        {
            Dictionary<String, object> dictMailData = new Dictionary<String, object>();
            String compliancePackageTypeCode = OrderPackageTypes.COMPLIANCE_PACKAGE.GetStringValue();
            String compliancePackageRushTypeCode = OrderPackageTypes.COMPLIANCE_RUSHORDER_PACKAGE.GetStringValue();
            OrderPaymentDetail opd = applicantOrder.OrderPaymentDetails.Where(cond => cond.lkpPaymentOption.Code.Equals(_paymentModeCode) && !cond.OPD_IsDeleted).FirstOrDefault();
            if (!opd.IsNullOrEmpty())
            {
                int subscriptionDuration;
                Boolean isBackgroundPackageIncluded = opd.OrderPkgPaymentDetails.Any(cond => !cond.lkpOrderPackageType.OPT_Code.Equals(compliancePackageTypeCode) && !cond.lkpOrderPackageType.OPT_Code.Equals(compliancePackageRushTypeCode) && !cond.OPPD_IsDeleted);
                subscriptionDuration = applicantOrder.SubscriptionYear.IsNotNull() ? ((Int32)applicantOrder.SubscriptionYear * 12) : 0;
                subscriptionDuration += applicantOrder.SubscriptionMonth.IsNotNull() ? (Int32)applicantOrder.SubscriptionMonth : 0;

                dictMailData.Add(EmailFieldConstants.USER_FULL_NAME, string.Concat(orgUserProfile.FirstName, " ", orgUserProfile.LastName));
                dictMailData.Add(EmailFieldConstants.ORDER_NO, applicantOrder.OrderNumber);
                dictMailData.Add(EmailFieldConstants.ORDER_DATE, applicantOrder.OrderDate.GetDateString(false));
                dictMailData.Add(EmailFieldConstants.PROGRAM_DURATION, string.Concat(subscriptionDuration, " ", "months"));
                //Null check
                if (applicantOrder.DeptProgramMapping1.IsNotNull())
                {
                    //dictMailData.Add(EmailFieldConstants.NODE_HIERARCHY, applicantOrder.DeptProgramMapping.DPM_Label);
                    //UAT - 1067 : Hierarchy for orders (background and screening) should display as the full hierarchy sleected during the order, not the node the package lives on. 
                    dictMailData.Add(EmailFieldConstants.NODE_HIERARCHY, applicantOrder.DeptProgramMapping1.DPM_Label);
                }
                //dictMailData.Add(EmailFieldConstants.NODE_HIERARCHY, applicantOrder.DeptProgramPackage.DeptProgramMapping.DPM_Label);
                dictMailData.Add(EmailFieldConstants.COST, opd.OPD_Amount.GetCurrencyString(false));
                if (!isBackgroundPackageIncluded
                    && applicantOrder.DeptProgramPackage.IsNotNull() && applicantOrder.DeptProgramPackage.CompliancePackage.IsNotNull())
                {
                    //dictMailData.Add(EmailFieldConstants.PACKAGE_NAME, applicantOrder.DeptProgramPackage.CompliancePackage.PackageName);
                    dictMailData.Add(EmailFieldConstants.PACKAGE_NAME, applicantOrder.DeptProgramPackage.CompliancePackage.PackageLabel.IsNullOrEmpty() ? applicantOrder.DeptProgramPackage.CompliancePackage.PackageName : applicantOrder.DeptProgramPackage.CompliancePackage.PackageLabel);
                }
                //Get Tenant Name
                dictMailData.Add(EmailFieldConstants.INSTITUTE_NAME, getTenantToBeUpdated(tenantId).TenantName);
            }
            return dictMailData;
        }

        public Dictionary<String, object> GetOrderCreationInvoiceMailData(Order applicantOrder, Entity.ClientEntity.OrganizationUserProfile orgUserProfile, int tenantId, String _paymentModeCode)
        {
            Dictionary<String, object> dictMailData = new Dictionary<String, object>();
            Int32 subscriptionDuration;
            String compliancePackageTypeCode = OrderPackageTypes.COMPLIANCE_PACKAGE.GetStringValue();
            String compliancePackageRushTypeCode = OrderPackageTypes.COMPLIANCE_RUSHORDER_PACKAGE.GetStringValue();
            OrderPaymentDetail opd = applicantOrder.OrderPaymentDetails.Where(cond => cond.lkpPaymentOption.Code.Equals(_paymentModeCode) && !cond.OPD_IsDeleted).FirstOrDefault();
            if (!opd.IsNullOrEmpty())
            {
                Boolean isBackgroundPackageIncluded = opd.OrderPkgPaymentDetails.Any(cond => !cond.lkpOrderPackageType.OPT_Code.Equals(compliancePackageTypeCode) && !cond.lkpOrderPackageType.OPT_Code.Equals(compliancePackageRushTypeCode) && !cond.OPPD_IsDeleted);
                subscriptionDuration = !applicantOrder.SubscriptionYear.IsNullOrEmpty() ? ((Int32)applicantOrder.SubscriptionYear * 12) : 0;
                subscriptionDuration += !applicantOrder.SubscriptionMonth.IsNullOrEmpty() ? (Int32)applicantOrder.SubscriptionMonth : 0;

                dictMailData.Add(EmailFieldConstants.USER_FULL_NAME, String.Concat(orgUserProfile.FirstName, " ", orgUserProfile.LastName));
                dictMailData.Add(EmailFieldConstants.ORDER_NO, applicantOrder.OrderNumber);
                dictMailData.Add(EmailFieldConstants.ORDER_DATE, applicantOrder.OrderDate.GetDateString(false));
                //Convert subscriptionDuration to string
                dictMailData.Add(EmailFieldConstants.PROGRAM_DURATION, String.Concat(Convert.ToString(subscriptionDuration), " ", "months"));
                //Null check
                if (applicantOrder.DeptProgramMapping1.IsNotNull())
                {
                    //dictMailData.Add(EmailFieldConstants.NODE_HIERARCHY, applicantOrder.DeptProgramMapping.DPM_Label);
                    //UAT - 1067 : Hierarchy for orders (background and screening) should display as the full hierarchy sleected during the order, not the node the package lives on. 
                    dictMailData.Add(EmailFieldConstants.NODE_HIERARCHY, applicantOrder.DeptProgramMapping1.DPM_Label);
                }
                dictMailData.Add(EmailFieldConstants.COST, opd.OPD_Amount.GetCurrencyString(false));
                //Get Tenant Name
                dictMailData.Add(EmailFieldConstants.INSTITUTE_NAME, getTenantToBeUpdated(tenantId).TenantName);

                if (!isBackgroundPackageIncluded && applicantOrder.DeptProgramPackage.IsNotNull() && applicantOrder.DeptProgramPackage.CompliancePackage.IsNotNull())
                {
                    //dictMailData.Add(EmailFieldConstants.PACKAGE_NAME, applicantOrder.DeptProgramPackage.CompliancePackage.PackageName);
                    dictMailData.Add(EmailFieldConstants.PACKAGE_NAME, applicantOrder.DeptProgramPackage.CompliancePackage.PackageLabel.IsNullOrEmpty() ? applicantOrder.DeptProgramPackage.CompliancePackage.PackageName : applicantOrder.DeptProgramPackage.CompliancePackage.PackageLabel);
                }
                //String a = orgUserProfile.Orders.FirstOrDefault(a => a.OrderID == applicantOrder.OrderID).DeptProgramPackage.CompliancePackage.PackageName;

            }
            return dictMailData;
        }

        public Dictionary<String, object> GetOrderApprovalMailData(OrderPaymentDetail orderPaymentDetail, Int32 tenantID, String orderPackageTypeCode)
        {
            int subscriptionDuration;
            DateTime subscriptionStartDate = DateTime.Today;

            Dictionary<String, object> dictMailData = new Dictionary<String, object>();
            dictMailData.Add(EmailFieldConstants.USER_FULL_NAME, string.Concat(orderPaymentDetail.Order.OrganizationUserProfile.FirstName, " ", orderPaymentDetail.Order.OrganizationUserProfile.LastName));
            dictMailData.Add(EmailFieldConstants.ORDER_NO, orderPaymentDetail.Order.OrderNumber);
            dictMailData.Add(EmailFieldConstants.ORDER_DATE, orderPaymentDetail.Order.OrderDate.GetDateString(false));
            subscriptionDuration = orderPaymentDetail.Order.SubscriptionYear.IsNotNull() ? ((Int32)orderPaymentDetail.Order.SubscriptionYear * 12) : 0;
            subscriptionDuration += orderPaymentDetail.Order.SubscriptionMonth.IsNotNull() ? (Int32)orderPaymentDetail.Order.SubscriptionMonth : 0;

            dictMailData.Add(EmailFieldConstants.PROGRAM_DURATION, string.Concat(subscriptionDuration.ToString(), " ", "months"));

            if (/*orderPaymentDetail.Order.lkpOrderPackageType.IsNotNull()
                && orderPaymentDetail.Order.lkpOrderPackageType.OPT_Code != OrderPackageTypes.BACKGROUND_PACKAGE.GetStringValue() [Replace this check with OrderpaymentDetail package type basis]*/
                orderPackageTypeCode.IsNotNull() && orderPackageTypeCode != OrderPackageTypes.BACKGROUND_PACKAGE.GetStringValue() && orderPaymentDetail.Order.PackageSubscriptions.IsNotNull()
                && (orderPaymentDetail.Order.PartialOrderCancellationTypeID.IsNull() || (orderPaymentDetail.Order.lkpPartialOrderCancellationType.IsNotNull()
                    && orderPaymentDetail.Order.lkpPartialOrderCancellationType.Code == PartialOrderCancellationType.BACKGROUND_PACKAGE.GetStringValue()))
                 && !orderPaymentDetail.Order.PackageSubscriptions.IsNullOrEmpty() && orderPaymentDetail.Order.PackageSubscriptions.FirstOrDefault().ExpiryDate.IsNotNull())
            {
                subscriptionStartDate = ((DateTime)orderPaymentDetail.Order.PackageSubscriptions.FirstOrDefault().ExpiryDate).AddMonths(-subscriptionDuration);
                dictMailData.Add(EmailFieldConstants.SUBSCRIPTION_END_DATE, orderPaymentDetail.Order.PackageSubscriptions.FirstOrDefault().ExpiryDate.GetDateString(false));
                dictMailData.Add(EmailFieldConstants.SUBSCRIPTION_START_DATE, subscriptionStartDate.ToString("MM/dd/yyyy"));
            }

            //Null check
            if (orderPaymentDetail.Order.DeptProgramMapping1.IsNotNull())
            {
                //dictMailData.Add(EmailFieldConstants.NODE_HIERARCHY, orderPaymentDetail.Order.DeptProgramMapping.DPM_Label);
                //UAT - 1067 : Hierarchy for orders (background and screening) should display as the full hierarchy sleected during the order, not the node the package lives on. 
                dictMailData.Add(EmailFieldConstants.NODE_HIERARCHY, orderPaymentDetail.Order.DeptProgramMapping1.DPM_Label);
            }
            //dictMailData.Add(EmailFieldConstants.NODE_HIERARCHY, orderPaymentDetail.Order.DeptProgramMapping.DPM_Label);
            /*UAT-916 
             * dictMailData.Add(EmailFieldConstants.COST, orderPaymentDetail.Order.GrandTotal.GetCurrencyString(false));
             dictMailData.Add(EmailFieldConstants.PAYMENT_METHOD, orderPaymentDetail.Order.lkpPaymentOption.Name);*/
            dictMailData.Add(EmailFieldConstants.COST, orderPaymentDetail.OPD_Amount.GetCurrencyString(false));
            dictMailData.Add(EmailFieldConstants.PAYMENT_METHOD, orderPaymentDetail.lkpPaymentOption.IsNotNull() ? orderPaymentDetail.lkpPaymentOption.Name : String.Empty);
            dictMailData.Add(EmailFieldConstants.PAYMENT_RECEIVED_DATE, DateTime.Today.Date.ToString("MM/dd/yyyy"));
            if (orderPackageTypeCode != OrderPackageTypes.BACKGROUND_PACKAGE.GetStringValue() && orderPaymentDetail.Order.DeptProgramPackage.IsNotNull() && orderPaymentDetail.Order.DeptProgramPackage.CompliancePackage.IsNotNull())
            {
                //dictMailData.Add(EmailFieldConstants.PACKAGE_NAME, orderPaymentDetail.Order.DeptProgramPackage.CompliancePackage.PackageName);
                dictMailData.Add(EmailFieldConstants.PACKAGE_NAME, orderPaymentDetail.Order.DeptProgramPackage.CompliancePackage.PackageLabel.IsNullOrEmpty() ? orderPaymentDetail.Order.DeptProgramPackage.CompliancePackage.PackageName : orderPaymentDetail.Order.DeptProgramPackage.CompliancePackage.PackageLabel);
                //UAT-1787:Ability to insert checklist link (if configured) for a package in the order confirmation emails
                String checklistLink = orderPaymentDetail.Order.DeptProgramPackage.CompliancePackage.ChecklistURL.IsNullOrEmpty() ? String.Empty :
                                      orderPaymentDetail.Order.DeptProgramPackage.CompliancePackage.ChecklistURL;
                dictMailData.Add(EmailFieldConstants.CHECK_LIST_LINK, checklistLink);
            }
            dictMailData.Add(EmailFieldConstants.INSTITUTE_NAME, getTenantToBeUpdated(tenantID).TenantName);
            BkgOrder _bkgorder = _dbContext.BkgOrders.Include("BkgOrderPackages.BkgPackageHierarchyMapping.BackgroundPackage")
                .FirstOrDefault(x => x.BOR_MasterOrderID == orderPaymentDetail.Order.OrderID && !x.BOR_IsDeleted);

            List<Int32> bkgOrderPackageIds = null;

            if (orderPaymentDetail.OrderPkgPaymentDetails.IsNotNull())
            {
                bkgOrderPackageIds = orderPaymentDetail.OrderPkgPaymentDetails.Where(cond => cond.OPPD_BkgOrderPackageID != null
                                                && !cond.OPPD_IsDeleted && cond.lkpOrderPackageType != null &&
                                                cond.lkpOrderPackageType.OPT_Code == OrderPackageTypes.BACKGROUND_PACKAGE.GetStringValue())
                                                .Select(col => col.OPPD_BkgOrderPackageID.Value).ToList();
            }

            String packages = String.Empty;
            if (!_bkgorder.IsNullOrEmpty() && !bkgOrderPackageIds.IsNullOrEmpty())
            {
                //List<String> BkgPackagelist = _bkgorder.BkgOrderPackages.Where(cond => bkgOrderPackageIds.Contains(cond.BOP_ID) && !cond.BOP_IsDeleted)
                //                            .Select(x => x.BkgPackageHierarchyMapping.BackgroundPackage.BPA_Name).ToList();
                List<String> BkgPackagelist = _bkgorder.BkgOrderPackages.Where(cond => bkgOrderPackageIds.Contains(cond.BOP_ID) && !cond.BOP_IsDeleted)
                    .Select(x => ((x.BkgPackageHierarchyMapping.BackgroundPackage.BPA_Label != null && x.BkgPackageHierarchyMapping.BackgroundPackage.BPA_Label != String.Empty) ? x.BkgPackageHierarchyMapping.BackgroundPackage.BPA_Label : x.BkgPackageHierarchyMapping.BackgroundPackage.BPA_Name)).ToList();
                foreach (string item in BkgPackagelist)
                    packages += item + ",";
                if (packages.EndsWith(","))
                    packages = packages.Remove(packages.Length - 1);
                dictMailData.Add(EmailFieldConstants.BKG_PACKAGE_LIST, packages);
            }
            //add background packages list



            //if (packageSubscription.CompliancePackage.TenantID.IsNotNull())
            //{
            //dictMailData.Add(EmailFieldConstants.INSTITUTION_URL, GetInstitutionUrl((int)packageSubscription.CompliancePackage.TenantID));
            //}
            dictMailData.Add(EmailFieldConstants.INSTITUTION_URL, GetInstitutionUrl((int)tenantID));
            dictMailData.Add(EmailFieldConstants.REFUND_POLICY, "");

            //UAT 1336 : Update order approval notification to student notes plus student note links for all categories.
            if (orderPackageTypeCode != OrderPackageTypes.BACKGROUND_PACKAGE.GetStringValue() && orderPaymentDetail.IsNotNull() && orderPaymentDetail.Order.IsNotNull() && orderPaymentDetail.Order.DeptProgramPackage.IsNotNull())
            {
                Int32 compPkgID = orderPaymentDetail.Order.DeptProgramPackage.DPP_CompliancePackageID;
                String catagoryExplanatoryInfo = GetCatagoryExplanatoryNoteInfoForPlaceholder(compPkgID);
                dictMailData.Add(EmailFieldConstants.CATEGORY_EXPLANATORY_NOTES, catagoryExplanatoryInfo);
            }

            dictMailData.Add(EmailFieldConstants.TENANT_ID, tenantID.ToString());

            return dictMailData;
        }

        /// <summary>
        /// UAT 1336 : Update order approval notification to student notes plus student note links for all categories.
        /// </summary>
        /// <param name="compPkgID"></param>
        /// <returns></returns>
        private String GetCatagoryExplanatoryNoteInfoForPlaceholder(Int32 compPkgID)
        {
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                //UAT-4092
                DateTime currentDate = DateTime.Now;
                //END UAT-4092

                SqlCommand command = new SqlCommand("usp_GetCatagoryExplanatoryNoteInfo", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@PackageID", compPkgID);
                command.Parameters.AddWithValue("@CurrentDate", currentDate); //UAT-4092
                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > 0)
                {
                    StringBuilder sb = new StringBuilder();
                    DataTable records = ds.Tables[0];
                    foreach (var row in records.AsEnumerable())
                    {
                        sb.Append("<p>");
                        if (row["CatagoryLabel"].GetType().Name != "DBNull")
                        {
                            //Create 1st row if catagory name/label is present.
                            sb.Append("<b>");
                            sb.Append(Convert.ToString(row["CatagoryLabel"]));
                            sb.Append("</b>");
                        }

                        if (row["ExplanatoryNote"].GetType().Name != "DBNull")
                        {
                            if (Convert.ToString(row["ExplanatoryNote"]) != String.Empty)
                            {
                                //Extend 1st row if explanatory notes are present.
                                // sb.Append(":&nbsp");
                                sb.Append(Convert.ToString(row["ExplanatoryNote"]));
                            }
                        }
                        sb.Append("</p>");
                        if (row["CatagoryURL"].GetType().Name != "DBNull")
                        {
                            if (Convert.ToString(row["CatagoryURL"]) != String.Empty)
                            {
                                string[] sampleDocFormURLs = Convert.ToString(row["CatagoryURL"]).Split(',');

                                foreach (var sampleDocFormURL in sampleDocFormURLs)
                                {
                                    //Only display hyperlink if sampleDocFromUrl available
                                    if (!sampleDocFormURL.IsNullOrEmpty())
                                    {
                                        sb.Append("\r<p>For more information click here:&nbsp");
                                        sb.Append(sampleDocFormURL);
                                    }
                                }

                                //sb.Append("\r<p>For more information click here:&nbsp");
                                //sb.Append(Convert.ToString(row["CatagoryURL"]));

                            }
                        }
                        sb.Append("</p>\r\r");
                    }
                    return sb.ToString();
                }
            }
            return null;
        }

        public Dictionary<String, object> GetCCOrderApprovalMailData(OrderPaymentDetail orderPaymentDetail, Int32 tenantID, String orderPackageTypeCode)
        {
            int subscriptionDuration;
            DateTime subscriptionStartDate = DateTime.Today;

            Dictionary<String, object> dictMailData = new Dictionary<String, object>();
            dictMailData.Add(EmailFieldConstants.USER_FULL_NAME, string.Concat(orderPaymentDetail.Order.OrganizationUserProfile.FirstName, " ", orderPaymentDetail.Order.OrganizationUserProfile.LastName));
            dictMailData.Add(EmailFieldConstants.ORDER_NO, orderPaymentDetail.Order.OrderNumber);
            dictMailData.Add(EmailFieldConstants.ORDER_DATE, orderPaymentDetail.Order.OrderDate.GetDateString(false));
            subscriptionDuration = orderPaymentDetail.Order.SubscriptionYear.IsNotNull() ? ((Int32)orderPaymentDetail.Order.SubscriptionYear * 12) : 0;
            subscriptionDuration += orderPaymentDetail.Order.SubscriptionMonth.IsNotNull() ? (Int32)orderPaymentDetail.Order.SubscriptionMonth : 0;

            dictMailData.Add(EmailFieldConstants.PROGRAM_DURATION, string.Concat(subscriptionDuration.ToString(), " ", "months"));

            if (/*UAT-916
                 * orderPaymentDetail.Order.lkpOrderPackageType.IsNotNull()
                && orderPaymentDetail.Order.lkpOrderPackageType.OPT_Code != OrderPackageTypes.BACKGROUND_PACKAGE.GetStringValue()*/
                orderPackageTypeCode.IsNotNull() && orderPackageTypeCode != OrderPackageTypes.BACKGROUND_PACKAGE.GetStringValue() && orderPaymentDetail.Order.PackageSubscriptions.IsNotNull()
                && orderPaymentDetail.Order.PackageSubscriptions.IsNotNull()
                && (orderPaymentDetail.Order.PartialOrderCancellationTypeID.IsNull() || (orderPaymentDetail.Order.lkpPartialOrderCancellationType.IsNotNull()
                && orderPaymentDetail.Order.lkpPartialOrderCancellationType.Code == PartialOrderCancellationType.BACKGROUND_PACKAGE.GetStringValue()))
                && orderPaymentDetail.Order.PackageSubscriptions.FirstOrDefault().ExpiryDate.IsNotNull())
            {
                subscriptionStartDate = ((DateTime)orderPaymentDetail.Order.PackageSubscriptions.FirstOrDefault().ExpiryDate).AddMonths(-subscriptionDuration);
                dictMailData.Add(EmailFieldConstants.SUBSCRIPTION_END_DATE, orderPaymentDetail.Order.PackageSubscriptions.FirstOrDefault().ExpiryDate.GetDateString(false));
                dictMailData.Add(EmailFieldConstants.SUBSCRIPTION_START_DATE, subscriptionStartDate.ToString("MM/dd/yyyy"));
            }

            //Null check
            if (orderPaymentDetail.Order.DeptProgramMapping1.IsNotNull())
            {
                //dictMailData.Add(EmailFieldConstants.NODE_HIERARCHY, orderPaymentDetail.Order.DeptProgramMapping.DPM_Label);
                //UAT - 1067 : Hierarchy for orders (background and screening) should display as the full hierarchy sleected during the order, not the node the package lives on. 
                dictMailData.Add(EmailFieldConstants.NODE_HIERARCHY, orderPaymentDetail.Order.DeptProgramMapping1.DPM_Label);
            }
            //dictMailData.Add(EmailFieldConstants.NODE_HIERARCHY, orderPaymentDetail.Order.DeptProgramMapping.DPM_Label);
            /*UAT-916 
             * dictMailData.Add(EmailFieldConstants.COST, orderPaymentDetail.Order.GrandTotal.GetCurrencyString(false));
             dictMailData.Add(EmailFieldConstants.PAYMENT_METHOD, orderPaymentDetail.Order.lkpPaymentOption.Name);*/
            dictMailData.Add(EmailFieldConstants.COST, orderPaymentDetail.OPD_Amount.GetCurrencyString(false));
            dictMailData.Add(EmailFieldConstants.PAYMENT_METHOD, orderPaymentDetail.lkpPaymentOption.IsNotNull() ? orderPaymentDetail.lkpPaymentOption.Name : String.Empty);
            dictMailData.Add(EmailFieldConstants.PAYMENT_RECEIVED_DATE, DateTime.Today.Date.ToString("MM/dd/yyyy"));
            if (orderPackageTypeCode != OrderPackageTypes.BACKGROUND_PACKAGE.GetStringValue() && orderPaymentDetail.Order.DeptProgramPackage.IsNotNull() && orderPaymentDetail.Order.DeptProgramPackage.CompliancePackage.IsNotNull())
            {
                //dictMailData.Add(EmailFieldConstants.PACKAGE_NAME, orderPaymentDetail.Order.DeptProgramPackage.CompliancePackage.PackageName);
                dictMailData.Add(EmailFieldConstants.PACKAGE_NAME, orderPaymentDetail.Order.DeptProgramPackage.CompliancePackage.PackageLabel.IsNullOrEmpty() ? orderPaymentDetail.Order.DeptProgramPackage.CompliancePackage.PackageName : orderPaymentDetail.Order.DeptProgramPackage.CompliancePackage.PackageLabel);
                //UAT-1787:Ability to insert checklist link (if configured) for a package in the order confirmation emails
                String checklistLink = orderPaymentDetail.Order.DeptProgramPackage.CompliancePackage.ChecklistURL.IsNullOrEmpty() ? String.Empty :
                                     orderPaymentDetail.Order.DeptProgramPackage.CompliancePackage.ChecklistURL;
                dictMailData.Add(EmailFieldConstants.CHECK_LIST_LINK, checklistLink);
            }
            dictMailData.Add(EmailFieldConstants.INSTITUTE_NAME, getTenantToBeUpdated(tenantID).TenantName);
            BkgOrder _bkgorder = _dbContext.BkgOrders.Include("BkgOrderPackages.BkgPackageHierarchyMapping.BackgroundPackage")
                .FirstOrDefault(x => x.BOR_MasterOrderID == orderPaymentDetail.Order.OrderID && !x.BOR_IsDeleted);
            String packages = String.Empty;

            List<Int32> bkgOrderPackageIds = null;

            if (orderPaymentDetail.OrderPkgPaymentDetails.IsNotNull())
            {
                bkgOrderPackageIds = orderPaymentDetail.OrderPkgPaymentDetails.Where(cond => cond.OPPD_BkgOrderPackageID != null
                                                && !cond.OPPD_IsDeleted && cond.lkpOrderPackageType != null &&
                                                cond.lkpOrderPackageType.OPT_Code == OrderPackageTypes.BACKGROUND_PACKAGE.GetStringValue())
                                                .Select(col => col.OPPD_BkgOrderPackageID.Value).ToList();
            }

            if (!_bkgorder.IsNullOrEmpty() && !bkgOrderPackageIds.IsNullOrEmpty())
            {
                //List<String> BkgPackagelist = _bkgorder.BkgOrderPackages.Where(cond => bkgOrderPackageIds.Contains(cond.BOP_ID) && !cond.BOP_IsDeleted)
                //                            .Select(x => x.BkgPackageHierarchyMapping.BackgroundPackage.BPA_Name).ToList();
                List<String> BkgPackagelist = _bkgorder.BkgOrderPackages.Where(cond => bkgOrderPackageIds.Contains(cond.BOP_ID) && !cond.BOP_IsDeleted)
                    .Select(x => ((x.BkgPackageHierarchyMapping.BackgroundPackage.BPA_Label != null && x.BkgPackageHierarchyMapping.BackgroundPackage.BPA_Label != String.Empty) ? x.BkgPackageHierarchyMapping.BackgroundPackage.BPA_Label : x.BkgPackageHierarchyMapping.BackgroundPackage.BPA_Name)).ToList();
                foreach (string item in BkgPackagelist)
                    packages += item + ",";
                if (packages.EndsWith(","))
                    packages = packages.Remove(packages.Length - 1);
                dictMailData.Add(EmailFieldConstants.BKG_PACKAGE_LIST, packages);
            }
            //add background packages list



            //if (packageSubscription.CompliancePackage.TenantID.IsNotNull())
            //{
            //dictMailData.Add(EmailFieldConstants.INSTITUTION_URL, GetInstitutionUrl((int)packageSubscription.CompliancePackage.TenantID));
            //}
            dictMailData.Add(EmailFieldConstants.INSTITUTION_URL, GetInstitutionUrl((int)tenantID));
            dictMailData.Add(EmailFieldConstants.REFUND_POLICY, "");
            dictMailData.Add(EmailFieldConstants.CC_NUMBER, orderPaymentDetail.OnlinePaymentTransaction.CCNumber);
            dictMailData.Add(EmailFieldConstants.CC_TYPE, orderPaymentDetail.OnlinePaymentTransaction.CCType);

            //UAT 1336 : Update order approval notification to student notes plus student note links for all categories.
            if (orderPackageTypeCode != OrderPackageTypes.BACKGROUND_PACKAGE.GetStringValue() && orderPaymentDetail.IsNotNull() && orderPaymentDetail.Order.IsNotNull() && orderPaymentDetail.Order.DeptProgramPackage.IsNotNull())
            {
                Int32 compPkgID = orderPaymentDetail.Order.DeptProgramPackage.DPP_CompliancePackageID;
                String catagoryExplanatoryInfo = GetCatagoryExplanatoryNoteInfoForPlaceholder(compPkgID);
                dictMailData.Add(EmailFieldConstants.CATEGORY_EXPLANATORY_NOTES, catagoryExplanatoryInfo);
            }

            dictMailData.Add(EmailFieldConstants.TENANT_ID, tenantID.ToString());

            return dictMailData;
        }

        public Dictionary<String, object> GetOrderCancellationMailData(OrderPaymentDetail orderPaymentDetail, int tenantId)
        {
            Dictionary<String, object> dictMailData = new Dictionary<String, object>();

            dictMailData.Add(EmailFieldConstants.USER_FULL_NAME, string.Concat(orderPaymentDetail.Order.OrganizationUserProfile.FirstName, " ", orderPaymentDetail.Order.OrganizationUserProfile.LastName));
            dictMailData.Add(EmailFieldConstants.ORDER_NO, orderPaymentDetail.Order.OrderNumber);
            //Null check
            if (orderPaymentDetail.Order.DeptProgramMapping1.IsNotNull())
            {
                //dictMailData.Add(EmailFieldConstants.NODE_HIERARCHY, orderPaymentDetail.Order.DeptProgramMapping.DPM_Label);
                //UAT - 1067 : Hierarchy for orders (background and screening) should display as the full hierarchy sleected during the order, not the node the package lives on. 
                dictMailData.Add(EmailFieldConstants.NODE_HIERARCHY, orderPaymentDetail.Order.DeptProgramMapping1.DPM_Label);
            }
            if (orderPaymentDetail.Order.DeptProgramPackage.IsNotNull() && orderPaymentDetail.Order.DeptProgramPackage.CompliancePackage.IsNotNull())
            {
                //dictMailData.Add(EmailFieldConstants.PACKAGE_NAME, orderPaymentDetail.Order.DeptProgramPackage.CompliancePackage.PackageName);
                dictMailData.Add(EmailFieldConstants.PACKAGE_NAME, orderPaymentDetail.Order.DeptProgramPackage.CompliancePackage.PackageLabel.IsNullOrEmpty() ? orderPaymentDetail.Order.DeptProgramPackage.CompliancePackage.PackageName : orderPaymentDetail.Order.DeptProgramPackage.CompliancePackage.PackageLabel);
            }
            dictMailData.Add(EmailFieldConstants.INSTITUTE_NAME, getTenantToBeUpdated(tenantId).TenantName);
            //dictMailData.Add(EmailFieldConstants.NODE_HIERARCHY, orderPaymentDetail.Order.DeptProgramPackage.DeptProgramMapping.DPM_Label);


            return dictMailData;
        }

        public Dictionary<String, object> GetOrderCancellationApprovedMailData(OrderPaymentDetail orderPaymentDetail, int tenantId)
        {
            Dictionary<String, object> dictMailData = new Dictionary<String, object>();
            dictMailData.Add(EmailFieldConstants.USER_FULL_NAME, string.Concat(orderPaymentDetail.Order.OrganizationUserProfile.FirstName, " ", orderPaymentDetail.Order.OrganizationUserProfile.LastName));
            dictMailData.Add(EmailFieldConstants.ORDER_NO, orderPaymentDetail.Order.OrderNumber);
            //Null check
            if (orderPaymentDetail.Order.DeptProgramMapping1.IsNotNull())
            {
                //dictMailData.Add(EmailFieldConstants.NODE_HIERARCHY, orderPaymentDetail.Order.DeptProgramMapping.DPM_Label);
                //UAT - 1067 : Hierarchy for orders (background and screening) should display as the full hierarchy sleected during the order, not the node the package lives on. 
                dictMailData.Add(EmailFieldConstants.NODE_HIERARCHY, orderPaymentDetail.Order.DeptProgramMapping1.DPM_Label);
            }
            if (orderPaymentDetail.Order.DeptProgramPackage.IsNotNull() && orderPaymentDetail.Order.DeptProgramPackage.CompliancePackage.IsNotNull())
            {
                //dictMailData.Add(EmailFieldConstants.PACKAGE_NAME, orderPaymentDetail.Order.DeptProgramPackage.CompliancePackage.PackageName);
                dictMailData.Add(EmailFieldConstants.PACKAGE_NAME, orderPaymentDetail.Order.DeptProgramPackage.CompliancePackage.PackageLabel.IsNullOrEmpty() ? orderPaymentDetail.Order.DeptProgramPackage.CompliancePackage.PackageName : orderPaymentDetail.Order.DeptProgramPackage.CompliancePackage.PackageLabel);
            }
            dictMailData.Add(EmailFieldConstants.INSTITUTE_NAME, getTenantToBeUpdated(tenantId).TenantName);

            //dictMailData.Add(EmailFieldConstants.NODE_HIERARCHY, orderPaymentDetail.Order.DeptProgramPackage.DeptProgramMapping.DPM_Label);

            return dictMailData;
        }

        public Dictionary<String, object> GetOrderCancellationRejectedMailData(OrderPaymentDetail orderPaymentDetail, Int32 tenantId)
        {
            Dictionary<String, object> dictMailData = new Dictionary<String, object>();
            dictMailData.Add(EmailFieldConstants.USER_FULL_NAME, string.Concat(orderPaymentDetail.Order.OrganizationUserProfile.FirstName, " ", orderPaymentDetail.Order.OrganizationUserProfile.LastName));
            dictMailData.Add(EmailFieldConstants.ORDER_NO, orderPaymentDetail.Order.OrderNumber);
            //Null check
            if (orderPaymentDetail.Order.DeptProgramMapping1.IsNotNull())
            {
                //dictMailData.Add(EmailFieldConstants.NODE_HIERARCHY, orderPaymentDetail.Order.DeptProgramMapping.DPM_Label);
                //UAT - 1067 : Hierarchy for orders (background and screening) should display as the full hierarchy sleected during the order, not the node the package lives on. 
                dictMailData.Add(EmailFieldConstants.NODE_HIERARCHY, orderPaymentDetail.Order.DeptProgramMapping1.DPM_Label);
            }
            //dictMailData.Add(EmailFieldConstants.NODE_HIERARCHY, orderPaymentDetail.Order.DeptProgramPackage.DeptProgramMapping.DPM_Label);
            dictMailData.Add(EmailFieldConstants.REJECTION_REASON, orderPaymentDetail.Order.RejectionReason);

            dictMailData.Add(EmailFieldConstants.APPLICATION_URL, GetInstitutionUrl(tenantId));
            if (orderPaymentDetail.Order.DeptProgramPackage.IsNotNull() && orderPaymentDetail.Order.DeptProgramPackage.CompliancePackage.IsNotNull())
            {
                //dictMailData.Add(EmailFieldConstants.PACKAGE_NAME, orderPaymentDetail.Order.DeptProgramPackage.CompliancePackage.PackageName);
                dictMailData.Add(EmailFieldConstants.PACKAGE_NAME, orderPaymentDetail.Order.DeptProgramPackage.CompliancePackage.PackageLabel.IsNullOrEmpty() ? orderPaymentDetail.Order.DeptProgramPackage.CompliancePackage.PackageName : orderPaymentDetail.Order.DeptProgramPackage.CompliancePackage.PackageLabel);
            }
            dictMailData.Add(EmailFieldConstants.INSTITUTE_NAME, getTenantToBeUpdated(tenantId).TenantName);

            //if (orderPaymentDetail.Order.DeptProgramPackage.CompliancePackage.TenantID.IsNotNull())
            //{
            //dictMailData.Add(EmailFieldConstants.APPLICATION_URL, GetInstitutionUrl((int)orderPaymentDetail.Order.DeptProgramPackage.CompliancePackage.TenantID));
            //}

            return dictMailData;
        }

        public Dictionary<String, object> GetRushOrderConfirmationMailData(PackageSubscription packageSubscription, Int32 tenantId, Int32 onlinePaymentDetailID)
        {
            Dictionary<String, object> dictMailData = new Dictionary<String, object>();
            dictMailData.Add(EmailFieldConstants.USER_FULL_NAME, string.Concat(packageSubscription.Order.OrganizationUserProfile.FirstName, " ", packageSubscription.Order.OrganizationUserProfile.LastName));
            dictMailData.Add(EmailFieldConstants.ORDER_NO, packageSubscription.Order.OrderNumber);
            //dictMailData.Add(EmailFieldConstants.NODE_HIERARCHY, packageSubscription.Order.DeptProgramPackage.DeptProgramMapping.DPM_Label);
            //UAT - 1067 : Hierarchy for orders (background and screening) should display as the full hierarchy sleected during the order, not the node the package lives on. 
            dictMailData.Add(EmailFieldConstants.NODE_HIERARCHY, packageSubscription.Order.DeptProgramMapping1.IsNull() ? String.Empty : packageSubscription.Order.DeptProgramMapping1.DPM_Label);
            dictMailData.Add(EmailFieldConstants.COST, packageSubscription.Order.RushOrderPrice.GetCurrencyString(false));
            dictMailData.Add(EmailFieldConstants.PAYMENT_METHOD, packageSubscription.Order.OrderPaymentDetails.FirstOrDefault(
                             x => x.OPD_ID == onlinePaymentDetailID).lkpPaymentOption.Name);
            dictMailData.Add(EmailFieldConstants.PAYMENT_RECEIVED_DATE, DateTime.Today.Date.ToString("MM/dd/yyyy"));
            if (packageSubscription.CompliancePackage.IsNotNull())
            {

                //dictMailData.Add(EmailFieldConstants.PACKAGE_NAME, packageSubscription.CompliancePackage.PackageName);
                dictMailData.Add(EmailFieldConstants.PACKAGE_NAME, packageSubscription.CompliancePackage.PackageLabel.IsNullOrEmpty() ? packageSubscription.CompliancePackage.PackageName : packageSubscription.CompliancePackage.PackageLabel);
            }
            dictMailData.Add(EmailFieldConstants.INSTITUTE_NAME, getTenantToBeUpdated(tenantId).TenantName);

            return dictMailData;
        }

        public Dictionary<String, object> GetCCRushOrderConfirmationMailData(PackageSubscription packageSubscription, Int32 tenantId, Int32 onlinePaymentDetailID)
        {
            Dictionary<String, object> dictMailData = new Dictionary<String, object>();
            dictMailData.Add(EmailFieldConstants.USER_FULL_NAME, string.Concat(packageSubscription.Order.OrganizationUserProfile.FirstName, " ", packageSubscription.Order.OrganizationUserProfile.LastName));
            dictMailData.Add(EmailFieldConstants.ORDER_NO, packageSubscription.Order.OrderNumber);
            //dictMailData.Add(EmailFieldConstants.NODE_HIERARCHY, packageSubscription.Order.DeptProgramPackage.DeptProgramMapping.DPM_Label);
            //UAT - 1067 : Hierarchy for orders (background and screening) should display as the full hierarchy sleected during the order, not the node the package lives on. 
            dictMailData.Add(EmailFieldConstants.NODE_HIERARCHY, packageSubscription.Order.DeptProgramMapping1.IsNull() ? String.Empty : packageSubscription.Order.DeptProgramMapping1.DPM_Label);
            dictMailData.Add(EmailFieldConstants.COST, packageSubscription.Order.RushOrderPrice.GetCurrencyString(false));
            dictMailData.Add(EmailFieldConstants.PAYMENT_METHOD, packageSubscription.Order.OrderPaymentDetails.FirstOrDefault(
                             x => x.OPD_ID == onlinePaymentDetailID).lkpPaymentOption.Name);
            dictMailData.Add(EmailFieldConstants.PAYMENT_RECEIVED_DATE, DateTime.Today.Date.ToString("MM/dd/yyyy"));
            if (packageSubscription.CompliancePackage.IsNotNull())
            {

                //dictMailData.Add(EmailFieldConstants.PACKAGE_NAME, packageSubscription.CompliancePackage.PackageName);
                dictMailData.Add(EmailFieldConstants.PACKAGE_NAME, packageSubscription.CompliancePackage.PackageLabel.IsNullOrEmpty() ? packageSubscription.CompliancePackage.PackageName : packageSubscription.CompliancePackage.PackageLabel);
            }
            dictMailData.Add(EmailFieldConstants.INSTITUTE_NAME, getTenantToBeUpdated(tenantId).TenantName);

            dictMailData.Add(EmailFieldConstants.CC_NUMBER, packageSubscription.Order.OrderPaymentDetails.FirstOrDefault(
                             x => x.OPD_ID == onlinePaymentDetailID).OnlinePaymentTransaction.CCNumber);
            dictMailData.Add(EmailFieldConstants.CC_TYPE, packageSubscription.Order.OrderPaymentDetails.FirstOrDefault(
                             x => x.OPD_ID == onlinePaymentDetailID).OnlinePaymentTransaction.CCType);
            dictMailData.Add(EmailFieldConstants.REFUND_POLICY, "");

            return dictMailData;
        }

        public Dictionary<String, object> GetOrderRejectionMailData(OrderPaymentDetail orderPaymentDetail, Int32 tenantId, Boolean isCompliancePackageInclude)
        {
            Dictionary<String, object> dictMailData = new Dictionary<String, object>();
            dictMailData.Add(EmailFieldConstants.USER_FULL_NAME, string.Concat(orderPaymentDetail.Order.OrganizationUserProfile.FirstName, " ", orderPaymentDetail.Order.OrganizationUserProfile.LastName));
            dictMailData.Add(EmailFieldConstants.ORDER_NO, orderPaymentDetail.Order.OrderNumber);
            //Null check
            if (orderPaymentDetail.Order.DeptProgramMapping1.IsNotNull())
            {
                //dictMailData.Add(EmailFieldConstants.NODE_HIERARCHY, orderPaymentDetail.Order.DeptProgramMapping.DPM_Label);
                //UAT - 1067 : Hierarchy for orders (background and screening) should display as the full hierarchy sleected during the order, not the node the package lives on. 
                dictMailData.Add(EmailFieldConstants.NODE_HIERARCHY, orderPaymentDetail.Order.DeptProgramMapping1.DPM_Label);
            }
            //dictMailData.Add(EmailFieldConstants.NODE_HIERARCHY, orderPaymentDetail.Order.DeptProgramPackage.DeptProgramMapping.DPM_Label);
            dictMailData.Add(EmailFieldConstants.REJECTION_REASON, orderPaymentDetail.OPD_RejectionReason);

            //if (orderPaymentDetail.Order.DeptProgramPackage.CompliancePackage.TenantID.IsNotNull())
            //{
            dictMailData.Add(EmailFieldConstants.APPLICATION_URL, GetInstitutionUrl(tenantId));
            //}
            //Added a iscompliance package  check to ignore if Ordrpayment does not Contain compliancePAckage.
            if (orderPaymentDetail.Order.DeptProgramPackage.IsNotNull() && orderPaymentDetail.Order.DeptProgramPackage.CompliancePackage.IsNotNull() && isCompliancePackageInclude)
            {
                //dictMailData.Add(EmailFieldConstants.PACKAGE_NAME, orderPaymentDetail.Order.DeptProgramPackage.CompliancePackage.PackageName);
                dictMailData.Add(EmailFieldConstants.PACKAGE_NAME, orderPaymentDetail.Order.DeptProgramPackage.CompliancePackage.PackageLabel.IsNullOrEmpty() ? orderPaymentDetail.Order.DeptProgramPackage.CompliancePackage.PackageName : orderPaymentDetail.Order.DeptProgramPackage.CompliancePackage.PackageLabel);
            }
            dictMailData.Add(EmailFieldConstants.INSTITUTE_NAME, getTenantToBeUpdated(tenantId).TenantName);

            return dictMailData;
        }


        private string GetInstitutionUrl(int tenantId)
        {
            WebSiteRepository webSiteRepository = new WebSiteRepository();

            var webSite = webSiteRepository.GetWebSiteDetail(tenantId);
            String applicationUrl = String.Empty;
            if (webSite.IsNotNull() && webSite.WebSiteID != SysXDBConsts.NONE)
            {
                applicationUrl = webSite.URL;
            }
            else
            {
                webSite = webSiteRepository.GetWebSiteDetail(1);
                applicationUrl = webSite.URL;
            }

            if (!(applicationUrl.Trim().StartsWith("http://", StringComparison.OrdinalIgnoreCase) || applicationUrl.Trim().StartsWith("https://", StringComparison.OrdinalIgnoreCase)))
            {
                if (HttpContext.Current != null)
                    applicationUrl = string.Concat(HttpContext.Current.Request.Url.Scheme, "://", applicationUrl.Trim());
                else
                    applicationUrl = string.Concat("http://", applicationUrl.Trim());
            }

            return applicationUrl;
        }

        #endregion


        public Boolean GetDocumentTypeAttributeData(Int32 applicantItemDataId, out Int32 attributeId, out Int32 applicantAttributeDataId, out Int32 documentCount)
        {
            List<ApplicantComplianceAttributeData> lstAttributeData = _dbContext.ApplicantComplianceAttributeDatas.Where(attData => attData.ApplicantComplianceItemID == applicantItemDataId).ToList();
            attributeId = AppConsts.NONE;
            applicantAttributeDataId = AppConsts.NONE;
            documentCount = AppConsts.NONE;

            foreach (var attData in lstAttributeData)
            {
                if (attData.ComplianceAttribute.lkpComplianceAttributeDatatype.Code.ToLower() == ComplianceAttributeDatatypes.FileUpload.GetStringValue().ToLower())
                {
                    attributeId = attData.ComplianceAttributeID;
                    applicantAttributeDataId = attData.ApplicantComplianceAttributeID;
                    documentCount = attData.ApplicantComplianceDocumentMaps.Where(doc => doc.ApplicantComplianceAttributeID == attData.ApplicantComplianceAttributeID
                       && !doc.IsDeleted).ToList().Count();
                    return true;
                }
            }
            return false;
        }

        /// <summary>
        ///  Gets the Document Type attribute data for all items except Incomplete items, for UI rule validation in the Verification details screen.
        /// </summary>
        /// <param name="lstItemData"></param>
        /// <returns></returns>
        public List<ApplicantComplianceAttributeData> GetAllDocumentTypeAttributData(List<Int32> lstApplicantItemDataIds)
        {
            String _fileUploadCode = ComplianceAttributeDatatypes.FileUpload.GetStringValue();

            return _dbContext.ApplicantComplianceAttributeDatas.Include(SysXEntityConstants.APPLICANT_COMPLIANCE_ITEMDATA).
                             Where(attData => lstApplicantItemDataIds.Contains(attData.ApplicantComplianceItemID)
                          && attData.IsDeleted == false && attData.ComplianceAttribute.lkpComplianceAttributeDatatype.Code == _fileUploadCode).ToList();
        }

        #region Manage Institution Node

        /// <summary>
        /// Method to return all Nodes.
        /// </summary>
        /// <returns>IQueryable</returns>
        public IQueryable<InstitutionNode> GetInstitutionNodeList()
        {
            return _dbContext.InstitutionNodes.Where(cond => !cond.IN_IsDeleted);
        }

        /// <summary>
        /// Get the Node by NodeId
        /// </summary>
        /// <param name="priceAdjustmentId">NodeId</param>
        /// <returns>InstitutionNode</returns>
        public InstitutionNode GetNodeByNodeId(Int32 NodeId)
        {
            return _dbContext.InstitutionNodes.Where(cond => cond.IN_ID == NodeId && !cond.IN_IsDeleted).FirstOrDefault();
        }

        /// <summary>
        /// Save Institution Node
        /// </summary>
        /// <param name="nodeDetail">nodeDetail</param>
        /// <param name="lstCustomAttributeMapping">lstCustomAttributeMapping</param>
        /// <returns></returns>
        public Boolean SaveNodeDetail(InstitutionNode nodeDetail, List<CustomAttributeMapping> lstCustomAttributeMapping)
        {
            _dbContext.InstitutionNodes.AddObject(nodeDetail);
            if (_dbContext.SaveChanges() > 0)
            {
                if (lstCustomAttributeMapping.Count > 0)
                {
                    lstCustomAttributeMapping.ForEach(x => x.CAM_RecordID = nodeDetail.IN_ID);
                    foreach (CustomAttributeMapping customAttributeMapping in lstCustomAttributeMapping)
                    {
                        _dbContext.CustomAttributeMappings.AddObject(customAttributeMapping);
                    }
                    if (_dbContext.SaveChanges() > 0)
                        return true;
                }
                return true;
            }
            return false;
        }

        /// <summary>
        /// Update Institution Node
        /// </summary>
        /// <param name="nodeId">nodeId</param>
        /// <param name="lstCustomAttributeMapping">lstCustomAttributeMapping</param>
        /// <param name="currentUserId">currentUserId</param>
        /// <returns></returns>
        public Boolean UpdateNodeDetail(Int32 nodeId, List<CustomAttributeMapping> lstCustomAttributeMapping, Int32 currentUserId)
        {
            List<CustomAttributeMapping> mappedCustomAttributeList = _dbContext.CustomAttributeMappings.Where(cond => cond.CAM_RecordID == nodeId && !cond.CAM_IsDeleted).ToList();
            List<CustomAttributeMapping> customAttributForDelete = mappedCustomAttributeList.Where(x => !lstCustomAttributeMapping.Any(cnd => cnd.CAM_CustomAttributeID == x.CAM_CustomAttributeID)).ToList();
            List<CustomAttributeMapping> customAttributToSave = lstCustomAttributeMapping.Where(y => !mappedCustomAttributeList.Any(cd => cd.CAM_CustomAttributeID == y.CAM_CustomAttributeID)).ToList();
            //List<CustomAttributeMapping> customAttributToUpdate = mappedCustomAttributeList.Where(y => lstCustomAttributeMapping.Any(cd => cd.CAM_CustomAttributeMappingID == y.CAM_CustomAttributeMappingID && cd.CAM_IsRequired != y.CAM_IsRequired)).ToList();

            List<CustomAttributeMapping> customAttributToUpdate = mappedCustomAttributeList.Where(y => lstCustomAttributeMapping.Any(cd => cd.CAM_CustomAttributeMappingID == y.CAM_CustomAttributeMappingID)).ToList();

            //List<CustomAttributeMapping> customAttributToUpdateEditableByApplicant = mappedCustomAttributeList.Where(y => lstCustomAttributeMapping.Any(cd => cd.CAM_CustomAttributeMappingID == y.CAM_CustomAttributeMappingID && cd.CAM_IsEditableByApplicant != y.CAM_IsEditableByApplicant)).ToList();

            customAttributForDelete.ForEach(cond =>
            {
                cond.CAM_IsDeleted = true;
                cond.CAM_ModifiedByID = currentUserId;
                cond.CAM_ModifiedOn = DateTime.Now;
            });
            customAttributToSave.ForEach(con =>
            {
                _dbContext.CustomAttributeMappings.AddObject(con);
            });

            customAttributToUpdate.ForEach(cond =>
            {
                CustomAttributeMapping tempCustomAttr = lstCustomAttributeMapping.FirstOrDefault(x => x.CAM_CustomAttributeMappingID == cond.CAM_CustomAttributeMappingID);

                //cond.CAM_IsRequired = cond.CAM_IsRequired == null ? false : !cond.CAM_IsRequired;
                //UAT-4997
                cond.CAM_IsRequired = tempCustomAttr.CAM_IsRequired;
                cond.CAM_IsEditableByApplicant = tempCustomAttr.CAM_IsEditableByApplicant;

                cond.CAM_ModifiedByID = currentUserId;
                cond.CAM_ModifiedOn = DateTime.Now;
            });
            if (_dbContext.SaveChanges() > 0)
                return true;
            return false;
        }

        /// <summary>
        /// Method to return all Node Types.
        /// </summary>
        /// <returns>IQueryable</returns>
        public IQueryable<InstitutionNodeType> GetInstitutionNodeTypeList()
        {
            return _dbContext.InstitutionNodeTypes.Where(cond => !cond.INT_IsDeleted).OrderBy(ordBy => ordBy.INT_Name);
        }

        /// <summary>
        /// Check institution Node Mapping
        /// </summary>
        /// <param name="priceAdjustmentId">NodeId</param>
        /// <returns>Boolean</returns>
        public Boolean IsNodeMapped(Int32 NodeId)
        {
            var institutionNode = _dbContext.DeptProgramMappings.Where(cond => cond.DPM_InstitutionNodeID == NodeId && !cond.DPM_IsDeleted);

            if (!institutionNode.IsNullOrEmpty())
                return true;
            return false;
        }

        /// <summary>
        /// Check Get Last Code From Institution Node
        /// </summary>
        /// <returns>String</returns>
        public String GetLastCodeFromInstitutionNode()
        {
            var institutionNode = _dbContext.InstitutionNodes.OrderByDescending(cond => cond.IN_CreatedOn).FirstOrDefault();
            if (!institutionNode.IsNullOrEmpty())
                return institutionNode.IN_Code;
            return String.Empty;
        }

        /// <summary>
        /// Method to return all Node Types of program.
        /// </summary>
        /// <returns>IQueryable</returns>
        public IQueryable<InstitutionNode> GetAllInstituteNodePrograms(String code)
        {
            return _dbContext.InstitutionNodes.Where(cond => !cond.IN_IsDeleted && cond.InstitutionNodeType.INT_Code == code);
        }

        #region Custom Attribute

        /// <summary>
        /// Get mapping list of custom attribute with node 
        /// </summary>
        /// <param name="customAttributeNodeId">customAttributeNodeId</param>
        /// <returns>IQueryable</returns>
        public IQueryable<CustomAttributeMapping> GetNodeMappedCustomAttributeList(Int32 customAttributeNodeId)
        {
            String hierarchyUseTypeCode = CustomAttributeUseTypeContext.Hierarchy.GetStringValue();
            return _dbContext.CustomAttributeMappings.Where(cond => cond.CAM_RecordID == customAttributeNodeId && !cond.CAM_IsDeleted && cond.CustomAttribute.lkpCustomAttributeUseType.Code == hierarchyUseTypeCode);
        }

        /// <summary>
        /// Get Custom Attribute on the basis of Use Type Code.
        /// </summary>
        /// <param name="useTypeCode">useTypeCode</param>
        /// <returns>IQueryable</returns>
        public IQueryable<CustomAttribute> GetCustomAttributeListByType(String useTypeCode)
        {
            return _dbContext.CustomAttributes.Where(cond => cond.lkpCustomAttributeUseType.Code == useTypeCode && !cond.CA_IsDeleted && cond.CA_IsActive);
        }

        /// <summary>
        /// get list of ids mapped with custom attribute value table.
        /// </summary>
        /// <param name="customAttributeMappingIds">customAttributeMappingIds</param>
        /// <returns>List</returns>
        public List<Int32> GetListOfIdMappedWithCustomAttrValue(List<Int32> customAttributeMappingIds)
        {
            return _dbContext.CustomAttributeValues.Where(cond => customAttributeMappingIds.Contains(cond.CAV_CustomAttributeMappingID) && !cond.CAV_IsDeleted).Select(x => x.CAV_CustomAttributeMappingID).ToList();
        }

        #endregion

        #region Custom Attributes

        public List<TypeCustomAttributes> GetCustomAttributes(Int32 mappingRecordId, Int32 valueRecordId, String useTypeCode, Int32 organizationUserId)
        {
            return _dbContext.GetCustomAttributes(useTypeCode, mappingRecordId, valueRecordId, organizationUserId).ToList();
        }

        /// <summary>
        /// Gets the Custom Attributes for the Last selected node in the hierarchy
        /// </summary>
        /// <param name="useTypeCode"></param>
        /// <param name="selectedDPMId"></param>
        /// <param name="organizationUserId"></param>
        /// <returns></returns>
        public List<TypeCustomAttributes> GetCustomAttributesByNodes(String useTypeCode, Int32? selectedDPMId, Int32 organizationUserId)
        {
            return _dbContext.GetCustomAttributesByNodes(useTypeCode, selectedDPMId, organizationUserId).ToList();
        }

        public List<TypeCustomAttributesSearch> GetCustomAttributesSearch(Int32 mappingRecordId, String useTypeCode)
        {
            return _dbContext.GetCustomAttributesSearch(useTypeCode, mappingRecordId).ToList();
        }

        /// <summary>
        /// Get the Custom Attributes for multiple Nodes selected  - UAT 1055
        /// </summary>
        /// <param name="mappingRecordId"></param>
        /// <param name="useTypeCode"></param>
        /// <returns></returns>
        public List<TypeCustomAttributesSearch> GetCustomAttributesNodeSearch(String dpmIds, String useTypeCode)
        {
            return _dbContext.GetCustomAttributesNodeSearch(useTypeCode, dpmIds).ToList();
        }

        public void SaveCustomAttributeData(List<CustomAttributeValue> lstCAValues, Int32 currentLoggedInUserId)
        {
            DateTime dtCurrentDateTime = DateTime.Now;
            foreach (var customAttribute in lstCAValues)
            {
                if (customAttribute.CAV_CustomAttributeValueID.IsNullOrEmpty())
                {
                    customAttribute.CAV_IsDeleted = false;
                    customAttribute.CAV_CreatedByID = currentLoggedInUserId;
                    customAttribute.CAV_CreatedOn = dtCurrentDateTime;
                    _dbContext.CustomAttributeValues.AddObject(customAttribute);
                }
                else
                {
                    CustomAttributeValue cavToUpdate = _dbContext.CustomAttributeValues.Where(cav => cav.CAV_CustomAttributeValueID == customAttribute.CAV_CustomAttributeValueID).FirstOrDefault();
                    cavToUpdate.CAV_ModifiedByID = currentLoggedInUserId;
                    cavToUpdate.CAV_ModifiedOn = dtCurrentDateTime;
                    cavToUpdate.CAV_AttributeValue = customAttribute.CAV_AttributeValue;
                }
            }
            _dbContext.SaveChanges();
        }

        #endregion
        #endregion

        #region Manage Custom Attribute

        /// <summary>
        /// Get All Client Custom Attributes
        /// </summary>
        /// <returns>List of Custom Attributes</returns>
        public IQueryable<CustomAttribute> GetCustomAttributes()
        {
            try
            {
                return _dbContext.CustomAttributes.Where(cond => !cond.CA_IsDeleted);
            }
            catch (SysXException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Add Custom Attributes
        /// </summary>
        /// <returns>Boolean</returns>
        public Boolean AddCustomAttribute(CustomAttribute customAttribute)
        {
            try
            {
                _dbContext.CustomAttributes.AddObject(customAttribute);
                if (_dbContext.SaveChanges() > 0)
                    return true;
                return false;
            }
            catch (SysXException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Update Custom Attributes
        /// </summary>
        /// <returns>Boolean</returns>
        public Boolean UpdateCustomAttribute(CustomAttribute customAttribute)
        {
            try
            {
                CustomAttribute customAttr = GetCustomAttribute(customAttribute.CA_CustomAttributeID);
                if (customAttr != null)
                {
                    customAttr.CA_CustomAttributeUseTypeID = customAttribute.CA_CustomAttributeUseTypeID;
                    customAttr.CA_CustomAttributeDataTypeID = customAttribute.CA_CustomAttributeDataTypeID;
                    customAttr.CA_AttributeName = customAttribute.CA_AttributeName;
                    customAttr.CA_AttributeLabel = customAttribute.CA_AttributeLabel;
                    customAttr.CA_Description = customAttribute.CA_Description;
                    customAttr.CA_StringLength = customAttribute.CA_StringLength;
                    customAttr.CA_IsActive = customAttribute.CA_IsActive;
                    customAttr.CA_ModifiedByID = customAttribute.CA_ModifiedByID;
                    customAttr.CA_ModifiedOn = customAttribute.CA_ModifiedOn;
                    customAttr.CA_RegularExpression = customAttribute.CA_RegularExpression;
                    customAttr.CA_RegExpErrorMsg = customAttribute.CA_RegExpErrorMsg;
                    customAttr.CA_IsRequired = customAttribute.CA_IsRequired;
                    customAttr.CA_RelatedCustomAttributeId = customAttribute.CA_RelatedCustomAttributeId;
                    customAttr.CA_DisplayInSearchFilter = customAttribute.CA_DisplayInSearchFilter;
                    customAttr.CA_ShowInPendingComProfilesGrid = customAttribute.CA_ShowInPendingComProfilesGrid;
                    customAttr.CA_IncludeInNotification = customAttribute.CA_IncludeInNotification;
                    if (_dbContext.SaveChanges() > 0)
                        return true;
                    else
                        return false;
                }
                return false;
            }
            catch (SysXException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Delete Custom Attributes
        /// </summary>
        /// <returns>Boolean</returns>
        public Boolean DeleteCustomAttribute(Int32 customAttributeId, Int32 userId)
        {
            try
            {
                CustomAttribute customAttr = GetCustomAttribute(customAttributeId);
                if (customAttr != null)
                {
                    customAttr.CA_IsDeleted = true;
                    customAttr.CA_ModifiedByID = userId;
                    customAttr.CA_ModifiedOn = DateTime.Now;
                    if (_dbContext.SaveChanges() > 0)
                        return true;
                    else
                        return false;
                }
                return false;
            }
            catch (SysXException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Checks Custom attribute is mapped or not.
        /// </summary>
        /// <returns>Boolean</returns>
        public Boolean IsAttributeMapped(Int32 customAttributeId, String useTypeCode)
        {
            CustomAttribute customAttribute = _dbContext.CustomAttributes.Where(cond => cond.CA_CustomAttributeID == customAttributeId && cond.lkpCustomAttributeUseType.Code == useTypeCode).FirstOrDefault();
            if (!customAttribute.IsNullOrEmpty())
            {
                if (customAttribute.CustomAttributeMappings.IsNullOrEmpty() || customAttribute.CustomAttributeMappings.Count == 0)
                {
                    return false;
                }
                else
                {
                    if (customAttribute.CustomAttributeMappings.Any(cond => !cond.CAM_IsDeleted))
                        return true;
                    else
                        return false;
                }
            }
            else
            {
                return false;
            }
        }

        /// <summary>
        /// Get Custom Attribute By Id
        /// </summary>
        /// <returns>Custom Attribute</returns>
        public CustomAttribute GetCustomAttribute(Int32 Id)
        {
            return _dbContext.CustomAttributes.Where(cond => cond.CA_CustomAttributeID == Id).FirstOrDefault();
        }



        #endregion

        #region ApplicantPortfolioCustomAttribute
        public List<Int32> GetDepartmentProgramMappingId(Int32 organizationUserId)
        {
            try
            {
                if (organizationUserId.IsNotNull())
                {
                    List<ApplicantHierarchyMapping> applicantHierarchyMapping = _dbContext.ApplicantHierarchyMappings.Where(cond => cond.AHM_OrganizationUserID == organizationUserId && cond.AHM_IsDeleted == false).ToList();
                    return applicantHierarchyMapping.Select(c => c.AHM_HierarchyNodeID).ToList();
                }
                else
                {
                    return null;
                }
            }
            catch (SysXException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw (new SysXException(ex.Message, ex));
            }
        }
        public List<DeptProgramMapping> GetDepartmentProgramMappingRecord(List<Int32> departmentProgramMappingIds)
        {
            try
            {
                if (departmentProgramMappingIds.IsNotNull())
                    return _dbContext.DeptProgramMappings.Where(cond => departmentProgramMappingIds.Contains(cond.DPM_ID) && !cond.DPM_IsDeleted).ToList();
                else
                    return null;
            }
            catch (SysXException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw (new SysXException(ex.Message, ex));
            }
        }
        #endregion

        public DataSet Get(int tenantId, string name, Dictionary<string, string> parameters)
        {
            string securityDBConnectionString = ConfigurationManager.ConnectionStrings["ConnectionName"].ConnectionString;
            using (SqlConnection con = new SqlConnection(securityDBConnectionString))
            {
                con.Open();

                using (SqlCommand cmd = new SqlCommand())
                {
                    cmd.Connection = con;

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = "usp_GetWidgetData";

                    DataTable dt;
                    // create data table to insert items
                    dt = new DataTable("Parameters");
                    dt.Columns.Add("ParamName", typeof(string));
                    dt.Columns.Add("ParamValue", typeof(string));
                    if (parameters != null)
                        foreach (string key in parameters.Keys)
                            dt.Rows.Add(key, parameters[key]);

                    cmd.Parameters.AddWithValue("@TenantID", tenantId);
                    cmd.Parameters.AddWithValue("@WidgetName", name);
                    SqlParameter tvpParam = cmd.Parameters.AddWithValue("@Params", dt); //Needed TVP
                    tvpParam.SqlDbType = SqlDbType.Structured; //tells ADO.NET we are passing TVP

                    using (SqlDataAdapter da = new SqlDataAdapter(cmd))
                    {
                        // Fill the DataSet using default values for DataTable names, etc
                        DataSet dataset = new DataSet();
                        da.Fill(dataset);

                        return dataset;
                    }
                }
            }
        }

        #region Applicant Portfolio Search && Applicant User Group Mapping

        public List<ApplicantDataList> GetApplicantPortfolioSearch(SearchItemDataContract searchDataContract, CustomPagingArgsContract gridCustomPaging)
        {
            try
            {
                string orderBy = QueueConstants.APPLICANT_SEARCH_DEFAULT_SORTING_FIELDS;
                string ordDirection = null;
                String matchingUserGroupIds = null;
                if (!searchDataContract.MatchedSelectedUserGroupIDs.IsNullOrEmpty())
                {
                    matchingUserGroupIds = String.Join(",", searchDataContract.MatchedSelectedUserGroupIDs.Select(x => x.ToString()).ToArray());
                }
                orderBy = String.IsNullOrEmpty(gridCustomPaging.SortExpression) ? orderBy : gridCustomPaging.SortExpression;
                ordDirection = gridCustomPaging.SortDirectionDescending == false ? null : "desc";

                List<ApplicantDataList> lstApplicantDataList = _dbContext.GetApplicantPortfolioSearch(searchDataContract.ApplicantFirstName,
                     searchDataContract.ApplicantLastName, searchDataContract.OrganizationUserId, searchDataContract.EmailAddress,
                     searchDataContract.ApplicantSSN, searchDataContract.DateOfBirth, searchDataContract.SelectedDPMIds, searchDataContract.CustomFields,
                     searchDataContract.FilterUserGroupID, searchDataContract.MatchUserGroupID, orderBy, ordDirection, gridCustomPaging.CurrentPageIndex,
                     gridCustomPaging.PageSize, searchDataContract.LoggedInUserId, searchDataContract.LoggedInUserTenantId, searchDataContract.ArchieveStateId,
                     searchDataContract.OrderCreatedFrom, searchDataContract.OrderCreatedTo, searchDataContract.IsUserGroupAssigned, matchingUserGroupIds, searchDataContract.ShowActiveOrdersOnly).ToList(); // New parameter 'searchDataContract.ShowActiveOrdersOnly' added for UAT-4273

                return lstApplicantDataList;
            }
            catch (SysXException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw (new SysXException(ex.Message, ex));
            }
        }

        #endregion

        #region User Group Mapping

        public List<Int32> GetUsersMappedUserGroup(Int32 userGroupId)
        {
            try
            {
                List<Int32> lstMappedUsers = (from AUGM in _dbContext.ApplicantUserGroupMappings
                                              where AUGM.AUGM_UserGroupID == userGroupId && !AUGM.AUGM_IsDeleted
                                              select AUGM.AUGM_OrganizationUserID).Distinct().ToList();
                return lstMappedUsers;
            }
            catch (SysXException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw (new SysXException(ex.Message, ex));
            }
        }

        public Boolean AssignUserGroupToUsers(Dictionary<Int32, Boolean> selectedItems, Int32 userGroupId, Int32 currentUserId)
        {
            try
            {
                List<Int32> lstAppUserMapped = GetUsersMappedUserGroup(userGroupId);
                List<Int32> lstUnAssignUsers = new List<Int32>(selectedItems.Where(cond => lstAppUserMapped.Contains(cond.Key) && !cond.Value).Select(cond => cond.Key));
                List<Int32> lstAssignUsers = new List<Int32>(selectedItems.Where(cond => !lstAppUserMapped.Contains(cond.Key)).Select(cond => cond.Key));

                if (lstUnAssignUsers.IsNotNull() && lstUnAssignUsers.Count > 0)
                {
                    List<ApplicantUserGroupMapping> lstAppUserGroup = _dbContext.ApplicantUserGroupMappings.Where(cond => cond.AUGM_UserGroupID == userGroupId && !cond.AUGM_IsDeleted && lstUnAssignUsers.Contains(cond.AUGM_OrganizationUserID)).ToList();
                    lstAppUserGroup.ForEach(cond =>
                    {
                        cond.AUGM_IsDeleted = true;
                        cond.AUGM_ModifiedByID = currentUserId;
                        cond.AUGM_ModifiedOn = DateTime.Now;
                    });
                    if (_dbContext.SaveChanges() <= 0)
                        return false;
                }

                if (lstAssignUsers.IsNotNull() && lstAssignUsers.Count > 0)
                {
                    lstAssignUsers.ForEach(cond =>
                    {
                        ApplicantUserGroupMapping appUserGroup = new ApplicantUserGroupMapping();
                        appUserGroup.AUGM_UserGroupID = userGroupId;
                        appUserGroup.AUGM_OrganizationUserID = cond;
                        appUserGroup.AUGM_IsDeleted = false;
                        appUserGroup.AUGM_CreatedByID = currentUserId;
                        appUserGroup.AUGM_CreatedOn = DateTime.Now;
                        _dbContext.ApplicantUserGroupMappings.AddObject(appUserGroup);
                    });
                    if (_dbContext.SaveChanges() <= 0)
                        return false;
                }

                return true;
            }
            catch (SysXException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Get User Groups by Applicant Org User IDs
        /// </summary>
        /// <param name="OrgUserIDs"></param>
        /// <returns></returns>
        public List<UserGroup> GetUserGroupsByOrgUserIDs(List<Int32> OrgUserIDs)
        {
            try
            {
                var applicantUserGroupMappings = _dbContext.ApplicantUserGroupMappings.Where(x => OrgUserIDs.Contains(x.AUGM_OrganizationUserID) && !x.AUGM_IsDeleted);
                if (!applicantUserGroupMappings.IsNullOrEmpty())
                {
                    List<Int32> userGroupIDs = applicantUserGroupMappings.Select(x => x.AUGM_UserGroupID).Distinct().ToList();
                    return _dbContext.UserGroups.Where(x => userGroupIDs.Contains(x.UG_ID) && !x.UG_IsDeleted && !x.UG_IsArchived).OrderBy(con => con.UG_Name).ToList();
                }
                return new List<UserGroup>();
            }
            catch (SysXException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Assign User Groups to Applicant users
        /// </summary>
        /// <param name="userGroupIds"></param>
        /// <param name="applicantUserIds"></param>
        /// <param name="currentUserId"></param>
        /// <returns></returns>
        public Boolean AssignUserGroupsToUsers(List<Int32> userGroupIds, List<Int32> applicantUserIds, Int32 currentUserId)
        {
            try
            {
                Boolean flag = false;
                var applicantUserGroupMappings = _dbContext.ApplicantUserGroupMappings.Where(x => applicantUserIds.Contains(x.AUGM_OrganizationUserID)
                                                    && userGroupIds.Contains(x.AUGM_UserGroupID) && !x.AUGM_IsDeleted).ToList();
                foreach (var userId in applicantUserIds)
                {
                    foreach (var userGroupId in userGroupIds)
                    {
                        if (!applicantUserGroupMappings.Any(x => x.AUGM_UserGroupID == userGroupId && x.AUGM_OrganizationUserID == userId))
                        {
                            ApplicantUserGroupMapping appUserGroup = new ApplicantUserGroupMapping();
                            appUserGroup.AUGM_UserGroupID = userGroupId;
                            appUserGroup.AUGM_OrganizationUserID = userId;
                            appUserGroup.AUGM_IsDeleted = false;
                            appUserGroup.AUGM_CreatedByID = currentUserId;
                            appUserGroup.AUGM_CreatedOn = DateTime.Now;
                            _dbContext.ApplicantUserGroupMappings.AddObject(appUserGroup);
                            flag = true;
                        }
                    }
                }

                if (_dbContext.SaveChanges() > 0)
                    return true;
                else
                {
                    if (flag == false)
                        return true;
                    else
                        return false;
                }
            }
            catch (SysXException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Unassign User Groups of applicants
        /// </summary>
        /// <param name="userGroupIds"></param>
        /// <param name="applicantUserIds"></param>
        /// <param name="currentUserId"></param>
        /// <returns></returns>
        public Boolean UnassignUserGroups(List<Int32> userGroupIds, List<Int32> applicantUserIds, Int32 currentUserId)
        {
            try
            {
                var applicantUserGroupMappings = _dbContext.ApplicantUserGroupMappings.Where(x => applicantUserIds.Contains(x.AUGM_OrganizationUserID)
                                                       && !x.AUGM_IsDeleted).ToList();
                foreach (var applicantUserGroupMapping in applicantUserGroupMappings)
                {
                    foreach (var userGroupId in userGroupIds)
                    {
                        if (applicantUserGroupMapping.AUGM_UserGroupID == userGroupId)
                        {
                            applicantUserGroupMapping.AUGM_IsDeleted = true;
                            applicantUserGroupMapping.AUGM_ModifiedByID = currentUserId;
                            applicantUserGroupMapping.AUGM_ModifiedOn = DateTime.Now;
                        }
                    }
                }

                if (_dbContext.SaveChanges() > 0)
                    return true;

                return false;
            }
            catch (SysXException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw (new SysXException(ex.Message, ex));
            }
        }

        #endregion

        public List<ExpiringItemList> GetItemsAboutToExpire(Int32 tenantID, Int32 subEventId, Int32 packageSubscriptionId)
        {
            return _dbContext.GetItemsAboutToExpire(tenantID, subEventId, packageSubscriptionId).ToList();
        }
        public List<CompliancePackageCategory> getCompliancePackageCategoryByDisplayOrder(Int32 packageId)
        {
            var compliancePackageCategories = _dbContext.CompliancePackageCategories.Where(obj => obj.CPC_PackageID == packageId && obj.CPC_IsDeleted == false);
            if (compliancePackageCategories.Count() > 0)
            {
                return compliancePackageCategories.OrderBy(x => x.CPC_DisplayOrder).ThenBy(x => x.ComplianceCategory.CategoryName).ToList();
            }
            return null;
        }

        public List<ComplianceCategoryItem> getComplianceCategoryItemByDisplayOrder(Int32 categoryId)
        {
            List<ComplianceCategoryItem> complianceCategoryItems = _dbContext.ComplianceCategoryItems.Where(obj => obj.CCI_CategoryID == categoryId && !obj.CCI_IsDeleted).ToList();
            if (!complianceCategoryItems.IsNullOrEmpty())
            {
                return complianceCategoryItems.OrderBy(x => x.CCI_DisplayOrder).ThenBy(x => x.ComplianceItem.Name).ToList();
            }
            return null;
        }

        public List<ComplianceItemAttribute> getComplianceItemAttributeByDisplayOrder(Int32 itemId)
        {
            List<ComplianceItemAttribute> complianceItemAttributes = _dbContext.ComplianceItemAttributes.Where(obj => obj.CIA_ItemID == itemId && !obj.CIA_IsDeleted).ToList();
            if (!complianceItemAttributes.IsNullOrEmpty())
            {
                return complianceItemAttributes.OrderBy(x => x.CIA_DisplayOrder).ThenBy(x => x.ComplianceAttribute.Name).ToList();
            }
            return null;
        }

        public Boolean UpdateCategoryDisplayOrder(Int32 packageId, Int32 categoryId, Int32 displayOrder, Int32 userId)
        {
            CompliancePackageCategory compliancePackageCategoryIndb = _dbContext.CompliancePackageCategories.FirstOrDefault(cond => cond.CPC_PackageID == packageId
                                                                                                                && cond.CPC_CategoryID == categoryId && cond.CPC_IsDeleted == false);
            if (compliancePackageCategoryIndb != null)
            {
                compliancePackageCategoryIndb.CPC_DisplayOrder = displayOrder;
                compliancePackageCategoryIndb.CPC_ModifiedByID = userId;
                compliancePackageCategoryIndb.CPC_ModifiedOn = DateTime.Now;
                _dbContext.SaveChanges();
                return true;
            }
            return false;
        }

        public Boolean UpdateItemDisplayOrder(Int32 categoryId, Int32 itemId, Int32 displayOrder, Int32 userId)
        {
            ComplianceCategoryItem complianceCategoryItemIndb = _dbContext.ComplianceCategoryItems.FirstOrDefault(cond => cond.CCI_ItemID == itemId
                                                                                                                && cond.CCI_CategoryID == categoryId && !cond.CCI_IsDeleted);
            if (complianceCategoryItemIndb != null)
            {
                complianceCategoryItemIndb.CCI_DisplayOrder = displayOrder;
                complianceCategoryItemIndb.CCI_ModifiedByID = userId;
                complianceCategoryItemIndb.CCI_ModifiedOn = DateTime.Now;
                _dbContext.SaveChanges();
                return true;
            }
            return false;
        }

        public Boolean UpdateAttributeDisplayOrder(Int32 itemId, Int32 attributeId, Int32 displayOrder, Int32 userId)
        {
            ComplianceItemAttribute complianceItemAttributeIndb = _dbContext.ComplianceItemAttributes.FirstOrDefault(cond => cond.CIA_ItemID == itemId
                                                                                                                && cond.CIA_AttributeID == attributeId && !cond.CIA_IsDeleted);
            if (complianceItemAttributeIndb != null)
            {
                complianceItemAttributeIndb.CIA_DisplayOrder = displayOrder;
                complianceItemAttributeIndb.CIA_ModifiedByID = userId;
                complianceItemAttributeIndb.CIA_ModifiedOn = DateTime.Now;
                _dbContext.SaveChanges();
                return true;
            }
            return false;
        }

        public Boolean IsAnySubscriptionExist(Int32 packageId)
        {
            return _dbContext.PackageSubscriptions.Any(cond => cond.CompliancePackageID == packageId
                && cond.IsDeleted == false);
        }

        public void UpdateItemVerificationSummary(Int32 tenantId, Int32 backgroundProcessUserId)
        {
            _dbContext.UpdateItemVerificationSummary(tenantId, backgroundProcessUserId);
        }

        public void UpdateOrderSummary(Int32 tenantId, Int32 backgroundProcessUserId)
        {
            _dbContext.UpdateOrderSummary(tenantId, backgroundProcessUserId);
        }

        public ComplianceItemAttribute ItemHasFileAttribute(Int32 complianceItemId)
        {
            String FileUploadTypecode = ComplianceAttributeDatatypes.FileUpload.GetStringValue();
            ComplianceItemAttribute complianceItemAttribute = _dbContext.ComplianceItemAttributes.Where
                (x => x.ComplianceAttribute.lkpComplianceAttributeDatatype.Code.Equals(FileUploadTypecode)
                && x.CIA_ItemID == complianceItemId && x.CIA_IsActive && !x.CIA_IsDeleted
                && x.ComplianceAttribute.IsActive && !x.ComplianceAttribute.IsDeleted).FirstOrDefault();
            return complianceItemAttribute;
        }

        public List<AssignmentUsers> GetUsersForAssignment(Int32? currentLoggedInUserId, Int32 currentLoggedInUserTenantId)
        {
            return _dbContext.GetUsersForAssignment(currentLoggedInUserId, currentLoggedInUserTenantId).ToList();
        }

        public List<UserNodePermissions> GetUserNodePermissions(Int32 currentLoggedInUserId, Int32 currentLoggedInUserTenantId)
        {
            return _dbContext.GetUserNodePermission(currentLoggedInUserId, currentLoggedInUserTenantId).ToList();
        }

        public List<UserNodePermissions> GetUserNodePermissionBasedOnHierarchyPermissionType(Int32 currentLoggedInUserId, Int32 currentLoggedInUserTenantId, String hierarchyPermissionType)
        {
            return _dbContext.GetUserNodePermissionBasedOnHierarchyPermissionType(currentLoggedInUserId, currentLoggedInUserTenantId, hierarchyPermissionType).ToList();
        }

        public List<UserNodeOrderPermission> GetUserNodeOrderPermissions(Int32 currentLoggedInUserId)
        {
            return _dbContext.GetUserNodeOrderPermission(currentLoggedInUserId, null).ToList();
        }

        public Entity.UtilityFeatureUsage GetUtilityFeatureUsageByUserID(Int32 orgUserId, Int16 utilityFeatureId)
        {
            return Context.UtilityFeatureUsages.FirstOrDefault(ufu => ufu.UFU_OrgUserID == orgUserId
                && ufu.UFU_UtilityFeatureID == utilityFeatureId && ufu.UFU_IsDeleted == false);

        }

        public ApplicantDocumentMerging GetDataRelatedToUnifiedDocument(Int32 documentId)
        {
            return _dbContext.ApplicantDocumentMergings.
                FirstOrDefault(x => x.ADM_ApplicantDocumentID == documentId && !x.ADM_IsDeleted);
        }

        public Boolean SaveUpdateUtilityFeatureUsage(Entity.UtilityFeatureUsage utilityFeatureUsage, Int32 loggedInUserId)
        {
            if (utilityFeatureUsage.UFU_ID > 0)
            {
                utilityFeatureUsage.UFU_ModifiedBy = loggedInUserId;
                utilityFeatureUsage.UFU_ModifiedOn = DateTime.Now;
            }
            else
            {
                utilityFeatureUsage.UFU_CreatedBy = loggedInUserId;
                utilityFeatureUsage.UFU_CreatedOn = DateTime.Now;
                Context.AddToUtilityFeatureUsages(utilityFeatureUsage);
            }
            Context.SaveChanges();
            return true;
        }

        public Boolean UpdateUtilityFeatureUsage()
        {
            if (Context.SaveChanges() > 0)
                return true;
            return false;
        }

        public Boolean SaveApplicantEsignatureDocument(Int32 applicantDisclaimerDocumentId, List<Int32?> applicantDisclosureDocumentIds, Int32 orderId, Int32 orgUserProfileId, Int32 currentLoggedInUserId, String orderNumber)
        {
            Int16 recordTypeId = _dbContext.lkpRecordTypes.Where(obj => obj.Code == "AAAB" && !obj.IsDeleted).FirstOrDefault().RecordTypeID;
            String description = String.Empty;
            Boolean result = false;
            if (applicantDisclaimerDocumentId > 0 && orderId.IsNotNull())
            {
                description = String.Format("E signed disclaimer document for order number {0} ", orderNumber);
                UpdateSignedDocument(applicantDisclaimerDocumentId, description, orderId, currentLoggedInUserId, recordTypeId);
                result = true;
            }
            if (applicantDisclosureDocumentIds != null && applicantDisclosureDocumentIds.Count > 0 && orderId > 0 && orgUserProfileId > 0)
            {
                foreach (Int32 applicantDisclosureDocumentId in applicantDisclosureDocumentIds)
                {
                    description = String.Format("E signed discloser document for order number {0} ", orderNumber);
                    UpdateSignedDocument(applicantDisclosureDocumentId, description, orderId, currentLoggedInUserId, recordTypeId, orgUserProfileId);
                    result = true;
                }
            }
            return result;
        }

        private Boolean UpdateSignedDocument(Int32 applicantdocumentId, String description, Int32 orderId, Int32 currentLoggedInUserId, Int16 recordTypeId, Int32 orgUserProfileId = 0)
        {
            ApplicantDocument applicantDocument = _dbContext.ApplicantDocuments.Where(obj => obj.ApplicantDocumentID == applicantdocumentId).FirstOrDefault();

            if (applicantDocument.IsNotNull())
            {
                applicantDocument.IsDeleted = false;
                applicantDocument.ModifiedOn = DateTime.Now;
                applicantDocument.ModifiedByID = currentLoggedInUserId;
                applicantDocument.Description = description;

                GenericDocumentMapping genericDocumentMapping = null;
                if (applicantDocument.lkpDocumentType.DMT_Code == DocumentType.DisclaimerDocument.GetStringValue() || applicantDocument.lkpDocumentType.DMT_Code == DocumentType.DisclosureDocument.GetStringValue())
                {
                    genericDocumentMapping = new GenericDocumentMapping();
                    genericDocumentMapping.GDM_RecordID = orderId;
                    genericDocumentMapping.GDM_RecordTypeID = recordTypeId;
                    genericDocumentMapping.GDM_ApplicantDocumentID = applicantdocumentId;
                    genericDocumentMapping.GDM_IsDeleted = false;
                    genericDocumentMapping.GDM_CreatedOn = DateTime.Now;
                    genericDocumentMapping.GDM_CreatedBy = currentLoggedInUserId;
                    _dbContext.GenericDocumentMappings.AddObject(genericDocumentMapping);
                }
                else
                {
                    if (applicantDocument.lkpDocumentType.DMT_Code == DocumentType.Disclosure_n_Release.GetStringValue() && orgUserProfileId > 0)
                    {
                        Int16 bkgRecordTypeId = _dbContext.lkpRecordTypes.Where(obj => obj.Code == "AAAC" && !obj.IsDeleted).FirstOrDefault().RecordTypeID;
                        genericDocumentMapping = new GenericDocumentMapping();
                        genericDocumentMapping.GDM_RecordID = orgUserProfileId;
                        genericDocumentMapping.GDM_RecordTypeID = bkgRecordTypeId;
                        genericDocumentMapping.GDM_ApplicantDocumentID = applicantdocumentId;
                        genericDocumentMapping.GDM_IsDeleted = false;
                        genericDocumentMapping.GDM_CreatedOn = DateTime.Now;
                        genericDocumentMapping.GDM_CreatedBy = currentLoggedInUserId;
                        _dbContext.GenericDocumentMappings.AddObject(genericDocumentMapping);
                    }
                }

                if (_dbContext.SaveChanges() > 0)
                    return true;
            }

            return false;
        }

        #region NagMails

        public DataTable GetNagMailData(Int32 subEventId, Int32 chunkSize)
        {
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {

                SqlCommand command = new SqlCommand("usp_GetApplicantDetailForNagMail", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@chunkSize", chunkSize);
                command.Parameters.AddWithValue("@eventId", subEventId);
                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > 0)
                {
                    return ds.Tables[0];
                }
            }

            return new DataTable();
        }

        #endregion

        public List<GetUserBeforeExpiringDeadline> GetAllUserBeforeExpiringDeadline(Int32 chunkSize)
        {
            return _dbContext.GetAllApplicantBeforeExpiringDeadline(chunkSize).ToList();
        }

        #region Background Packages

        /// <summary>
        /// Get the list of All the background packages, which have not been purchased by Applicant, on a given node
        /// </summary>
        /// <param name="dpmId"></param>
        /// <param name="orgainizatuionUserId"></param>
        /// <returns></returns>
        public DataTable GetBackgroundPackages(String xmlDPMIds, Int32 orgainizatuionUserId, Boolean IsLocationServiceTenant)
        {
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand _command = new SqlCommand("usp_GetAvailableBackgroundPackages", con);
                _command.CommandType = CommandType.StoredProcedure;
                _command.Parameters.AddWithValue("@OrgainizatuionUserId", orgainizatuionUserId);
                _command.Parameters.AddWithValue("@DPMIds", xmlDPMIds);
                _command.Parameters.AddWithValue("@IsLocationServiceTenant", IsLocationServiceTenant);
                SqlDataAdapter _adp = new SqlDataAdapter();
                _adp.SelectCommand = _command;
                DataSet _ds = new DataSet();
                _adp.Fill(_ds);
                if (_ds.Tables.Count > 0)
                    return _ds.Tables[0];
            }

            return new DataTable();
        }

        public DataTable GetPreviousOrderHistory(Int32 tenantId, Int32 orgainizatuionUserId)
        {
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand _command = new SqlCommand("ams.usp_GetPreviousOrderHistory", con);
                _command.CommandType = CommandType.StoredProcedure;
                _command.Parameters.AddWithValue("@TenantId", tenantId);
                _command.Parameters.AddWithValue("@OrgainizatuionUserId", orgainizatuionUserId);
                SqlDataAdapter _adp = new SqlDataAdapter();
                _adp.SelectCommand = _command;
                DataSet _ds = new DataSet();
                _adp.Fill(_ds);
                if (_ds.Tables.Count > 0)
                    return _ds.Tables[0];
            }
            return new DataTable();
        }
        #endregion


        /// <summary>
        /// Get the background packages Names from AMS.
        /// </summary>
        /// <param name="bkgOrderId"></param>
        /// <returns></returns>
        public DataTable GetBkgOrders(int bkgOrderId, int masterOrderId)
        {
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand _command = new SqlCommand("ams.usp_GetBkgPackages", con);
                _command.CommandType = CommandType.StoredProcedure;
                _command.Parameters.AddWithValue("@OrderId", bkgOrderId);
                _command.Parameters.AddWithValue("@MasterOrderId", masterOrderId);
                SqlDataAdapter _adp = new SqlDataAdapter();
                _adp.SelectCommand = _command;
                DataSet _ds = new DataSet();
                _adp.Fill(_ds);
                if (_ds.Tables.Count > 0)
                    return _ds.Tables[0];
            }
            return new DataTable();
        }

        /// <summary>
        /// This method is used for save the context of the DB for the case of BkgPackages only
        /// </summary>
        /// <param name="orderId"></param>
        /// <returns></returns>
        public Boolean SaveDbContext(Int32 orderId)
        {
            if (_dbContext.SaveChanges() > 0)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        /// <summary>
        /// Get HierarchyNodeID for Order By Department Program Package ID or Bkg Package Hierarchy Mapping ID
        /// </summary>
        /// <param name="dppID"></param>
        /// <param name="bphmID"></param>
        /// <returns></returns>
        public Int32 GetHierarchyNodeID(Int32? dppID, Int32? bphmID)
        {
            if (dppID != null)
                return _dbContext.DeptProgramPackages.FirstOrDefault(x => x.DPP_ID == dppID).DPP_DeptProgramMappingID;
            else if (bphmID != null)
                return _dbContext.BkgPackageHierarchyMappings.FirstOrDefault(x => x.BPHM_ID == bphmID).BPHM_InstitutionHierarchyNodeID;
            return -1;
        }

        /// <summary>
        /// Get PackageSubscriptionID by OrderID
        /// </summary>
        /// <param name="orderID"></param>
        /// <returns>PackageSubscriptionID</returns>
        public Int32 GetPackageSubscriptionID(Int32 orderID)
        {
            PackageSubscription pkgSubscription = _dbContext.PackageSubscriptions.Where(cond => cond.OrderID == orderID).FirstOrDefault();
            if (pkgSubscription.IsNotNull())
                return pkgSubscription.PackageSubscriptionID;
            else
                return 0;
        }

        /// <summary>
        /// Get AMS/Background Package Data points to be copied
        /// </summary>
        /// <param name="packageSubscriptionID"></param>
        /// <returns>DataTable</returns>
        public DataTable GetPackageDocumentDataPoints(Int32 packageSubscriptionID, Int32? bkgOrderID)
        {
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand command = new SqlCommand("ams.usp_GetPackageDocumentDataPoint", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@PackageSubscriptionID", packageSubscriptionID);
                if (bkgOrderID != null)
                    command.Parameters.AddWithValue("@BkgOrderID", bkgOrderID);
                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > 0)
                {
                    return ds.Tables[0];
                }
            }
            return new DataTable();
        }

        /// <summary>
        /// Call Package Data Copy SP
        /// </summary>
        /// <param name="currentLoggedInUserId"></param>
        /// <param name="docXml"></param>
        /// <param name="packageSubscriptionID"></param>
        public List<Int32> PackageDataCopy(Int32 packageSubscriptionID, Int32 currentLoggedInUserId, String docXml, Int32 tenantId)
        {
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            List<Int32> lstAffectedCategoryDataIDs = new List<Int32>();

            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand command = new SqlCommand("ams.usp_PackageDataCopy", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@PackageSubscriptionID", packageSubscriptionID);
                command.Parameters.AddWithValue("@SourceXML", docXml);
                command.Parameters.AddWithValue("@CurrentLoggedInUserID", currentLoggedInUserId);
                command.Parameters.AddWithValue("@TenantID", tenantId);
                //con.Open();
                //command.ExecuteNonQuery();
                //command.Dispose();
                //con.Close();
                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > 0)
                {
                    foreach (DataRow dRow in ds.Tables[0].Rows)
                    {
                        lstAffectedCategoryDataIDs.Add(Convert.ToInt32(dRow["ApplicantComplianceCategoryID"]));
                    }
                }
            }
            return lstAffectedCategoryDataIDs;
        }

        /// <summary>
        /// Check whether Order is fresh and has Compliance Package
        /// </summary>
        /// <param name="orderID"></param>
        /// <returns>Boolean</returns>
        public Boolean IsComplianceAndFreshOrder(Int32 orderID)
        {
            Order order = _dbContext.Orders.FirstOrDefault(cond => cond.OrderID == orderID && cond.PreviousOrderID == null
                && (cond.lkpOrderPackageType.OPT_Code == "AAAA" || cond.lkpOrderPackageType.OPT_Code == "AAAC"));

            if (order.IsNotNull())
                return true;
            else
                return false;
        }

        /// <summary>
        /// Returns the list of the child institute node ids for corresponding hierarchynode id
        /// </summary>
        /// <returns></returns>
        public List<Int32> GetChildInstituteNodeIDs(String selectedhierarchyMappingNodeIds)
        {
            List<Int32> lstChildInstituteNodeIDs = new List<Int32>();
            // code to call usp_GetChildInstituteNodeIDs and assign returned result to lstChildInstituteNodeIDs
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {

                SqlCommand command = new SqlCommand("usp_GetChildInstituteNodeIDs", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@NodeID", selectedhierarchyMappingNodeIds);
                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > 0)
                {
                    foreach (DataRow dRow in ds.Tables[0].Rows)
                    {
                        lstChildInstituteNodeIDs.Add(Convert.ToInt32(dRow["NodeID"]));
                    }
                }
            }
            return lstChildInstituteNodeIDs;
        }

        /// <summary>
        /// Save Order Result Document Mapping
        /// </summary>
        /// <param name="lstOrdResDocMap"></param>
        /// <returns>true/false</returns>
        public Boolean SaveOrderResultDocMap(List<OrderResultDocMap> lstOrdResDocMap)
        {
            foreach (OrderResultDocMap ordResDocMap in lstOrdResDocMap)
            {
                _dbContext.OrderResultDocMaps.AddObject(ordResDocMap);
            }
            if (_dbContext.SaveChanges() > 0)
                return true;
            else
                return false;
        }

        /// <summary>
        /// Get OrderResultDocMap
        /// </summary>
        /// <param name="organizationUserID"></param>
        /// <param name="masterOrderID"></param>
        /// <param name="serviceGroupID"></param>
        /// <param name="bkgDataPointTypeID"></param>
        /// <returns>OrderResultDocMap</returns>
        public List<OrderResultDocMap> GetOrderResultDocMapping(Int32 organizationUserID, Int32 masterOrderID, Int32? serviceGroupID, Int32 bkgDataPointTypeID)
        {
            if (serviceGroupID == null)
                return _dbContext.OrderResultDocMaps.Where(x => x.ORDM_OrganizationUserID == organizationUserID && x.ORDM_MasterOrderID == masterOrderID
                && x.ORDM_BkgDataPointTypeID == bkgDataPointTypeID && x.ORDM_IsDeleted == false).ToList();
            else
                return _dbContext.OrderResultDocMaps.Where(x => x.ORDM_OrganizationUserID == organizationUserID && x.ORDM_MasterOrderID == masterOrderID
                    && x.ORDM_ServiceGroupID == serviceGroupID && x.ORDM_BkgDataPointTypeID == bkgDataPointTypeID && x.ORDM_IsDeleted == false).ToList();
        }

        /// <summary>
        /// Update Order Result Document Mapping
        /// </summary>
        /// <param name="lstOrdResDocMap"></param>
        /// <returns>true/false</returns>
        public Boolean UpdateOrderResultDocMap(List<OrderResultDocMap> lstOrdResDocMap, Int32 currentLoggedInUserId)
        {
            foreach (OrderResultDocMap ordResDocMap in lstOrdResDocMap)
            {
                List<ApplicantDocument> appDoc = _dbContext.ApplicantDocuments.Where(x => x.ApplicantDocumentID == ordResDocMap.ORDM_DocumentID && x.IsDeleted == false).ToList();
                appDoc.ForEach(doc =>
                {
                    doc.IsDeleted = true;
                    doc.ModifiedByID = currentLoggedInUserId;
                    doc.ModifiedOn = DateTime.Now;
                });

                List<ApplicantDocumentMerging> appDocMer = _dbContext.ApplicantDocumentMergings.Where(x => x.ADM_ApplicantDocumentID == ordResDocMap.ORDM_DocumentID && x.ADM_IsDeleted == false).ToList();
                appDocMer.ForEach(doc =>
                {
                    doc.ADM_IsDeleted = true;
                    doc.ADM_ModifiedByID = currentLoggedInUserId;
                    doc.ADM_ModifiedOn = DateTime.Now;
                });

                List<ApplicantComplianceDocumentMap> appCmpDocMap = _dbContext.ApplicantComplianceDocumentMaps.Where(x => x.ApplicantDocumentID == ordResDocMap.ORDM_DocumentID && x.IsDeleted == false).ToList();
                appCmpDocMap.ForEach(doc =>
                {

                    doc.IsDeleted = true;
                    doc.ModifiedByID = currentLoggedInUserId;
                    doc.ModifiedOn = DateTime.Now;

                });

                List<OrderResultDocMap> orderResultDocMap = _dbContext.OrderResultDocMaps.Where(x => x.ORDM_ID == ordResDocMap.ORDM_ID && x.ORDM_IsDeleted == false).ToList();
                orderResultDocMap.ForEach(doc =>
                {
                    doc.ORDM_IsDeleted = true;
                    doc.ORDM_ModifiedByID = currentLoggedInUserId;
                    doc.ORDM_ModifiedOn = DateTime.Now;
                });

                _dbContext.SaveChanges();
            }

            return true;
        }

        #region GET INSTRUCTION TEXT
        /// <summary>
        /// Returns the list of the child institute node ids for corresponding hierarchynode id
        /// </summary>
        /// <returns></returns>
        String IComplianceDataRepository.GetInstructionTextByID(Int32 packageId, Int32 categoryId, Int32 itemId, Int32 attributeId, Int32 CIA_Id)
        {
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {

                SqlCommand command = new SqlCommand("usp_GetInstTextAndAsignHierarchyIdForAttribute", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@PackageId", packageId);
                command.Parameters.AddWithValue("@CategoryId", categoryId);
                command.Parameters.AddWithValue("@ItemId", itemId);
                command.Parameters.AddWithValue("@AttributeId", attributeId);
                command.Parameters.AddWithValue("@ComplianceItemAttributeId", CIA_Id);
                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    return Convert.ToString(ds.Tables[0].Rows[0]["InstructionText"]).IsNullOrEmpty() ? String.Empty : Convert.ToString(ds.Tables[0].Rows[0]["InstructionText"]);
                }
            }
            return String.Empty;
        }
        #endregion

        //UAT-738
        #region GET CATEGORY LIST FOR Assigend Item To USER

        public List<Int32> GetCategoryListForAssignedItem(Int32 PackageSubscriptionID, Int32 currentLoggedInUserId)
        {
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                List<Int32> tempCategoryIdList = new List<Int32>();
                SqlCommand command = new SqlCommand("usp_GetCategoryListOfAssignedItemToUser", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@PackageSubscriptionId", PackageSubscriptionID);
                command.Parameters.AddWithValue("@AssignedToUserId", currentLoggedInUserId);
                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > 0)
                {
                    foreach (DataRow dRow in ds.Tables[0].Rows)
                    {
                        tempCategoryIdList.Add(Convert.ToInt32(dRow["ComplianceCategoeyId"]));
                    }
                }
                return tempCategoryIdList;
            }

        }
        #endregion

        #region UAT 696
        public List<CustomComplianceContract> FetchSelectedSubscriptionIDs(Dictionary<int, string> OrganisationUser)
        {
            List<CustomComplianceContract> lstSubscriptionIds = new List<CustomComplianceContract>();

            List<Int16> mobilityStatusIDs = _dbContext.lkpSubscriptionMobilityStatus.Where(cond => cond.Code == "AAAA" || cond.Code == "AAAB" && !cond.IsDeleted).Select(x => x.SubscriptionMobilityStatusID).ToList();

            foreach (var item in OrganisationUser)
            {
                List<CustomComplianceContract> templstSubscriptionIds = new List<CustomComplianceContract>();
                templstSubscriptionIds = _dbContext.PackageSubscriptions
                                                   .Where(cond => cond.OrganizationUserID == item.Key
                                                       && (cond.SubscriptionMobilityStatusID == null || !mobilityStatusIDs.Contains(cond.SubscriptionMobilityStatusID.Value))
                                                       && !cond.IsDeleted).Select(x => new CustomComplianceContract { PackageSubscriptionID = x.PackageSubscriptionID, OrganizationUserID = x.OrganizationUserID.Value, }).ToList();
                lstSubscriptionIds.AddRange(templstSubscriptionIds);
            }
            return lstSubscriptionIds;
        }
        #endregion

        public List<PackageSubscription> GetPackageSubscription(string subscriptionIDs)
        {
            List<int> SubscriptionIds = new List<int>();
            if (subscriptionIDs != string.Empty)
            {
                SubscriptionIds = subscriptionIDs.Split(',').Select(int.Parse).ToList();
            }
            return _dbContext.PackageSubscriptions.Where(x => SubscriptionIds.Contains(x.PackageSubscriptionID) && !x.IsDeleted).ToList();
        }

        //UAT-613
        #region UAT-613
        Boolean IComplianceDataRepository.SaveUpdateExplanatoryState(Entity.aspnet_PersonalizationPerUser explanationObjToSave)
        {
            if (!explanationObjToSave.IsNull())
            {
                Context.AddToaspnet_PersonalizationPerUser(explanationObjToSave);
            }
            if (Context.SaveChanges() > 0)
                return true;
            return false;
        }
        Entity.aspnet_PersonalizationPerUser IComplianceDataRepository.GetExplanatoryState(Guid userId)
        {
            return Context.aspnet_PersonalizationPerUser.FirstOrDefault(cond => cond.UserId == userId);
        }
        #endregion

        public List<ApplicantDocumentDetails> GetApplicantDocumentDetails(Int32 organizationUserID)
        {
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand command = new SqlCommand("dbo.usp_GetApplicantDocumentData", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@OrganizationUserID", organizationUserID);
                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                List<ApplicantDocumentDetails> lstApplicantDocumentDetails = new List<ApplicantDocumentDetails>();
                lstApplicantDocumentDetails = ds.Tables[0].AsEnumerable().Select(col =>
                      new ApplicantDocumentDetails
                      {
                          ApplicantDocumentID = Convert.ToInt32(col["ApplicantDocumentID"]),
                          Description = col["Description"] == DBNull.Value ? String.Empty : Convert.ToString(col["Description"]),
                          DocumentTypeCode = col["DocumentTypeCode"] == DBNull.Value ? String.Empty : Convert.ToString(col["DocumentTypeCode"]),
                          FileName = col["FileName"] == DBNull.Value ? String.Empty : Convert.ToString(col["FileName"]),
                          FileType = col["FileType"] == DBNull.Value ? String.Empty : Convert.ToString(col["FileType"]),
                          ItemName = col["ItemName"] == DBNull.Value ? String.Empty : Convert.ToString(col["ItemName"]),
                          Size = Convert.ToInt32(col["Size"]),
                          UploadedBy = col["UploadedBy"] == DBNull.Value ? String.Empty : Convert.ToString(col["UploadedBy"]),
                          UploadedOn = col["UploadedBy"] == DBNull.Value ? (DateTime?)null : Convert.ToDateTime(col["UploadedOn"]).Date,
                          DocumentPath = col["DocumentPath"] == DBNull.Value ? String.Empty : Convert.ToString(col["DocumentPath"]),
                          ApplicantDocItemAssociationID = col["ApplicantDocItemAssociationID"] == DBNull.Value ? String.Empty : Convert.ToString(col["ApplicantDocItemAssociationID"]) //UAT-2296
                      }).ToList();
                return lstApplicantDocumentDetails;
            }

        }

        #region UAT:536 Save and Update Applicant Custom Attribute

        Boolean IComplianceDataRepository.SaveUpdateApplicantCustomAttribute(List<ApplicantCustomAttributeContract> applicantCustomAttributeContract, Int32 loggedInUserId, Int32 orgUsrID)
        {
            List<ApplicantCustomAttributeContract> applicantCustomAttributeContractToSave = null;
            List<ApplicantCustomAttributeContract> applicantCustomAttributeContractToUpdate = null;
            if (applicantCustomAttributeContract.IsNotNull() && applicantCustomAttributeContract.Count > 0)
            {
                applicantCustomAttributeContractToSave = new List<ApplicantCustomAttributeContract>();
                applicantCustomAttributeContractToSave = applicantCustomAttributeContract.Where(obj => obj.CAM_ID.IsNotNull() && obj.CAV_ID == 0).ToList();

                applicantCustomAttributeContractToUpdate = new List<ApplicantCustomAttributeContract>();
                applicantCustomAttributeContractToUpdate = applicantCustomAttributeContract.Where(obj => obj.CAM_ID.IsNotNull() && (obj.CAV_ID.IsNotNull() && obj.CAV_ID > 0)).ToList();

                if (applicantCustomAttributeContractToUpdate.IsNotNull() && applicantCustomAttributeContractToUpdate.Count > 0)
                {
                    foreach (ApplicantCustomAttributeContract customattributecontractObj in applicantCustomAttributeContractToUpdate)
                    {
                        CustomAttributeValue customAttributeValue = _dbContext.CustomAttributeValues.Where(x => x.CAV_CustomAttributeValueID == customattributecontractObj.CAV_ID && !x.CAV_IsDeleted).FirstOrDefault();
                        customAttributeValue.CAV_AttributeValue = customattributecontractObj.CAV_AttributeValue;
                        customAttributeValue.CAV_ModifiedOn = DateTime.Now;
                        customAttributeValue.CAV_ModifiedByID = orgUsrID;
                    }
                }

                if (applicantCustomAttributeContractToSave.IsNotNull() && applicantCustomAttributeContractToSave.Count > 0)
                {
                    CustomAttributeValue customAttributeValueToSave = null;
                    foreach (ApplicantCustomAttributeContract customattributecontractObj in applicantCustomAttributeContractToSave)
                    {
                        customAttributeValueToSave = new CustomAttributeValue();

                        Int32 RecordID = _dbContext.ApplicantHierarchyMappings.Where(x => x.AHM_HierarchyNodeID == customattributecontractObj.HierarchyNodeID && x.AHM_OrganizationUserID == loggedInUserId && x.AHM_IsDeleted == false).FirstOrDefault().AHM_ID;
                        customAttributeValueToSave.CAV_CustomAttributeMappingID = customattributecontractObj.CAM_ID;
                        customAttributeValueToSave.CAV_AttributeValue = customattributecontractObj.CAV_AttributeValue;
                        customAttributeValueToSave.CAV_RecordID = RecordID;
                        customAttributeValueToSave.CAV_IsDeleted = false;
                        customAttributeValueToSave.CAV_CreatedOn = DateTime.Now;
                        customAttributeValueToSave.CAV_CreatedByID = orgUsrID;
                        _dbContext.CustomAttributeValues.AddObject(customAttributeValueToSave);
                    }
                }
                if (_dbContext.SaveChanges() > 0)
                    return true;
                return false;
            }
            return false;
        }
        #endregion


        #region UAT-523 WB: Change "Category Exception" behavior to be an overall approval of the category, not just all Items filled in.

        /// <summary>
        /// To Get Whole Category Item ID
        /// </summary>
        /// <param name="tenantID"></param>
        /// <param name="currentLoggedInUserId"></param>
        /// <param name="wholeCatGUID"></param>
        /// <param name="complianceCategoryId"></param>
        /// <returns></returns>
        public ComplianceItem GetWholeCategoryItemID(Int32 tenantID, Int32 currentLoggedInUserId, Guid wholeCatGUID, Int32 complianceCategoryId)
        {
            Int32 cmpItemID = 0;
            ComplianceItem cmpItem = _dbContext.ComplianceItems.FirstOrDefault(x => x.Code == wholeCatGUID);
            if (cmpItem.IsNull())
            {
                Int32 cmpItemTypeID = _dbContext.lkpComplianceItemTypes.FirstOrDefault(x => x.Code == "ITMOTH").ComplianceItemTypeID;
                cmpItem = new ComplianceItem();
                cmpItem.ComplianceItemTypeID = cmpItemTypeID;
                cmpItem.Name = "[Whole Category]";
                cmpItem.Description = "[Whole Category]";
                cmpItem.EffectiveDate = null;
                cmpItem.ItemLabel = "[Whole Category]";
                cmpItem.ScreenLabel = "[Whole Category]";
                cmpItem.IsActive = true;
                cmpItem.IsDeleted = true;
                cmpItem.CreatedBy = currentLoggedInUserId;
                cmpItem.CreatedOn = DateTime.Now;
                cmpItem.ModifiedBy = null;
                cmpItem.ModifiedOn = null;
                cmpItem.TenantID = tenantID;
                cmpItem.IsCreatedByAdmin = false;
                cmpItem.CopiedFromCode = null;
                cmpItem.Code = wholeCatGUID;
                cmpItem.IsDissociated = false;
                cmpItem.SampleDocFormURL = null;
                cmpItem.DissociatedFrom = null;
                //UAT-3083.
                cmpItem.IsPaymentType = false;
                _dbContext.ComplianceItems.AddObject(cmpItem);
                _dbContext.SaveChanges();
            }
            cmpItemID = cmpItem.ComplianceItemID;
            ComplianceCategoryItem cmpCatItem = _dbContext.ComplianceCategoryItems.FirstOrDefault(x => x.CCI_CategoryID == complianceCategoryId && x.CCI_ItemID == cmpItemID);
            if (cmpCatItem.IsNull())
            {
                cmpCatItem = new ComplianceCategoryItem();
                cmpCatItem.CCI_CategoryID = complianceCategoryId;
                cmpCatItem.CCI_ItemID = cmpItemID;
                cmpCatItem.CCI_DisplayOrder = 1;
                cmpCatItem.CCI_IsActive = true;
                cmpCatItem.CCI_IsDeleted = true;
                cmpCatItem.CCI_CreatedByID = currentLoggedInUserId;
                cmpCatItem.CCI_CreatedOn = DateTime.Now;
                cmpCatItem.CCI_ModifiedByID = null;
                cmpCatItem.CCI_ModifiedOn = null;
                cmpCatItem.CCI_IsCreatedByAdmin = false;

                _dbContext.ComplianceCategoryItems.AddObject(cmpCatItem);
                _dbContext.SaveChanges();
            }

            return cmpItem;
        }

        #endregion


        #region UAT-523 Category Level Exception

        public Boolean UpdateCategoryLevelExceptionData(Int32 categoryDataId, DateTime? expirationDate, Int32 catStatusId, Int16? catExceptionStatusId, Int32 itemDataId,
                                                        Int32 itemId, String comments, Int32 statusId, Int32 currentLoggedInUserId, String currentLoggedInUserName, List<Int32> lstDocumentsToRemove,
                                                        List<ListItemAssignmentProperties> lstAssignmentProperties, String recordActionType, String currentLoggedInUserInitials)
        {
            Guid catExcpItemCode = new Guid(AppConsts.WHOLE_CATEGORY_GUID);
            ApplicantComplianceCategoryData tempApplicantComCatData = ClientDBContext.ApplicantComplianceCategoryDatas.FirstOrDefault(cond => cond.ApplicantComplianceCategoryID == categoryDataId && !cond.IsDeleted);
            ApplicantComplianceItemData applicantComplianceItemData = ClientDBContext.ApplicantComplianceItemDatas.Include("ComplianceItem").FirstOrDefault(applicantData => applicantData.ApplicantComplianceItemID == itemDataId && (applicantData.IsDeleted || applicantData.ComplianceItem.Code == catExcpItemCode));

            if (applicantComplianceItemData.IsNotNull())
            {
                if (!comments.IsNullOrEmpty())
                {
                    applicantComplianceItemData.VerificationComments = "[" + currentLoggedInUserName + " " + DateTime.Now.ToShortDateString() + "] : " + comments + Environment.NewLine + applicantComplianceItemData.VerificationComments;
                    applicantComplianceItemData.VerificationCommentsWithInitials = "[" + currentLoggedInUserInitials + "] : " + comments + Environment.NewLine + applicantComplianceItemData.VerificationCommentsWithInitials; //UAT 2807
                }
                // Only if attempted status is different from existing status i.e. Status is getting changed 
                if (applicantComplianceItemData.StatusID != statusId)
                    applicantComplianceItemData.ReviewerTypeID = null;

                applicantComplianceItemData = SetItemReviewerType(itemId, lstAssignmentProperties, applicantComplianceItemData);
                applicantComplianceItemData.ComplianceItemID = itemId;

                if (recordActionType == lkpQueueActionType.Next_Level_Review_Required.GetStringValue())
                {
                    applicantComplianceItemData.AssignedToUser = null;
                }
                else if (recordActionType == lkpQueueActionType.Proceed_To_Next_Queue.GetStringValue())
                {
                    //UAT-612
                    if (applicantComplianceItemData.StatusID != statusId && !(String.IsNullOrEmpty(comments)))
                        applicantComplianceItemData.StatusComments += Environment.NewLine + "[" + currentLoggedInUserInitials + " " + DateTime.Now.ToShortDateString() + "] : " + comments;
                    applicantComplianceItemData.StatusID = statusId;
                }
                /*else if (recordActionType == lkpQueueActionType.Escalation_Required.GetStringValue())
                {
                }*/
                applicantComplianceItemData.ModifiedByID = currentLoggedInUserId;
                applicantComplianceItemData.ModifiedOn = DateTime.Now;
            }

            if (tempApplicantComCatData.IsNotNull())
            {
                if (!expirationDate.IsNullOrEmpty())
                    tempApplicantComCatData.ExpiryDate = expirationDate;
                if (recordActionType == lkpQueueActionType.Proceed_To_Next_Queue.GetStringValue() && catStatusId > 0)
                {
                    tempApplicantComCatData.StatusID = catStatusId;
                    if (catExceptionStatusId.IsNotNull())
                    {
                        tempApplicantComCatData.CategoryExceptionStatusID = catExceptionStatusId;
                        String catExcStsCode = ClientDBContext.lkpCategoryExceptionStatus.FirstOrDefault(cond => cond.CES_ID == catExceptionStatusId).CES_Code;
                        if (catExcStsCode == lkpCategoryExceptionStatus.EXCEPTION_REJECTED.GetStringValue())
                            tempApplicantComCatData.ExpiryDate = null;
                    }
                }
                tempApplicantComCatData.ModifiedByID = currentLoggedInUserId;
                tempApplicantComCatData.ModifiedOn = DateTime.Now;
            }
            if (ClientDBContext.SaveChanges() > 0)
                return true;
            return false;
        }
        #endregion

        /// <summary>
        /// UPDATE Applicant Compliance Category data. Set [CategoryExceptionStatusID] and [ExpirationDate] to null.
        /// </summary>
        /// <param name="currentLoggedInUserID"></param>
        /// <param name="complianceCategoryID"></param>
        /// <param name="packageSubscriptionID"></param>
        /// <returns></returns>
        public ApplicantComplianceItemData UpdateApplicantCmpCatData(Int32 currentLoggedInUserID, Int32 complianceCategoryID, Int32 packageSubscriptionID, Int32 catStatusApprovedId)
        {
            //Changes as per UAT-819 WB: Category Exception enhancements
            ApplicantComplianceCategoryData appCmpCatData = _dbContext.ApplicantComplianceCategoryDatas.Include("ApplicantComplianceItemDatas")
                .FirstOrDefault(x => x.ComplianceCategoryID == complianceCategoryID && x.PackageSubscriptionID == packageSubscriptionID && !x.IsDeleted);
            if (appCmpCatData.IsNotNull())
            {
                //UAT-911: Category whose Compliance Required status is set to “No” changes from Approved to Incomplete at applicant data entry screen 
                //         when applicant applies category exception and then deletes the category exception.
                CompliancePackageCategory compPackageCategory = appCmpCatData.ComplianceCategory.CompliancePackageCategories.FirstOrDefault(cond => cond.CPC_CategoryID == complianceCategoryID && cond.CPC_PackageID == appCmpCatData.PackageSubscription.CompliancePackageID && cond.CPC_IsDeleted == false);
                DateTime? newStartDate = compPackageCategory.CPC_ComplianceRqdStartDate;
                DateTime? newEndDate = compPackageCategory.CPC_ComplianceRqdEndDate;
                DateTime currentDate = DateTime.Now;

                if (compPackageCategory.IsNotNull()
                    && (
                       (compPackageCategory.CPC_ComplianceRequired == false
                            && (newStartDate.IsNull() && newEndDate.IsNull()
                                || ((currentDate.Month > newStartDate.Value.Month || (currentDate.Month == newStartDate.Value.Month && currentDate.Day >= newStartDate.Value.Day))
                                && (currentDate.Month < newEndDate.Value.Month || (currentDate.Month == newEndDate.Value.Month && currentDate.Day <= newEndDate.Value.Day) || (currentDate.Month > newEndDate.Value.Month && newEndDate.Value.Month < newStartDate.Value.Month))
                                )))
                       || (compPackageCategory.CPC_ComplianceRequired == true
                            && (newStartDate.IsNotNull() && newEndDate.IsNotNull())
                                && ((currentDate.Month < newStartDate.Value.Month || (currentDate.Month == newStartDate.Value.Month && currentDate.Day < newStartDate.Value.Day))
                                || (currentDate.Month > newEndDate.Value.Month || (currentDate.Month == newEndDate.Value.Month && currentDate.Day > newEndDate.Value.Day))))
                        )
                    && catStatusApprovedId > AppConsts.NONE)
                {
                    appCmpCatData.StatusID = catStatusApprovedId;
                }
                appCmpCatData.CategoryExceptionStatusID = null;
                appCmpCatData.ExpiryDate = null;
                appCmpCatData.ModifiedOn = DateTime.Now;
                appCmpCatData.ModifiedByID = currentLoggedInUserID;

                Guid whlCatGuid = new Guid(AppConsts.WHOLE_CATEGORY_GUID);
                ApplicantComplianceItemData itemData = appCmpCatData.ApplicantComplianceItemDatas.FirstOrDefault(x => x.ComplianceItem.Code == whlCatGuid);

                if (itemData.IsNotNull())
                {
                    itemData.ExceptionReason = null;
                    itemData.ModifiedByID = currentLoggedInUserID;
                    itemData.ModifiedOn = DateTime.Now;
                    itemData.StatusComments = null;
                    itemData.VerificationComments = null;
                    itemData.VerificationCommentsWithInitials = null; //UAT 2807

                    List<ExceptionDocumentMapping> lstExcDocMapp = itemData.ExceptionDocumentMappings.Where(x => x.IsDeleted == false).ToList();
                    foreach (ExceptionDocumentMapping excDocMapp in lstExcDocMapp)
                    {
                        excDocMapp.IsDeleted = true;
                        excDocMapp.ModifiedBy = currentLoggedInUserID;
                        excDocMapp.ModifiedOn = DateTime.Now;
                    }
                }

                _dbContext.SaveChanges();

                return itemData;
            }
            return null;
        }


        public List<ApplicantComplianceItemData> DeleteOverideRuleStatus(Int32 currentLoggedInUserID, Int32 complianceCategoryID, Int32 packageSubscriptionID, List<lkpCategoryComplianceStatu> categoryComplianceStatus)
        {
            //Changes as per UAT-819 WB: Category Exception enhancements
            ApplicantComplianceCategoryData appCmpCatData = _dbContext.ApplicantComplianceCategoryDatas.Include("ApplicantComplianceItemDatas")
                .FirstOrDefault(x => x.ComplianceCategoryID == complianceCategoryID && x.PackageSubscriptionID == packageSubscriptionID && !x.IsDeleted);
            if (appCmpCatData.IsNotNull())
            {
                //UAT-911: Category whose Compliance Required status is set to “No” changes from Approved to Incomplete at applicant data entry screen 
                //         when applicant applies category exception and then deletes the category exception.
                CompliancePackageCategory compPackageCategory = appCmpCatData.ComplianceCategory.CompliancePackageCategories.FirstOrDefault(cond => cond.CPC_CategoryID == complianceCategoryID && cond.CPC_PackageID == appCmpCatData.PackageSubscription.CompliancePackageID && cond.CPC_IsDeleted == false);
                DateTime? newStartDate = compPackageCategory.CPC_ComplianceRqdStartDate;
                DateTime? newEndDate = compPackageCategory.CPC_ComplianceRqdEndDate;
                DateTime currentDate = DateTime.Now;

                if (compPackageCategory.IsNotNull()
                    && (
                       (compPackageCategory.CPC_ComplianceRequired == false
                            && (newStartDate.IsNull() && newEndDate.IsNull()
                                || ((currentDate.Month > newStartDate.Value.Month || (currentDate.Month == newStartDate.Value.Month && currentDate.Day >= newStartDate.Value.Day))
                                && (currentDate.Month < newEndDate.Value.Month || (currentDate.Month == newEndDate.Value.Month && currentDate.Day <= newEndDate.Value.Day) || (currentDate.Month > newEndDate.Value.Month && newEndDate.Value.Month < newStartDate.Value.Month))
                                )))
                       || (compPackageCategory.CPC_ComplianceRequired == true
                            && (newStartDate.IsNotNull() && newEndDate.IsNotNull())
                                && ((currentDate.Month < newStartDate.Value.Month || (currentDate.Month == newStartDate.Value.Month && currentDate.Day < newStartDate.Value.Day))
                                || (currentDate.Month > newEndDate.Value.Month || (currentDate.Month == newEndDate.Value.Month && currentDate.Day > newEndDate.Value.Day))))
                        )
                    )
                {
                    appCmpCatData.StatusID = categoryComplianceStatus.Where(cnd => cnd.Code.ToLower().Trim() == ApplicantCategoryComplianceStatus.Approved.GetStringValue().ToLower().Trim()).Select(cond => cond.CategoryComplianceStatusID).FirstOrDefault();
                }
                //appCmpCatData.StatusID= lkpCom
                appCmpCatData.CategoryExceptionStatusID = null;
                appCmpCatData.ExpiryDate = null;
                appCmpCatData.ModifiedOn = DateTime.Now;
                appCmpCatData.ModifiedByID = currentLoggedInUserID;

                List<ApplicantComplianceItemData> appComplianceItemData = appCmpCatData.ApplicantComplianceItemDatas.Where(cond => cond.ApplicantComplianceCategoryID == appCmpCatData.ApplicantComplianceCategoryID && cond.IsDeleted == false).ToList();
                if (!appComplianceItemData.IsNullOrEmpty() && appComplianceItemData.Count > 0)
                {
                    appCmpCatData.StatusID = categoryComplianceStatus.Where(cnd => cnd.Code.ToLower().Trim() == ApplicantCategoryComplianceStatus.Pending_Review.GetStringValue().ToLower().Trim()).Select(cond => cond.CategoryComplianceStatusID).FirstOrDefault(); categoryComplianceStatus.Where(cnd => cnd.Code.ToLower().Trim() == ApplicantCategoryComplianceStatus.Incomplete.GetStringValue().ToLower().Trim()).Select(cond => cond.CategoryComplianceStatusID).FirstOrDefault();
                    _dbContext.SaveChanges();
                    return appComplianceItemData;
                }
                else
                {
                    appCmpCatData.StatusID = categoryComplianceStatus.Where(cnd => cnd.Code.ToLower().Trim() == ApplicantCategoryComplianceStatus.Incomplete.GetStringValue().ToLower().Trim()).Select(cond => cond.CategoryComplianceStatusID).FirstOrDefault(); categoryComplianceStatus.Where(cnd => cnd.Code.ToLower().Trim() == ApplicantCategoryComplianceStatus.Incomplete.GetStringValue().ToLower().Trim()).Select(cond => cond.CategoryComplianceStatusID).FirstOrDefault();
                    _dbContext.SaveChanges();
                    return null;
                }

            }
            else
                return null;
        }

        #region UAT - 685 : Approving Multiple Orders

        public List<ScheduledTask> GetScheduledTasks(String scheduleTaskTypeCode, String taskStatusTypeCode)
        {
            return _dbContext.ScheduledTasks.Where(cond => !cond.ST_IsDeleted && cond.lkpTaskStatusType.TaskStatusTypeCode.Equals(taskStatusTypeCode) &&
                cond.lkpTaskType.TaskTypeCode.Equals(scheduleTaskTypeCode) && !cond.lkpTaskStatusType.IsDeleted && !cond.lkpTaskType.IsDeleted).ToList();
        }

        public Boolean UpdateScheduleTaskStatus(Dictionary<Int32, String> dictUpdatedTaskStatus, Int32 modifiedById)
        {
            List<ScheduledTask> lstExistingTasks = new List<ScheduledTask>();
            List<Int32> lstTaskIds = dictUpdatedTaskStatus.Keys.ToList();
            String completedStatusCode = TaskStatusType.COMPLETED.GetStringValue();
            String errorStatusCode = TaskStatusType.ERROR.GetStringValue();
            String abondonedStatusCode = TaskStatusType.ABANDONED.GetStringValue();
            Int32 completedStatusTypeId = _dbContext.lkpTaskStatusTypes.Where(cond => cond.TaskStatusTypeCode.Equals(completedStatusCode) && !cond.IsDeleted).FirstOrDefault().TaskStatusTypeID;
            Int32 errorStatusTypeId = _dbContext.lkpTaskStatusTypes.Where(cond => cond.TaskStatusTypeCode.Equals(errorStatusCode) && !cond.IsDeleted).FirstOrDefault().TaskStatusTypeID;
            Int32 abondonedStatusTypeId = _dbContext.lkpTaskStatusTypes.Where(cond => cond.TaskStatusTypeCode.Equals(abondonedStatusCode) && !cond.IsDeleted).FirstOrDefault().TaskStatusTypeID;
            if (!lstTaskIds.IsNullOrEmpty())
            {
                lstExistingTasks = _dbContext.ScheduledTasks.Where(cond => !cond.ST_IsDeleted && lstTaskIds.Contains(cond.ST_ID)).ToList();
            }
            foreach (ScheduledTask task in lstExistingTasks)
            {
                String status = dictUpdatedTaskStatus.GetValue(task.ST_ID);
                if (!status.Equals(String.Empty))
                {
                    task.ST_TaskStatusID = status.Equals(TaskStatusType.COMPLETED.GetStringValue()) ? completedStatusTypeId :
                                        (status.Equals(TaskStatusType.ERROR.GetStringValue()) ? errorStatusTypeId : abondonedStatusTypeId);
                }
                task.ST_ModifiedByID = modifiedById;
                task.ST_ModifiedOn = DateTime.UtcNow;
                if (task.lkpTaskType.IsRecurring == true && task.lkpTaskType.WaitMinutes.IsNotNull())
                {
                    task.WaitUntil = DateTime.Now.AddMinutes(task.lkpTaskType.WaitMinutes.Value);
                }
            }
            _dbContext.SaveChanges();
            return true;
        }

        public List<ScheduledTask> GetScheduledTasksForInvoiceOrder(Int32 chunkSize = 0)
        {
            String pendingStatusCode = TaskStatusType.PENDING.GetStringValue();
            String errorStatusCode = TaskStatusType.ERROR.GetStringValue();
            String invoiceTaskType = TaskType.INVOICEORDERBULKAPPROVE.GetStringValue();
            if (chunkSize > 0)
            {
                return _dbContext.ScheduledTasks.Where(cond => !cond.ST_IsDeleted && (cond.lkpTaskStatusType.TaskStatusTypeCode.Equals(errorStatusCode)
                || cond.lkpTaskStatusType.TaskStatusTypeCode.Equals(pendingStatusCode)) &&
                cond.lkpTaskType.TaskTypeCode.Equals(invoiceTaskType) && !cond.lkpTaskStatusType.IsDeleted && !cond.lkpTaskType.IsDeleted).Take(chunkSize).ToList();
            }
            else
            {
                return _dbContext.ScheduledTasks.Where(cond => !cond.ST_IsDeleted && (cond.lkpTaskStatusType.TaskStatusTypeCode.Equals(errorStatusCode)
                    || cond.lkpTaskStatusType.TaskStatusTypeCode.Equals(pendingStatusCode)) &&
                    cond.lkpTaskType.TaskTypeCode.Equals(invoiceTaskType) && !cond.lkpTaskStatusType.IsDeleted && !cond.lkpTaskType.IsDeleted).ToList();
            }
        }

        #endregion

        #region UAT:719 Check Exceptions turned off for a Category/Item
        /// <summary>
        /// To check wheather exception is allowed turned off for a Category/item
        /// </summary>
        /// <param name="packageId">packageId</param>
        /// <param name="categoryId">categoryId</param>
        /// <param name="lstlkpObjectType">lstlkpObjectType</param>
        /// <returns></returns>
        Boolean IComplianceDataRepository.IsAllowExceptionOnCategory(Int32 packageId, Int32 categoryId, List<lkpObjectType> lstlkpObjectType)
        {
            Int32 parentAssignmentHierarchyID;
            Int32 assignmentHierarchyID;

            String objectTypeCodeForPack = LCObjectType.CompliancePackage.GetStringValue();
            String objectTypeCodeForCat = LCObjectType.ComplianceCategory.GetStringValue();

            Int32 objectTypePackageID = lstlkpObjectType.Where(x => x.OT_Code.Equals(objectTypeCodeForPack) && x.OT_IsDeleted == false).FirstOrDefault().OT_ID;
            Int32 objectTypeCatID = lstlkpObjectType.Where(x => x.OT_Code.Equals(objectTypeCodeForCat) && x.OT_IsDeleted == false).FirstOrDefault().OT_ID;

            #region UAT-3520
            String categoryExcepCode = Setting.DISABLE_CATEGORY_AND_ITEM_EXCEPTIONS.GetStringValue();
            var ClientSetting = _dbContext.ClientSettings.Where(cond => !cond.CS_IsDeleted && cond.lkpSetting.Code.Equals(categoryExcepCode)).FirstOrDefault();
            String categoryExceptionValue = AppConsts.ZERO;
            if (!ClientSetting.IsNullOrEmpty())
            {
                categoryExceptionValue = ClientSetting.CS_SettingValue;
            }
            #endregion


            if (categoryExceptionValue == AppConsts.ZERO) //UAT-3520
            {
                AssignmentHierarchy assignmentHierarchyPackObj = _dbContext.AssignmentHierarchies.Where(x => x.ObjectTypeID == objectTypePackageID && x.ObjectID == packageId).FirstOrDefault();
                if (assignmentHierarchyPackObj.IsNotNull())
                {
                    parentAssignmentHierarchyID = assignmentHierarchyPackObj.AssignmentHierarchyID;
                    AssignmentHierarchy assignmentHierarchyCatObj = _dbContext.AssignmentHierarchies.Where(x => x.ObjectTypeID == objectTypeCatID && x.ObjectID == categoryId && x.ParentID == parentAssignmentHierarchyID).FirstOrDefault();
                    if (assignmentHierarchyCatObj.IsNotNull())
                    {
                        assignmentHierarchyID = assignmentHierarchyCatObj.AssignmentHierarchyID;
                        AssignmentProperty assignmentProperty = _dbContext.AssignmentProperties.Where(obj => obj.AssignmentHierarchyID == assignmentHierarchyID && obj.IsActive == true && obj.IsDeleted == false).FirstOrDefault();
                        if (assignmentProperty.IsNotNull())
                        {
                            return assignmentProperty.IsExceptionNotAllowed;
                        }
                    }
                }
            }
            else
            {
                return true;
            }
            return false;
        }
        #endregion

        /// <summary>
        /// Check wheteher exception rejected is for category
        /// </summary>
        /// <param name="itemID"></param>
        /// <returns></returns>
        public Boolean IsCategoryException(Int32 itemID)
        {
            Guid wholeCatGuid = new Guid(AppConsts.WHOLE_CATEGORY_GUID);
            ComplianceItem cmpItem = _dbContext.ComplianceItems.FirstOrDefault(x => x.ComplianceItemID == itemID && x.Code == wholeCatGuid);
            if (cmpItem.IsNotNull())
                return true;
            return false;
        }




        public List<ApplicantDataList> GetApplicantComprehensivePortfolioSearch(SearchItemDataContract searchDataContract, CustomPagingArgsContract gridCustomPaging, String tenantIdList, Boolean IsAllTenantSelected)
        {
            string orderBy = QueueConstants.APPLICANT_SEARCH_DEFAULT_SORTING_FIELDS;
            string ordDirection = null;

            orderBy = String.IsNullOrEmpty(gridCustomPaging.SortExpression) ? orderBy : gridCustomPaging.SortExpression;
            ordDirection = gridCustomPaging.SortDirectionDescending == false ? null : "desc";

            EntityConnection connection = base.SecurityContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand command = new SqlCommand("usp_ApplicantComprehensiveSearch", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@FirstName", searchDataContract.ApplicantFirstName);
                command.Parameters.AddWithValue("@LastName", searchDataContract.ApplicantLastName);
                command.Parameters.AddWithValue("@OrganizationUserID", searchDataContract.OrganizationUserId);
                command.Parameters.AddWithValue("@EmailAddress", searchDataContract.EmailAddress);
                command.Parameters.AddWithValue("@SSN", searchDataContract.ApplicantSSN);
                command.Parameters.AddWithValue("@DOB", searchDataContract.DateOfBirth);
                command.Parameters.AddWithValue("@OrderBy", orderBy);
                command.Parameters.AddWithValue("@OrderDirection", ordDirection);
                command.Parameters.AddWithValue("@PageIndex", gridCustomPaging.CurrentPageIndex);
                command.Parameters.AddWithValue("@PageSize", gridCustomPaging.PageSize);
                command.Parameters.AddWithValue("@LoggedInOrgUserID", searchDataContract.LoggedInUserId);
                command.Parameters.AddWithValue("@TenantIdList", tenantIdList);
                command.Parameters.AddWithValue("@IsAllTenantSelected", IsAllTenantSelected);
                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > 0)
                {
                    List<ApplicantDataList> lstApplicantData = new List<ApplicantDataList>();
                    lstApplicantData = ds.Tables[0].AsEnumerable().Select(col =>
                          new ApplicantDataList
                          {
                              OrganizationUserId = Convert.ToInt32(col["OrganizationUserId"]),
                              ApplicantFirstName = col["ApplicantFirstName"] == DBNull.Value ? String.Empty : Convert.ToString(col["ApplicantFirstName"]),
                              ApplicantLastName = col["ApplicantLastName"] == DBNull.Value ? String.Empty : Convert.ToString(col["ApplicantLastName"]),
                              //DateOfBirth = Convert.ToDateTime(col["DateOfBirth"]),
                              DateOfBirth = col["DateOfBirth"] == DBNull.Value ? (DateTime?)null : Convert.ToDateTime(col["DateOfBirth"]),
                              EmailAddress = col["EmailAddress"] == DBNull.Value ? String.Empty : Convert.ToString(col["EmailAddress"]),
                              InstituteName = col["InstituteName"] == DBNull.Value ? String.Empty : Convert.ToString(col["InstituteName"]),
                              SSN = col["SSN"] == DBNull.Value ? String.Empty : Convert.ToString(col["SSN"]),
                              TenantID = Convert.ToInt32(col["TenantID"]),
                              TotalCount = col["TotalCount"] == DBNull.Value ? 0 : Convert.ToInt32(col["TotalCount"])
                          }).ToList();
                    return lstApplicantData;
                }
                return new List<ApplicantDataList>();
            }
        }

        #region UAT-718 WB: As an admin, I should be able to assign items across multiple institutions.
        /// <summary>
        /// Method to update the IsDirty column of flat table "FlatVeriFicationDetailData"
        /// </summary>
        /// <param name="itemGlobalids">Ids list to update</param>
        /// <param name="currentLoggedInUserId">current logged in user's id</param>
        /// <param name="assignToUserId">assign to user id for item</param>
        /// <returns>boolean</returns>
        public Boolean UpdateAssignToUserForMultipleTenant(List<Int32> itemGlobalids, Int32 currentLoggedInUserId, Int32 assignToUserId)
        {
            if (itemGlobalids.IsNotNull() && itemGlobalids.Count > 0)
            {
                List<Entity.FlatVeriFicationDetailData> listFlatVerificationDataToUpdate = SecurityContext.FlatVeriFicationDetailDatas.Where(cnd => itemGlobalids.Contains(cnd.FVD_ID) && !cnd.FVD_IsDeleted).ToList();

                listFlatVerificationDataToUpdate.ForEach(x =>
                {
                    x.FVD_IsDirty = true;
                    x.FVD_ModifiedBy = currentLoggedInUserId;
                    x.FVD_ModifiedDate = DateTime.Now;
                });

                if (SecurityContext.SaveChanges() > 0)
                    return true;
                else
                    return false;
            }
            return false;
        }
        #endregion

        public DataTable GetApplicantListDataValues(SearchItemDataContract searchItemDataContract, CustomPagingArgsContract customPagingArgsContract)
        {
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {

                SqlCommand command = new SqlCommand("usp_GetDataForTheApplicantSearch", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@dataXML", searchItemDataContract.CreateXml());
                command.Parameters.AddWithValue("@sortingAndFilteringData", customPagingArgsContract.CreateXml());
                //command.Parameters.AddWithValue("@filteringSortingData", verificationGridCustomPaging.XML);
                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > 1)
                {
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        customPagingArgsContract.CurrentPageIndex = Convert.ToInt32(Convert.ToString(ds.Tables[0].Rows[0]["CurrentPageIndex"]));
                        customPagingArgsContract.VirtualPageCount = Convert.ToInt32(Convert.ToString(ds.Tables[0].Rows[0]["VirtualCount"]));
                    }
                    return ds.Tables[1];
                }
            }
            return new DataTable();
        }
        //UAT-1055
        //public DataTable GetItemDataSearchData(SearchItemDataContract searchItemDataContract, CustomPagingArgsContract customPagingArgsContract, Int32? DPMid)
        public DataTable GetItemDataSearchData(SearchItemDataContract searchItemDataContract, CustomPagingArgsContract customPagingArgsContract, String DPMids)
        {
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {

                SqlCommand command = new SqlCommand("usp_GetItemDataSearchData", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@dataXML", searchItemDataContract.CreateXml());
                command.Parameters.AddWithValue("@CustomAtrributesData", searchItemDataContract.CustomFields);
                command.Parameters.AddWithValue("@sortingAndFilteringData", customPagingArgsContract.CreateXml());
                command.Parameters.AddWithValue("@InstitutionHierarchyIDs", DPMids);
                //command.Parameters.AddWithValue("@filteringSortingData", verificationGridCustomPaging.XML);
                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > 1)
                {
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        customPagingArgsContract.CurrentPageIndex = Convert.ToInt32(Convert.ToString(ds.Tables[0].Rows[0]["CurrentPageIndex"]));
                        customPagingArgsContract.VirtualPageCount = Convert.ToInt32(Convert.ToString(ds.Tables[0].Rows[0]["VirtualCount"]));
                    }
                    return ds.Tables[1];
                }
            }
            return new DataTable();
        }

        #region UAT-573 WB: Automatic renewal for Invoice clients
        public List<ScheduledTask> GetScheduledTasksForAutoRenewExpiredInvoiceSubscription()
        {
            String pendingStatusCode = TaskStatusType.PENDING.GetStringValue();
            String errorStatusCode = TaskStatusType.ERROR.GetStringValue();
            String invoiceTaskType = TaskType.RENEWEXPIREDINVOICESUBSCRIPTION.GetStringValue();

            return _dbContext.ScheduledTasks.Where(cond => !cond.ST_IsDeleted && (cond.lkpTaskStatusType.TaskStatusTypeCode.Equals(errorStatusCode)
                || cond.lkpTaskStatusType.TaskStatusTypeCode.Equals(pendingStatusCode)) &&
                cond.lkpTaskType.TaskTypeCode.Equals(invoiceTaskType) && !cond.lkpTaskStatusType.IsDeleted && !cond.lkpTaskType.IsDeleted).ToList();

        }

        public List<Order> GetInvoiceOrdersForAutoRenew(short archieveStateID)
        {
            /*Remove order.lkpOrderStatus and order.lkpPaymentOption UAT-916*/
            String InvoiceWithoutApproval = PaymentOptions.InvoiceWithOutApproval.GetStringValue();
            String InvoiceWithApproval = PaymentOptions.InvoiceWithApproval.GetStringValue();
            String OrderStatus = ApplicantOrderStatus.Paid.GetStringValue();
            String PendingApproval = ApplicantOrderStatus.Pending_Payment_Approval.GetStringValue();
            String MobilitySwitched = LkpSubscriptionMobilityStatus.MobilitySwitched;
            String ordrPKgCompTypeCode = OrderPackageTypes.COMPLIANCE_PACKAGE.GetStringValue();

            List<Order> lstOrder = _dbContext.Orders
                .Include("DeptProgramPackage")
                .Include("DeptProgramMapping")
                .Include("DeptProgramPackage.CompliancePackage")
                .Include("DeptProgramPackage.DeptProgramMapping")
                .Include("OrderPaymentDetails")
                .Where(cond => !cond.IsDeleted && cond.DeptProgramPackage.DPP_IsAutoRenewInvoiceOrder.HasValue && cond.DeptProgramPackage.DPP_IsAutoRenewInvoiceOrder.Value // Auto Renew Should be true
                                                                                                                                                                            /*&& (cond.lkpPaymentOption.Code.Equals(InvoiceWithoutApproval) || cond.lkpPaymentOption.Code.Equals(InvoiceWithApproval)) // Only Invoice //shift this check in IsOrderAvailableForRenew method [UAT-916]*/
                    && (cond.AutomaticRenewalTurnedOff == null || cond.AutomaticRenewalTurnedOff == false) // UAT - 796 : As an admin, I should be able to turn off student's renewal auto approval.
                    && !(cond.PackageSubscription.SubscriptionMobilityStatusID != null && cond.PackageSubscription.lkpSubscriptionMobilityStatu.Code.Equals(MobilitySwitched)) // Not Mobility Switched case
                    && !(_dbContext.Orders.Any(x => x.PreviousOrderID != null && x.PreviousOrderID == cond.OrderID)) // Already Order not done for renew 
                    && (_dbContext.PackageSubscriptions.Any(ps => ps.OrderID == cond.OrderID && ps.ExpiryDate < DateTime.Now && (ps.ArchiveStateID ?? 0) != archieveStateID))
                    /*&& cond.lkpOrderStatu.Code.Equals(OrderStatus) //shift this check in IsOrderAvailableForRenew method [UAT-916]*/
                    && (_dbContext.OrderPkgPaymentDetails.Any(cnd => cnd.lkpOrderPackageType.OPT_Code == ordrPKgCompTypeCode
                                                          && cnd.OPPD_IsDeleted == false
                                                          && cnd.OrderPaymentDetail != null
                                                          && cnd.OrderPaymentDetail.OPD_OrderID == cond.OrderID
                                                          && cnd.OrderPaymentDetail.OPD_IsDeleted == false
                                                          && (cnd.OrderPaymentDetail.lkpPaymentOption.Code == InvoiceWithApproval || cnd.OrderPaymentDetail.lkpPaymentOption.Code == InvoiceWithoutApproval)
                                                          && cnd.OrderPaymentDetail.lkpOrderStatu.Code == OrderStatus))
                    ).ToList(); // Order is Expired and Should be Paid And orderpayment options should be invoice with approval or Invoice without approval.
            _dbContext.Refresh(RefreshMode.StoreWins, lstOrder);

            return lstOrder;
        }

        #endregion
        #region UAT-775: Creation of Service Form reminder and notification emails.

        /// <summary>
        /// To Get Is Service Form Diaptched Noification Enabled.
        /// </summary>
        /// <param name="tenantId"></param>
        /// <param name="code"></param>
        /// <returns>True/False</returns> 
        Boolean IComplianceDataRepository.GetSvcFrmDisNotification(Int32 tenantId, String code)
        {
            try
            {
                ClientSetting clientSetting = _dbContext.ClientSettings.Where(cond => cond.CS_TenantID == tenantId && !cond.CS_IsDeleted && cond.lkpSetting.Code.Equals(code)).FirstOrDefault();
                if (clientSetting.IsNotNull())
                {
                    if (clientSetting.CS_SettingValue.Contains("true") || clientSetting.CS_SettingValue.Contains("false"))
                    {
                        return Convert.ToBoolean(clientSetting.CS_SettingValue);
                    }
                    else
                    {
                        return Convert.ToBoolean(Convert.ToInt32(clientSetting.CS_SettingValue));
                    }
                }
                return true;
            }
            catch (SysXException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// To Get Service Form Dispatched Notification Data 
        /// </summary>
        /// <param name="chunkSize"></param>
        /// <returns>DataTable</returns>
        DataTable IComplianceDataRepository.GetServiceFormDispatchedNotificationData(Int32 chunkSize)
        {
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {

                SqlCommand command = new SqlCommand("ams.usp_GetServiceFormDispatchedData", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@ChunkSize", chunkSize);
                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > 0)
                {
                    return ds.Tables[0];
                }
            }
            return new DataTable();
        }

        #endregion

        /// <summary>
        /// To Get Is Service Form Diaptched Noification Enabled.
        /// </summary>
        /// <param name="tenantId"></param>
        /// <param name="code"></param>
        /// <returns>True/False</returns> 
        Boolean IComplianceDataRepository.GetSSNSetting(Int32 tenantId, String code)
        {

            ClientSetting clientSetting = _dbContext.ClientSettings.Where(cond => cond.CS_TenantID == tenantId && !cond.CS_IsDeleted && cond.lkpSetting.Code.Equals(code)).FirstOrDefault();
            if (clientSetting.IsNotNull())
            {
                if (clientSetting.CS_SettingValue.Contains("true") || clientSetting.CS_SettingValue.Contains("false"))
                {
                    return Convert.ToBoolean(clientSetting.CS_SettingValue);
                }
                else
                {
                    return Convert.ToBoolean(Convert.ToInt32(clientSetting.CS_SettingValue));
                }
            }
            return false;
        }

        #region UAT-845 Creation of admin override function (verification details).

        Boolean IComplianceDataRepository.UpdateCategoryOverrideData(Int32 categoryDataId, DateTime? expirationDate, Int32 catStatusId, Int16? catOverrideStatusId,
                                                        Int32 currentLoggedInUserId, Int32 complianceCatId, Int32 packageSubscriptionId, String CategoryOverrideNotes)
        {
            ApplicantComplianceCategoryData tempApplicantComCatData = new ApplicantComplianceCategoryData();
            if (categoryDataId > 0)
            {
                tempApplicantComCatData = ClientDBContext.ApplicantComplianceCategoryDatas.FirstOrDefault(cond => cond.ApplicantComplianceCategoryID == categoryDataId && !cond.IsDeleted);

                if (tempApplicantComCatData.IsNotNull())
                {
                    tempApplicantComCatData.ExpiryDate = expirationDate;
                    if (catStatusId > 0)
                    {
                        tempApplicantComCatData.StatusID = catStatusId;
                    }
                    tempApplicantComCatData.CategoryExceptionStatusID = catOverrideStatusId;
                    tempApplicantComCatData.ModifiedByID = currentLoggedInUserId;
                    tempApplicantComCatData.ModifiedOn = DateTime.Now;

                    //To do UAT-2547
                    tempApplicantComCatData.Override_Notes = CategoryOverrideNotes;
                }
                if (ClientDBContext.SaveChanges() > 0)
                    return true;
                return false;
            }
            else
            {
                tempApplicantComCatData.PackageSubscriptionID = packageSubscriptionId;
                tempApplicantComCatData.ComplianceCategoryID = complianceCatId;
                if (catStatusId > 0)
                    tempApplicantComCatData.StatusID = catStatusId;
                tempApplicantComCatData.ExpiryDate = expirationDate;
                tempApplicantComCatData.CategoryExceptionStatusID = catOverrideStatusId;
                tempApplicantComCatData.CreatedByID = currentLoggedInUserId;
                tempApplicantComCatData.CreatedOn = DateTime.Now;
                tempApplicantComCatData.IsDeleted = false;
                //To do UAT-2547
                tempApplicantComCatData.Override_Notes = CategoryOverrideNotes;

                ClientDBContext.ApplicantComplianceCategoryDatas.AddObject(tempApplicantComCatData);
                if (ClientDBContext.SaveChanges() > 0)
                    return true;
                return false;
            }
            return false;
        }
        #endregion

        #region UAT-796

        /// <summary>
        /// Method to Update Automatic renewal of an order.
        /// </summary>
        /// <param name="orderID"></param>
        /// <param name="currentUserID"></param>
        /// <param name="autoRenewalCurrentValue"></param>
        /// <returns></returns>
        public String ResetAutoRenewalStatus(Int32 orderID, Int32 currentUserID)
        {
            Order order = _dbContext.Orders.Where(x => x.OrderID == orderID && !x.IsDeleted).FirstOrDefault();
            if (order.IsNotNull())
            {
                if (order.AutomaticRenewalTurnedOff.IsNotNull())
                {
                    order.AutomaticRenewalTurnedOff = !order.AutomaticRenewalTurnedOff;
                }
                else
                {
                    order.AutomaticRenewalTurnedOff = true;
                }
                order.ModifiedByID = currentUserID;
                order.ModifiedOn = DateTime.Now;
                if (_dbContext.SaveChanges() > 0)
                {
                    return Convert.ToString(order.AutomaticRenewalTurnedOff.IsNull() ? true : !order.AutomaticRenewalTurnedOff);
                }
                return "Error";
            }
            return "Invalid";
        }

        #endregion

        public List<PackageSubscription> GetSubscribedPackagesForUser(int tenantID, int userID, int OrderCancelled, int PartialOrderCancelStatus)
        {
            // Int16 mobilityStatusID = ClientDBContext.lkpSubscriptionMobilityStatus.Where(cond => cond.Code == "AAAB" && !cond.IsDeleted).Select(x => x.SubscriptionMobilityStatusID).FirstOrDefault();
            // List<PackageSubscription> lstActiveSubscription = ClientDBContext.PackageSubscriptions.Include("CompliancePackage").Include("OrganizationUser").Include("Orders").Where(cond => cond.OrganizationUserID == userID
            //                                                                                                             && !cond.IsDeleted).ToList();
            // return lstActiveSubscription.Where(cond => cond.Order.IsDeleted == false).ToList();
            // return lstActiveSubscription;
            // && (cond.SubscriptionMobilityStatusID != mobilityStatusID || cond.SubscriptionMobilityStatusID == null)  
            // && cond.ExpiryDate > DateTime.Now Check moved to presenter for UAT - 929 : Applicant is unable to upload or view the document, if institution has AMS features only. 
            //Checks moved to presenter for UAT - 929 : Applicant is unable to upload or view the document, if institution has AMS features only. 
            //return ClientDBContext.PackageSubscriptions.Include("CompliancePackage").Include("OrganizationUser").Where(cond => cond.OrganizationUserID == userID && !cond.IsDeleted).ToList();

            //return ClientDBContext.PackageSubscriptions.Include("Order").Include("Order.OrderPaymentDetails").Include("Order.OrderPaymentDetails.OrderPkgPaymentDetails").Where(cond => cond.OrganizationUserID == userID && !cond.IsDeleted && !cond.Order.IsDeleted
            // && !(cond.Order.OrderStatusID == OrderCancelled) && (cond.Order.PartialOrderCancellationTypeID == null || cond.Order.PartialOrderCancellationTypeID == PartialOrderCancelStatus)
            // && cond.Order.OrderPaymentDetails.Any(x => x.OPD_OrderStatusID != OrderCancelled && !x.OPD_IsDeleted && x.OrderPkgPaymentDetails.Any(y => y.OPPD_BkgOrderPackageID == null && !y.OPPD_IsDeleted))
            // )
            // .DistinctBy(sel => sel.OrderID).ToList();

            //UAT - 3409
            return ClientDBContext.PackageSubscriptions.Where(cond => cond.OrganizationUserID == userID && !cond.IsDeleted)
           .DistinctBy(sel => sel.OrderID).ToList();

        }

        //UAT - 4067
        public List<PackageSubscription> GetSelectedNodeIDByOrderID(int tenantID, int userID)
        {
            return ClientDBContext.PackageSubscriptions.Include("Order").Where(cond => cond.OrganizationUserID == userID && !cond.IsDeleted && !cond.Order.IsDeleted)
           .DistinctBy(sel => sel.OrderID).ToList();
        }
        public List<PackageSubscription> GetSelectedNodeIDBySubscriptionID(Int32 selectedtenantID, Int32 packageSubscriptionID)
        {
            return ClientDBContext.PackageSubscriptions.Include("Order").Where(cond => !cond.IsDeleted && !cond.Order.IsDeleted && cond.PackageSubscriptionID == packageSubscriptionID)
           .DistinctBy(sel => sel.OrderID).ToList();
        }

        public NotificationDelivery GetExistingNotificationDeliveryForToday(Int32 orgUserId, Int32 entityId, Int32 subEventId, String entitySetName)
        {

            return _dbContext.NotificationDeliveries.Where(col => col.ND_OrganizationUserID == orgUserId
                                                           && col.ND_EntityName.Equals(entitySetName)
                                                           && col.ND_EntityId == entityId
                                                           && col.ND_SubEventTypeID == subEventId
                                                           && System.Data.Entity.DbFunctions.DiffDays(DateTime.Now, col.ND_CreatedOn) == 0
                                                           && !col.ND_IsDeleted
                                                            ).FirstOrDefault();
        }

        public DataTable GetScheduleTasksToProcess(String taskTypeCode, Int32 chunkSize)
        {
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {

                SqlCommand command = new SqlCommand("[dbo].[usp_GetScheduleTasks]", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@TaskTypeCode", taskTypeCode);
                command.Parameters.AddWithValue("@ChunkSize", chunkSize);
                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > 0)
                {
                    return ds.Tables[0];
                }
            }
            return new DataTable();
        }

        public Boolean UpdateBackgroundServiceExecutionHistory(BackgroundServiceExecutionHistory backgroundServiceExecutionHistory, Int32 serviceExecutionHistoryId)
        {
            BackgroundServiceExecutionHistory existingBackgroundServiceExecutionHistory = _dbContext.BackgroundServiceExecutionHistories.Where(col => col.BSEH_Id == serviceExecutionHistoryId).FirstOrDefault();
            if (existingBackgroundServiceExecutionHistory.IsNotNull())
            {
                existingBackgroundServiceExecutionHistory.BSEH_EndTime = backgroundServiceExecutionHistory.BSEH_EndTime;
            }
            if (_dbContext.SaveChanges() > 0)
                return true;
            else
                return false;
        }

        #region Sales Force

        /// <summary>
        /// Add the object for Compliance Data upload to third party like Sales Force
        /// </summary>
        /// <param name="_tpUploadData"></param>
        public void AddThirdPartyDataUpload(ThirdPartyComplianceDataUpload _tpUploadData)
        {
            _dbContext.ThirdPartyComplianceDataUploads.AddObject(_tpUploadData);
            _dbContext.SaveChanges();
        }

        /// <summary>
        /// Updates IsDeleted = 1 for all the Applicant Subscriptions in 'ThirdPartyComplianceDataUpload' table 
        /// </summary>
        /// <param name="organizationUserId"></param>
        /// <param name="currentUserId"></param>
        public void UpdateApplicantSubcriptions(Int32 organizationUserId, Int32 currentUserId)
        {
            var _lst = _dbContext.ThirdPartyComplianceDataUploads.Where(tpucd => tpucd.TPCDU_OrganizationUserID == organizationUserId
                                                                              && tpucd.TPCDU_IsDeleted == false).ToList();

            foreach (var subs in _lst)
            {
                subs.TPCDU_IsDeleted = true;
                subs.TPCDU_ModifiedOn = DateTime.Now;
                subs.TPCDU_ModifiedByID = currentUserId;
            }
            _dbContext.SaveChanges();
        }

        /// <summary>
        /// Gets the App Configuration for the tenant, based on the Key
        /// </summary>
        /// <returns>
        /// </returns>
        public Entity.ClientEntity.AppConfiguration GetAppConfiguration(String key)
        {
            return _dbContext.AppConfigurations.Where(cond => cond.AC_Key == key).FirstOrDefault();
        }

        #endregion

        #region UAT-749:WB: Addition of "User Groups" to left panel of Verification Details screen
        public List<Entity.ClientEntity.UserGroup> GetUserGroupsForUser(Int32 organizationUserId)
        {
            List<Entity.ClientEntity.UserGroup> finalUserGroupList = null;
            List<Entity.ClientEntity.ApplicantUserGroupMapping> tempUserGroupMapping = _dbContext.ApplicantUserGroupMappings.Where(cond => cond.AUGM_OrganizationUserID == organizationUserId && cond.AUGM_IsDeleted == false).ToList();
            if (tempUserGroupMapping.IsNotNull() && tempUserGroupMapping.Count > 0)
            {
                List<Entity.ClientEntity.UserGroup> tempUserGroupList = tempUserGroupMapping.Select(slct => slct.UserGroup).ToList();
                if (tempUserGroupList.IsNotNull() && tempUserGroupList.Count > 0)
                {
                    finalUserGroupList = tempUserGroupList.Where(cnd => cnd.UG_IsDeleted == false).ToList();
                }
            }
            return finalUserGroupList;
        }
        #endregion

        #region Compliance Document Search [UAT-846:WB: As a client admin, I should be able to pull specific compliance documents for a group of students.]
        public DataTable GetComplianceDocumentSearch(SearchItemDataContract searchDataContract, CustomPagingArgsContract gridCustomPaging)
        {
            string orderBy = "ApplicantName";
            string ordDirection = null;

            orderBy = String.IsNullOrEmpty(gridCustomPaging.SortExpression) ? orderBy : gridCustomPaging.SortExpression;
            ordDirection = gridCustomPaging.SortDirectionDescending == false ? null : "desc";

            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand command = new SqlCommand("usp_GetComplianceDocumentSearch", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@ApplicantFirstName", searchDataContract.ApplicantFirstName);
                command.Parameters.AddWithValue("@ApplicantLastName", searchDataContract.ApplicantLastName);
                command.Parameters.AddWithValue("@UserGroups", searchDataContract.SelectedUserGroupIDs);
                //Commented below code for UAT-1175:Update Category and Document dropdowns to only display one per unique value (from name or label whichever is used)
                //command.Parameters.AddWithValue("@ItemIDs", searchDataContract.SelectedItemIDs);
                command.Parameters.AddWithValue("@SelectedItems", searchDataContract.SelectedItemNames);
                //command.Parameters.AddWithValue("@InstitutionHierarchy", searchDataContract.DPM_Id);
                command.Parameters.AddWithValue("@InstitutionHierarchyIDs", searchDataContract.SelectedDPMIds);
                command.Parameters.AddWithValue("@OrderBy", orderBy);
                command.Parameters.AddWithValue("@OrderDirection", ordDirection);
                command.Parameters.AddWithValue("@PageIndex", gridCustomPaging.CurrentPageIndex);
                command.Parameters.AddWithValue("@PageSize", gridCustomPaging.PageSize);
                command.Parameters.AddWithValue("@OrganisationUserId", searchDataContract.LoggedInUserId);
                command.Parameters.AddWithValue("@DateFrom", searchDataContract.FromDate); //UAT 2566
                command.Parameters.AddWithValue("@DateTo", searchDataContract.ToDate); //UAT 2566

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > 0)
                {
                    return ds.Tables[0];
                }
                return new DataTable();
            }
        }

        #endregion

        #region UAT-968:As an ADB admin, I should be able to create/view/edit "notes" in a student's profile search details.
        DataTable IComplianceDataRepository.GetApplicantProfileNotesList(Int32 organizationUserID, Boolean IsClientAdmin) //IsClientAdmin- UAT-5052
        {
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand command = new SqlCommand("usp_GetApplicantProfileNotes", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@OrganizationUserID", organizationUserID);
                //Start UAT-5052
                command.Parameters.AddWithValue("@IsClientAdmin", IsClientAdmin);
                //End UAT-5052
                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);

                if (ds.Tables.Count > AppConsts.NONE)
                {
                    return ds.Tables[0];
                }
            }
            return null;
        }


        //UAT-4067
        DataTable IComplianceDataRepository.GetAllowedFileExtensionsByNodeIDs(String selectedNodeIDs)
        {
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand command = new SqlCommand("usp_GetAllowedFileExtensionsByNodeIDs", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@DPMIDs", selectedNodeIDs);
                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);

                if (ds.Tables.Count > AppConsts.NONE)
                {
                    return ds.Tables[0];
                }
            }
            return null;
        }

        Boolean IComplianceDataRepository.SaveApplicantProfileNotes(ApplicantProfileNote applicantProfileNoteObj)
        {
            if (applicantProfileNoteObj.IsNotNull())
            {
                _dbContext.ApplicantProfileNotes.AddObject(applicantProfileNoteObj);
                if (_dbContext.SaveChanges() > 0)
                    return true;
            }
            return false;
        }

        ApplicantProfileNote IComplianceDataRepository.GetApplicantProfileNotesByNoteID(Int32 applicantProfileNoteID)
        {
            return _dbContext.ApplicantProfileNotes.FirstOrDefault(cond => cond.APN_ID == applicantProfileNoteID && cond.APN_IsDeleted == false);
        }

        Boolean IComplianceDataRepository.UpdateApplicantProfileNote()
        {
            if (_dbContext.SaveChanges() > 0)
            {
                return true;
            }
            return false;
        }

        /// <summary>
        /// Method to save, update and delete applicant profile notes.
        /// </summary>
        /// <param name="applicantProfileNoteList"></param>
        /// <returns></returns>
        Boolean IComplianceDataRepository.SaveUpdateApplicantProfileNotes(List<ApplicantProfileNotesContract> applicantProfileNoteList)
        {
            List<ApplicantProfileNotesContract> applicantNoteListToSave = new List<ApplicantProfileNotesContract>();
            List<ApplicantProfileNotesContract> applicantNoteListToUpdate = new List<ApplicantProfileNotesContract>();
            List<ApplicantProfileNotesContract> applicantNoteListToDelete = new List<ApplicantProfileNotesContract>();
            if (applicantProfileNoteList.IsNotNull() && applicantProfileNoteList.Count > 0)
            {
                applicantNoteListToSave = applicantProfileNoteList.Where(cond => cond.IsNew == true).ToList();
                applicantNoteListToUpdate = applicantProfileNoteList.Where(cond => cond.IsUpdated == true).ToList();
                applicantNoteListToDelete = applicantProfileNoteList.Where(cond => cond.APN_IsDeleted == true).ToList();
                foreach (ApplicantProfileNotesContract tempNoteToSave in applicantNoteListToSave)
                {
                    ApplicantProfileNote applicantNoteToSave = new ApplicantProfileNote();
                    applicantNoteToSave.APN_OrganizationUserID = tempNoteToSave.APN_OrganizationUserID;
                    applicantNoteToSave.APN_ProfileNotes = tempNoteToSave.APN_ProfileNote;
                    applicantNoteToSave.APN_CreatedBy = tempNoteToSave.APN_CreatedBy;
                    applicantNoteToSave.APN_CreatedOn = DateTime.Now;
                    applicantNoteToSave.APN_IsDeleted = false;
                    //Start UAT-5052
                    applicantNoteToSave.APN_IsVisibleToClientAdmin = tempNoteToSave.APN_IsVisibleToClientAdmin;
                    //End UAT-5052
                    _dbContext.ApplicantProfileNotes.AddObject(applicantNoteToSave);

                }
                foreach (ApplicantProfileNotesContract tempNoteToUpdate in applicantNoteListToUpdate)
                {

                    ApplicantProfileNote applicantNoteToUpdate = _dbContext.ApplicantProfileNotes.FirstOrDefault(cond => cond.APN_ID == tempNoteToUpdate.APN_ID && cond.APN_IsDeleted == false);
                    applicantNoteToUpdate.APN_ProfileNotes = tempNoteToUpdate.APN_ProfileNote;
                    applicantNoteToUpdate.APN_ModifiedBy = tempNoteToUpdate.APN_CreatedBy;
                    applicantNoteToUpdate.APN_ModifiedOn = DateTime.Now;
                }
                foreach (ApplicantProfileNotesContract tempNoteToDelete in applicantNoteListToDelete)
                {
                    ApplicantProfileNote applicantNoteToDelete = _dbContext.ApplicantProfileNotes.FirstOrDefault(cond => cond.APN_ID == tempNoteToDelete.APN_ID && cond.APN_IsDeleted == false);
                    applicantNoteToDelete.APN_IsDeleted = true;
                    applicantNoteToDelete.APN_ModifiedBy = tempNoteToDelete.APN_CreatedBy;
                    applicantNoteToDelete.APN_ModifiedOn = DateTime.Now;
                }

                if (_dbContext.SaveChanges() > 0)
                    return true;
            }
            return false;
        }
        #endregion

        #region UAT-966:As an admin, I should be able to cancel individual parts of an order

        DataTable IComplianceDataRepository.GetCancelledBkgOrderData(Int32 orderId)
        {
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand _command = new SqlCommand("ams.usp_GetCancelledBkgOrderData", con);
                _command.CommandType = CommandType.StoredProcedure;
                _command.Parameters.AddWithValue("@OrderId", orderId);
                SqlDataAdapter _adp = new SqlDataAdapter();
                _adp.SelectCommand = _command;
                DataSet _ds = new DataSet();
                _adp.Fill(_ds);
                if (_ds.Tables.Count > 0)
                    return _ds.Tables[0];
            }
            return new DataTable();
        }

        Boolean IComplianceDataRepository.SavePartialOrderCancellation(String partialOrderCancellationXML, Int32 orderID, String partialOrderCancellationTypeCode,
                                                                        Int32 currentUserID)
        {

            _dbContext.PartialOrderCancellation(partialOrderCancellationXML, orderID, partialOrderCancellationTypeCode, currentUserID);

            //if (partialCancelCompliancePackage)
            //{
            //    PackageSubscription packageSubscription = _dbContext.PackageSubscriptions.FirstOrDefault(obj => obj.OrderID == orderID && obj.IsDeleted == false);
            //    if (packageSubscription.IsNotNull())
            //    {
            //        packageSubscription.IsDeleted = true;
            //        packageSubscription.ModifiedByID = currentLoggedInUserId;
            //        packageSubscription.ModifiedOn = DateTime.Now;
            //    }
            //}

            //if (partialCancellationBkgPackageOrderID.IsNotNull() && partialCancellationBkgPackageOrderID.Count() > AppConsts.NONE)
            //{
            //    partialCancellationBkgPackageOrderID.ForEach(bopID =>
            //    {
            //        BkgOrderPackage bkgOrderPackage = _dbContext.BkgOrderPackages.FirstOrDefault(obj => obj.BOP_ID == bopID && obj.BOP_IsDeleted == false);
            //        if (bkgOrderPackage.IsNotNull())
            //        {
            //            bkgOrderPackage.BOP_IsDeleted = true;
            //            bkgOrderPackage.BOP_IsPartialOrderCancelled = true;
            //            bkgOrderPackage.BOP_ModifiedByID = currentLoggedInUserId;
            //            bkgOrderPackage.BOP_ModifiedOn = DateTime.Now;
            //        }



            //    });
            //}
            return true;
        }

        #endregion

        public Dictionary<String, object> GetPartialOrderCancellationMailData(OrderPaymentDetail orderPaymentDetail, int tenantId, String packageNames)
        {
            Dictionary<String, object> dictMailData = new Dictionary<String, object>();
            dictMailData.Add(EmailFieldConstants.USER_FULL_NAME, string.Concat(orderPaymentDetail.Order.OrganizationUserProfile.FirstName, " ", orderPaymentDetail.Order.OrganizationUserProfile.LastName));
            dictMailData.Add(EmailFieldConstants.ORDER_NO, orderPaymentDetail.Order.OrderNumber);
            if (orderPaymentDetail.Order.DeptProgramMapping1.IsNotNull())
            {
                //dictMailData.Add(EmailFieldConstants.NODE_HIERARCHY, orderPaymentDetail.Order.DeptProgramMapping.DPM_Label);
                //UAT - 1067 : Hierarchy for orders (background and screening) should display as the full hierarchy sleected during the order, not the node the package lives on. 
                dictMailData.Add(EmailFieldConstants.NODE_HIERARCHY, orderPaymentDetail.Order.DeptProgramMapping1.DPM_Label);
            }

            dictMailData.Add(EmailFieldConstants.PACKAGE_NAME, packageNames);
            dictMailData.Add(EmailFieldConstants.INSTITUTE_NAME, getTenantToBeUpdated(tenantId).TenantName);
            return dictMailData;
        }

        #region UAT-916 :WB: As an application admin, I should be able to define payment options at the package level in addition to the node level

        List<OrderPaymentDetail> IComplianceDataRepository.GetAllPaymentDetailsOfOrderByOrderID(Int32 orderID, Boolean IncludeDeletedRecord = false)
        {
            List<OrderPaymentDetail> tempOrderPaymentDetail = new List<OrderPaymentDetail>();
            tempOrderPaymentDetail = _dbContext.OrderPaymentDetails.Include("OnlinePaymentTransaction").Include("lkpOrderStatu").Where(cnd => cnd.OPD_OrderID == orderID && (IncludeDeletedRecord || (!IncludeDeletedRecord && cnd.OPD_IsDeleted == false))).ToList();
            return tempOrderPaymentDetail;
        }

        List<PaymentDetailContract> IComplianceDataRepository.GetOrderPaymentInvoiceItemByOrderID(Int32 orderID)
        {
            List<PaymentDetailContract> lstItems = new List<PaymentDetailContract>();
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {

                SqlCommand command = new SqlCommand("ams.usp_GetOrderPaymentInvoiceItemByOrderID", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@OrderID", orderID);

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        PaymentDetailContract item = new PaymentDetailContract();
                        item.OrderPaymentDetailID = Convert.ToInt32(ds.Tables[0].Rows[i]["OPD_ID"]);
                        item.OrderPaymentInvoiceItemAmount = Convert.ToDecimal(ds.Tables[0].Rows[i]["Amount"]);
                        item.PaymentStatus = Convert.ToString(ds.Tables[0].Rows[i]["PaymentStatus"]);
                        item.PaymentStatusCode = Convert.ToString(ds.Tables[0].Rows[i]["PaymentStatusCode"]);
                        item.PaymentType = Convert.ToString(ds.Tables[0].Rows[i]["PaymentType"]);
                        item.PaymentOptionCode = Convert.ToString(ds.Tables[0].Rows[i]["PaymentOptionCode"]);
                        lstItems.Add(item);
                    }
                }
            }
            return lstItems;


        }


        List<OrderPaymentDetail> IComplianceDataRepository.GetOrdrPaymentDetailOfOrderByPaymentOpt(Int32 orderID, Int32 paymentOptionCodeId, Int32 invoiceWdoutAprvlPaymentOption, Int32 paymentDueStatusId, Int32 creditCardWithApprovalId)
        {
            List<OrderPaymentDetail> tempOrderPaymentDetail = new List<OrderPaymentDetail>();
            ////For UAT 2379,include "payment due" status in bulk approve
            tempOrderPaymentDetail = _dbContext.OrderPaymentDetails.Where(cnd => cnd.OPD_OrderID == orderID && cnd.OPD_IsDeleted == false
                                                                        && (cnd.OPD_OrderStatusID == paymentDueStatusId || (cnd.OPD_PaymentOptionID == paymentOptionCodeId || cnd.OPD_PaymentOptionID == invoiceWdoutAprvlPaymentOption)
                                                                            || cnd.OPD_PaymentOptionID == creditCardWithApprovalId)).ToList();
            return tempOrderPaymentDetail;
        }

        List<OrderPkgPaymentDetail> IComplianceDataRepository.GetOrderPkgPaymentDetailsByOrderID(Int32 orderID, String orderPackageTypeCode = null)
        {
            List<OrderPkgPaymentDetail> tempOrderPkgPaymentDetail = new List<OrderPkgPaymentDetail>();
            if (!orderPackageTypeCode.IsNullOrEmpty())
            {
                tempOrderPkgPaymentDetail = _dbContext.OrderPkgPaymentDetails.Where(cnd => cnd.lkpOrderPackageType.OPT_Code == orderPackageTypeCode
                                                                                    && cnd.OPPD_IsDeleted == false
                                                                                    && cnd.OrderPaymentDetail.OPD_OrderID == orderID
                                                                                    && cnd.OrderPaymentDetail.OPD_IsDeleted == false).ToList();
            }
            else
            {
                tempOrderPkgPaymentDetail = _dbContext.OrderPkgPaymentDetails.Where(cnd => cnd.OPPD_IsDeleted == false
                                          && cnd.OrderPaymentDetail.OPD_OrderID == orderID && cnd.OrderPaymentDetail.OPD_IsDeleted == false).ToList();
            }
            return tempOrderPkgPaymentDetail;
        }

        Boolean IComplianceDataRepository.CheckIsInvoiceOnlyOrderPayment(Int32 orderID)
        {
            String invoiceWithApprovalCode = PaymentOptions.InvoiceWithApproval.GetStringValue();
            String invoiceWithOutApprovalCode = PaymentOptions.InvoiceWithOutApproval.GetStringValue();
            Boolean IsInvoiceOnly = false;
            List<OrderPaymentDetail> tempOrdrPaymentsNotInvoiceList = _dbContext.OrderPaymentDetails.Where(cnd => cnd.OPD_OrderID == orderID && cnd.OPD_IsDeleted == false && (cnd.lkpPaymentOption.Code != invoiceWithOutApprovalCode && cnd.lkpPaymentOption.Code != invoiceWithApprovalCode)).ToList();
            IsInvoiceOnly = tempOrdrPaymentsNotInvoiceList.Count() > 0 ? false : true;
            return IsInvoiceOnly;
        }

        List<BkgOrderPackage> IComplianceDataRepository.GetBkgOrderPackageListByBphmIds(List<Int32> listBPHM_ID)
        {
            return _dbContext.BkgOrderPackages.Where(cond => listBPHM_ID.Contains(cond.BOP_ID) && !cond.BOP_IsDeleted).ToList();
        }

        OrderPaymentDetail IComplianceDataRepository.GetOrdrPaymentDetailByID(Int32 orderPaymentDetailId)
        {
            return _dbContext.OrderPaymentDetails.Where(opd => opd.OPD_IsDeleted == false && opd.OPD_ID == orderPaymentDetailId).FirstOrDefault();
        }

        public List<OrderPkgPaymentDetail> GetOrderPkgPaymentDetailByOPDID(Int32 orderPaymentDetailID)
        {
            return _dbContext.OrderPkgPaymentDetails.Where(cnd => cnd.OPPD_OrderPaymentDetailID == orderPaymentDetailID && !cnd.OPPD_IsDeleted).ToList();
        }

        Boolean IComplianceDataRepository.IsOrderPaymentIncludeEDSService(Int32 orderPaymentDetailID)
        {
            Boolean isEDSServiceIncluded = false;
            String EDSServiceTypeCode = BkgServiceType.ELECTRONICDRUGSCREEN.GetStringValue();
            List<OrderPkgPaymentDetail> listOrderPkgPaymentDetail = GetOrderPkgPaymentDetailByOPDID(orderPaymentDetailID).Where(cnd => cnd.lkpOrderPackageType.OPT_Code == OrderPackageTypes.BACKGROUND_PACKAGE.GetStringValue()).ToList();
            if (listOrderPkgPaymentDetail.IsNotNull() && listOrderPkgPaymentDetail.Count > 0)
            {
                List<Int32> listBOP_Ids = listOrderPkgPaymentDetail.Select(slct => slct.OPPD_BkgOrderPackageID.Value).ToList();
                List<BkgOrderPackage> listBkgOrderPackage = _dbContext.BkgOrderPackages.Where(x => listBOP_Ids.Contains(x.BOP_ID) && !x.BOP_IsDeleted).ToList();
                if (listBkgOrderPackage.IsNotNull() && listBkgOrderPackage.Count > 0)
                {
                    List<Int32> listBackgroundPackageId = listBkgOrderPackage.Where(cond => cond.BkgPackageHierarchyMapping.BPHM_IsDeleted == false).Select(slct => slct.BkgPackageHierarchyMapping.BPHM_BackgroundPackageID).ToList();
                    List<Int32> bkgPackageServiceGrpIds = _dbContext.BkgPackageSvcGroups.Where(cond => listBackgroundPackageId.Contains(cond.BPSG_BackgroundPackageID) && cond.BPSG_IsDeleted == false).Select(slct => slct.BPSG_ID).ToList();
                    isEDSServiceIncluded = _dbContext.BkgPackageSvcs.Any(cond => bkgPackageServiceGrpIds.Contains(cond.BPS_BkgPackageSvcGroupID) && cond.BPS_IsDeleted == false && cond.BackgroundService.lkpBkgSvcType.BST_Code == EDSServiceTypeCode);
                }
            }
            return isEDSServiceIncluded;

        }

        /// <summary>
        /// Get the OrdwerPaymentDetail corresponding to its Id
        /// </summary>
        /// <param name="opdId"></param>
        /// <returns></returns>
        private OrderPaymentDetail GetOrderPaymentDetailById(Int32 opdId)
        {
            return _dbContext.OrderPaymentDetails.Where(opd => opd.OPD_IsDeleted == false && opd.OPD_ID == opdId).FirstOrDefault();
        }

        private Boolean AreAllBkgPackagesPaid_ExceptOrderPaymentDetailID(Int32 bkgOrderID, Int32 orderID, Int32 orderPaymentDetailId)
        {
            String orderPackageTypeCode = OrderPackageTypes.BACKGROUND_PACKAGE.GetStringValue();
            List<Int32> bkgOrderPackagesIDs = _dbContext.BkgOrderPackages.Where(cond => cond.BOP_BkgOrderID == bkgOrderID && cond.BOP_IsDeleted == false)
                                                                                .Select(col => col.BOP_ID).ToList();

            List<OrderPkgPaymentDetail> orderPkgPaymentDetailList = _dbContext.OrderPkgPaymentDetails
                                                                                  .Where(cond => cond.lkpOrderPackageType.OPT_Code == orderPackageTypeCode
                                                                                  && cond.OPPD_IsDeleted == false
                                                                                  && bkgOrderPackagesIDs.Contains(cond.OPPD_BkgOrderPackageID.Value)
                                                                                  && cond.OrderPaymentDetail.OPD_IsDeleted == false
                                                                                  && cond.OrderPaymentDetail.OPD_ID != orderPaymentDetailId
                                                                           ).ToList();

            return (orderPkgPaymentDetailList.All(x => x.OrderPaymentDetail.lkpOrderStatu.Code == ApplicantOrderStatus.Paid.GetStringValue()));
        }

        #endregion

        //public List<Order> GetOrdersToBeArchived()
        //{
        //    String InvoiceWithoutApproval = PaymentOptions.InvoiceWithOutApproval.GetStringValue();
        //    String InvoiceWithApproval = PaymentOptions.InvoiceWithApproval.GetStringValue();
        //    String OrderStatus = ApplicantOrderStatus.Paid.GetStringValue();
        //    String PendingApproval = ApplicantOrderStatus.Pending_Payment_Approval.GetStringValue();
        //    String MobilitySwitched = LkpSubscriptionMobilityStatus.MobilitySwitched;

        //    List<Order> lstOrder = _dbContext.Orders
        //        .Include("DeptProgramPackage")
        //        .Include("DeptProgramMapping")
        //        .Include("DeptProgramPackage.CompliancePackage")
        //        .Include("DeptProgramPackage.DeptProgramMapping")
        //        .Include("OrderPaymentDetails")
        //        .Where(cond => !cond.IsDeleted && cond.DeptProgramPackage.DPP_IsAutoRenewInvoiceOrder.HasValue && cond.DeptProgramPackage.DPP_IsAutoRenewInvoiceOrder.Value // Auto Renew Should be true
        //            && (cond.lkpPaymentOption.Code.Equals(InvoiceWithoutApproval) || cond.lkpPaymentOption.Code.Equals(InvoiceWithApproval)) // Only Invoice
        //            && (cond.AutomaticRenewalTurnedOff == null || cond.AutomaticRenewalTurnedOff == false) // UAT - 796 : As an admin, I should be able to turn off student's renewal auto approval.
        //            && !(cond.PackageSubscription.SubscriptionMobilityStatusID != null && cond.PackageSubscription.lkpSubscriptionMobilityStatu.Code.Equals(MobilitySwitched)) // Not Mobility Switched case
        //            && !(_dbContext.Orders.Any(x => x.PreviousOrderID != null && x.PreviousOrderID == cond.OrderID)) // Already Order not done for renew 
        //            && (_dbContext.PackageSubscriptions.Any(ps => ps.OrderID == cond.OrderID && ps.ExpiryDate < DateTime.Now)) && cond.lkpOrderStatu.Code.Equals(OrderStatus)).ToList(); // Order is Expired and Should be Paid

        //    _dbContext.Refresh(RefreshMode.StoreWins, lstOrder);

        //    return lstOrder;
        //}

        public void AutomaticallyArchiveExpiredSubscriptions(Int32 currentUserId)
        {
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand command = new SqlCommand("usp_AutomaticallyArchiveExpiredSubscriptions", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@CurrentUserID", currentUserId);
                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
            }
        }

        /// <summary>
        /// Get Comma Separated list of Applicant with their orders on the basis of passed Hierarchy Node ids
        /// </summary>
        public String GetApplicantAndTheirOrdersFromHierarchyIds(String hierarchyIDs, String dateFrom, String dateTo)
        {
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand command = new SqlCommand("usp_GetApplicantAndTheirOrdersFromHierarchyIds", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@HierarchyIDs", hierarchyIDs);
                command.Parameters.AddWithValue("@DateFrom", dateFrom);
                command.Parameters.AddWithValue("@DateTo", dateTo);
                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);

                if (ds.Tables.Count > AppConsts.NONE && ds.Tables[0].Rows.Count > AppConsts.NONE && ds.Tables[0].Rows[0]["ApplicantOrdersData"].IsNotNull())
                {
                    return Convert.ToString(ds.Tables[0].Rows[0]["ApplicantOrdersData"]);
                }
            }
            return String.Empty;
        }

        #region Manage UnArchival Requests

        /// <summary>
        ///  UAT-1683:Add the Archive button and Manage Un-Archive to the Screening side.
        ///  get the list of data depending whether request is fro compliance or background and based on that different sp's are called.
        /// </summary>
        /// <param name="SubscriptionType"></param>
        /// <param name="SelectedPackageType"></param>
        /// <returns></returns>
        List<UnArchivalRequestDetails> IComplianceDataRepository.GetUnArchivalRequestData(String SubscriptionType, String SelectedPackageType)
        {
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            if (SelectedPackageType == ArchivePackageType.Tracking.GetStringValue())
            {
                using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
                {
                    SqlCommand command = new SqlCommand("dbo.usp_GetUnArchivalRequestData", con);
                    command.CommandType = CommandType.StoredProcedure;
                    command.Parameters.AddWithValue("@SubscriptionType", SubscriptionType);
                    SqlDataAdapter adp = new SqlDataAdapter();
                    adp.SelectCommand = command;
                    DataSet ds = new DataSet();
                    adp.Fill(ds);
                    List<UnArchivalRequestDetails> lstUnArchivalRequestDetails = new List<UnArchivalRequestDetails>();
                    if (ds.Tables.Count > AppConsts.NONE)
                    {
                        lstUnArchivalRequestDetails = ds.Tables[0].AsEnumerable().Select(col =>
                              new UnArchivalRequestDetails
                              {
                                  UnArchiveRequestId = col["UnArchiveRequestId"] == DBNull.Value ? 0 : Convert.ToInt32(col["UnArchiveRequestId"]),
                                  PackageSubscriptionID = col["PackageSubscriptionID"] == DBNull.Value ? 0 : Convert.ToInt32(col["PackageSubscriptionID"]),
                                  OrderID = col["OrderID"] == DBNull.Value ? 0 : Convert.ToInt32(col["OrderID"]),
                                  PackageName = col["PackageName"] == DBNull.Value ? String.Empty : Convert.ToString(col["PackageName"]),
                                  LastName = col["LastName"] == DBNull.Value ? String.Empty : Convert.ToString(col["LastName"]),
                                  FirstName = col["FirstName"] == DBNull.Value ? String.Empty : Convert.ToString(col["FirstName"]),
                                  HierarchyLabel = col["HierarchyLabel"] == DBNull.Value ? String.Empty : Convert.ToString(col["HierarchyLabel"]),
                                  UnArchiveRequestDate = col["UnArchiveRequestDate"] == DBNull.Value ? (DateTime?)null : Convert.ToDateTime(col["UnArchiveRequestDate"]),
                                  ExpiryDate = col["ExpiryDate"] == DBNull.Value ? (DateTime?)null : Convert.ToDateTime(col["ExpiryDate"]),
                                  ArchiveDate = col["ArchiveDate"] == DBNull.Value ? (DateTime?)null : Convert.ToDateTime(col["ArchiveDate"]),
                                  OrderNumber = col["OrderNumber"] == DBNull.Value ? String.Empty : Convert.ToString(col["OrderNumber"]),
                              }).ToList();
                    }
                    return lstUnArchivalRequestDetails;
                }
            }
            //UAT-1683: Add the Archive button and Manage Un-Archive to the Screening(Background) side.
            else if (SelectedPackageType == ArchivePackageType.Screening.GetStringValue())
            {
                using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
                {
                    SqlCommand command = new SqlCommand("dbo.usp_GetBkgUnArchivalRequestData", con);
                    command.CommandType = CommandType.StoredProcedure;
                    command.Parameters.AddWithValue("@SubscriptionType", SubscriptionType);
                    SqlDataAdapter adp = new SqlDataAdapter();
                    adp.SelectCommand = command;
                    DataSet ds = new DataSet();
                    adp.Fill(ds);
                    List<UnArchivalRequestDetails> lstUnArchivalRequestDetails = new List<UnArchivalRequestDetails>();
                    if (ds.Tables.Count > AppConsts.NONE && ds.Tables[0].Rows.Count > AppConsts.NONE)
                    {
                        lstUnArchivalRequestDetails = ds.Tables[0].AsEnumerable().Select(col =>
                              new UnArchivalRequestDetails
                              {
                                  UnArchiveRequestId = col["UnArchiveRequestId"] == DBNull.Value ? 0 : Convert.ToInt32(col["UnArchiveRequestId"]),
                                  PackageSubscriptionID = 0,
                                  OrderID = col["OrderID"] == DBNull.Value ? 0 : Convert.ToInt32(col["OrderID"]),
                                  PackageName = col["PackageName"] == DBNull.Value ? String.Empty : Convert.ToString(col["PackageName"]),
                                  LastName = col["LastName"] == DBNull.Value ? String.Empty : Convert.ToString(col["LastName"]),
                                  FirstName = col["FirstName"] == DBNull.Value ? String.Empty : Convert.ToString(col["FirstName"]),
                                  HierarchyLabel = col["HierarchyLabel"] == DBNull.Value ? String.Empty : Convert.ToString(col["HierarchyLabel"]),
                                  UnArchiveRequestDate = col["UnArchiveRequestDate"] == DBNull.Value ? (DateTime?)null : Convert.ToDateTime(col["UnArchiveRequestDate"]),
                                  ExpiryDate = col["ExpiryDate"] == DBNull.Value ? (DateTime?)null : Convert.ToDateTime(col["ExpiryDate"]),
                                  ArchiveDate = col["ArchiveDate"] == DBNull.Value ? (DateTime?)null : Convert.ToDateTime(col["ArchiveDate"]),
                                  OrderNumber = col["OrderNumber"] == DBNull.Value ? String.Empty : Convert.ToString(col["OrderNumber"]),
                              }).ToList();
                    }
                    return lstUnArchivalRequestDetails;
                }
            }
            return new List<UnArchivalRequestDetails>();
        }

        List<CompliancePackageSubscriptionArchiveHistory> IComplianceDataRepository.ApproveUnArchivalRequests(List<Int32> lstSelectedUnArchivalRequestIds, Int32 currentLoggedInUserId, short changeTypeID, short dataAuditChangeTypeID)
        {
            String unArchiveApprovedtChangeTypeCode = ComplianceSubscriptionArchiveChangeType.UN_ARCHIVE_APPROVED.GetStringValue();
            String archiveState_Archived_Code = ArchiveState.Archived.GetStringValue();
            String archiveState_Active_Code = ArchiveState.Active.GetStringValue();
            List<lkpArchiveState> lstArchiveStates = _dbContext.lkpArchiveStates.Where(cond => !cond.AS_IsDeleted).ToList();
            Int16 archiveState_Archived_ID = lstArchiveStates.Where(cond => cond.AS_Code.Equals(archiveState_Archived_Code)).Select(col => col.AS_ID).FirstOrDefault();
            Int16 archiveState_Active_ID = lstArchiveStates.Where(cond => cond.AS_Code.Equals(archiveState_Active_Code)).Select(col => col.AS_ID).FirstOrDefault();
            //Int16 archiveChangeType_UnArchiveApproved_ID = _dbContext.lkpComplianceSubscriptionArchiveChangeTypes.Where(cond => cond.CSACT_Code.Equals(unArchiveApprovedtChangeTypeCode)).Select(col => col.CSACT_ID).FirstOrDefault();

            //Get all CompliancePackageSubscriptionArchiveHistory based on the UnArchivalRequestId list
            List<CompliancePackageSubscriptionArchiveHistory> lstCompliancePackageSubscriptionArchiveHistory = _dbContext.CompliancePackageSubscriptionArchiveHistories
                                                                                                            .Where(cond => lstSelectedUnArchivalRequestIds.Contains(cond.CPSAH_ID)).ToList();
            foreach (CompliancePackageSubscriptionArchiveHistory archiveHistory in lstCompliancePackageSubscriptionArchiveHistory)
            {
                //InActive row from CompliancePackageSubscriptionArchiveHistory
                archiveHistory.CPSAH_IsActive = false;
                archiveHistory.CPSAH_ModifiedBy = currentLoggedInUserId;
                archiveHistory.CPSAH_ModifiedOn = DateTime.Now;


                if (!archiveHistory.PackageSubscription.IsNullOrEmpty())
                {
                    //Generate XML for new row to be added in CompliancePackageSubscriptionArchiveHistory
                    String subscriptionChangeDetailXML = "<SubscriptionChangeDetails>";
                    subscriptionChangeDetailXML += "<OldArchiveStateID>" + Convert.ToString(archiveHistory.PackageSubscription.ArchiveStateID) + "</OldArchiveStateID>";
                    subscriptionChangeDetailXML += "<NewArchiveStateID>" + archiveState_Active_ID.ToString() + "</NewArchiveStateID>";
                    subscriptionChangeDetailXML += "<OldArchiveDate>" + Convert.ToString(archiveHistory.PackageSubscription.ArchiveDate) + "</OldArchiveDate>";
                    subscriptionChangeDetailXML += "<NewArchiveDate>" + null + "</NewArchiveDate>";
                    subscriptionChangeDetailXML += "<OldIsAutomaticallyArchived>" + Convert.ToString(archiveHistory.PackageSubscription.IsAutomaticallyArchived) + "</OldIsAutomaticallyArchived>";
                    subscriptionChangeDetailXML += "<NewIsAutomaticallyArchived>" + null + "</NewIsAutomaticallyArchived>";
                    subscriptionChangeDetailXML += "</SubscriptionChangeDetails>";

                    //UAT-2687: Archive actions to show up on admin data audit history
                    ApplicantDataAudit applicantDataAuditHistory = new ApplicantDataAudit();
                    applicantDataAuditHistory.ADA_PackageSubscriptionID = archiveHistory.PackageSubscription.PackageSubscriptionID;

                    if (!archiveHistory.PackageSubscription.ArchiveStateID.IsNull())
                    {
                        if (archiveHistory.PackageSubscription.lkpArchiveState.AS_Code == ArchiveState.Archived.GetStringValue())
                        {
                            applicantDataAuditHistory.ADA_OldValue = "Archived";
                        }
                    }

                    //New Value
                    applicantDataAuditHistory.ADA_NewValue = "Active";
                    applicantDataAuditHistory.ADA_ChangeTypeID = dataAuditChangeTypeID;
                    applicantDataAuditHistory.ADA_IsDeleted = false;
                    applicantDataAuditHistory.ADA_ModifiedBy = currentLoggedInUserId;
                    applicantDataAuditHistory.ADA_ModifiedOn = DateTime.Now;
                    _dbContext.ApplicantDataAudits.AddObject(applicantDataAuditHistory);

                    //Change PackageSubscription to UnArchive requested subscription
                    archiveHistory.PackageSubscription.ArchiveStateID = archiveState_Active_ID;
                    archiveHistory.PackageSubscription.IsAutomaticallyArchived = null;
                    archiveHistory.PackageSubscription.ArchiveDate = null;
                    archiveHistory.PackageSubscription.ModifiedByID = currentLoggedInUserId;
                    archiveHistory.PackageSubscription.ModifiedOn = DateTime.Now;

                    //Add new row in CompliancePackageSubscriptionArchiveHistory and set it to be Active
                    CompliancePackageSubscriptionArchiveHistory newCompliancePackageSubscriptionArchiveHistory = new CompliancePackageSubscriptionArchiveHistory();
                    newCompliancePackageSubscriptionArchiveHistory.CPSAH_CreatedBy = currentLoggedInUserId;
                    newCompliancePackageSubscriptionArchiveHistory.CPSAH_CreatedOn = DateTime.Now;
                    newCompliancePackageSubscriptionArchiveHistory.CPSAH_IsDeleted = false;
                    newCompliancePackageSubscriptionArchiveHistory.CPSAH_IsActive = true;
                    newCompliancePackageSubscriptionArchiveHistory.CPSAH_PackageSubscriptionID = archiveHistory.PackageSubscription.PackageSubscriptionID;
                    newCompliancePackageSubscriptionArchiveHistory.CPSAH_ChangeTypeID = changeTypeID;
                    newCompliancePackageSubscriptionArchiveHistory.CPSAH_SubscriptionChangeDetail = subscriptionChangeDetailXML;
                    _dbContext.CompliancePackageSubscriptionArchiveHistories.AddObject(newCompliancePackageSubscriptionArchiveHistory);

                    //Recover ScheduleActions for the UnArchived subscription
                    // get only those ScheduledActions corresponding to unarchived package for which IsActive=true and IsDeleted=true , It means they were deleted because of archival as their IsActive is still true
                    List<ScheduledAction> lstScheduledAction = _dbContext.ScheduledActions.Where(cond => cond.SA_ID == archiveHistory.PackageSubscription.PackageSubscriptionID
                                                                                                  && cond.SA_IsDeleted && cond.SA_IsActive).ToList();
                    foreach (ScheduledAction scheduledAction in lstScheduledAction)
                    {
                        scheduledAction.SA_IsDeleted = false;
                        scheduledAction.SA_ModifiedByID = currentLoggedInUserId;
                        scheduledAction.SA_ModifiedOn = DateTime.Now;
                    }
                }
                else
                {
                    return new List<CompliancePackageSubscriptionArchiveHistory>();
                }
            }
            _dbContext.SaveChanges();
            return lstCompliancePackageSubscriptionArchiveHistory;
        }


        /// <summary>
        /// UAT-1683: Add the Archive button and Manage Un-Archive to the Screening side
        /// </summary>
        /// <param name="lstSelectedUnArchivalRequestIds"></param>
        /// <param name="currentLoggedInUserId"></param>
        /// <param name="changeTypeID"></param>
        /// <returns></returns>
        List<BkgOrderArchiveHistory> IComplianceDataRepository.ApproveBkgUnArchivalRequests(List<Int32> lstSelectedUnArchivalRequestIds, Int32 currentLoggedInUserId, short changeTypeID)
        {
            String unArchiveApprovedtChangeTypeCode = ComplianceSubscriptionArchiveChangeType.UN_ARCHIVE_APPROVED.GetStringValue();
            String archiveState_Archived_Code = ArchiveState.Archived.GetStringValue();
            String archiveState_Active_Code = ArchiveState.Active.GetStringValue();
            List<lkpArchiveState> lstArchiveStates = _dbContext.lkpArchiveStates.Where(cond => !cond.AS_IsDeleted).ToList();
            Int16 archiveState_Archived_ID = lstArchiveStates.Where(cond => cond.AS_Code.Equals(archiveState_Archived_Code)).Select(col => col.AS_ID).FirstOrDefault();
            Int16 archiveState_Active_ID = lstArchiveStates.Where(cond => cond.AS_Code.Equals(archiveState_Active_Code)).Select(col => col.AS_ID).FirstOrDefault();

            //Get all BkgOrderArchiveHistory based on the UnArchivalRequestId list.
            List<BkgOrderArchiveHistory> lstBkgOrderArchiveHistory = _dbContext.BkgOrderArchiveHistories.Where(cond => lstSelectedUnArchivalRequestIds.Contains(cond.BOAH_ID)).ToList();
            foreach (BkgOrderArchiveHistory archiveHistory in lstBkgOrderArchiveHistory)
            {
                //InActive row from BkgOrderArchiveHistory
                archiveHistory.BOAH_IsActive = false;
                archiveHistory.BOAH_ModifiedBy = currentLoggedInUserId;
                archiveHistory.BOAH_ModifiedOn = DateTime.Now;


                if (!archiveHistory.BOAH_BkgOrderID.IsNullOrEmpty())
                {
                    //Generate XML for new row to be added in BkgOrderArchiveHistory
                    String subscriptionChangeDetailXML = "<SubscriptionChangeDetails>";
                    subscriptionChangeDetailXML += "<OldArchiveStateID>" + Convert.ToString(archiveHistory.BkgOrder.BOR_ArchiveStateID) + "</OldArchiveStateID>";
                    subscriptionChangeDetailXML += "<NewArchiveStateID>" + archiveState_Active_ID.ToString() + "</NewArchiveStateID>";
                    subscriptionChangeDetailXML += "<OldArchiveDate>" + Convert.ToString(archiveHistory.BkgOrder.BOR_LastArchivedDate) + "</OldArchiveDate>";
                    subscriptionChangeDetailXML += "<NewArchiveDate>" + null + "</NewArchiveDate>";

                    subscriptionChangeDetailXML += "</SubscriptionChangeDetails>";

                    //Change PackageSubscription to UnArchive requested orders
                    archiveHistory.BkgOrder.BOR_ArchiveStateID = archiveState_Active_ID;

                    archiveHistory.BkgOrder.BOR_LastArchivedDate = null;
                    archiveHistory.BkgOrder.BOR_ModifiedByID = currentLoggedInUserId;
                    archiveHistory.BkgOrder.BOR_ModifiedOn = DateTime.Now;

                    //Add new row in BkgOrderArchiveHistory and set it to be Active
                    BkgOrderArchiveHistory newBkgOrderArchiveHistory = new BkgOrderArchiveHistory();
                    newBkgOrderArchiveHistory.BOAH_CreatedBy = currentLoggedInUserId;
                    newBkgOrderArchiveHistory.BOAH_CreatedOn = DateTime.Now;
                    newBkgOrderArchiveHistory.BOAH_IsDeleted = false;
                    newBkgOrderArchiveHistory.BOAH_IsActive = true;
                    newBkgOrderArchiveHistory.BOAH_BkgOrderID = archiveHistory.BkgOrder.BOR_ID;
                    newBkgOrderArchiveHistory.BOAH_ChangeTypeID = changeTypeID;
                    newBkgOrderArchiveHistory.BOAH_SubscriptionChangeDetail = subscriptionChangeDetailXML;
                    _dbContext.BkgOrderArchiveHistories.AddObject(newBkgOrderArchiveHistory);

                }
                else
                {
                    return new List<BkgOrderArchiveHistory>();
                }
            }
            _dbContext.SaveChanges();
            return lstBkgOrderArchiveHistory;
        }

        Boolean IComplianceDataRepository.RejectUnArchivalRequests(List<Int32> lstSelectedUnArchivalRequestIds, Int32 currentLoggedInUserId)
        {
            List<lkpArchiveState> lstArchiveStates = _dbContext.lkpArchiveStates.Where(cond => !cond.AS_IsDeleted).ToList();
            String unArchiverejectChangeTypeCode = ComplianceSubscriptionArchiveChangeType.UN_ARCHIVE_REJECTED.GetStringValue();
            Int16 archiveChangeType_UnArchiveRejected_ID = _dbContext.lkpComplianceSubscriptionArchiveChangeTypes.Where(cond => cond.CSACT_Code.Equals(unArchiverejectChangeTypeCode)).Select(col => col.CSACT_ID).FirstOrDefault();

            //Get all CompliancePackageSubscriptionArchiveHistory based on the UnArchivalRequestId list
            List<CompliancePackageSubscriptionArchiveHistory> lstCompliancePackageSubscriptionArchiveHistory = _dbContext.CompliancePackageSubscriptionArchiveHistories
                                                                                                            .Where(cond => lstSelectedUnArchivalRequestIds.Contains(cond.CPSAH_ID)).ToList();
            foreach (CompliancePackageSubscriptionArchiveHistory archiveHistory in lstCompliancePackageSubscriptionArchiveHistory)
            {
                //InActive row from CompliancePackageSubscriptionArchiveHistory
                archiveHistory.CPSAH_IsActive = false;
                archiveHistory.CPSAH_ModifiedBy = currentLoggedInUserId;
                archiveHistory.CPSAH_ModifiedOn = DateTime.Now;


                if (!archiveHistory.PackageSubscription.IsNullOrEmpty())
                {
                    //Add new row in CompliancePackageSubscriptionArchiveHistory and set it to be Active
                    CompliancePackageSubscriptionArchiveHistory newCompliancePackageSubscriptionArchiveHistory = new CompliancePackageSubscriptionArchiveHistory();
                    newCompliancePackageSubscriptionArchiveHistory.CPSAH_CreatedBy = currentLoggedInUserId;
                    newCompliancePackageSubscriptionArchiveHistory.CPSAH_CreatedOn = DateTime.Now;
                    newCompliancePackageSubscriptionArchiveHistory.CPSAH_IsDeleted = false;
                    newCompliancePackageSubscriptionArchiveHistory.CPSAH_IsActive = true;
                    newCompliancePackageSubscriptionArchiveHistory.CPSAH_PackageSubscriptionID = archiveHistory.PackageSubscription.PackageSubscriptionID;
                    newCompliancePackageSubscriptionArchiveHistory.CPSAH_ChangeTypeID = archiveChangeType_UnArchiveRejected_ID;
                    newCompliancePackageSubscriptionArchiveHistory.CPSAH_SubscriptionChangeDetail = null;
                    _dbContext.CompliancePackageSubscriptionArchiveHistories.AddObject(newCompliancePackageSubscriptionArchiveHistory);
                }
                else
                {
                    return false;
                }
            }
            _dbContext.SaveChanges();
            return true;
        }

        //UAT-1683: Add the Archive button and Manage Un-Archive to the Screening side.
        Boolean IComplianceDataRepository.RejectBkgUnArchivalRequests(List<Int32> lstSelectedUnArchivalRequestIds, Int32 currentLoggedInUserId)
        {
            List<lkpArchiveState> lstArchiveStates = _dbContext.lkpArchiveStates.Where(cond => !cond.AS_IsDeleted).ToList();
            String unArchiverejectChangeTypeCode = ComplianceSubscriptionArchiveChangeType.UN_ARCHIVE_REJECTED.GetStringValue();
            Int16 archiveChangeType_UnArchiveRejected_ID = _dbContext.lkpComplianceSubscriptionArchiveChangeTypes.Where(cond => cond.CSACT_Code.Equals(unArchiverejectChangeTypeCode)).Select(col => col.CSACT_ID).FirstOrDefault();

            List<BkgOrderArchiveHistory> lstBkgOrderArchiveHistory = _dbContext.BkgOrderArchiveHistories
                                                                                                        .Where(cond => lstSelectedUnArchivalRequestIds.Contains(cond.BOAH_ID)).ToList();

            foreach (BkgOrderArchiveHistory archiveHistory in lstBkgOrderArchiveHistory)
            {
                //InActive row from BackgroundOrderArchiveHistory
                archiveHistory.BOAH_IsActive = false;
                archiveHistory.BOAH_ModifiedBy = currentLoggedInUserId;
                archiveHistory.BOAH_ModifiedOn = DateTime.Now;


                if (!archiveHistory.BOAH_BkgOrderID.IsNullOrEmpty())
                {
                    //Add new row in BackgroundOrderArchiveHistory and set it to be Active
                    BkgOrderArchiveHistory newBkgOrderArchiveHistory = new BkgOrderArchiveHistory();
                    newBkgOrderArchiveHistory.BOAH_CreatedBy = currentLoggedInUserId;
                    newBkgOrderArchiveHistory.BOAH_CreatedOn = DateTime.Now;
                    newBkgOrderArchiveHistory.BOAH_IsDeleted = false;
                    newBkgOrderArchiveHistory.BOAH_IsActive = true;
                    newBkgOrderArchiveHistory.BOAH_BkgOrderID = archiveHistory.BkgOrder.BOR_ID;
                    newBkgOrderArchiveHistory.BOAH_ChangeTypeID = archiveChangeType_UnArchiveRejected_ID;
                    newBkgOrderArchiveHistory.BOAH_SubscriptionChangeDetail = null;
                    _dbContext.BkgOrderArchiveHistories.AddObject(newBkgOrderArchiveHistory);
                }
                else
                {
                    return false;
                }
            }
            _dbContext.SaveChanges();
            return true;
        }
        #endregion


        #region Maintain PackageSubscription Archive History [UAT-977: Additional Works for Archive access]
        Boolean IComplianceDataRepository.SaveCompSubscriptionArchiveHistoryData(CompliancePackageSubscriptionArchiveHistory objectToSave)
        {
            if (objectToSave.IsNotNull())
            {
                //Get all CompliancePackageSubscriptionArchiveHistory based on the UnArchivalRequestId list
                List<CompliancePackageSubscriptionArchiveHistory> lstCompliancePackageSubscriptionArchiveHistory = _dbContext.CompliancePackageSubscriptionArchiveHistories
                                                                                                                .Where(x => x.CPSAH_PackageSubscriptionID == objectToSave.CPSAH_PackageSubscriptionID && !x.CPSAH_IsDeleted).ToList();

                foreach (CompliancePackageSubscriptionArchiveHistory archiveHistory in lstCompliancePackageSubscriptionArchiveHistory)
                {
                    //InActive row from CompliancePackageSubscriptionArchiveHistory
                    archiveHistory.CPSAH_IsActive = false;
                    archiveHistory.CPSAH_ModifiedBy = objectToSave.CPSAH_CreatedBy;
                    archiveHistory.CPSAH_ModifiedOn = DateTime.Now;
                }

                _dbContext.CompliancePackageSubscriptionArchiveHistories.AddObject(objectToSave);
                if (_dbContext.SaveChanges() > 0)
                    return true;
            }
            return false;
        }

        Boolean IComplianceDataRepository.IsActiveUnArchiveRequestForPkgSubscriptionId(Int32 packageSubscriptionId, Int16 changeTypeId)
        {
            return _dbContext.CompliancePackageSubscriptionArchiveHistories.Any(cnd => cnd.CPSAH_PackageSubscriptionID == packageSubscriptionId && cnd.CPSAH_ChangeTypeID == changeTypeId && cnd.CPSAH_IsActive == true && cnd.CPSAH_IsDeleted == false);
        }

        Boolean IComplianceDataRepository.IsActiveUnArchiveRequestForBkgOrderId(Int32 BKgOrderId, Int16 changeTypeId)
        {

            return _dbContext.BkgOrderArchiveHistories.Any(cnd => cnd.BOAH_BkgOrderID == BKgOrderId && cnd.BOAH_ChangeTypeID == changeTypeId && cnd.BOAH_IsActive == true && cnd.BOAH_IsDeleted == false);
        }

        Boolean IComplianceDataRepository.SaveBkgOrderArchiveHistoryData(BkgOrderArchiveHistory objectToSave, Int32 orderID)
        {
            if (objectToSave.IsNotNull())
            {
                //Get all BkgOrderArchiveHistory based on the UnArchivalRequestId list

                List<BkgOrderArchiveHistory> lstBkgOrderArchiveHistory = _dbContext.BkgOrderArchiveHistories.Where(x => x.BOAH_BkgOrderID == orderID && !x.BOAH_IsDeleted).ToList();

                foreach (BkgOrderArchiveHistory archiveHistory in lstBkgOrderArchiveHistory)
                {
                    //InActive row from CompliancePackageSubscriptionArchiveHistory
                    archiveHistory.BOAH_IsActive = false;
                    archiveHistory.BOAH_ModifiedBy = objectToSave.BOAH_CreatedBy;
                    archiveHistory.BOAH_ModifiedOn = DateTime.Now;
                }

                _dbContext.BkgOrderArchiveHistories.AddObject(objectToSave);
                if (_dbContext.SaveChanges() > 0)
                    return true;
            }
            return false;
        }

        BkgOrder IComplianceDataRepository.GetBkgOrderDetailByID(Int32 orderId)
        {
            return _dbContext.BkgOrders.Where(x => x.BOR_MasterOrderID == orderId).FirstOrDefault();
        }

        #endregion

        #region [UAT-977:Additional work towards archive ability]
        /// <summary>
        /// Method to return the repurchased order by previous order id.
        /// </summary>
        /// <param name="prevOrderId">previous order id</param>
        /// <param name="orderRequestId">order request id</param>
        /// <returns></returns>
        Order IComplianceDataRepository.GetRepuchasedOrderByPreviousOrderID(Int32 prevOrderId, Int32 orderRequestId)
        {
            return _dbContext.Orders.Where(cnd => cnd.PreviousOrderID == prevOrderId && !cnd.IsDeleted && cnd.OrderRequestTypeID == orderRequestId).FirstOrDefault();
        }
        #endregion

        #region UAT-977 Get Subscriptions list for manual archival
        public Dictionary<String, List<Int32>> GetSubscriptionsListForArchival(Dictionary<Int32, String> AssignOrganizationUserIds)
        {
            List<Int32> lstOrgUserIDs = AssignOrganizationUserIds.Keys.ToList();

            List<Int32> lstMultplePackageSubscriptionIDs = new List<Int32>();
            List<Int32> lstSinglePackageSubscriptionIDs = new List<Int32>();
            Dictionary<String, List<Int32>> dicResult = new Dictionary<String, List<Int32>>();
            String OrgUserIDs = String.Join(",", lstOrgUserIDs);

            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand command = new SqlCommand("usp_GetSubscriptionsListForArchival", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@OrganizationUserIDs", OrgUserIDs);
                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);

                if (ds.Tables.Count > AppConsts.NONE)
                {
                    if (ds.Tables[0].Rows.Count > AppConsts.NONE)
                    {
                        foreach (DataRow row in ds.Tables[0].Rows)
                        {
                            lstMultplePackageSubscriptionIDs.Add(Convert.ToInt32(row[0]));
                        }
                        dicResult.Add("lstMultipleSubscriptions", lstMultplePackageSubscriptionIDs);
                    }
                    if (ds.Tables[1].Rows.Count > AppConsts.NONE)
                    {
                        foreach (DataRow row in ds.Tables[1].Rows)
                        {
                            lstSinglePackageSubscriptionIDs.Add(Convert.ToInt32(row[0]));
                        }
                        dicResult.Add("lstSingleSubscriptions", lstSinglePackageSubscriptionIDs);
                    }
                }
                return dicResult;
            }
        }
        #endregion

        #region UAT-977 Archieve Subscriptions Manually
        String IComplianceDataRepository.ArchieveSubscriptionsManually(short archieveStatusId, Int32 currentUserId, List<CompliancePackageSubscriptionArchiveHistory> lstArchiveHistory, List<Int32> requiredSubscriptionIDs, List<ApplicantDataAudit> lstApplicantDataAudit)
        {
            List<PackageSubscription> lstSubscriptionsToBeArchieved = GetSubscriptionsToBeArchived(requiredSubscriptionIDs, archieveStatusId);

            foreach (PackageSubscription subscription in lstSubscriptionsToBeArchieved)
            {
                subscription.ArchiveStateID = archieveStatusId;
                subscription.ArchiveDate = DateTime.Now;
                subscription.IsAutomaticallyArchived = false;
                subscription.ModifiedByID = currentUserId;
                subscription.ModifiedOn = DateTime.Now;
            }
            //List<Int32> lstSubscriptionIdsToBeArchieved = lstSubscriptionsToBeArchieved.Select(x => x.PackageSubscriptionID).ToList();
            List<ScheduledAction> scheduleActionToBeInactive = _dbContext.ScheduledActions.Where(cond => requiredSubscriptionIDs.Contains(cond.SA_PackageSubscriptionID)
                                                                                                  && cond.SA_IsActive && !cond.SA_IsDeleted).ToList();
            foreach (ScheduledAction scheduledAction in scheduleActionToBeInactive)
            {
                scheduledAction.SA_IsDeleted = true;
                scheduledAction.SA_ModifiedByID = currentUserId;
                scheduledAction.SA_ModifiedOn = DateTime.Now;
            }
            foreach (CompliancePackageSubscriptionArchiveHistory archiveHistoryItem in lstArchiveHistory)
            {
                //Get all CompliancePackageSubscriptionArchiveHistory based on the UnArchivalRequestId list
                List<CompliancePackageSubscriptionArchiveHistory> lstCompliancePackageSubscriptionArchiveHistory = _dbContext.CompliancePackageSubscriptionArchiveHistories
                                                                                                                .Where(x => x.CPSAH_PackageSubscriptionID == archiveHistoryItem.CPSAH_PackageSubscriptionID && !x.CPSAH_IsDeleted).ToList();

                foreach (CompliancePackageSubscriptionArchiveHistory archiveHistory in lstCompliancePackageSubscriptionArchiveHistory)
                {
                    //InActive row from CompliancePackageSubscriptionArchiveHistory
                    archiveHistory.CPSAH_IsActive = false;
                    archiveHistory.CPSAH_ModifiedBy = currentUserId;
                    archiveHistory.CPSAH_ModifiedOn = DateTime.Now;
                }

                if (archiveHistoryItem.IsNotNull())
                {
                    _dbContext.CompliancePackageSubscriptionArchiveHistories.AddObject(archiveHistoryItem);
                }
            }

            foreach (ApplicantDataAudit item in lstApplicantDataAudit)
            {
                if (item.IsNotNull())
                {
                    _dbContext.ApplicantDataAudits.AddObject(item);
                }
            }

            if (_dbContext.SaveChanges() > 0)
                return "true";
            return "false";
        }
        #endregion

        public List<PackageSubscription> GetSubscriptionsToBeArchived(List<Int32> subscriptionIds, Int32 archieveStatusId)
        {
            return _dbContext.PackageSubscriptions.Where(x => subscriptionIds.Contains(x.PackageSubscriptionID)
                && (x.ArchiveStateID ?? 0) != archieveStatusId && !x.IsDeleted).ToList();
        }

        #region GET DATA FOR MULTPLE SUBSCRIPTIONS POPUP
        public DataTable GetMultipleSubscriptionDataForPopup(String packageSubscriptionIDs, Int32 currentLoggedInUserID)
        {
            List<ManageMultipleSubscriptionContract> lstManageMultipleSubscriptions = new List<ManageMultipleSubscriptionContract>();
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            //Int32 pageSize = grdCustomPaging.PageSize;
            //Int32 currentPageIndex = grdCustomPaging.CurrentPageIndex;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand command = new SqlCommand("usp_GetMultipleSubscriptionDataForPopup", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@PackageSubscriptionIDList", packageSubscriptionIDs);
                command.Parameters.AddWithValue("@LoggedInUserID", currentLoggedInUserID);
                //command.Parameters.AddWithValue("@pageSize", pageSize);
                //command.Parameters.AddWithValue("@currentPageIndex", currentPageIndex);
                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);

                if (ds.Tables.IsNotNull() && ds.Tables[0].Rows.Count > 0)
                {
                    return ds.Tables[0];
                }
                return new DataTable();
            }
        }
        #endregion

        #region Get Package Subscription For Data Entry [UAT-1049:Admin Data Entry]
        public DataTable GetPackageSubscriptionForDataEntry(Int32 organizationUserID)
        {
            //String dataMovementDueMobilityStatusCode = LkpSubscriptionMobilityStatus.DataMovementDue;
            //String mobilitySwitchedStatusCode = LkpSubscriptionMobilityStatus.MobilitySwitched;
            //DateTime todayDate = DateTime.Now;
            //return ClientDBContext.PackageSubscriptions.Where(cnd => cnd.OrganizationUserID == organizationUserID
            //                                                  && (cnd.ArchiveStateID == null
            //                                                  || (cnd.lkpArchiveState != null && cnd.lkpArchiveState.AS_Code == activeArchiveStateCode))
            //                                                  && (cnd.SubscriptionMobilityStatusID == null
            //                                                  || (cnd.lkpSubscriptionMobilityStatu != null
            //                                                  && (!cnd.lkpSubscriptionMobilityStatu.Code.Equals(dataMovementDueMobilityStatusCode)
            //                                                  && !cnd.lkpSubscriptionMobilityStatu.Code.Equals(mobilitySwitchedStatusCode))))
            //                                                  && cnd.ExpiryDate > todayDate
            //                                                  && cnd.IsDeleted == false).ToList();

            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand command = new SqlCommand("usp_GetActiveSubscriptionFordataEntry", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@OrgUserId", organizationUserID);
                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);

                if (ds.Tables.IsNotNull() && ds.Tables[0].Rows.Count > 0)
                {
                    return ds.Tables[0];
                }
                return new DataTable();
            }
        }
        #endregion

        #region UAT-1033 Add link to download E Drug authorization form (Electronic Service Form) to screening tab.
        public DataTable GetEDSStatusForOrders(string commaDelemittedOrderIDs)
        {
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand _command = new SqlCommand("ams.usp_GetEDSStatusForOrders", con);
                _command.CommandType = CommandType.StoredProcedure;
                _command.Parameters.AddWithValue("@OrderIDs", commaDelemittedOrderIDs);
                SqlDataAdapter _adp = new SqlDataAdapter();
                _adp.SelectCommand = _command;
                DataSet _ds = new DataSet();
                _adp.Fill(_ds);
                if (_ds.Tables.Count > 0)
                    return _ds.Tables[0];
            }
            return new DataTable();
        }
        #endregion

        #region UAT-1049 :Admin Data Entry

        /// <summary>
        /// THIS METHOD IS NO LONGER IN USE. Instead 'SaveAdminDataEntry' IS IN USE NOW.
        /// </summary>
        /// <param name="dataEntryContract"></param>
        /// <param name="currentUserId"></param>
        /// <param name="itemComplianceStatusList"></param>
        /// <param name="reviewerTypeList"></param>
        /// <param name="tenantId"></param>
        /// <returns></returns>
        Boolean IComplianceDataRepository.SubmitAdminDataEntry(AdminDataEntrySaveContract dataEntryContract, Int32 currentUserId,
                                                                                            List<lkpItemComplianceStatu> itemComplianceStatusList,
                                                                                            List<lkpReviewerType> reviewerTypeList, Int32 tenantId)
        {
            #region Initial Data setup

            //PackageSubscription->currentSubscriptionForComparsion is used to hold the package subscription data in database. This will be
            //used to compare Or to get any data which exists in database for package subscription
            PackageSubscription currentSubscriptionForComparsion = ClientDBContext.PackageSubscriptions.Include("ApplicantComplianceCategoryDatas")
                                                                                       .Include("ApplicantComplianceCategoryDatas.ApplicantComplianceItemDatas")
                                                                                       .FirstOrDefault(x => x.PackageSubscriptionID == dataEntryContract.PackageSubscriptionId);

            //Reset the Client DB context and get the PackageSubscription again. REset Context is require to intialize the context obeject again, so that  
            //currentSubscriptionForComparsion and currentSubscription will be from different context object. 
            //Making any changes in any of the subscription should not reflect in other subscription entity object.
            ResetClientContext();

            //PackageSubscription->currentSubscription is required to edit/update the subscription object data (item data, attribute data.
            PackageSubscription currentSubscription = ClientDBContext.PackageSubscriptions.Include("ApplicantComplianceCategoryDatas")
                                                                                        .Include("ApplicantComplianceCategoryDatas.ApplicantComplianceItemDatas")
                                                                                        .FirstOrDefault(x => x.PackageSubscriptionID == dataEntryContract.PackageSubscriptionId);
            Boolean isDataSavedRequired = false;

            List<lkpItemMovementType> lstItemMovementTypes = ClientDBContext.lkpItemMovementTypes.Where(cond => cond.IsDeleted == false).ToList();

            // List of CategoryIds associated with the Package
            var lstAssociatedCatIds = dataEntryContract.ApplicantCmplncCategoryData.Select(x => x.CatId).ToList();

            // List of ItemIds associated with the Package
            var lstAssociatedItemIds = ClientDBContext.ComplianceCategoryItems.Where(ccItem => lstAssociatedCatIds.Contains(ccItem.CCI_CategoryID)
                                                                                                && !ccItem.CCI_IsDeleted)
                                                                                               .GroupBy(grp => grp.CCI_ItemID)
                                                                                               .Select(x => x.FirstOrDefault().CCI_ItemID).ToList();

            // List of Attributes Associated with all the 'lstAssociatedItemIds' Items
            var _lstAssociatedAttributes = new List<ComplianceItemAttribute>();

            // List of CALCULATED TYPE Attributes Associated with all the 'lstAssociatedItemIds' Items
            var _lstCalculatedAttributes = new List<ComplianceItemAttribute>();

            // List of FILE UPLOAD TYPE Attributes Associated from the '_lstCalculatedAttributes' Items
            var _lstFileUploadAttributeList = new List<ComplianceItemAttribute>();
            String fileUploadAttrTypeCode = ComplianceAttributeDatatypes.FileUpload.GetStringValue().ToLower().Trim();

            List<ApplicantComplianceItemData> appCompItmDataWhichNeedsToBeRemoved = new List<ApplicantComplianceItemData>();

            if (lstAssociatedItemIds.Count > AppConsts.NONE)
            {
                _lstAssociatedAttributes = ClientDBContext.ComplianceItemAttributes.Where(cond => lstAssociatedItemIds.Contains(cond.CIA_ItemID)
                                                                                        && !cond.CIA_IsDeleted
                                                                                        && cond.CIA_IsActive).ToList();

                _lstCalculatedAttributes = _lstAssociatedAttributes.Where(cond => lstAssociatedItemIds.Contains(cond.CIA_ItemID)
                                                                       && cond.ComplianceAttribute.lkpComplianceAttributeType.Code.ToLower() == ComplianceAttributeType.Calculated.GetStringValue().ToLower())
                                                                   .ToList();

                _lstFileUploadAttributeList = _lstAssociatedAttributes.Where(cond => cond.ComplianceAttribute.lkpComplianceAttributeDatatype.Code.ToLower() == fileUploadAttrTypeCode).ToList();
            }

            #endregion
            if (!dataEntryContract.ApplicantCmplncCategoryData.IsNullOrEmpty())
            {
                foreach (ApplicantCmplncCategoryData categoryData in dataEntryContract.ApplicantCmplncCategoryData)
                {
                    List<ListItemAssignmentProperties> lstItemAssignmentProperties = GetAssignmentPropertiesByCategoryId(dataEntryContract.PackageId, categoryData.CatId);
                    ApplicantComplianceCategoryData categoryDataToUpdate = currentSubscription.ApplicantComplianceCategoryDatas
                                                                                               .FirstOrDefault(x => x.ApplicantComplianceCategoryID == categoryData.AccdId
                                                                                               && x.ComplianceCategoryID == categoryData.CatId
                                                                                               && x.IsDeleted == false);
                    //If Category Data is already existing in DB then update Category data
                    if (categoryDataToUpdate.IsNotNull())
                    {

                        categoryDataToUpdate.ModifiedOn = DateTime.Now;
                        categoryDataToUpdate.ModifiedByID = currentUserId;

                        List<ApplicantComplianceItemData> itemDataListInDb = categoryDataToUpdate.ApplicantComplianceItemDatas.Where(cond => !cond.IsDeleted).ToList();


                        //This is required as during Item Data swapped, itemDataListInDb gets updated. So this object will give actual data which is
                        //currently present in database before data save.
                        List<ApplicantComplianceItemData> itemDataListFromDBForComparsion = GetApplicantComplianceItemData(currentSubscriptionForComparsion, categoryData.AccdId)
                                                                                                            .ApplicantComplianceItemDatas
                                                                                                            .Where(x => x.IsDeleted == false)
                                                                                                            .ToList();
                        if (!categoryData.ApplicantCmplncItemData.IsNullOrEmpty())
                        {
                            String itemIds = String.Join(",", categoryData.ApplicantCmplncItemData.Select(col => col.ItmId).ToList());
                            List<ItemReconciliationAvailiblityContract> lstItemReconciliationStatus = GetItemReconciliationAvailiblityStatus(tenantId, itemIds, dataEntryContract.PackageSubscriptionId);

                            foreach (var _currentItem in categoryData.ApplicantCmplncItemData)
                            {
                                ItemReconciliationAvailiblityContract itemReconciliationStatus = lstItemReconciliationStatus
                                                                .FirstOrDefault(cond => cond.ItemID == _currentItem.ItmId);
                                Int32? itemReviewerCount = null;
                                if (itemReconciliationStatus.IsSelected)
                                {
                                    itemReviewerCount = itemReconciliationStatus.ReviewerCount;
                                }
                                var _isItemDataChangeRequired = IsItemDataChangeRequired(_currentItem);

                                var _isExceptionAppliedForCurrentItm = false;

                                // Handle CASE 4 - Check the condition if Item was swapped with any Item with Status of Exception Type.
                                if ((_currentItem.IsItemSwapped && IsItemStatusException(_currentItem.NewStatuscode)) || IsItemStatusException(_currentItem.NewStatuscode))
                                {
                                    _isExceptionAppliedForCurrentItm = true;
                                }


                                // Add new Item only if it was incomplete loaded AND
                                // 1. Incomplete Item insert was required 
                                // 2. OR It was seapped with an Item having 'Pending Review' BUT No Attribute was filled for it.
                                if (_currentItem.AcidId == AppConsts.NONE && (_isItemDataChangeRequired || _currentItem.IsItemSwapped))
                                {
                                    #region Item to be Added

                                    ComplianceItemAttribute fileUploadTypeAttribute = _lstFileUploadAttributeList.FirstOrDefault(cond => cond.CIA_ItemID == _currentItem.ItmId);

                                    if (IsDataChangeCheckRequired(_isExceptionAppliedForCurrentItm, _currentItem.AttribuetFilledCount))
                                    {
                                        _currentItem.IsDataChanged = CheckIfItemDataIsUpdated(itemDataListFromDBForComparsion, _currentItem);
                                    }
                                    Int32 complianceItemID = (_currentItem.IsItemSwapped) ? _currentItem.SwappedItmId : _currentItem.ItmId;
                                    ApplicantComplianceItemData itemDataForComparison = itemDataListFromDBForComparsion
                                                                                        .FirstOrDefault(cond => cond.ComplianceItemID == complianceItemID);


                                    // Add new item for
                                    // CASE 1.  Item which was 'Incomplete' and data was added for it
                                    // CASE 2.  Item was 'Incomplete', No data was entered but 'Associate Document' was checked
                                    // CASE 3.1 Item was 'Incomplete' and was swapped with any Item with Status of Data Entry Type having Data
                                    // CASE 3.2 Item was 'Incomplete' and was swapped with any Item with Status of Data Entry Type having NO Data
                                    // CASE 4.  Item was 'Incomplete' and was swapped with any Item with Status of Exception Type
                                    // CASE 5.  Item was 'Incomplete' and was swapped with any Item with Status of Exception Type and Data was changed
                                    if (_isExceptionAppliedForCurrentItm
                                        || _isItemDataChangeRequired
                                        || (_currentItem.IsItemSwapped && itemDataForComparison.IsNotNull())
                                      ) // Covers the case when it was swapped with ANY item having different attribute groups
                                    {
                                        ApplicantComplianceItemData newItemData = AddApplicantComplianceItemData(currentUserId, categoryDataToUpdate, _currentItem.ItmId);

                                        SetItemAssignmentProperties(newItemData, lstItemAssignmentProperties, itemComplianceStatusList,
                                                                    reviewerTypeList, lstItemMovementTypes, _currentItem);

                                        // Add data for incomplete item if there was no Exception applied AND
                                        // HANDLE CASE1, CASE2 AND CASE 3.1)
                                        // 'OR' condition handles the CASE 5
                                        if ((!_isExceptionAppliedForCurrentItm && _isItemDataChangeRequired)
                                            ||
                                            (_isExceptionAppliedForCurrentItm && _currentItem.IsDataChanged)
                                            )
                                        {
                                            List<ApplicantCmplncAttrData> attrDataListToAdd = _currentItem.ApplicantCmplncAttrData.Where(x => x.AcadId == 0).ToList();
                                            InsertComplianceAttributeData(currentUserId, attrDataListToAdd, newItemData, _lstCalculatedAttributes);
                                        }
                                        // HANDLE CASE 3.2 (Case when Item is swapped with Item having data is handled by 'If' condition)
                                        else if (!_isExceptionAppliedForCurrentItm && _currentItem.IsItemSwapped)
                                        {
                                            //If itemDataForComparison contains only FileUploadType attrbiute then donot call insert methods                                    
                                            //else insert all attributes except FileUpload
                                            List<ApplicantCmplncAttrData> lstAttributeToAdd = _lstAssociatedAttributes.Where(cia => cia.CIA_ItemID == _currentItem.ItmId
                                                                                                 && cia.ComplianceAttribute.lkpComplianceAttributeDatatype.Code.ToLower() != fileUploadAttrTypeCode)
                                                                                               .Select(cia => new ApplicantCmplncAttrData
                                                                                               {
                                                                                                   AcadId = AppConsts.NONE,
                                                                                                   AttrValue = String.Empty,
                                                                                                   AttrId = cia.CIA_AttributeID
                                                                                               }).ToList();

                                            InsertComplianceAttributeData(currentUserId, lstAttributeToAdd, newItemData, _lstCalculatedAttributes);
                                        }

                                        if (_currentItem.IsItemSwapped || _currentItem.IsDataChanged || _currentItem.IsDocAssociationReq)
                                        {
                                            AssociatDocsWithCurrentItem(dataEntryContract.DoccumentId, currentUserId, fileUploadTypeAttribute, newItemData,
                                                                        itemDataListFromDBForComparsion, _currentItem, _isExceptionAppliedForCurrentItm);
                                        }
                                        if (!_isExceptionAppliedForCurrentItm &&
                                            newItemData.lkpItemComplianceStatu.Code == ApplicantItemComplianceStatus.Pending_Review.GetStringValue())
                                        {
                                            //UAT-1712
                                            newItemData.ReconciliationReviewCount = itemReviewerCount;
                                        }
                                        categoryDataToUpdate.ApplicantComplianceItemDatas.Add(newItemData);
                                        isDataSavedRequired = true;
                                    }

                                    #endregion
                                }
                                else if (_currentItem.AcidId > AppConsts.NONE)
                                {

                                    #region Item to be updated

                                    ComplianceItemAttribute fileUploadTypeAttribute = _lstFileUploadAttributeList.FirstOrDefault(cond => cond.CIA_ItemID == _currentItem.ItmId);
                                    ApplicantComplianceItemData itemDataToBeUpdated = itemDataListInDb.FirstOrDefault(x => x.ApplicantComplianceItemID == _currentItem.AcidId);

                                    _currentItem.ReconciliationReviewCount = itemDataToBeUpdated.ReconciliationReviewCount;
                                    // CASES TO HANDLE
                                    // 1. Item was swapped with Incomplete item. 
                                    // 2. Swapped with Exception type. 
                                    // 3. Swapped with any Item having data entry (NO exception type & Data may or may not be changed after swapping) 
                                    // 4. Swapped with any Item having data entry BUT NO data added
                                    if (_currentItem.IsItemSwapped)
                                    {
                                        #region Manage Items which were Swapped

                                        if (_currentItem.NewStatuscode == ApplicantItemComplianceStatus.Pending_Review.GetStringValue())
                                        {
                                            //UAT-1712 //TODO
                                            itemDataToBeUpdated.ReconciliationReviewCount = itemReviewerCount;
                                        }

                                        var _isCrntItemExceptionType = IsItemStatusException(_currentItem.NewStatuscode);

                                        // Handle the Cases 1 & 2. Enter this condition only if:
                                        // 1. There was no data changed on swapping OR 
                                        if (!_isItemDataChangeRequired
                                               && (_currentItem.NewStatuscode == ApplicantItemComplianceStatus.Incomplete.GetStringValue()
                                                                           ||
                                                   _isExceptionAppliedForCurrentItm
                                                  )
                                           )
                                        {
                                            Int32 complianceItemID = (_currentItem.IsItemSwapped) ? _currentItem.SwappedItmId : _currentItem.ItmId;
                                            ApplicantComplianceItemData _itemDataForComparison = itemDataListFromDBForComparsion
                                                                                                .FirstOrDefault(cond => cond.ComplianceItemID == complianceItemID);

                                            // Mark the Item for Deletion, which was swapped with an incomplete item with NO Documents.
                                            if (_currentItem.NewStatuscode == ApplicantItemComplianceStatus.Incomplete.GetStringValue()
                                             && _itemDataForComparison.IsNull())
                                            {
                                                appCompItmDataWhichNeedsToBeRemoved.Add(itemDataToBeUpdated);
                                            }
                                            // Update the Documents of Item swapped with 'Incomplete Item with Documents' & keep it in 'Incomplete' Status
                                            else if (_currentItem.NewStatuscode == ApplicantItemComplianceStatus.Incomplete.GetStringValue()
                                             && _itemDataForComparison.ApplicantComplianceItemID.IsNotNull()
                                             && _itemDataForComparison.ApplicantComplianceItemID > AppConsts.NONE)
                                            {
                                                itemDataToBeUpdated.StatusID = itemComplianceStatusList.Where(ists => ists.Code == ApplicantItemComplianceStatus.Incomplete.GetStringValue()).First().ItemComplianceStatusID;
                                                itemDataToBeUpdated.ExceptionReason = String.Empty;
                                                itemDataToBeUpdated.ModifiedOn = DateTime.Now;
                                                itemDataToBeUpdated.ModifiedByID = currentUserId;
                                                isDataSavedRequired = true;

                                                foreach (ApplicantComplianceAttributeData attrDataToDelete in itemDataToBeUpdated.ApplicantComplianceAttributeDatas)
                                                {
                                                    attrDataToDelete.IsDeleted = true;
                                                    attrDataToDelete.ModifiedOn = DateTime.Now;
                                                    attrDataToDelete.ModifiedByID = currentUserId;
                                                    isDataSavedRequired = true;
                                                }

                                                AssociatDocsWithCurrentItem(dataEntryContract.DoccumentId, currentUserId, fileUploadTypeAttribute, itemDataToBeUpdated,
                                                                            itemDataListFromDBForComparsion, _currentItem, _isExceptionAppliedForCurrentItm);

                                            }
                                            else if (_isExceptionAppliedForCurrentItm)
                                            {
                                                // Delete the attributes for Any item which is becoming Exception type
                                                AssociatDocsWithCurrentItem(dataEntryContract.DoccumentId, currentUserId, fileUploadTypeAttribute, itemDataToBeUpdated,
                                                                            itemDataListFromDBForComparsion, _currentItem, _isExceptionAppliedForCurrentItm);

                                                SetItemAssignmentProperties(itemDataToBeUpdated, lstItemAssignmentProperties, itemComplianceStatusList,
                                                                            reviewerTypeList, lstItemMovementTypes, _currentItem);

                                                itemDataToBeUpdated.ModifiedOn = DateTime.Now;
                                                itemDataToBeUpdated.ModifiedByID = currentUserId;
                                                isDataSavedRequired = true;

                                                foreach (ApplicantComplianceAttributeData attrDataToDelete in itemDataToBeUpdated.ApplicantComplianceAttributeDatas)
                                                {
                                                    attrDataToDelete.IsDeleted = true;
                                                    attrDataToDelete.ModifiedOn = DateTime.Now;
                                                    attrDataToDelete.ModifiedByID = currentUserId;
                                                    isDataSavedRequired = true;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            #region Manage Updating of Items which were Swapped

                                            ApplicantComplianceItemData itemDataForComparison = itemDataListFromDBForComparsion.FirstOrDefault(cond => cond.ComplianceItemID == _currentItem.SwappedItmId);

                                            if (IsDataChangeCheckRequired(_isExceptionAppliedForCurrentItm, _currentItem.AttribuetFilledCount))
                                            {
                                                _currentItem.IsDataChanged = CheckIfItemDataIsUpdated(itemDataListFromDBForComparsion, _currentItem);
                                            }

                                            //Update existing compliance attribute data only when there is change in item/attribute data
                                            if ((_currentItem.IsDataChanged || _currentItem.IsItemSwapped) && _currentItem.AttribuetFilledCount > AppConsts.NONE)
                                            {
                                                UpdateExistingComplianceAttributeData(currentUserId, _currentItem, itemDataToBeUpdated);

                                                List<ApplicantCmplncAttrData> attrDataListToAdd = _currentItem.ApplicantCmplncAttrData.Where(x => x.AcadId == AppConsts.NONE).ToList();
                                                InsertComplianceAttributeData(currentUserId, attrDataListToAdd, itemDataToBeUpdated, _lstCalculatedAttributes);

                                                AssociatDocsWithCurrentItem(dataEntryContract.DoccumentId, currentUserId, fileUploadTypeAttribute, itemDataToBeUpdated,
                                                                       itemDataListFromDBForComparsion, _currentItem, false);

                                                SetItemAssignmentProperties(itemDataToBeUpdated, lstItemAssignmentProperties, itemComplianceStatusList,
                                                                            reviewerTypeList, lstItemMovementTypes, _currentItem);

                                                itemDataToBeUpdated.ExceptionReason = String.Empty;
                                                itemDataToBeUpdated.ModifiedOn = DateTime.Now;
                                                itemDataToBeUpdated.ModifiedByID = currentUserId;
                                                isDataSavedRequired = true;
                                            }
                                            else if (!_currentItem.IsDataChanged && _currentItem.AttribuetFilledCount == AppConsts.NONE && !itemDataForComparison.ApplicantComplianceAttributeDatas.IsNullOrEmpty())
                                            {
                                                // Case : Any Item for which all the attributes are getting cleared by User. In such a case '_currentItem.IsDataChanged' is False  
                                                // Check if the Item (with which it was swapped). has any attributes entered 


                                                if (InsertUpdateAttributeDataWithEmptyValue(currentUserId, _currentItem, itemDataToBeUpdated, itemDataForComparison, _lstAssociatedAttributes))
                                                {
                                                    itemDataToBeUpdated.ExceptionReason = String.Empty;
                                                    itemDataToBeUpdated.ModifiedOn = DateTime.Now;
                                                    itemDataToBeUpdated.ModifiedByID = currentUserId;

                                                    // If there was any attribute in Item2 (with which current item was swapped), having some value & is not FileUploadType
                                                    // implies that the data was cleared from the attributes after swapping. So there is Data Change and current document 
                                                    // needs to be attached to it.
                                                    if (itemDataForComparison.ApplicantComplianceAttributeDatas.Where(att => att.ComplianceAttribute.lkpComplianceAttributeDatatype.Code
                                                                                                                      != ComplianceAttributeDatatypes.FileUpload.GetStringValue()
                                                                                                                      && !att.IsDeleted
                                                                                                                      && !String.IsNullOrEmpty(att.AttributeValue))
                                                                                                               .Any())
                                                    {
                                                        _currentItem.IsDataChanged = true;
                                                    }

                                                    AssociatDocsWithCurrentItem(dataEntryContract.DoccumentId, currentUserId, fileUploadTypeAttribute, itemDataToBeUpdated,
                                                                                itemDataListFromDBForComparsion, _currentItem, false);

                                                    SetItemAssignmentProperties(itemDataToBeUpdated, lstItemAssignmentProperties, itemComplianceStatusList,
                                                                                reviewerTypeList, lstItemMovementTypes, _currentItem);

                                                    isDataSavedRequired = true;
                                                }
                                            }

                                            if (_currentItem.IsDocAssociationReq && !_currentItem.IsDocAssociatedByDataChange)
                                            {
                                                var _isDocSaveRequired = AssociateExplicitDocumentOverrideStatus(dataEntryContract, currentUserId, itemComplianceStatusList, reviewerTypeList, lstItemMovementTypes,
                                                                                                                 lstItemAssignmentProperties, itemDataListFromDBForComparsion, _currentItem, itemDataToBeUpdated);

                                                // Update 'isDataSavedRequired' Only if Document save is required
                                                // Else even if '_isDocSaveRequired' is False, it will update 'isDataSavedRequired' to False
                                                // and no data will be saved
                                                if (_isDocSaveRequired && !isDataSavedRequired)
                                                {
                                                    isDataSavedRequired = true;
                                                }
                                            }

                                            #endregion
                                        }

                                        #endregion
                                    }
                                    else
                                    {
                                        #region Manage Items which were Updated But Not Swapped
                                        // CASES TO HANDLE
                                        // 1. Simple data updated for any item or Document associated with any Data entry type item
                                        // 2. Data entry or Doc association of Incomplete Item with document (From Verification details)
                                        // 3. Only Document associated with Exception type OR Data entry with Exception type.
                                        // 4. Data of all the attributes cleared.

                                        //Check whether item is changed for any item, which is of Non exception type
                                        // OR Exception type with data entry
                                        if (IsDataChangeCheckRequired(_isExceptionAppliedForCurrentItm, _currentItem.AttribuetFilledCount))
                                        {
                                            _currentItem.IsDataChanged = CheckIfItemDataIsUpdated(itemDataListFromDBForComparsion, _currentItem);
                                        }

                                        ApplicantComplianceItemData itemDataForComparison = itemDataListFromDBForComparsion.FirstOrDefault(cond => cond.ComplianceItemID == _currentItem.ItmId);

                                        //Update existing compliance attribute data only when there is change in item/attribute data
                                        // Or Item data was completely cleared (In this case, 'IsDataChanged' returns False. So OR condition is added)
                                        if (_currentItem.IsDataChanged)
                                        {
                                            UpdateExistingComplianceAttributeData(currentUserId, _currentItem, itemDataToBeUpdated);

                                            List<ApplicantCmplncAttrData> attrDataListToAdd = _currentItem.ApplicantCmplncAttrData.Where(x => x.AcadId == AppConsts.NONE).ToList();
                                            InsertComplianceAttributeData(currentUserId, attrDataListToAdd, itemDataToBeUpdated, _lstCalculatedAttributes);

                                            AssociatDocsWithCurrentItem(dataEntryContract.DoccumentId, currentUserId, fileUploadTypeAttribute, itemDataToBeUpdated,
                                                                       itemDataListFromDBForComparsion, _currentItem, false);

                                            SetItemAssignmentProperties(itemDataToBeUpdated, lstItemAssignmentProperties, itemComplianceStatusList,
                                                                        reviewerTypeList, lstItemMovementTypes, _currentItem);

                                            itemDataToBeUpdated.ExceptionReason = String.Empty;
                                            itemDataToBeUpdated.ModifiedOn = DateTime.Now;
                                            itemDataToBeUpdated.ModifiedByID = currentUserId;
                                            isDataSavedRequired = true;
                                        }
                                        else if (!_currentItem.IsDataChanged && _currentItem.AttribuetFilledCount == AppConsts.NONE && !itemDataForComparison.ApplicantComplianceAttributeDatas.IsNullOrEmpty())
                                        {
                                            // Case : Any Item for which all the attributes are getting cleared by User. In such a case '_currentItem.IsDataChanged' is False  
                                            if (InsertUpdateAttributeDataWithEmptyValue(currentUserId, _currentItem, itemDataToBeUpdated, itemDataForComparison, _lstAssociatedAttributes))
                                            {
                                                // To allow association of the document, when there was no swapping and all the attributes of the item were cleared by admin
                                                _currentItem.IsDataChanged = true;
                                                AssociatDocsWithCurrentItem(dataEntryContract.DoccumentId, currentUserId, fileUploadTypeAttribute, itemDataToBeUpdated,
                                                                           itemDataListFromDBForComparsion, _currentItem, false);

                                                SetItemAssignmentProperties(itemDataToBeUpdated, lstItemAssignmentProperties, itemComplianceStatusList,
                                                                            reviewerTypeList, lstItemMovementTypes, _currentItem);

                                                isDataSavedRequired = true;
                                            }
                                        }

                                        if (_currentItem.IsDocAssociationReq && !_currentItem.IsDocAssociatedByDataChange)
                                        {
                                            var _isDocSaveRequired = AssociateExplicitDocumentOverrideStatus(dataEntryContract, currentUserId, itemComplianceStatusList, reviewerTypeList, lstItemMovementTypes,
                                                                                                             lstItemAssignmentProperties, itemDataListFromDBForComparsion, _currentItem, itemDataToBeUpdated);

                                            // Update 'isDataSavedRequired' Only if Document save is required
                                            // Else even if '_isDocSaveRequired' is False, it will update 'isDataSavedRequired' to False
                                            // and no data will be saved
                                            if (_isDocSaveRequired && !isDataSavedRequired)
                                            {
                                                isDataSavedRequired = true;
                                            }
                                        }

                                        if ((_currentItem.IsDataChanged || _currentItem.IsDocAssociationReq) &&
                                            _currentItem.NewStatuscode == ApplicantItemComplianceStatus.Pending_Review.GetStringValue())
                                        {
                                            //UAT-1712 //TODO
                                            itemDataToBeUpdated.ReconciliationReviewCount = itemReviewerCount;
                                        }

                                        #endregion
                                    }
                                    #endregion
                                }
                            }
                        }
                    }
                    else
                    {
                        #region If Category Data does not exists' in DB then Add all the data, upto document level, if applicable

                        String categoryComplianceStatus = ApplicantCategoryComplianceStatus.Incomplete.GetStringValue();
                        Int32 categoryComplianceStatusId = ClientDBContext.lkpCategoryComplianceStatus
                                                                          .Where(catStatus => catStatus.Code.ToLower().Trim() == categoryComplianceStatus.ToLower().Trim())
                                                                          .FirstOrDefault().CategoryComplianceStatusID;

                        #region Generate New 'ApplicantComplianceCategoryData' Instance

                        ApplicantComplianceCategoryData newCategoryData = new ApplicantComplianceCategoryData();
                        newCategoryData.PackageSubscriptionID = dataEntryContract.PackageSubscriptionId;
                        newCategoryData.ComplianceCategoryID = categoryData.CatId;
                        newCategoryData.StatusID = categoryComplianceStatusId;
                        newCategoryData.CreatedOn = DateTime.Now;
                        newCategoryData.CreatedByID = currentUserId;

                        #endregion

                        Boolean catDataToBeAdded = false;

                        #region Generate Item and Attributes

                        if (!categoryData.ApplicantCmplncItemData.IsNullOrEmpty())
                        {
                            String itemIds = String.Join(",", categoryData.ApplicantCmplncItemData.Select(col => col.ItmId).ToList());
                            List<ItemReconciliationAvailiblityContract> lstItemReconciliationStatus = GetItemReconciliationAvailiblityStatus(tenantId, itemIds, dataEntryContract.PackageSubscriptionId);

                            foreach (ApplicantCmplncItemData itemDataToAdd in categoryData.ApplicantCmplncItemData)
                            {
                                ItemReconciliationAvailiblityContract itemReconciliationStatus = lstItemReconciliationStatus
                                                               .FirstOrDefault(cond => cond.ItemID == itemDataToAdd.ItmId);
                                Int32? itemReviewerCount = null;
                                if (itemReconciliationStatus.IsSelected)
                                {
                                    itemReviewerCount = itemReconciliationStatus.ReviewerCount;
                                }

                                ComplianceItemAttribute fileUploadTypeAttribute = _lstFileUploadAttributeList.FirstOrDefault(cond => cond.CIA_ItemID == itemDataToAdd.ItmId);

                                // Add the new item only
                                // 1. if any data was entered for any attribute OR  
                                // 2. No data was entered but document was associted and had a file upload attribute type
                                if (IsItemDataChangeRequired(itemDataToAdd))
                                {
                                    catDataToBeAdded = true;

                                    #region Add new 'ApplicantComplianceItemData' & 'ApplicantCmplncAttrData' and Associate Document, if applicable

                                    ApplicantComplianceItemData newItemData = AddApplicantComplianceItemData(currentUserId, newCategoryData, itemDataToAdd.ItmId);
                                    //UAT-1712
                                    newItemData.ReconciliationReviewCount = itemReviewerCount;

                                    List<ApplicantCmplncAttrData> attrDataListToAdd = itemDataToAdd.ApplicantCmplncAttrData.Where(x => x.AcadId == AppConsts.NONE).ToList();
                                    InsertComplianceAttributeData(currentUserId, attrDataListToAdd, newItemData, _lstCalculatedAttributes);
                                    itemDataToAdd.IsDataChanged = true;

                                    SetItemAssignmentProperties(newItemData, lstItemAssignmentProperties, itemComplianceStatusList,
                                                                reviewerTypeList, lstItemMovementTypes, itemDataToAdd);

                                    // Case when NO data was entered but document was associated, is also covered
                                    // by 'IsInsertItemRequired' if condition
                                    //if (itemDataToAdd.IsDataChanged)
                                    //{
                                    AssociatDocsWithCurrentItem(dataEntryContract.DoccumentId, currentUserId, fileUploadTypeAttribute,
                                                                newItemData, null, itemDataToAdd, false);
                                    //}

                                    #endregion

                                    newCategoryData.ApplicantComplianceItemDatas.Add(newItemData);
                                    isDataSavedRequired = true;
                                }
                            }
                        }

                        #endregion

                        if (catDataToBeAdded)
                        {
                            isDataSavedRequired = true;
                            ClientDBContext.ApplicantComplianceCategoryDatas.AddObject(newCategoryData);
                        }

                        #endregion
                    }
                }
            }

            appCompItmDataWhichNeedsToBeRemoved.ForEach(acid =>
            {
                isDataSavedRequired = true;

                //// delete item and attribute.
                acid.IsDeleted = true;
                acid.ModifiedOn = DateTime.Now;
                acid.ModifiedByID = currentUserId;

                acid.ApplicantComplianceAttributeDatas.Where(cond => !cond.IsDeleted).ForEach(acad =>
                {
                    if (acad.IsNotNull())
                    {
                        acad.IsDeleted = true;
                        acad.ModifiedOn = DateTime.Now;
                        acad.ModifiedByID = currentUserId;

                        if (acad.ApplicantComplianceDocumentMaps.IsNotNull())
                        {
                            acad.ApplicantComplianceDocumentMaps.Where(cond => !cond.IsDeleted).ForEach(acdm =>
                            {
                                acdm.IsDeleted = true;
                                acdm.ModifiedByID = currentUserId;
                                acdm.ModifiedOn = DateTime.Now;
                            });
                        }
                    }
                });
            });

            if (isDataSavedRequired)
            {
                ClientDBContext.SaveChanges();
            }
            return isDataSavedRequired;
        }

        Boolean IComplianceDataRepository.UpdateDoccumentStatusAfterDataEntry(Int32 applicantDoccumentId, short documentStatusId, Int32 currentUserId)
        {
            ResetClientContext();
            ApplicantDocument currentDoccument = ClientDBContext.ApplicantDocuments.FirstOrDefault(doc => doc.ApplicantDocumentID == applicantDoccumentId);
            if (currentDoccument.IsNotNull())
            {
                currentDoccument.DataEntryDocumentStatusID = documentStatusId;
                currentDoccument.ModifiedOn = DateTime.Now;
                currentDoccument.ModifiedByID = currentUserId;
            }
            if (ClientDBContext.SaveChanges() > 0)
            {
                return true;
            }
            return false;
        }

        Boolean IComplianceDataRepository.UpdateDoccumentStatusInFlatTableAfterDataEntry(Int32 fdeqId, short documentStatusId, Int32 currentUserId)
        {
            Entity.FlatDataEntryQueue currentDoccument = SecurityContext.FlatDataEntryQueues.FirstOrDefault(doc => doc.FDEQ_ID == fdeqId && !doc.FDEQ_IsDeleted);
            if (currentDoccument.IsNotNull())
            {
                currentDoccument.FDEQ_DataEntryDocumentStatusID = documentStatusId;
                currentDoccument.FDEQ_ModifiedOn = DateTime.Now;
                currentDoccument.FDEQ_ModifiedByID = currentUserId;
            }
            if (SecurityContext.SaveChanges() > 0)
            {
                return true;
            }
            return false;
        }

        Boolean CheckIfItemDataIsUpdated(List<ApplicantComplianceItemData> itemDataListInDb, ApplicantCmplncItemData itemDataFromUI)
        {
            Boolean ifItemDataIsUpdated = false;
            Boolean IsOverrideUpdateStatus = false;
            Int32 ItemIdFromWhichItemToBeCompared = 0;
            if (itemDataFromUI.SwappedItmId > AppConsts.NONE)
            {
                ItemIdFromWhichItemToBeCompared = itemDataFromUI.SwappedItmId;
            }
            else
            {
                ItemIdFromWhichItemToBeCompared = itemDataFromUI.ItmId;
            }

            if (itemDataListInDb.IsNotNull())
            {
                ApplicantComplianceItemData itemDataFromWhichItemToBeCompared = itemDataListInDb.FirstOrDefault(x => x.ComplianceItemID == ItemIdFromWhichItemToBeCompared);
                if (itemDataFromWhichItemToBeCompared.IsNotNull())
                {
                    List<ApplicantComplianceAttributeData> attrDataListInDb = itemDataFromWhichItemToBeCompared.ApplicantComplianceAttributeDatas
                                                                                                               .Where(x => !x.IsDeleted).ToList();
                    if (itemDataFromUI.ApplicantCmplncAttrData.IsNotNull())
                    {
                        foreach (ApplicantCmplncAttrData attrData in itemDataFromUI.ApplicantCmplncAttrData)
                        {
                            ApplicantComplianceAttributeData attrDataInDb = attrDataListInDb.Where(x => x.ComplianceAttributeID == attrData.AttrId).FirstOrDefault();

                            if (attrDataInDb.IsNull() && itemDataFromUI.SwappedItmId > AppConsts.NONE)
                            {
                                if (attrData.AttrGroupId > AppConsts.NONE)
                                {
                                    if (attrDataListInDb.Any(cond => cond.ComplianceAttribute.ComplianceAttributeGroupID == attrData.AttrGroupId))
                                    {
                                        attrDataInDb = attrDataListInDb.Where(cond => cond.ComplianceAttribute.lkpComplianceAttributeDatatype.Code == attrData.AttrTypeCode
                                                                           && cond.ComplianceAttribute.ComplianceAttributeGroupID == attrData.AttrGroupId)
                                                                             .FirstOrDefault();

                                        // Got the Same AttributeGroupId control but of different DATA-TYPE 
                                        // Then data is not SWAPPED for that Attribute
                                        if (attrDataInDb.IsNull())
                                        {
                                            ifItemDataIsUpdated = false;
                                            IsOverrideUpdateStatus = true;
                                        }
                                    }
                                    else
                                    {
                                        // When no matching AttributeGroup Attribute is found, 
                                        // Data is cleared for that attribute during swap
                                        ifItemDataIsUpdated = true;
                                        IsOverrideUpdateStatus = true;
                                    }
                                }
                                else
                                {
                                    // Case of Not attribute grouped, we gotr no matching attribute in 'attrDataInDb' 
                                    ifItemDataIsUpdated = true;
                                    IsOverrideUpdateStatus = true;
                                }
                            }


                            if (attrDataInDb.IsNotNull())
                            {
                                if (attrDataInDb.ComplianceAttribute.lkpComplianceAttributeDatatype.Code == ComplianceAttributeDatatypes.Date.GetStringValue())
                                {
                                    if (String.IsNullOrEmpty(attrDataInDb.AttributeValue) && !String.IsNullOrEmpty(attrData.AttrValue)
                                        || !String.IsNullOrEmpty(attrDataInDb.AttributeValue) && String.IsNullOrEmpty(attrData.AttrValue)
                                        ||
                                        (!String.IsNullOrEmpty(attrDataInDb.AttributeValue) && !String.IsNullOrEmpty(attrData.AttrValue)
                                        && (DateTime.Parse(attrDataInDb.AttributeValue).ToShortDateString() != DateTime.Parse(attrData.AttrValue).ToShortDateString())
                                        ))
                                    {
                                        ifItemDataIsUpdated = true;
                                        break;
                                    }
                                    else if (String.IsNullOrEmpty(attrDataInDb.AttributeValue) && String.IsNullOrEmpty(attrData.AttrValue))
                                    {
                                        ifItemDataIsUpdated = false;
                                    }
                                }
                                else if (!(attrDataInDb.AttributeValue.Equals(attrData.AttrValue)))
                                {
                                    ifItemDataIsUpdated = true;
                                    break;
                                }
                            }
                            else if (attrDataInDb.IsNull() && attrData.IsNotNull() && !IsOverrideUpdateStatus)
                            {
                                ifItemDataIsUpdated = true;
                                break;
                            }
                            //else
                            //{
                            //    ifItemDataIsUpdated = false;
                            //}
                        }
                    }
                }
                else if (itemDataFromUI.ApplicantCmplncAttrData != null)
                {
                    ifItemDataIsUpdated = true;
                }
            }
            else if (itemDataFromUI.ApplicantCmplncAttrData != null)
            {
                ifItemDataIsUpdated = true;
            }
            return ifItemDataIsUpdated;
        }

        #region Private Methods

        /// <summary>
        /// Override the rejection status of the Item if the current document is being attached to it 
        /// </summary>
        /// <param name="itemComplianceStatusList"></param>
        /// <param name="reviewerTypeList"></param>
        /// <param name="lstItemMovementTypes"></param>
        /// <param name="lstItemAssignmentProperties"></param>
        /// <param name="_currentItem"></param>
        /// <param name="itemDataToBeUpdated"></param>
        /// <param name="_isDocSaveRequired"></param>
        private static void OverrideRejectionStatus(List<lkpItemComplianceStatu> itemComplianceStatusList, List<lkpReviewerType> reviewerTypeList
                                                    , List<lkpItemMovementType> lstItemMovementTypes, List<ListItemAssignmentProperties> lstItemAssignmentProperties
                                                    , ApplicantCmplncItemData _currentItem, ApplicantComplianceItemData itemDataToBeUpdated
                                                    , bool _isDocSaveRequired, Boolean isOverrideApprovedStatus) //UAT-2570
        {
            if (_isDocSaveRequired && ((_currentItem.OldStatusCode == ApplicantItemComplianceStatus.Exception_Rejected.GetStringValue()
                || _currentItem.OldStatusCode == ApplicantItemComplianceStatus.Not_Approved.GetStringValue())
                || (isOverrideApprovedStatus && (_currentItem.OldStatusCode == ApplicantItemComplianceStatus.Incomplete.GetStringValue()
                                                  || _currentItem.OldStatusCode == ApplicantItemComplianceStatus.Applied_For_Exception.GetStringValue())))) //UAT-2570
            {
                _currentItem.IsDataChanged = true;
                //UAT-2570
                if (isOverrideApprovedStatus && (_currentItem.OldStatusCode == ApplicantItemComplianceStatus.Applied_For_Exception.GetStringValue()
                                                || _currentItem.OldStatusCode == ApplicantItemComplianceStatus.Exception_Rejected.GetStringValue()
                    ))
                {
                    _currentItem.NewStatuscode = ApplicantItemComplianceStatus.Pending_Review.GetStringValue();
                }
                SetItemAssignmentProperties(itemDataToBeUpdated, lstItemAssignmentProperties, itemComplianceStatusList,
                                            reviewerTypeList, lstItemMovementTypes, _currentItem);
            }
        }

        /// <summary>
        /// Check for Data changed only if it is NON Exception type
        /// OR It is exception type and data is filled for it.
        /// </summary>
        /// <param name="_currentItem"></param>
        /// <returns></returns>
        private static Boolean IsDataChangeCheckRequired(Boolean isExceptionApplied, Int32 attributeFilledCount)
        {
            return !isExceptionApplied || (isExceptionApplied && attributeFilledCount > AppConsts.NONE);
        }

        /// <summary>
        /// Attach the document to the Item if it was explicitily checked 
        /// and Overrider the Item status to Pending review, for Rejected type items
        /// </summary>
        /// <param name="dataEntryContract"></param>
        /// <param name="currentUserId"></param>
        /// <param name="itemComplianceStatusList"></param>
        /// <param name="reviewerTypeList"></param>
        /// <param name="lstItemMovementTypes"></param>
        /// <param name="lstItemAssignmentProperties"></param>
        /// <param name="itemDataListFromDBForComparsion"></param>
        /// <param name="_currentItem"></param>
        /// <param name="itemDataToBeUpdated"></param>
        /// <returns></returns>
        private bool AssociateExplicitDocumentOverrideStatus(AdminDataEntrySaveContract dataEntryContract, Int32 currentUserId, List<lkpItemComplianceStatu> itemComplianceStatusList
                                                            , List<lkpReviewerType> reviewerTypeList, List<lkpItemMovementType> lstItemMovementTypes
                                                            , List<ListItemAssignmentProperties> lstItemAssignmentProperties
                                                            , List<ApplicantComplianceItemData> itemDataListFromDBForComparsion, ApplicantCmplncItemData _currentItem
                                                            , ApplicantComplianceItemData itemDataToBeUpdated, Boolean isOverrideApprovedStatus = false) //UAT-2570
        {
            var _isDocSaveRequired = AssociateDocumentOnly(_currentItem, itemDataListFromDBForComparsion,
                                                            currentUserId, dataEntryContract.DoccumentId, itemDataToBeUpdated);

            if (_isDocSaveRequired)
            {
                OverrideRejectionStatus(itemComplianceStatusList, reviewerTypeList, lstItemMovementTypes, lstItemAssignmentProperties,
                                       _currentItem, itemDataToBeUpdated, _isDocSaveRequired, isOverrideApprovedStatus); //UAT-2570
            }
            return _isDocSaveRequired;
        }

        /// <summary>
        /// Generate the new instance of the 'ApplicantComplianceItemData' 
        /// </summary>
        /// <param name="currentUserId"></param>
        /// <param name="newCategoryData"></param>
        /// <param name="complianceItemID"></param>
        /// <returns></returns>
        private static ApplicantComplianceItemData AddApplicantComplianceItemData(Int32 currentUserId, ApplicantComplianceCategoryData newCategoryData
                                                                                  , Int32 complianceItemID)
        {
            ApplicantComplianceItemData newItemData = new ApplicantComplianceItemData();
            newItemData.ComplianceItemID = complianceItemID;
            newItemData.ApplicantComplianceCategoryData = newCategoryData;
            newItemData.ApplicantComplianceCategoryID = newCategoryData.ApplicantComplianceCategoryID;
            newItemData.CreatedByID = currentUserId;
            newItemData.CreatedOn = DateTime.Now;
            return newItemData;
        }

        private ApplicantComplianceCategoryData GetApplicantComplianceItemData(PackageSubscription currentSubscriptionForComprison, Int32 ApplicantComplianceCategoryID)
        {
            return currentSubscriptionForComprison.ApplicantComplianceCategoryDatas.Where(x => x.ApplicantComplianceCategoryID == ApplicantComplianceCategoryID
                                                                                    && x.IsDeleted == false).FirstOrDefault();
        }

        private static void InsertComplianceAttributeData(Int32 currentUserId, List<ApplicantCmplncAttrData> attrDataListToAdd,
                                                          ApplicantComplianceItemData itemDataInDb, List<ComplianceItemAttribute> lstCalculatedAttributes)
        {
            var _crntDateTime = DateTime.Now;
            //if (attrDataListToAdd != null)
            //{
            foreach (ApplicantCmplncAttrData attrDataToAdd in attrDataListToAdd)
            {
                ApplicantComplianceAttributeData newAttributeData = new ApplicantComplianceAttributeData();
                newAttributeData.ComplianceAttributeID = attrDataToAdd.AttrId;
                newAttributeData.AttributeValue = attrDataToAdd.AttrValue;
                newAttributeData.CreatedByID = currentUserId;
                newAttributeData.CreatedOn = _crntDateTime;
                newAttributeData.ApplicantComplianceItemData = itemDataInDb;
                itemDataInDb.ApplicantComplianceAttributeDatas.Add(newAttributeData);
            }

            var _lstCalculatedAttr = lstCalculatedAttributes.Where(cia => cia.CIA_ItemID == itemDataInDb.ComplianceItemID).ToList();

            if (!attrDataListToAdd.IsNullOrEmpty() && attrDataListToAdd.Count > AppConsts.NONE)
            {
                foreach (var _calculatedAttr in _lstCalculatedAttr)
                {
                    if (!attrDataListToAdd.Any(x => x.AttrId == _calculatedAttr.CIA_AttributeID))
                    {
                        itemDataInDb.ApplicantComplianceAttributeDatas.Add(new ApplicantComplianceAttributeData
                        {
                            ComplianceAttributeID = _calculatedAttr.CIA_AttributeID,
                            AttributeValue = String.Empty,
                            CreatedByID = currentUserId,
                            CreatedOn = _crntDateTime,
                            ApplicantComplianceItemID = itemDataInDb.ApplicantComplianceItemID
                        });
                    }
                }
            }
        }

        private static void UpdateExistingComplianceAttributeData(Int32 currentUserId, ApplicantCmplncItemData itemDataFrmUi, ApplicantComplianceItemData itemDataInDb)
        {
            List<ApplicantCmplncAttrData> attrDataListToUpdate = itemDataFrmUi.ApplicantCmplncAttrData.Where(x => x.AcadId > AppConsts.NONE).ToList();
            foreach (ApplicantCmplncAttrData attrDataToUpdate in attrDataListToUpdate)
            {
                ApplicantComplianceAttributeData attrDataInDb = itemDataInDb.ApplicantComplianceAttributeDatas
                                                                            .FirstOrDefault(cond => cond.ApplicantComplianceAttributeID == attrDataToUpdate.AcadId);
                if (attrDataInDb.IsNotNull())
                {
                    if (attrDataInDb.AttributeValue != attrDataToUpdate.AttrValue)
                    {
                        attrDataInDb.AttributeValue = attrDataToUpdate.AttrValue;
                        attrDataInDb.ModifiedOn = DateTime.Now;
                        attrDataInDb.ModifiedByID = currentUserId;
                    }
                }
            }
        }

        #region Admin Data Entry - Document Association

        /// <summary>
        /// Returns whether the Incomplete Item needs to be added, due to data filled or Document association required.
        /// </summary>
        /// <param name="itemDataToBeAdded"></param>
        /// <returns></returns>
        private static Boolean IsItemDataChangeRequired(ApplicantCmplncItemData itemDataToBeAdded)
        {
            return itemDataToBeAdded.AttribuetFilledCount > AppConsts.NONE
                   ||
                   (itemDataToBeAdded.AttribuetFilledCount == AppConsts.NONE && itemDataToBeAdded.IsDocAssociationReq);
        }

        /// <summary>
        /// Returns whether the current Item and its atributes need to be removed
        /// </summary>
        /// <param name="_currentItem"></param>
        /// <returns></returns>
        private static bool IsItemDeletionRequired(ApplicantCmplncItemData _currentItem)
        {
            return _currentItem.IsItemSwapped
                                            && (_currentItem.NewStatuscode == ApplicantItemComplianceStatus.Incomplete.GetStringValue()
                                            || _currentItem.NewStatuscode == ApplicantItemComplianceStatus.Applied_For_Exception.GetStringValue()
                                            || _currentItem.NewStatuscode == ApplicantItemComplianceStatus.Exception_Rejected.GetStringValue()
                                            || _currentItem.NewStatuscode == ApplicantItemComplianceStatus.Approved_With_Exception.GetStringValue());
        }

        private void AssociatDocsWithCurrentItem(Int32 currentDocumentId, Int32 currentUserId, ComplianceItemAttribute fileUploadTypeAttribute
                                                 , ApplicantComplianceItemData currentItemData, List<ApplicantComplianceItemData> lstItemDataFromDb
                                                 , ApplicantCmplncItemData itemDataFromUi, Boolean ifExceptionAppledFrCrntItem)
        {
            List<Int32> docListToBeMapped = new List<Int32>();

            // UAT 1722: Should not associate current document when swapped 

            //if (itemDataFromUi.IsDataChanged || itemDataFromUi.IsDocAssociationReq)
            if ((
                (itemDataFromUi.IsDataChanged || itemDataFromUi.IsDocAssociationReq) && !itemDataFromUi.IsItemSwapped)
                ||
                (itemDataFromUi.IsItemSwapped && itemDataFromUi.IsDataChanged)
                )
            {
                docListToBeMapped.Add(currentDocumentId);
            }

            //}
            //else
            //{
            //    if (itemDataFromUi.IsDataChanged || itemDataFromUi.IsDocAssociationReq)
            //    {
            //        docListToBeMapped.Add(currentDocumentId);
            //    }
            //}

            if (itemDataFromUi.IsItemSwapped && lstItemDataFromDb.IsNotNull())
            {
                ApplicantComplianceItemData itemDataFromWhichItemIsSwapped = lstItemDataFromDb.FirstOrDefault(x => x.ComplianceItemID == itemDataFromUi.SwappedItmId);

                if (itemDataFromWhichItemIsSwapped.IsNotNull())
                {

                    #region  Copy Compliance Item data from Swapped Item to Current Item Data

                    // Copy Exception Reason only when New the status is Exception type Item data was not changed after swapping  
                    //if (ifExceptionAppledFrCrntItem && !itemDataFromUi.IsDataChanged && itemDataFromUi.AttribuetFilledCount == AppConsts.NONE)
                    if (ifExceptionAppledFrCrntItem && itemDataFromUi.AttribuetFilledCount == AppConsts.NONE)
                    {
                        currentItemData.ExceptionReason = itemDataFromWhichItemIsSwapped.ExceptionReason;
                    }

                    currentItemData.Notes = itemDataFromWhichItemIsSwapped.Notes;
                    currentItemData.VerificationComments = itemDataFromWhichItemIsSwapped.VerificationComments;
                    currentItemData.VerificationStatusText = itemDataFromWhichItemIsSwapped.VerificationStatusText;
                    currentItemData.StatusComments = itemDataFromWhichItemIsSwapped.StatusComments;

                    #endregion

                    //String itemStatusCode = itemDataFromWhichItemIsSwapped.lkpItemComplianceStatu.Code;

                    var _isExceptionStatus = IsItemStatusException(itemDataFromWhichItemIsSwapped.lkpItemComplianceStatu.Code);
                    if (!_isExceptionStatus || (_isExceptionStatus && itemDataFromUi.IsDataChanged && itemDataFromUi.AttribuetFilledCount > AppConsts.NONE))
                    {
                        List<Int32> complinaceDocList = GetApplicantComplianceDocListToMapped(itemDataFromWhichItemIsSwapped);
                        if (complinaceDocList.IsNotNull() && complinaceDocList.Count() > AppConsts.NONE)
                        {
                            docListToBeMapped.AddRange(complinaceDocList);
                        }
                    }
                    else
                    {
                        List<ExceptionDocumentMapping> excptnDocsListToBeAdded = itemDataFromWhichItemIsSwapped.ExceptionDocumentMappings
                                                                                                                 .Where(x => x.ApplicantComplianceItemID
                                                                                                                  == itemDataFromWhichItemIsSwapped.ApplicantComplianceItemID
                                                                                                                  && x.IsDeleted == false)
                                                                                                                .ToList();
                        docListToBeMapped.AddRange(excptnDocsListToBeAdded.Select(x => x.ApplicantDocumentID));
                    }
                }
            }

            //This is required to elliminate any duplicate Applicant Document ID (scenario occurs when multiple swapping)
            docListToBeMapped = docListToBeMapped.Distinct().ToList();

            if (fileUploadTypeAttribute.IsNotNull()
                   &&
                    (!ifExceptionAppledFrCrntItem
                           ||
                    ifExceptionAppledFrCrntItem && itemDataFromUi.IsDataChanged && itemDataFromUi.AttribuetFilledCount > AppConsts.NONE)
                )
            {
                ManageCurrentItemApplicantComplianceDocument(currentUserId, currentItemData, docListToBeMapped, fileUploadTypeAttribute, itemDataFromUi);
            }
            else if (ifExceptionAppledFrCrntItem && itemDataFromUi.AttribuetFilledCount == AppConsts.NONE)
            {
                ManageCurrentItemExceptionDocument(currentUserId, currentItemData, itemDataFromUi, docListToBeMapped);
            }
        }

        /// <summary>
        /// Associate the documents with Items for which the checkbox has been checked and NOT already associated 
        /// through the Data change.
        /// </summary>
        private Boolean AssociateDocumentOnly(ApplicantCmplncItemData itemDataFrmUi, List<ApplicantComplianceItemData> lstItemsFromDb,
                                           Int32 currentUserId, Int32 documentId, ApplicantComplianceItemData itemDataToBeUpdated)
        {
            var _isSaveRequired = false;
            var _currentDateTime = DateTime.Now;
            var _itemFromDb = lstItemsFromDb.Where(acid => acid.ApplicantComplianceItemID == itemDataFrmUi.AcidId).FirstOrDefault();

            var statusCode = (itemDataFrmUi.IsItemSwapped) ? itemDataFrmUi.NewStatuscode : itemDataFrmUi.OldStatusCode;

            if (statusCode == ApplicantItemComplianceStatus.Applied_For_Exception.GetStringValue()
                || statusCode == ApplicantItemComplianceStatus.Exception_Rejected.GetStringValue()
                || statusCode == ApplicantItemComplianceStatus.Approved_With_Exception.GetStringValue())
            {

                var _isAlreadyMapped = _itemFromDb.ExceptionDocumentMappings
                                        .Any(edm => edm.ApplicantDocumentID == documentId
                                                 && edm.IsDeleted == false);

                if (!_isAlreadyMapped)
                {
                    var _exceptionDocumentMapping = new ExceptionDocumentMapping();
                    _exceptionDocumentMapping.IsDeleted = false;
                    _exceptionDocumentMapping.CreatedBy = currentUserId;
                    _exceptionDocumentMapping.CreatedOn = _currentDateTime;
                    _exceptionDocumentMapping.ApplicantComplianceItemID = itemDataFrmUi.AcidId;
                    _exceptionDocumentMapping.ApplicantDocumentID = documentId;
                    itemDataToBeUpdated.ExceptionDocumentMappings.Add(_exceptionDocumentMapping);
                    _isSaveRequired = true;
                }
            }
            else
            {
                if (_itemFromDb.IsNotNull())
                {
                    var fileUploadAttrData = itemDataToBeUpdated.ApplicantComplianceAttributeDatas
                                                                               .Where(cond => cond.IsDeleted == false &&
                                                                                   (cond.ComplianceAttribute != null ?
                                                                                   (cond.ComplianceAttribute.lkpComplianceAttributeDatatype.Code
                                                                                   == ComplianceAttributeDatatypes.FileUpload.GetStringValue())
                                                                                   : false)).FirstOrDefault();
                    if (fileUploadAttrData.IsNotNull())
                    {
                        var _fileType = _itemFromDb.ApplicantComplianceAttributeDatas.Where(cond => cond.IsDeleted == false
                                                                    && cond.ApplicantComplianceAttributeID == fileUploadAttrData.ApplicantComplianceAttributeID &&
                                                                      (cond.ComplianceAttribute != null ?
                                                                      (cond.ComplianceAttribute.lkpComplianceAttributeDatatype.Code ==
                                                                       ComplianceAttributeDatatypes.FileUpload.GetStringValue())
                                                                                         : false)).FirstOrDefault();

                        var _isAlreadyMapped = _fileType.ApplicantComplianceDocumentMaps.Any(docMap => docMap.ApplicantDocumentID == documentId && !docMap.IsDeleted);
                        if (!_isAlreadyMapped)
                        {
                            var _documentMapping = new ApplicantComplianceDocumentMap();
                            _documentMapping.ApplicantDocumentID = documentId;
                            _documentMapping.ApplicantComplianceAttributeID = fileUploadAttrData.ApplicantComplianceAttributeID;
                            _documentMapping.IsDeleted = false;
                            _documentMapping.CreatedByID = currentUserId;
                            _documentMapping.CreatedOn = _currentDateTime;

                            fileUploadAttrData.ApplicantComplianceDocumentMaps.Add(_documentMapping);

                            fileUploadAttrData.ModifiedByID = currentUserId;
                            fileUploadAttrData.ModifiedOn = _currentDateTime;
                            Int32 fileUpldCnt = fileUploadAttrData.AttributeValue.IsNullOrEmpty()
                                                ? AppConsts.NONE
                                                : Convert.ToInt32(fileUploadAttrData.AttributeValue);
                            fileUploadAttrData.AttributeValue = Convert.ToString(fileUpldCnt + AppConsts.ONE);
                            _isSaveRequired = true;
                        }
                    }
                }
            }

            return _isSaveRequired;
        }

        /// <summary>
        /// For exception related Items with only Document association only, there is Nod Data change
        /// </summary>
        /// <param name="itemDataFrmUi"></param>
        /// <returns></returns>
        private static Boolean IsExceptionUnChanged(ApplicantCmplncItemData itemDataFrmUi)
        {
            return itemDataFrmUi.AttribuetFilledCount == AppConsts.NONE &&
                                                 (itemDataFrmUi.OldStatusCode == ApplicantItemComplianceStatus.Applied_For_Exception.GetStringValue()
                                                 || itemDataFrmUi.OldStatusCode == ApplicantItemComplianceStatus.Approved_With_Exception.GetStringValue()
                                                 || itemDataFrmUi.OldStatusCode == ApplicantItemComplianceStatus.Exception_Rejected.GetStringValue()
                                                 ) && itemDataFrmUi.IsDocAssociationReq;
        }

        private static void ManageCurrentItemExceptionDocument(Int32 currentUserId, ApplicantComplianceItemData currentItemData,
                                ApplicantCmplncItemData itemDataFromUi, List<Int32> docListToBeMapped)
        {
            List<ApplicantComplianceDocumentMap> appCompDocToBeRemoved = new List<ApplicantComplianceDocumentMap>();
            List<ExceptionDocumentMapping> excepDocToBeRemoved = new List<ExceptionDocumentMapping>();
            if (currentItemData.IsNotNull() && currentItemData.ExceptionDocumentMappings.IsNotNull())
            {

                List<Int32> appDocIDsAlreadyMappedWithCurrrentItem = new List<Int32>();
                List<ExceptionDocumentMapping> totExceptionDocsMappedWithCurrrentItem = new List<ExceptionDocumentMapping>();
                totExceptionDocsMappedWithCurrrentItem = currentItemData.ExceptionDocumentMappings
                                                                        .Where(x => x.ApplicantComplianceItemID == currentItemData.ApplicantComplianceItemID
                                                                               && x.IsDeleted == false).ToList();

                //Remove Documents from Current Item only when Item is swapped
                if (itemDataFromUi.IsItemSwapped)
                {
                    excepDocToBeRemoved = totExceptionDocsMappedWithCurrrentItem.Where(cond => !docListToBeMapped.Contains(cond.ApplicantDocumentID)).ToList();
                    if (!IsItemStatusException(itemDataFromUi.OldStatusCode))
                    {
                        appCompDocToBeRemoved = GetCurrentItemComplianceDocument(currentItemData);
                    }
                }
                //else if (!IsItemStatusException(itemDataFromUi.OldStatusCode) && itemDataFromUi.AttribuetFilledCount > AppConsts.NONE)
                //{
                //    appCompDocToBeRemoved = GetCurrentItemComplianceDocument(currentItemData);
                //}

                appDocIDsAlreadyMappedWithCurrrentItem = totExceptionDocsMappedWithCurrrentItem.Where(cond => docListToBeMapped.Contains(cond.ApplicantDocumentID))
                                                                                                       .Select(col => col.ApplicantDocumentID).ToList();

                if (appDocIDsAlreadyMappedWithCurrrentItem.Count > AppConsts.NONE)
                {
                    docListToBeMapped = docListToBeMapped.Except(appDocIDsAlreadyMappedWithCurrrentItem).ToList();
                }

            }
            if (!docListToBeMapped.IsNullOrEmpty())
            {
                itemDataFromUi.IsDocAssociatedByDataChange = true;
            }
            MapCurrentItemExceptionDoc(currentUserId, currentItemData, docListToBeMapped);
            RemoveCurrentItemExceptionDocument(currentUserId, excepDocToBeRemoved);
            RemoveCurrentItemAppComDocuments(currentUserId, appCompDocToBeRemoved);
        }

        private static void MapCurrentItemExceptionDoc(Int32 currentUserId, ApplicantComplianceItemData currentItemData, List<Int32> docListToBeMapped)
        {
            foreach (Int32 docId in docListToBeMapped)
            {
                var exceptionDoc = new ExceptionDocumentMapping();
                exceptionDoc.ApplicantDocumentID = docId;
                exceptionDoc.IsDeleted = false;
                exceptionDoc.CreatedBy = currentUserId;
                exceptionDoc.CreatedOn = DateTime.Now;
                exceptionDoc.ApplicantComplianceItemData = currentItemData;
                currentItemData.ExceptionDocumentMappings.Add(exceptionDoc);
            }
        }

        private static void RemoveCurrentItemExceptionDocument(Int32 currentUserId, List<ExceptionDocumentMapping> excepDocToBeRemoved)
        {
            excepDocToBeRemoved.ForEach(edm =>
            {
                edm.IsDeleted = true;
                edm.ModifiedOn = DateTime.Now;
                edm.ModifiedBy = currentUserId;
            });
        }

        private static List<Int32> GetApplicantComplianceDocListToMapped(ApplicantComplianceItemData itemDataFromWhichItemIsSwapped)
        {
            List<ApplicantComplianceAttributeData> fileUpLoadAttrDataFrSwpdItm = null;
            List<Int32> docIdNeedToBeUpdated = new List<Int32>();
            List<ApplicantComplianceDocumentMap> applicantComplianceDocumentMap = new List<ApplicantComplianceDocumentMap>();

            if (itemDataFromWhichItemIsSwapped.IsNotNull() && itemDataFromWhichItemIsSwapped.ApplicantComplianceAttributeDatas.IsNotNull())
            {
                fileUpLoadAttrDataFrSwpdItm = itemDataFromWhichItemIsSwapped.ApplicantComplianceAttributeDatas
                                                                        .Where(cond => cond.ComplianceAttribute.lkpComplianceAttributeDatatype.Code ==
                                                                            ComplianceAttributeDatatypes.FileUpload.GetStringValue()
                                                                           && cond.IsDeleted == false
                                                                           ).ToList();
                if (fileUpLoadAttrDataFrSwpdItm.IsNotNull())
                {
                    fileUpLoadAttrDataFrSwpdItm.ForEach(fl =>
                    {
                        applicantComplianceDocumentMap.AddRange(fl.ApplicantComplianceDocumentMaps);
                    });
                    //List<Int32> fileUpLoadFrSwpdItmAttrDataIDs = fileUpLoadAttrDataFrSwpdItm.DistinctBy(col => col.ApplicantComplianceAttributeID)
                    //                                                                        .Select(col => col.ApplicantComplianceAttributeID).ToList();
                    docIdNeedToBeUpdated = applicantComplianceDocumentMap.Where(cond => cond.IsDeleted == false)
                                                                            .Select(col => col.ApplicantDocumentID)
                                                                            .ToList();
                }
            }
            return docIdNeedToBeUpdated;
        }

        private static List<ApplicantComplianceDocumentMap> GetCurrentItemComplianceDocument(ApplicantComplianceItemData currentItemData)
        {
            List<ApplicantComplianceDocumentMap> totCmplncDocListMappedWithCurrrentItem = new List<ApplicantComplianceDocumentMap>();
            List<ApplicantComplianceAttributeData> currentfileUploadAttrData = currentItemData.ApplicantComplianceAttributeDatas
                                                                                                  .Where(cond => cond.IsDeleted == false &&
                                                                                                      (cond.ComplianceAttribute != null ?
                                                                                                      (cond.ComplianceAttribute.lkpComplianceAttributeDatatype.Code
                                                                                                      == ComplianceAttributeDatatypes.FileUpload.GetStringValue())
                                                                                                      : false)).ToList();
            if (currentfileUploadAttrData.IsNotNull())
            {
                currentfileUploadAttrData.ForEach(cdoc =>
                {
                    var currentItemDocList = cdoc.ApplicantComplianceDocumentMaps.Where(cond => !cond.IsDeleted).ToList();
                    totCmplncDocListMappedWithCurrrentItem.AddRange(currentItemDocList);
                });
            }
            return totCmplncDocListMappedWithCurrrentItem;
        }

        private static void ManageCurrentItemApplicantComplianceDocument(Int32 currentUserId, ApplicantComplianceItemData currentItemData
                                                                        , List<Int32> docListToBeMapped, ComplianceItemAttribute fileUploadTypeAttribute
                                                                        , ApplicantCmplncItemData itemDataFromUi)
        {
            ApplicantComplianceAttributeData fileUploadAttrData = new ApplicantComplianceAttributeData();
            List<ApplicantComplianceDocumentMap> appCompDocToBeRemoved = new List<ApplicantComplianceDocumentMap>();
            List<ExceptionDocumentMapping> excepDocToBeRemoved = new List<ExceptionDocumentMapping>();
            List<Int32> appDocIDsAlreadyMappedWithCurrrentItem = new List<Int32>();
            List<ApplicantComplianceDocumentMap> totCmplncDocListMappedWithCurrrentItem = new List<ApplicantComplianceDocumentMap>();

            if (currentItemData.IsNotNull() && currentItemData.ApplicantComplianceAttributeDatas.IsNotNull())
            {
                List<ApplicantComplianceAttributeData> currentfileUploadAttrData = currentItemData.ApplicantComplianceAttributeDatas
                                                                                        .Where(cond => cond.IsDeleted == false &&
                                                                                            (cond.ComplianceAttribute != null ?
                                                                                            (cond.ComplianceAttribute.lkpComplianceAttributeDatatype.Code
                                                                                            == ComplianceAttributeDatatypes.FileUpload.GetStringValue())
                                                                                            : false)).ToList();

                GetCurrentItemComplianceDocument(currentItemData);

                if (currentfileUploadAttrData.IsNotNull())
                {
                    currentfileUploadAttrData.ForEach(cdoc =>
                    {
                        var currentItemDocList = cdoc.ApplicantComplianceDocumentMaps.Where(cond => !cond.IsDeleted).ToList();
                        totCmplncDocListMappedWithCurrrentItem.AddRange(currentItemDocList);
                    });
                    fileUploadAttrData = currentfileUploadAttrData.FirstOrDefault();

                    //Remove Documents from Current Item only when Item is swapped
                    if (itemDataFromUi.IsItemSwapped)
                    {
                        appCompDocToBeRemoved = totCmplncDocListMappedWithCurrrentItem.Where(cond => !docListToBeMapped.Contains(cond.ApplicantDocumentID)).ToList();
                        if (IsItemStatusException(itemDataFromUi.OldStatusCode) && currentItemData.ExceptionDocumentMappings.IsNotNull())
                        {
                            excepDocToBeRemoved = currentItemData.ExceptionDocumentMappings.Where(cond => cond.ApplicantComplianceItemID == itemDataFromUi.AcidId)
                                                                                            .ToList();
                        }
                    }
                    else if (IsItemStatusException(itemDataFromUi.OldStatusCode) && currentItemData.ExceptionDocumentMappings.IsNotNull()
                              && (itemDataFromUi.AttribuetFilledCount > AppConsts.NONE || IsNeedToRemoveExceptionDoc(itemDataFromUi)))
                    {
                        excepDocToBeRemoved = currentItemData.ExceptionDocumentMappings.Where(cond => cond.ApplicantComplianceItemID == itemDataFromUi.AcidId)
                                                                                        .ToList();
                    }

                    appDocIDsAlreadyMappedWithCurrrentItem = totCmplncDocListMappedWithCurrrentItem.Where(cond => docListToBeMapped.Contains(cond.ApplicantDocumentID))
                                                                                                       .Select(col => col.ApplicantDocumentID).ToList();
                    if (appDocIDsAlreadyMappedWithCurrrentItem.Count() > AppConsts.NONE)
                    {
                        docListToBeMapped = docListToBeMapped.Except(appDocIDsAlreadyMappedWithCurrrentItem).ToList();
                    }
                }

                if (fileUploadAttrData.IsNotNull())
                {
                    itemDataFromUi.IsDocAssociatedByDataChange = true;
                    fileUploadAttrData.ModifiedByID = currentUserId;
                    fileUploadAttrData.ModifiedOn = DateTime.Now;
                    Int32 fileUpldCnt = fileUploadAttrData.AttributeValue.IsNullOrEmpty()
                                        ? AppConsts.NONE
                                        : Convert.ToInt32(fileUploadAttrData.AttributeValue);
                    fileUploadAttrData.AttributeValue = Convert.ToString(fileUpldCnt + docListToBeMapped.Count - appCompDocToBeRemoved.Count());
                }
                else
                {
                    itemDataFromUi.IsDocAssociatedByDataChange = true;
                    fileUploadAttrData = new ApplicantComplianceAttributeData();
                    fileUploadAttrData.ComplianceAttributeID = fileUploadTypeAttribute.CIA_AttributeID;
                    fileUploadAttrData.ApplicantComplianceItemData = currentItemData;
                    fileUploadAttrData.AttributeValue = docListToBeMapped.Count.ToString();
                    fileUploadAttrData.CreatedByID = currentUserId;
                    fileUploadAttrData.CreatedOn = DateTime.Now;
                }

                MapCurrentItemAppComplianceDocument(currentUserId, currentItemData, docListToBeMapped, fileUploadAttrData);
                RemoveCurrentItemAppComDocuments(currentUserId, appCompDocToBeRemoved);
                RemoveCurrentItemExceptionDocument(currentUserId, excepDocToBeRemoved);
            }
        }

        private static void MapCurrentItemAppComplianceDocument(Int32 currentUserId, ApplicantComplianceItemData currentItemData
                                                                , List<Int32> docListToBeMapped, ApplicantComplianceAttributeData fileUploadAttrData)
        {
            foreach (Int32 docId in docListToBeMapped)
            {
                ApplicantComplianceDocumentMap documents = new ApplicantComplianceDocumentMap();
                //if (fileUploadAttrData.ApplicantComplianceAttributeID == 0)
                documents.ApplicantComplianceAttributeData = fileUploadAttrData;
                //else
                //documents.ApplicantComplianceAttributeID = fileUploadAttrData.ApplicantComplianceAttributeID;
                documents.ApplicantDocumentID = docId;
                documents.IsDeleted = false;
                documents.CreatedByID = currentUserId;
                documents.CreatedOn = DateTime.Now;

                fileUploadAttrData.ApplicantComplianceDocumentMaps.Add(documents);

                if (fileUploadAttrData.ApplicantComplianceAttributeID == AppConsts.NONE)
                {
                    currentItemData.ApplicantComplianceAttributeDatas.Add(fileUploadAttrData);
                }
            }
        }

        private static void RemoveCurrentItemAppComDocuments(Int32 currentUserId, List<ApplicantComplianceDocumentMap> appCompDocToBeRemoved)
        {
            appCompDocToBeRemoved.ForEach(cmplncDoc =>
            {
                cmplncDoc.IsDeleted = true;
                cmplncDoc.ModifiedOn = DateTime.Now;
                cmplncDoc.ModifiedByID = currentUserId;
            });
        }

        //UAT-2570:
        private static Boolean IsNeedToRemoveExceptionDoc(ApplicantCmplncItemData itemDataFromUi)
        {
            if (itemDataFromUi.IsDocAssociationReq
                && !itemDataFromUi.IsDocAssociatedByDataChange
                && (itemDataFromUi.OldStatusCode == ApplicantItemComplianceStatus.Exception_Rejected.GetStringValue()
                     || itemDataFromUi.OldStatusCode == ApplicantItemComplianceStatus.Applied_For_Exception.GetStringValue()
                   )
               )
            {
                return true;
            }
            return false;
        }

        #endregion

        private List<ListItemAssignmentProperties> GetAssignmentPropertiesByCategoryId(Int32 packageId, Int32 categoryId)
        {
            return ClientDBContext.GetAssignmentPropertiesByCategory(packageId, categoryId).ToList();
        }

        private static void SetItemAssignmentProperties(ApplicantComplianceItemData itemData, List<ListItemAssignmentProperties> lstItemAssignmentProperties
                                                        , List<lkpItemComplianceStatu> itemComplianceStatusList, List<lkpReviewerType> reviewerTypeList
                                                        , List<lkpItemMovementType> itemMovementTypeList
                                                        , ApplicantCmplncItemData itemDataFromUi)
        {
            List<ListItemAssignmentProperties> assignmentPropertiesForCurrentItem = lstItemAssignmentProperties.Where(obj => obj.ComplianceItemId == itemData.ComplianceItemID
                                                                                                                && obj.ApprovalRequired == true)
                                                                                                                .ToList();
            Int16? reviewerTypeId = 0;
            Int32 pndgRvwCmplnceStatusId;
            Int32 excptnStatusId;
            String pndgRvwCmplnceStatusCode = String.Empty;
            Boolean isAdminReviewRequired = false;

            if (assignmentPropertiesForCurrentItem.IsNotNull() && assignmentPropertiesForCurrentItem.Any(x => x.ApprovalRequired == true))
            {
                var adminReviewer = assignmentPropertiesForCurrentItem.Any(revType => revType.ReviewerTypeCode.ToLower() == LkpReviewerType.Admin.ToLower());
                if (adminReviewer)
                {
                    pndgRvwCmplnceStatusCode = ApplicantItemComplianceStatus.Pending_Review.GetStringValue();
                    isAdminReviewRequired = true;
                    reviewerTypeId = reviewerTypeList.FirstOrDefault(revType => revType.Code.ToLower() == LkpReviewerType.Admin.ToLower()).ReviewerTypeID;
                }
                else
                {
                    pndgRvwCmplnceStatusCode = ApplicantItemComplianceStatus.Pending_Review_For_Client.GetStringValue();
                    isAdminReviewRequired = false;
                    reviewerTypeId = reviewerTypeList.FirstOrDefault(revType => revType.Code.ToLower() == LkpReviewerType.ClientAdmin.ToLower()).ReviewerTypeID;
                }
                pndgRvwCmplnceStatusId = itemComplianceStatusList.FirstOrDefault(x => x.Code == pndgRvwCmplnceStatusCode).ItemComplianceStatusID;
                excptnStatusId = itemComplianceStatusList.FirstOrDefault(x => x.Code == ApplicantItemComplianceStatus.Applied_For_Exception.GetStringValue()).ItemComplianceStatusID;
            }
            else
            {
                pndgRvwCmplnceStatusId = itemComplianceStatusList.FirstOrDefault(x => x.Code == ApplicantItemComplianceStatus.Approved.GetStringValue()).ItemComplianceStatusID;
                excptnStatusId = itemComplianceStatusList.FirstOrDefault(x => x.Code == ApplicantItemComplianceStatus.Approved_With_Exception.GetStringValue()).ItemComplianceStatusID;
            }

            //itemData.SubmissionDate = DateTime.Now; ;
            // UAT-4559
            //if (!itemData.IsNullOrEmpty() &&
            //    !(itemData.lkpItemComplianceStatu != null && itemData.lkpItemComplianceStatu.Code == ApplicantItemComplianceStatus.Pending_Review.GetStringValue())
            //    )
            //{
            //    itemData.SubmissionDate = DateTime.Now;
            //}



            itemData.ReviewerTypeID = reviewerTypeId == 0 ? null : reviewerTypeId;
            if (isAdminReviewRequired)
            {
                itemData.IsReviewerTypeAdmin = true;
            }
            else
            {
                itemData.IsReviewerTypeAdmin = false;
            }

            if (assignmentPropertiesForCurrentItem.IsNotNull() && assignmentPropertiesForCurrentItem.Any(obj => obj.ReviewerTypeCode == LkpReviewerType.ClientAdmin))
            {
                itemData.IsReviewerTypeClientAdmin = true;
            }
            else
            {
                itemData.IsReviewerTypeClientAdmin = false;
            }

            if (assignmentPropertiesForCurrentItem.IsNotNull() && assignmentPropertiesForCurrentItem.Any(obj => obj.ThirdPartyReviewerUserId.IsNotNull() || obj.ReviewerTenantId.IsNotNull()))
            {
                itemData.IsReviewerTypeThirdParty = true;
            }
            else
            {
                itemData.IsReviewerTypeThirdParty = false;
            }

            Int32 itemStatusId = itemComplianceStatusList.FirstOrDefault(status => status.Code == itemDataFromUi.NewStatuscode).ItemComplianceStatusID;

            //if olditemstatus was not approved then update status id only.
            //IsDataChange will be always true as it is set by checkbox.
            // So when exception was applied, it;s
            if (itemDataFromUi.IsDataChanged && (!IsItemStatusException(itemDataFromUi.NewStatuscode) || itemDataFromUi.AttribuetFilledCount > AppConsts.NONE))
            {
                itemData.StatusID = pndgRvwCmplnceStatusId;
            }
            else if (itemDataFromUi.IsItemSwapped)
            {
                if (itemDataFromUi.NewStatuscode == ApplicantItemComplianceStatus.Expired.GetStringValue()
                    || itemDataFromUi.NewStatuscode == ApplicantItemComplianceStatus.Pending_Review.GetStringValue()
                    || itemDataFromUi.NewStatuscode == ApplicantItemComplianceStatus.Pending_Review_For_Client.GetStringValue())
                {
                    itemData.StatusID = pndgRvwCmplnceStatusId;
                }
                //Added corresponding to UAT-1019
                else if (IsItemStatusException(itemDataFromUi.NewStatuscode) && itemDataFromUi.AttribuetFilledCount == AppConsts.NONE)
                {
                    itemData.StatusID = excptnStatusId;
                }
                else
                {
                    itemData.StatusID = itemStatusId;
                }
            }
            else
            {
                itemData.StatusID = itemStatusId;
            }

            //if (!IsItemStatusException(itemDataFromUi.NewStatuscode) && itemMovementTypeList.Any(cond => cond.Code == LkpItemMovementStatus.VIA_ADMIN_DATA_ENTRY.GetStringValue()))
            //{
            if ((!IsItemStatusException(itemDataFromUi.NewStatuscode) || itemDataFromUi.IsDataChanged)
               && itemMovementTypeList.Any(cond => cond.Code == LkpItemMovementStatus.VIA_ADMIN_DATA_ENTRY.GetStringValue()))
            {
                itemData.ItemMovementTypeID = itemMovementTypeList.Where(cond => cond.Code == LkpItemMovementStatus.VIA_ADMIN_DATA_ENTRY.GetStringValue())
                                                .FirstOrDefault().ItemMovementTypeID;
            }
            else
            {
                itemData.ItemMovementTypeID = null;
            }

            //UAT 4737
            String newStatus = ApplicantItemComplianceStatus.Incomplete.GetStringValue();
            if (itemData.lkpItemComplianceStatu.IsNull())
            {
                var itemstatus = itemComplianceStatusList.FirstOrDefault(x => x.ItemComplianceStatusID == itemData.StatusID);
                if (itemstatus.IsNotNull())
                {
                    newStatus = itemstatus.Code;
                }
            }
            else
            {
                newStatus = itemData.lkpItemComplianceStatu.Code;
            }
            String oldStatus = itemDataFromUi.IsNullOrEmpty() ? String.Empty : itemDataFromUi.OldStatusCode;
            //String newStatus = itemData.IsNullOrEmpty() ? String.Empty : newstatuscode;

            if (!oldStatus.IsNullOrEmpty()
                &&
                ((oldStatus == ApplicantItemComplianceStatus.Incomplete.GetStringValue() && newStatus != ApplicantItemComplianceStatus.Incomplete.GetStringValue())

                    || (oldStatus == ApplicantItemComplianceStatus.Pending_Review.GetStringValue()
                        && newStatus == ApplicantItemComplianceStatus.Pending_Review.GetStringValue())
                    || (oldStatus != ApplicantItemComplianceStatus.Pending_Review.GetStringValue()
                    &&
                        (newStatus == ApplicantItemComplianceStatus.Pending_Review.GetStringValue()
                        || newStatus == ApplicantItemComplianceStatus.Pending_Review_For_Client.GetStringValue()
                        || newStatus == ApplicantItemComplianceStatus.Applied_For_Exception.GetStringValue())
                ))
                )
            {
                itemData.SubmissionDate = DateTime.Now;
            }


            //UAT 4737
            //if (!itemData.IsNullOrEmpty() &&
            //((itemData.lkpItemComplianceStatu.Code == ApplicantItemComplianceStatus.Pending_Review.GetStringValue()
            //&& (itemDataFromUi.IsNullOrEmpty() || itemDataFromUi.OldStatusCode != ApplicantItemComplianceStatus.Pending_Review_For_Client.GetStringValue()))
            //|| (itemData.lkpItemComplianceStatu.Code == ApplicantItemComplianceStatus.Pending_Review_For_Client.GetStringValue() && (itemDataFromUi.IsNullOrEmpty() || itemDataFromUi.OldStatusCode != ApplicantItemComplianceStatus.Pending_Review.GetStringValue()))
            //|| (!itemDataFromUi.IsNullOrEmpty() && itemDataFromUi.OldStatusCode == ApplicantItemComplianceStatus.Incomplete.GetStringValue())
            //|| (!itemDataFromUi.IsNullOrEmpty() && itemDataFromUi.OldStatusCode == ApplicantItemComplianceStatus.Exception_Rejected.GetStringValue() && itemData.lkpItemComplianceStatu.Code == ApplicantItemComplianceStatus.Applied_For_Exception.GetStringValue())
            //)
            // && (itemDataFromUi.OldStatusCode != itemData.lkpItemComplianceStatu.Code)
            //)
            //{
            //    itemData.SubmissionDate = DateTime.Now;
            //}
        }

        /// <summary>
        /// Returns whether the Item status is of Any Exception type or not.
        /// </summary>
        /// <param name="statuscode"></param>
        /// <returns></returns>
        private static Boolean IsItemStatusException(String statuscode)
        {
            return (statuscode == ApplicantItemComplianceStatus.Applied_For_Exception.GetStringValue()
                               || statuscode == ApplicantItemComplianceStatus.Exception_Rejected.GetStringValue()
                               || statuscode == ApplicantItemComplianceStatus.Approved_With_Exception.GetStringValue());
        }

        /// <summary>
        /// Update any Item attributes, for which all the data has been cleared by admin
        /// and return if 'IsSaveRequired'
        /// </summary>
        /// <param name="currentUserId"></param>
        /// <param name="itemDataFrmUi"></param>
        /// <param name="itemDataToBeUpdated"></param>
        /// <param name="itemDataForComparison"></param>
        /// <param name="lstAllAttributes"></param>
        /// <returns></returns>
        private static Boolean InsertUpdateAttributeDataWithEmptyValue(Int32 currentUserId, ApplicantCmplncItemData itemDataFrmUi, ApplicantComplianceItemData itemDataToBeUpdated
                                                                   , ApplicantComplianceItemData itemDataForComparison, List<ComplianceItemAttribute> lstAllAttributes)
        {
            var _isSaveRequired = false;
            String fileUploadAttrTypeCode = ComplianceAttributeDatatypes.FileUpload.GetStringValue().ToLower().Trim();
            List<ApplicantComplianceAttributeData> attrDataListForComparision = itemDataForComparison.ApplicantComplianceAttributeDatas
                                                                                            .Where(cond => !cond.IsDeleted
                                                                                             && cond.ComplianceAttribute
                                                                                            .lkpComplianceAttributeDatatype.Code.ToLower()
                                                                                             != fileUploadAttrTypeCode).ToList();

            List<ApplicantComplianceAttributeData> attrDataListToUpdate = itemDataToBeUpdated.ApplicantComplianceAttributeDatas
                                                                                          .Where(cond => !cond.IsDeleted
                                                                                           && cond.ComplianceAttribute
                                                                                          .lkpComplianceAttributeDatatype.Code.ToLower()
                                                                                           != fileUploadAttrTypeCode).ToList();

            if (attrDataListForComparision.IsNotNull() && attrDataListForComparision.Count > AppConsts.NONE)
            {
                List<ComplianceItemAttribute> lstAttributeToAdd = lstAllAttributes.Where(cia => cia.CIA_ItemID == itemDataToBeUpdated.ComplianceItemID).ToList();

                var fileUploadAttribute = lstAttributeToAdd.FirstOrDefault(cond => cond.ComplianceAttribute.lkpComplianceAttributeDatatype.Code.ToLower()
                                                                                                                    == fileUploadAttrTypeCode);
                if (fileUploadAttribute != null)
                {
                    lstAttributeToAdd.Remove(fileUploadAttribute);
                }
                foreach (var attributeToAdd in lstAttributeToAdd)
                {
                    ApplicantComplianceAttributeData attrDataToUpdate = attrDataListToUpdate.FirstOrDefault(cond => cond.ComplianceAttributeID
                                                                                                                    == attributeToAdd.CIA_AttributeID);
                    if (attrDataToUpdate != null)
                    {
                        if (attrDataToUpdate.AttributeValue != String.Empty && attrDataToUpdate.AttributeValue != "0")
                        {
                            // itemDataFrmUi.IsDataChanged = true;
                            _isSaveRequired = true;
                            attrDataToUpdate.AttributeValue = String.Empty;
                            attrDataToUpdate.ModifiedOn = DateTime.Now;
                            attrDataToUpdate.ModifiedByID = currentUserId;
                        }
                    }
                    else
                    {
                        // itemDataFrmUi.IsDataChanged = true;
                        _isSaveRequired = true;
                        itemDataToBeUpdated.ApplicantComplianceAttributeDatas.Add(new ApplicantComplianceAttributeData
                        {
                            ComplianceAttributeID = attributeToAdd.CIA_AttributeID,
                            AttributeValue = String.Empty,
                            CreatedByID = currentUserId,
                            CreatedOn = DateTime.Now,
                            ApplicantComplianceItemID = itemDataToBeUpdated.ApplicantComplianceItemID,
                            IsDeleted = false
                        });
                    }
                }
            }
            return _isSaveRequired;
        }

        #endregion

        #endregion

        #region UAT 1722

        Boolean IComplianceDataRepository.SaveAdminDataEntry(AdminDataEntrySaveContract dataEntryContract, Int32 currentUserId,
                                                                                         List<lkpItemComplianceStatu> itemComplianceStatusList,
                                                                                         List<lkpReviewerType> reviewerTypeList, Int32 tenantId)
        {
            #region Initial Data setup

            //PackageSubscription->currentSubscriptionForComparsion is used to hold the package subscription data in database. This will be
            //used to compare Or to get any data which exists in database for package subscription
            PackageSubscription currentSubscriptionForComparsion = ClientDBContext.PackageSubscriptions.Include("ApplicantComplianceCategoryDatas")
                                                                                       .Include("ApplicantComplianceCategoryDatas.ApplicantComplianceItemDatas")
                                                                                       .FirstOrDefault(x => x.PackageSubscriptionID == dataEntryContract.PackageSubscriptionId);

            //Reset the Client DB context and get the PackageSubscription again. REset Context is require to intialize the context obeject again, so that  
            //currentSubscriptionForComparsion and currentSubscription will be from different context object. 
            //Making any changes in any of the subscription should not reflect in other subscription entity object.
            ResetClientContext();

            //PackageSubscription->currentSubscription is required to edit/update the subscription object data (item data, attribute data.
            PackageSubscription currentSubscription = ClientDBContext.PackageSubscriptions.Include("ApplicantComplianceCategoryDatas")
                                                                                        .Include("ApplicantComplianceCategoryDatas.ApplicantComplianceItemDatas")
                                                                                        .FirstOrDefault(x => x.PackageSubscriptionID == dataEntryContract.PackageSubscriptionId);
            Boolean isDataSavedRequired = false;

            List<lkpItemMovementType> lstItemMovementTypes = ClientDBContext.lkpItemMovementTypes.Where(cond => cond.IsDeleted == false).ToList();

            // List of CategoryIds associated with the Package
            var lstAssociatedCatIds = dataEntryContract.ApplicantCmplncCategoryData.Select(x => x.CatId).ToList();

            // List of ItemIds associated with the Package
            var lstAssociatedItemIds = ClientDBContext.ComplianceCategoryItems.Where(ccItem => lstAssociatedCatIds.Contains(ccItem.CCI_CategoryID)
                                                                                                && !ccItem.CCI_IsDeleted)
                                                                                               .GroupBy(grp => grp.CCI_ItemID)
                                                                                               .Select(x => x.FirstOrDefault().CCI_ItemID).ToList();

            // List of Attributes Associated with all the 'lstAssociatedItemIds' Items
            var _lstAssociatedAttributes = new List<ComplianceItemAttribute>();

            // List of CALCULATED TYPE Attributes Associated with all the 'lstAssociatedItemIds' Items
            var _lstCalculatedAttributes = new List<ComplianceItemAttribute>();

            // List of FILE UPLOAD TYPE Attributes Associated from the '_lstCalculatedAttributes' Items
            var _lstFileUploadAttributeList = new List<ComplianceItemAttribute>();
            String fileUploadAttrTypeCode = ComplianceAttributeDatatypes.FileUpload.GetStringValue().ToLower().Trim();

            List<ApplicantComplianceItemData> appCompItmDataWhichNeedsToBeRemoved = new List<ApplicantComplianceItemData>();

            if (lstAssociatedItemIds.Count > AppConsts.NONE)
            {
                _lstAssociatedAttributes = ClientDBContext.ComplianceItemAttributes.Where(cond => lstAssociatedItemIds.Contains(cond.CIA_ItemID)
                                                                                        && !cond.CIA_IsDeleted
                                                                                        && cond.CIA_IsActive).ToList();

                _lstCalculatedAttributes = _lstAssociatedAttributes.Where(cond => lstAssociatedItemIds.Contains(cond.CIA_ItemID)
                                                                       && cond.ComplianceAttribute.lkpComplianceAttributeType.Code.ToLower() == ComplianceAttributeType.Calculated.GetStringValue().ToLower())
                                                                   .ToList();

                _lstFileUploadAttributeList = _lstAssociatedAttributes.Where(cond => cond.ComplianceAttribute.lkpComplianceAttributeDatatype.Code.ToLower() == fileUploadAttrTypeCode).ToList();
            }

            #endregion
            if (!dataEntryContract.ApplicantCmplncCategoryData.IsNullOrEmpty())
            {
                foreach (ApplicantCmplncCategoryData categoryData in dataEntryContract.ApplicantCmplncCategoryData)
                {
                    List<ListItemAssignmentProperties> lstItemAssignmentProperties = GetAssignmentPropertiesByCategoryId(dataEntryContract.PackageId, categoryData.CatId);
                    ApplicantComplianceCategoryData categoryDataToUpdate = currentSubscription.ApplicantComplianceCategoryDatas
                                                                                               .FirstOrDefault(x => x.ComplianceCategoryID == categoryData.CatId
                                                                                               && x.IsDeleted == false);
                    //If Category Data is already existing in DB then update Category data
                    if (categoryDataToUpdate.IsNotNull())
                    {

                        categoryDataToUpdate.ModifiedOn = DateTime.Now;
                        categoryDataToUpdate.ModifiedByID = currentUserId;

                        List<ApplicantComplianceItemData> itemDataListInDb = categoryDataToUpdate.ApplicantComplianceItemDatas.Where(cond => !cond.IsDeleted).ToList();


                        //This is required as during Item Data swapped, itemDataListInDb gets updated. So this object will give actual data which is
                        //currently present in database before data save.
                        List<ApplicantComplianceItemData> itemDataListFromDBForComparsion = GetApplicantComplianceItemData(currentSubscriptionForComparsion, categoryData.AccdId)
                                                                                                            .ApplicantComplianceItemDatas
                                                                                                            .Where(x => x.IsDeleted == false)
                                                                                                            .ToList();
                        if (!categoryData.ApplicantCmplncItemData.IsNullOrEmpty())
                        {
                            //UAT-1711 related changes.
                            String itemIds = String.Join(",", categoryData.ApplicantCmplncItemData.Select(col => col.ItmId).ToList());
                            List<ItemReconciliationAvailiblityContract> lstItemReconciliationStatus = GetItemReconciliationAvailiblityStatus(tenantId, itemIds, dataEntryContract.PackageSubscriptionId);
                            foreach (var _currentItem in categoryData.ApplicantCmplncItemData)
                            {
                                //UAT-1711 related changes.
                                ItemReconciliationAvailiblityContract itemReconciliationStatus = lstItemReconciliationStatus
                                                                                                .FirstOrDefault(cond => cond.ItemID == _currentItem.ItmId);
                                Int32? itemReviewerCount = null;
                                if (itemReconciliationStatus.IsSelected)
                                {
                                    itemReviewerCount = itemReconciliationStatus.ReviewerCount;
                                }

                                var _isItemDataChangeRequired = IsItemDataChangeRequired(_currentItem);

                                var _isExceptionAppliedForCurrentItm = false;

                                // Handle CASE 4 - Check the condition if Item was swapped with any Item with Status of Exception Type.
                                if ((_currentItem.IsItemSwapped && IsItemStatusException(_currentItem.NewStatuscode)) || IsItemStatusException(_currentItem.NewStatuscode))
                                {
                                    _isExceptionAppliedForCurrentItm = true;
                                }

                                if (_currentItem.AcidId == AppConsts.NONE && (_isItemDataChangeRequired || _currentItem.IsItemSwapped))
                                {
                                    #region Item to be Added

                                    ComplianceItemAttribute fileUploadTypeAttribute = _lstFileUploadAttributeList.FirstOrDefault(cond => cond.CIA_ItemID == _currentItem.ItmId);

                                    if (IsDataChangeCheckRequired(_isExceptionAppliedForCurrentItm, _currentItem.AttribuetFilledCount))
                                    {
                                        _currentItem.IsDataChanged = CheckIfItemDataIsUpdated(itemDataListFromDBForComparsion, _currentItem);
                                    }
                                    Int32 complianceItemID = (_currentItem.IsItemSwapped) ? _currentItem.SwappedItmId : _currentItem.ItmId;
                                    ApplicantComplianceItemData itemDataForComparison = itemDataListFromDBForComparsion
                                                                                        .FirstOrDefault(cond => cond.ComplianceItemID == complianceItemID);


                                    if (_isExceptionAppliedForCurrentItm
                                        || _isItemDataChangeRequired
                                        || (_currentItem.IsItemSwapped && itemDataForComparison.IsNotNull())
                                      ) // Covers the case when it was swapped with ANY item having different attribute groups
                                    {
                                        ApplicantComplianceItemData newItemData = AddApplicantComplianceItemData(currentUserId, categoryDataToUpdate, _currentItem.ItmId);

                                        SetItemAssignmentProperties(newItemData, lstItemAssignmentProperties, itemComplianceStatusList,
                                                                    reviewerTypeList, lstItemMovementTypes, _currentItem);


                                        if ((!_isExceptionAppliedForCurrentItm && _isItemDataChangeRequired)
                                            ||
                                            (_isExceptionAppliedForCurrentItm && _currentItem.IsDataChanged)
                                            )
                                        {
                                            List<ApplicantCmplncAttrData> attrDataListToAdd = _currentItem.ApplicantCmplncAttrData.Where(x => x.AcadId == 0).ToList();
                                            InsertComplianceAttributeData(currentUserId, attrDataListToAdd, newItemData, _lstCalculatedAttributes);
                                        }
                                        else if (!_isExceptionAppliedForCurrentItm && _currentItem.IsItemSwapped)
                                        {
                                            //If itemDataForComparison contains only FileUploadType attrbiute then donot call insert methods                                    
                                            //else insert all attributes except FileUpload
                                            List<ApplicantCmplncAttrData> lstAttributeToAdd = _lstAssociatedAttributes.Where(cia => cia.CIA_ItemID == _currentItem.ItmId
                                                                                                 && cia.ComplianceAttribute.lkpComplianceAttributeDatatype.Code.ToLower() != fileUploadAttrTypeCode)
                                                                                               .Select(cia => new ApplicantCmplncAttrData
                                                                                               {
                                                                                                   AcadId = AppConsts.NONE,
                                                                                                   AttrValue = String.Empty,
                                                                                                   AttrId = cia.CIA_AttributeID
                                                                                               }).ToList();

                                            InsertComplianceAttributeData(currentUserId, lstAttributeToAdd, newItemData, _lstCalculatedAttributes);
                                        }

                                        if (_currentItem.IsItemSwapped || _currentItem.IsDataChanged || _currentItem.IsDocAssociationReq)
                                        {
                                            AssociatDocsWithCurrentItem(dataEntryContract.DoccumentId, currentUserId, fileUploadTypeAttribute, newItemData,
                                                                        itemDataListFromDBForComparsion, _currentItem, _isExceptionAppliedForCurrentItm);
                                        }

                                        if (!_isExceptionAppliedForCurrentItm &&
                                           newItemData.lkpItemComplianceStatu.Code == ApplicantItemComplianceStatus.Pending_Review.GetStringValue())
                                        {
                                            //UAT-1712
                                            newItemData.ReconciliationReviewCount = itemReviewerCount;
                                        }

                                        //UAT 2528
                                        newItemData.IsUiRulesViolate = _currentItem.IsUiRulesViolate;

                                        categoryDataToUpdate.ApplicantComplianceItemDatas.Add(newItemData);
                                        isDataSavedRequired = true;
                                    }

                                    #endregion
                                }
                                else if (_currentItem.AcidId > AppConsts.NONE)
                                {

                                    #region Item to be updated

                                    ComplianceItemAttribute fileUploadTypeAttribute = _lstFileUploadAttributeList.FirstOrDefault(cond => cond.CIA_ItemID == _currentItem.ItmId);
                                    ApplicantComplianceItemData itemDataToBeUpdated = itemDataListInDb.FirstOrDefault(x => x.ApplicantComplianceItemID == _currentItem.AcidId);
                                    _currentItem.ReconciliationReviewCount = itemDataToBeUpdated.ReconciliationReviewCount;

                                    //UAT 2528
                                    if (itemDataToBeUpdated.IsUiRulesViolate != _currentItem.IsUiRulesViolate)
                                    {
                                        itemDataToBeUpdated.IsUiRulesViolate = _currentItem.IsUiRulesViolate;
                                        isDataSavedRequired = true;
                                    }

                                    if (_currentItem.IsItemSwapped)
                                    {
                                        #region Manage Items which were Swapped



                                        var _isCrntItemExceptionType = IsItemStatusException(_currentItem.NewStatuscode);

                                        // If data was NOT changed for Any incomplete or Exception Applied, then enter the condition
                                        if ((_currentItem.NewStatuscode == ApplicantItemComplianceStatus.Incomplete.GetStringValue()
                                                                        ||
                                               _isExceptionAppliedForCurrentItm) && _currentItem.AttribuetFilledCount == AppConsts.NONE
                                        )
                                        {
                                            Int32 complianceItemID = (_currentItem.IsItemSwapped) ? _currentItem.SwappedItmId : _currentItem.ItmId;
                                            ApplicantComplianceItemData _itemDataForComparison = itemDataListFromDBForComparsion
                                                                                                .FirstOrDefault(cond => cond.ComplianceItemID == complianceItemID);

                                            // Mark the Item for Deletion, which was swapped with an incomplete item with NO Documents.
                                            if (_currentItem.NewStatuscode == ApplicantItemComplianceStatus.Incomplete.GetStringValue()
                                             && _itemDataForComparison.IsNull())
                                            {
                                                appCompItmDataWhichNeedsToBeRemoved.Add(itemDataToBeUpdated);
                                            }
                                            // Update the Documents of Item swapped with 'Incomplete Item with Documents' & keep it in 'Incomplete' Status
                                            else if (_currentItem.NewStatuscode == ApplicantItemComplianceStatus.Incomplete.GetStringValue()
                                             && _itemDataForComparison.ApplicantComplianceItemID.IsNotNull()
                                             && _itemDataForComparison.ApplicantComplianceItemID > AppConsts.NONE)
                                            {
                                                itemDataToBeUpdated.StatusID = itemComplianceStatusList.Where(ists => ists.Code == ApplicantItemComplianceStatus.Incomplete.GetStringValue()).First().ItemComplianceStatusID;
                                                itemDataToBeUpdated.ExceptionReason = String.Empty;
                                                itemDataToBeUpdated.ModifiedOn = DateTime.Now;
                                                itemDataToBeUpdated.ModifiedByID = currentUserId;
                                                isDataSavedRequired = true;

                                                foreach (ApplicantComplianceAttributeData attrDataToDelete in itemDataToBeUpdated.ApplicantComplianceAttributeDatas)
                                                {
                                                    attrDataToDelete.IsDeleted = true;
                                                    attrDataToDelete.ModifiedOn = DateTime.Now;
                                                    attrDataToDelete.ModifiedByID = currentUserId;
                                                    isDataSavedRequired = true;
                                                }

                                                AssociatDocsWithCurrentItem(dataEntryContract.DoccumentId, currentUserId, fileUploadTypeAttribute, itemDataToBeUpdated,
                                                                            itemDataListFromDBForComparsion, _currentItem, _isExceptionAppliedForCurrentItm);

                                            }
                                            else if (_isExceptionAppliedForCurrentItm)
                                            {
                                                // Delete the attributes for Any item which is becoming Exception type
                                                AssociatDocsWithCurrentItem(dataEntryContract.DoccumentId, currentUserId, fileUploadTypeAttribute, itemDataToBeUpdated,
                                                                            itemDataListFromDBForComparsion, _currentItem, _isExceptionAppliedForCurrentItm);

                                                SetItemAssignmentProperties(itemDataToBeUpdated, lstItemAssignmentProperties, itemComplianceStatusList,
                                                                            reviewerTypeList, lstItemMovementTypes, _currentItem);

                                                itemDataToBeUpdated.ModifiedOn = DateTime.Now;
                                                itemDataToBeUpdated.ModifiedByID = currentUserId;
                                                isDataSavedRequired = true;

                                                foreach (ApplicantComplianceAttributeData attrDataToDelete in itemDataToBeUpdated.ApplicantComplianceAttributeDatas)
                                                {
                                                    attrDataToDelete.IsDeleted = true;
                                                    attrDataToDelete.ModifiedOn = DateTime.Now;
                                                    attrDataToDelete.ModifiedByID = currentUserId;
                                                    isDataSavedRequired = true;
                                                }
                                            }

                                            if (_currentItem.IsDataChanged || _currentItem.IsItemSwapped || _currentItem.IsDocAssociationReq)
                                            {
                                                if (itemDataToBeUpdated.lkpItemComplianceStatu.IsNotNull()
                                                   && itemDataToBeUpdated.lkpItemComplianceStatu.Code == ApplicantItemComplianceStatus.Pending_Review.GetStringValue())
                                                {
                                                    //UAT-1712 //TODO
                                                    itemDataToBeUpdated.ReconciliationReviewCount = itemReviewerCount;
                                                }
                                                else
                                                {
                                                    itemDataToBeUpdated.ReconciliationReviewCount = null;
                                                }

                                                Boolean notAssesedMultiReview = itemDataToBeUpdated.lkpItemComplianceStatu.Code != ApplicantItemComplianceStatus.Pending_Review.GetStringValue();
                                                ComplianceItemSubmissionHistory itemStatusHistory = InsertItemSubmissionHistory(itemDataToBeUpdated.ReconciliationReviewCount, currentUserId, itemDataToBeUpdated.SubmissionDate, notAssesedMultiReview);
                                                itemStatusHistory.ApplicantComplianceItemData = itemDataToBeUpdated;
                                                ClientDBContext.ComplianceItemSubmissionHistories.AddObject(itemStatusHistory);
                                            }
                                        }
                                        else
                                        {
                                            #region Manage Updating of Items which were Swapped

                                            ApplicantComplianceItemData itemDataForComparison = itemDataListFromDBForComparsion.FirstOrDefault(cond => cond.ComplianceItemID == _currentItem.SwappedItmId);

                                            if (IsDataChangeCheckRequired(_isExceptionAppliedForCurrentItm, _currentItem.AttribuetFilledCount))
                                            {
                                                _currentItem.IsDataChanged = CheckIfItemDataIsUpdated(itemDataListFromDBForComparsion, _currentItem);
                                            }

                                            //Update existing compliance attribute data only when there is change in item/attribute data
                                            if ((_currentItem.IsDataChanged || _currentItem.IsItemSwapped) && _currentItem.AttribuetFilledCount > AppConsts.NONE)
                                            {
                                                UpdateExistingComplianceAttributeData(currentUserId, _currentItem, itemDataToBeUpdated);

                                                List<ApplicantCmplncAttrData> attrDataListToAdd = _currentItem.ApplicantCmplncAttrData.Where(x => x.AcadId == AppConsts.NONE).ToList();
                                                InsertComplianceAttributeData(currentUserId, attrDataListToAdd, itemDataToBeUpdated, _lstCalculatedAttributes);

                                                AssociatDocsWithCurrentItem(dataEntryContract.DoccumentId, currentUserId, fileUploadTypeAttribute, itemDataToBeUpdated,
                                                                       itemDataListFromDBForComparsion, _currentItem, false);

                                                SetItemAssignmentProperties(itemDataToBeUpdated, lstItemAssignmentProperties, itemComplianceStatusList,
                                                                            reviewerTypeList, lstItemMovementTypes, _currentItem);

                                                itemDataToBeUpdated.ExceptionReason = String.Empty;
                                                itemDataToBeUpdated.ModifiedOn = DateTime.Now;
                                                itemDataToBeUpdated.ModifiedByID = currentUserId;
                                                isDataSavedRequired = true;
                                            }
                                            else if (!_currentItem.IsDataChanged && _currentItem.AttribuetFilledCount == AppConsts.NONE && !itemDataForComparison.ApplicantComplianceAttributeDatas.IsNullOrEmpty())
                                            {
                                                if (InsertUpdateAttributeDataWithEmptyValue(currentUserId, _currentItem, itemDataToBeUpdated, itemDataForComparison, _lstAssociatedAttributes))
                                                {
                                                    itemDataToBeUpdated.ExceptionReason = String.Empty;
                                                    itemDataToBeUpdated.ModifiedOn = DateTime.Now;
                                                    itemDataToBeUpdated.ModifiedByID = currentUserId;

                                                    // If there was any attribute in Item2 (with which current item was swapped), having some value & is not FileUploadType
                                                    // implies that the data was cleared from the attributes after swapping. So there is Data Change and current document 
                                                    // needs to be attached to it.
                                                    if (itemDataForComparison.ApplicantComplianceAttributeDatas.Where(att => att.ComplianceAttribute.lkpComplianceAttributeDatatype.Code
                                                                                                                      != ComplianceAttributeDatatypes.FileUpload.GetStringValue()
                                                                                                                      && !att.IsDeleted
                                                                                                                      && !String.IsNullOrEmpty(att.AttributeValue))
                                                                                                               .Any())
                                                    {
                                                        _currentItem.IsDataChanged = true;
                                                    }

                                                    AssociatDocsWithCurrentItem(dataEntryContract.DoccumentId, currentUserId, fileUploadTypeAttribute, itemDataToBeUpdated,
                                                                                itemDataListFromDBForComparsion, _currentItem, false);

                                                    SetItemAssignmentProperties(itemDataToBeUpdated, lstItemAssignmentProperties, itemComplianceStatusList,
                                                                                reviewerTypeList, lstItemMovementTypes, _currentItem);

                                                    isDataSavedRequired = true;
                                                }
                                            }
                                            if (_currentItem.IsDataChanged || _currentItem.IsItemSwapped || _currentItem.IsDocAssociationReq)
                                            {
                                                if (itemDataToBeUpdated.lkpItemComplianceStatu.IsNotNull()
                                                   && itemDataToBeUpdated.lkpItemComplianceStatu.Code == ApplicantItemComplianceStatus.Pending_Review.GetStringValue())
                                                {
                                                    //UAT-1712 //TODO
                                                    itemDataToBeUpdated.ReconciliationReviewCount = itemReviewerCount;
                                                }
                                                else
                                                {
                                                    itemDataToBeUpdated.ReconciliationReviewCount = null;
                                                }
                                                Boolean notAssesedMultiReview = itemDataToBeUpdated.lkpItemComplianceStatu.Code != ApplicantItemComplianceStatus.Pending_Review.GetStringValue();
                                                ComplianceItemSubmissionHistory itemStatusHistory = InsertItemSubmissionHistory(itemDataToBeUpdated.ReconciliationReviewCount, currentUserId, itemDataToBeUpdated.SubmissionDate, notAssesedMultiReview);
                                                itemStatusHistory.ApplicantComplianceItemData = itemDataToBeUpdated;
                                                ClientDBContext.ComplianceItemSubmissionHistories.AddObject(itemStatusHistory);
                                            }
                                            #endregion
                                        }

                                        #endregion
                                    }
                                    else
                                    {
                                        #region Manage Items which were Updated But Not Swapped
                                        //UAT-2570
                                        Boolean needToSetPendingReview = false;

                                        if (IsDataChangeCheckRequired(_isExceptionAppliedForCurrentItm, _currentItem.AttribuetFilledCount))
                                        {
                                            _currentItem.IsDataChanged = CheckIfItemDataIsUpdated(itemDataListFromDBForComparsion, _currentItem);
                                        }
                                        //UAT-2570
                                        if (_isExceptionAppliedForCurrentItm && !_currentItem.IsDataChanged && _currentItem.IsDocAssociationReq && !_currentItem.IsDocAssociatedByDataChange
                                             && _currentItem.OldStatusCode != ApplicantItemComplianceStatus.Approved_With_Exception.GetStringValue())
                                        {
                                            _currentItem.IsDataChanged = true;
                                            needToSetPendingReview = true;
                                        }

                                        ApplicantComplianceItemData itemDataForComparison = itemDataListFromDBForComparsion.FirstOrDefault(cond => cond.ComplianceItemID == _currentItem.ItmId);

                                        //Update existing compliance attribute data only when there is change in item/attribute data
                                        // Or Item data was completely cleared (In this case, 'IsDataChanged' returns False. So OR condition is added)
                                        if (_currentItem.IsDataChanged)
                                        {
                                            UpdateExistingComplianceAttributeData(currentUserId, _currentItem, itemDataToBeUpdated);

                                            List<ApplicantCmplncAttrData> attrDataListToAdd = _currentItem.ApplicantCmplncAttrData.Where(x => x.AcadId == AppConsts.NONE).ToList();
                                            InsertComplianceAttributeData(currentUserId, attrDataListToAdd, itemDataToBeUpdated, _lstCalculatedAttributes);

                                            AssociatDocsWithCurrentItem(dataEntryContract.DoccumentId, currentUserId, fileUploadTypeAttribute, itemDataToBeUpdated,
                                                                       itemDataListFromDBForComparsion, _currentItem, false);

                                            //UAT-2570
                                            if (needToSetPendingReview && (_currentItem.OldStatusCode == ApplicantItemComplianceStatus.Applied_For_Exception.GetStringValue()
                                                || _currentItem.OldStatusCode == ApplicantItemComplianceStatus.Exception_Rejected.GetStringValue()
                                               ))
                                            {
                                                _currentItem.NewStatuscode = ApplicantItemComplianceStatus.Pending_Review.GetStringValue();
                                            }
                                            SetItemAssignmentProperties(itemDataToBeUpdated, lstItemAssignmentProperties, itemComplianceStatusList,
                                                                        reviewerTypeList, lstItemMovementTypes, _currentItem);

                                            itemDataToBeUpdated.ExceptionReason = String.Empty;
                                            itemDataToBeUpdated.ModifiedOn = DateTime.Now;
                                            itemDataToBeUpdated.ModifiedByID = currentUserId;
                                            isDataSavedRequired = true;
                                        }
                                        else if (!_currentItem.IsDataChanged && _currentItem.AttribuetFilledCount == AppConsts.NONE && !itemDataForComparison.ApplicantComplianceAttributeDatas.IsNullOrEmpty())
                                        {
                                            // Case : Any Item for which all the attributes are getting cleared by User. In such a case '_currentItem.IsDataChanged' is False  
                                            if (InsertUpdateAttributeDataWithEmptyValue(currentUserId, _currentItem, itemDataToBeUpdated, itemDataForComparison, _lstAssociatedAttributes))
                                            {
                                                // To allow association of the document, when there was no swapping and all the attributes of the item were cleared by admin
                                                _currentItem.IsDataChanged = true;
                                                AssociatDocsWithCurrentItem(dataEntryContract.DoccumentId, currentUserId, fileUploadTypeAttribute, itemDataToBeUpdated,
                                                                           itemDataListFromDBForComparsion, _currentItem, false);

                                                SetItemAssignmentProperties(itemDataToBeUpdated, lstItemAssignmentProperties, itemComplianceStatusList,
                                                                            reviewerTypeList, lstItemMovementTypes, _currentItem);

                                                isDataSavedRequired = true;
                                            }
                                        }

                                        if (_currentItem.IsDocAssociationReq && !_currentItem.IsDocAssociatedByDataChange)
                                        {
                                            var _isDocSaveRequired = AssociateExplicitDocumentOverrideStatus(dataEntryContract, currentUserId, itemComplianceStatusList, reviewerTypeList, lstItemMovementTypes,
                                                                                                             lstItemAssignmentProperties, itemDataListFromDBForComparsion, _currentItem, itemDataToBeUpdated, true); //UAT-2570

                                            // Update 'isDataSavedRequired' Only if Document save is required
                                            // Else even if '_isDocSaveRequired' is False, it will update 'isDataSavedRequired' to False
                                            // and no data will be saved
                                            if (_isDocSaveRequired && !isDataSavedRequired)
                                            {
                                                isDataSavedRequired = true;
                                            }
                                        }

                                        if ((_currentItem.IsDataChanged || _currentItem.IsDocAssociationReq) &&
                                            itemDataToBeUpdated.lkpItemComplianceStatu.IsNotNull() &&
                                            itemDataToBeUpdated.lkpItemComplianceStatu.Code == ApplicantItemComplianceStatus.Pending_Review.GetStringValue())
                                        {
                                            //UAT-1712 
                                            itemDataToBeUpdated.ReconciliationReviewCount = itemReviewerCount;
                                        }

                                        if (_currentItem.IsDataChanged || _currentItem.IsDocAssociationReq)
                                        {
                                            Boolean notAssesedMultiReview = itemDataToBeUpdated.lkpItemComplianceStatu.Code != ApplicantItemComplianceStatus.Pending_Review.GetStringValue();
                                            ComplianceItemSubmissionHistory itemStatusHistory = InsertItemSubmissionHistory(itemDataToBeUpdated.ReconciliationReviewCount, currentUserId, itemDataToBeUpdated.SubmissionDate, notAssesedMultiReview);
                                            itemStatusHistory.ApplicantComplianceItemData = itemDataToBeUpdated;
                                            ClientDBContext.ComplianceItemSubmissionHistories.AddObject(itemStatusHistory);
                                        }
                                        #endregion
                                    }
                                    #endregion
                                }
                            }
                        }
                    }
                    else
                    {
                        #region If Category Data does not exists' in DB then Add all the data, upto document level, if applicable

                        String categoryComplianceStatus = ApplicantCategoryComplianceStatus.Incomplete.GetStringValue();
                        Int32 categoryComplianceStatusId = ClientDBContext.lkpCategoryComplianceStatus
                                                                          .Where(catStatus => catStatus.Code.ToLower().Trim() == categoryComplianceStatus.ToLower().Trim())
                                                                          .FirstOrDefault().CategoryComplianceStatusID;

                        #region Generate New 'ApplicantComplianceCategoryData' Instance

                        ApplicantComplianceCategoryData newCategoryData = new ApplicantComplianceCategoryData();
                        newCategoryData.PackageSubscriptionID = dataEntryContract.PackageSubscriptionId;
                        newCategoryData.ComplianceCategoryID = categoryData.CatId;
                        newCategoryData.StatusID = categoryComplianceStatusId;
                        newCategoryData.CreatedOn = DateTime.Now;
                        newCategoryData.CreatedByID = currentUserId;

                        #endregion

                        Boolean catDataToBeAdded = false;

                        #region Generate Item and Attributes

                        if (!categoryData.ApplicantCmplncItemData.IsNullOrEmpty())
                        {
                            String itemIds = String.Join(",", categoryData.ApplicantCmplncItemData.Select(col => col.ItmId).ToList());
                            List<ItemReconciliationAvailiblityContract> lstItemReconciliationStatus = GetItemReconciliationAvailiblityStatus(tenantId, itemIds, dataEntryContract.PackageSubscriptionId);

                            foreach (ApplicantCmplncItemData itemDataToAdd in categoryData.ApplicantCmplncItemData)
                            {
                                ItemReconciliationAvailiblityContract itemReconciliationStatus = lstItemReconciliationStatus
                                                               .FirstOrDefault(cond => cond.ItemID == itemDataToAdd.ItmId);
                                Int32? itemReviewerCount = null;
                                if (itemReconciliationStatus.IsSelected)
                                {
                                    itemReviewerCount = itemReconciliationStatus.ReviewerCount;
                                }

                                ComplianceItemAttribute fileUploadTypeAttribute = _lstFileUploadAttributeList.FirstOrDefault(cond => cond.CIA_ItemID == itemDataToAdd.ItmId);

                                // Add the new item only
                                // 1. if any data was entered for any attribute OR  
                                // 2. No data was entered but document was associted and had a file upload attribute type
                                if (IsItemDataChangeRequired(itemDataToAdd))
                                {
                                    catDataToBeAdded = true;

                                    #region Add new 'ApplicantComplianceItemData' & 'ApplicantCmplncAttrData' and Associate Document, if applicable

                                    ApplicantComplianceItemData newItemData = AddApplicantComplianceItemData(currentUserId, newCategoryData, itemDataToAdd.ItmId);
                                    //UAT2528
                                    newItemData.IsUiRulesViolate = itemDataToAdd.IsUiRulesViolate;
                                    List<ApplicantCmplncAttrData> attrDataListToAdd = itemDataToAdd.ApplicantCmplncAttrData.Where(x => x.AcadId == AppConsts.NONE).ToList();
                                    InsertComplianceAttributeData(currentUserId, attrDataListToAdd, newItemData, _lstCalculatedAttributes);
                                    itemDataToAdd.IsDataChanged = true;

                                    SetItemAssignmentProperties(newItemData, lstItemAssignmentProperties, itemComplianceStatusList,
                                                                reviewerTypeList, lstItemMovementTypes, itemDataToAdd);

                                    // Case when NO data was entered but document was associated, is also covered
                                    // by 'IsInsertItemRequired' if condition
                                    //if (itemDataToAdd.IsDataChanged)
                                    //{

                                    //UAT-1712
                                    var itemComplianceStatus = itemComplianceStatusList.FirstOrDefault(x => x.ItemComplianceStatusID == newItemData.StatusID);

                                    if (itemComplianceStatus.IsNotNull() && itemComplianceStatus.Code == ApplicantItemComplianceStatus.Pending_Review.GetStringValue())
                                    {
                                        newItemData.ReconciliationReviewCount = itemReviewerCount;
                                    }
                                    AssociatDocsWithCurrentItem(dataEntryContract.DoccumentId, currentUserId, fileUploadTypeAttribute,
                                                                newItemData, null, itemDataToAdd, false);
                                    //}

                                    Boolean notAssesedMultiReview = itemComplianceStatus.Code != ApplicantItemComplianceStatus.Pending_Review.GetStringValue();
                                    ComplianceItemSubmissionHistory itemStatusHistory = InsertItemSubmissionHistory(newItemData.ReconciliationReviewCount, currentUserId, newItemData.SubmissionDate, notAssesedMultiReview);
                                    itemStatusHistory.ApplicantComplianceItemData = newItemData;
                                    ClientDBContext.ComplianceItemSubmissionHistories.AddObject(itemStatusHistory);
                                    #endregion

                                    newCategoryData.ApplicantComplianceItemDatas.Add(newItemData);
                                    isDataSavedRequired = true;
                                }
                            }
                        }

                        #endregion

                        if (catDataToBeAdded)
                        {
                            isDataSavedRequired = true;
                            ClientDBContext.ApplicantComplianceCategoryDatas.AddObject(newCategoryData);
                        }

                        #endregion
                    }
                }
            }

            appCompItmDataWhichNeedsToBeRemoved.ForEach(acid =>
            {
                isDataSavedRequired = true;

                // delete item and attribute.
                acid.IsDeleted = true;
                acid.ModifiedOn = DateTime.Now;
                acid.ModifiedByID = currentUserId;

                acid.ApplicantComplianceAttributeDatas.Where(cond => !cond.IsDeleted).ForEach(acad =>
                {
                    if (acad.IsNotNull())
                    {
                        acad.IsDeleted = true;
                        acad.ModifiedOn = DateTime.Now;
                        acad.ModifiedByID = currentUserId;

                        if (acad.ApplicantComplianceDocumentMaps.IsNotNull())
                        {
                            acad.ApplicantComplianceDocumentMaps.Where(cond => !cond.IsDeleted).ForEach(acdm =>
                            {
                                acdm.IsDeleted = true;
                                acdm.ModifiedByID = currentUserId;
                                acdm.ModifiedOn = DateTime.Now;
                            });
                        }
                    }
                });
            });

            if (isDataSavedRequired)
            {
                ClientDBContext.SaveChanges();
            }
            return isDataSavedRequired;
        }

        //Boolean IComplianceDataRepository.SaveAdminDataEntry(AdminDataEntrySaveContract dataEntryContract, Int32 currentUserId,
        //                                                                                 List<lkpItemComplianceStatu> itemComplianceStatusList,
        //                                                                                 List<lkpReviewerType> reviewerTypeList)
        //{
        //    #region Initial Data setup

        //    //PackageSubscription->currentSubscriptionForComparsion is used to hold the package subscription data in database. This will be
        //    //used to compare Or to get any data which exists in database for package subscription
        //    PackageSubscription currentSubscriptionForComparsion = ClientDBContext.PackageSubscriptions.Include("ApplicantComplianceCategoryDatas")
        //                                                                               .Include("ApplicantComplianceCategoryDatas.ApplicantComplianceItemDatas")
        //                                                                               .FirstOrDefault(x => x.PackageSubscriptionID == dataEntryContract.PackageSubscriptionId);

        //    //Reset the Client DB context and get the PackageSubscription again. REset Context is require to intialize the context obeject again, so that  
        //    //currentSubscriptionForComparsion and currentSubscription will be from different context object. 
        //    //Making any changes in any of the subscription should not reflect in other subscription entity object.
        //    ResetClientContext();

        //    //PackageSubscription->currentSubscription is required to edit/update the subscription object data (item data, attribute data.
        //    PackageSubscription currentSubscription = ClientDBContext.PackageSubscriptions.Include("ApplicantComplianceCategoryDatas")
        //                                                                                .Include("ApplicantComplianceCategoryDatas.ApplicantComplianceItemDatas")
        //                                                                                .FirstOrDefault(x => x.PackageSubscriptionID == dataEntryContract.PackageSubscriptionId);
        //    Boolean isDataSavedRequired = false;

        //    List<lkpItemMovementType> lstItemMovementTypes = ClientDBContext.lkpItemMovementTypes.Where(cond => cond.IsDeleted == false).ToList();

        //    // List of CategoryIds associated with the Package
        //    var lstAssociatedCatIds = dataEntryContract.ApplicantCmplncCategoryData.Select(x => x.CatId).ToList();

        //    // List of ItemIds associated with the Package
        //    var lstAssociatedItemIds = ClientDBContext.ComplianceCategoryItems.Where(ccItem => lstAssociatedCatIds.Contains(ccItem.CCI_CategoryID)
        //                                                                                        && !ccItem.CCI_IsDeleted)
        //                                                                                       .GroupBy(grp => grp.CCI_ItemID)
        //                                                                                       .Select(x => x.FirstOrDefault().CCI_ItemID).ToList();

        //    // List of Attributes Associated with all the 'lstAssociatedItemIds' Items
        //    var _lstAssociatedAttributes = new List<ComplianceItemAttribute>();

        //    // List of CALCULATED TYPE Attributes Associated with all the 'lstAssociatedItemIds' Items
        //    var _lstCalculatedAttributes = new List<ComplianceItemAttribute>();

        //    // List of FILE UPLOAD TYPE Attributes Associated from the '_lstCalculatedAttributes' Items
        //    var _lstFileUploadAttributeList = new List<ComplianceItemAttribute>();
        //    String fileUploadAttrTypeCode = ComplianceAttributeDatatypes.FileUpload.GetStringValue().ToLower().Trim();

        //    List<ApplicantComplianceItemData> appCompItmDataWhichNeedsToBeRemoved = new List<ApplicantComplianceItemData>();

        //    if (lstAssociatedItemIds.Count > AppConsts.NONE)
        //    {
        //        _lstAssociatedAttributes = ClientDBContext.ComplianceItemAttributes.Where(cond => lstAssociatedItemIds.Contains(cond.CIA_ItemID)
        //                                                                                && !cond.CIA_IsDeleted
        //                                                                                && cond.CIA_IsActive).ToList();

        //        _lstCalculatedAttributes = _lstAssociatedAttributes.Where(cond => lstAssociatedItemIds.Contains(cond.CIA_ItemID)
        //                                                               && cond.ComplianceAttribute.lkpComplianceAttributeType.Code.ToLower() == ComplianceAttributeType.Calculated.GetStringValue().ToLower())
        //                                                           .ToList();

        //        _lstFileUploadAttributeList = _lstAssociatedAttributes.Where(cond => cond.ComplianceAttribute.lkpComplianceAttributeDatatype.Code.ToLower() == fileUploadAttrTypeCode).ToList();
        //    }

        //    #endregion

        //    if (!dataEntryContract.ApplicantCmplncCategoryData.IsNullOrEmpty())
        //    {
        //        foreach (ApplicantCmplncCategoryData categoryData in dataEntryContract.ApplicantCmplncCategoryData)
        //        {
        //            List<ListItemAssignmentProperties> lstItemAssignmentProperties = GetAssignmentPropertiesByCategoryId(dataEntryContract.PackageId, categoryData.CatId);
        //            ApplicantComplianceCategoryData categoryDataToUpdate = currentSubscription.ApplicantComplianceCategoryDatas
        //                                                                                       .FirstOrDefault(x => x.ApplicantComplianceCategoryID == categoryData.AccdId
        //                                                                                       && x.ComplianceCategoryID == categoryData.CatId
        //                                                                                       && x.IsDeleted == false);
        //            //If Category Data is already existing in DB then update Category data
        //            if (categoryDataToUpdate.IsNotNull())
        //            {
        //                if (!categoryData.ApplicantCmplncItemData.IsNullOrEmpty())
        //                {
        //                    categoryDataToUpdate.ModifiedOn = DateTime.Now;
        //                    categoryDataToUpdate.ModifiedByID = currentUserId;

        //                    List<ApplicantComplianceItemData> itemDataListInDb = categoryDataToUpdate.ApplicantComplianceItemDatas.Where(cond => !cond.IsDeleted).ToList();


        //                    //This is required as during Item Data swapped, itemDataListInDb gets updated. So this object will give actual data which is
        //                    //currently present in database before data save.
        //                    List<ApplicantComplianceItemData> itemDataListFromDBForComparsion = GetApplicantComplianceItemData(currentSubscriptionForComparsion, categoryData.AccdId)
        //                                                                                                        .ApplicantComplianceItemDatas
        //                                                                                                        .Where(x => x.IsDeleted == false)
        //                                                                                                        .ToList();
        //                    foreach (var _currentItem in categoryData.ApplicantCmplncItemData)
        //                    {
        //                        var _isItemDataChangeRequired = IsItemDataChangeRequired(_currentItem);

        //                        var _isExceptionAppliedForCurrentItm = false;

        //                        // Handle CASE 4 - Check the condition if Item was swapped with any Item with Status of Exception Type.
        //                        if ((_currentItem.IsItemSwapped && IsItemStatusException(_currentItem.NewStatuscode)) || IsItemStatusException(_currentItem.NewStatuscode))
        //                        {
        //                            _isExceptionAppliedForCurrentItm = true;
        //                        }

        //                        // Add new Item  
        //                        if (_currentItem.AcidId == AppConsts.NONE)
        //                        {
        //                            #region Item to be Added

        //                            ComplianceItemAttribute fileUploadTypeAttribute = _lstFileUploadAttributeList.FirstOrDefault(cond => cond.CIA_ItemID == _currentItem.ItmId);

        //                            Int32 complianceItemID = (_currentItem.IsItemSwapped) ? _currentItem.SwappedItmId : _currentItem.ItmId;
        //                            ApplicantComplianceItemData itemDataForComparison = itemDataListFromDBForComparsion
        //                                                                                .FirstOrDefault(cond => cond.ComplianceItemID == complianceItemID);

        //                            ApplicantComplianceItemData newItemData = AddApplicantComplianceItemData(currentUserId, categoryDataToUpdate, _currentItem.ItmId);

        //                            SetItemAssignmentProperties(newItemData, lstItemAssignmentProperties, itemComplianceStatusList,
        //                                                        reviewerTypeList, lstItemMovementTypes, _currentItem);

        //                            if ((!_isExceptionAppliedForCurrentItm && _isItemDataChangeRequired)
        //                               ||
        //                               (_isExceptionAppliedForCurrentItm && _currentItem.IsDataChanged && _currentItem.AttribuetFilledCount > AppConsts.NONE)
        //                               )
        //                            {
        //                                List<ApplicantCmplncAttrData> attrDataListToAdd = _currentItem.ApplicantCmplncAttrData.Where(x => x.AcadId == 0).ToList();
        //                                InsertComplianceAttributeData(currentUserId, attrDataListToAdd, newItemData, _lstCalculatedAttributes);
        //                            }

        //                            // Only those items are received from UI, which have checkbox-checked. SO document association is required.
        //                            AssociatDocsWithCurrentItem(dataEntryContract.DoccumentId, currentUserId, fileUploadTypeAttribute, newItemData,
        //                                                        itemDataListFromDBForComparsion, _currentItem, _isExceptionAppliedForCurrentItm);
        //                            categoryDataToUpdate.ApplicantComplianceItemDatas.Add(newItemData);
        //                            isDataSavedRequired = true;

        //                            #endregion
        //                        }
        //                        else if (_currentItem.AcidId > AppConsts.NONE)
        //                        {
        //                            #region Item to be updated

        //                            ComplianceItemAttribute fileUploadTypeAttribute = _lstFileUploadAttributeList.FirstOrDefault(cond => cond.CIA_ItemID == _currentItem.ItmId);
        //                            ApplicantComplianceItemData itemDataToBeUpdated = itemDataListInDb.FirstOrDefault(x => x.ApplicantComplianceItemID == _currentItem.AcidId);

        //                            if (_currentItem.IsItemSwapped)
        //                            {
        //                                #region Manage Items which were Swapped

        //                                // Attribute filled count check is required, 
        //                                // as, if, for any APFE & Incomplete, swapped items, data is changed, then it should not be Removed.
        //                                // If Exception data was NOT changed after swapping, then enter the loop
        //                                // else ener the new attributes for Exception data updated, through the 'ELSE' condition
        //                                if ((_currentItem.NewStatuscode == ApplicantItemComplianceStatus.Incomplete.GetStringValue()
        //                                    && _currentItem.AttribuetFilledCount == AppConsts.NONE)
        //                                                                   ||
        //                                          (_isExceptionAppliedForCurrentItm && _currentItem.AttribuetFilledCount == AppConsts.NONE)
        //                                   )
        //                                {
        //                                    Int32 complianceItemID = (_currentItem.IsItemSwapped) ? _currentItem.SwappedItmId : _currentItem.ItmId;
        //                                    ApplicantComplianceItemData _itemDataForComparison = itemDataListFromDBForComparsion
        //                                                                                        .FirstOrDefault(cond => cond.ComplianceItemID == complianceItemID);

        //                                    // Mark the Item for Deletion, which was swapped with an incomplete item with NO Documents.
        //                                    if (_currentItem.NewStatuscode == ApplicantItemComplianceStatus.Incomplete.GetStringValue()
        //                                     && _itemDataForComparison.IsNull())
        //                                    {
        //                                        appCompItmDataWhichNeedsToBeRemoved.Add(itemDataToBeUpdated);
        //                                    }
        //                                    // Update the Documents of Item swapped with 'Incomplete Item with Documents' & keep it in 'Incomplete' Status
        //                                    else if (_currentItem.NewStatuscode == ApplicantItemComplianceStatus.Incomplete.GetStringValue()
        //                                     && _itemDataForComparison.ApplicantComplianceItemID.IsNotNull()
        //                                     && _itemDataForComparison.ApplicantComplianceItemID > AppConsts.NONE)
        //                                    {
        //                                        itemDataToBeUpdated.StatusID = itemComplianceStatusList.Where(ists => ists.Code == ApplicantItemComplianceStatus.Incomplete.GetStringValue()).First().ItemComplianceStatusID;
        //                                        itemDataToBeUpdated.ExceptionReason = String.Empty;
        //                                        itemDataToBeUpdated.ModifiedOn = DateTime.Now;
        //                                        itemDataToBeUpdated.ModifiedByID = currentUserId;
        //                                        isDataSavedRequired = true;

        //                                        foreach (ApplicantComplianceAttributeData attrDataToDelete in itemDataToBeUpdated.ApplicantComplianceAttributeDatas)
        //                                        {
        //                                            attrDataToDelete.IsDeleted = true;
        //                                            attrDataToDelete.ModifiedOn = DateTime.Now;
        //                                            attrDataToDelete.ModifiedByID = currentUserId;
        //                                            isDataSavedRequired = true;
        //                                        }

        //                                        // Only those items are received from UI, which have checkbox-checked. SO document association is required.
        //                                        AssociatDocsWithCurrentItem(dataEntryContract.DoccumentId, currentUserId, fileUploadTypeAttribute, itemDataToBeUpdated,
        //                                                                    itemDataListFromDBForComparsion, _currentItem, _isExceptionAppliedForCurrentItm);

        //                                    }
        //                                    else if (_isExceptionAppliedForCurrentItm)
        //                                    {
        //                                        // Only those items are received from UI, which have checkbox-checked. SO document association is required.
        //                                        AssociatDocsWithCurrentItem(dataEntryContract.DoccumentId, currentUserId, fileUploadTypeAttribute, itemDataToBeUpdated,
        //                                                                    itemDataListFromDBForComparsion, _currentItem, _isExceptionAppliedForCurrentItm);

        //                                        SetItemAssignmentProperties(itemDataToBeUpdated, lstItemAssignmentProperties, itemComplianceStatusList,
        //                                                                    reviewerTypeList, lstItemMovementTypes, _currentItem);

        //                                        itemDataToBeUpdated.ModifiedOn = DateTime.Now;
        //                                        itemDataToBeUpdated.ModifiedByID = currentUserId;
        //                                        isDataSavedRequired = true;

        //                                        foreach (ApplicantComplianceAttributeData attrDataToDelete in itemDataToBeUpdated.ApplicantComplianceAttributeDatas)
        //                                        {
        //                                            attrDataToDelete.IsDeleted = true;
        //                                            attrDataToDelete.ModifiedOn = DateTime.Now;
        //                                            attrDataToDelete.ModifiedByID = currentUserId;
        //                                            isDataSavedRequired = true;
        //                                        }
        //                                    }
        //                                }
        //                                else
        //                                {
        //                                    #region Manage Updating of Items which were Swapped

        //                                    UpdateExistingComplianceAttributeData(currentUserId, _currentItem, itemDataToBeUpdated);

        //                                    List<ApplicantCmplncAttrData> attrDataListToAdd = _currentItem.ApplicantCmplncAttrData.Where(x => x.AcadId == AppConsts.NONE).ToList();
        //                                    InsertComplianceAttributeData(currentUserId, attrDataListToAdd, itemDataToBeUpdated, _lstCalculatedAttributes);

        //                                    // Only those items are received from UI, which have checkbox-checked. SO document association is required.
        //                                    AssociatDocsWithCurrentItem(dataEntryContract.DoccumentId, currentUserId, fileUploadTypeAttribute, itemDataToBeUpdated,
        //                                                           itemDataListFromDBForComparsion, _currentItem, false);

        //                                    SetItemAssignmentProperties(itemDataToBeUpdated, lstItemAssignmentProperties, itemComplianceStatusList,
        //                                                                reviewerTypeList, lstItemMovementTypes, _currentItem);

        //                                    itemDataToBeUpdated.ExceptionReason = String.Empty;
        //                                    itemDataToBeUpdated.ModifiedOn = DateTime.Now;
        //                                    itemDataToBeUpdated.ModifiedByID = currentUserId;
        //                                    isDataSavedRequired = true;

        //                                    #endregion
        //                                }
        //                                #endregion
        //                            }
        //                            else
        //                            {
        //                                #region Manage Items which were Updated But Not Swapped

        //                                // New - Execute only if Exception was not applied for the Item 
        //                                // OR Exception was applied but data was added in atributes
        //                                // Else, only Associate the ddocument with the Exception.
        //                                // This will also handle the case when Only Update item document is 'Checked' 
        //                                // to add the document with the Item and No data was changed
        //                                if (_currentItem.IsDataChanged &&
        //                                    (!_isExceptionAppliedForCurrentItm || (_isExceptionAppliedForCurrentItm && _currentItem.AttribuetFilledCount > AppConsts.NONE)))
        //                                {
        //                                    UpdateExistingComplianceAttributeData(currentUserId, _currentItem, itemDataToBeUpdated);

        //                                    List<ApplicantCmplncAttrData> attrDataListToAdd = _currentItem.ApplicantCmplncAttrData.Where(x => x.AcadId == AppConsts.NONE).ToList();
        //                                    InsertComplianceAttributeData(currentUserId, attrDataListToAdd, itemDataToBeUpdated, _lstCalculatedAttributes);

        //                                    AssociatDocsWithCurrentItem(dataEntryContract.DoccumentId, currentUserId, fileUploadTypeAttribute, itemDataToBeUpdated,
        //                                                               itemDataListFromDBForComparsion, _currentItem, false);

        //                                    SetItemAssignmentProperties(itemDataToBeUpdated, lstItemAssignmentProperties, itemComplianceStatusList,
        //                                                                reviewerTypeList, lstItemMovementTypes, _currentItem);

        //                                    itemDataToBeUpdated.ExceptionReason = String.Empty;
        //                                    isDataSavedRequired = true;
        //                                }
        //                                else if (_isExceptionAppliedForCurrentItm && _currentItem.AttribuetFilledCount == AppConsts.NONE)
        //                                {
        //                                    var _isDocSaveRequired = AssociateExplicitDocumentOverrideStatus(dataEntryContract, currentUserId, itemComplianceStatusList, reviewerTypeList, lstItemMovementTypes,
        //                                                                                                    lstItemAssignmentProperties, itemDataListFromDBForComparsion, _currentItem, itemDataToBeUpdated);

        //                                    // Update 'isDataSavedRequired' Only if Document save is required 
        //                                    if (_isDocSaveRequired && !isDataSavedRequired)
        //                                    {
        //                                        isDataSavedRequired = true;
        //                                    }
        //                                }

        //                                itemDataToBeUpdated.ModifiedOn = DateTime.Now;
        //                                itemDataToBeUpdated.ModifiedByID = currentUserId;

        //                                #endregion
        //                            }
        //                            #endregion
        //                        }
        //                    }
        //                }
        //            }
        //            else
        //            {
        //                #region If Category Data does not exists' in DB then Add all the data, upto document level, if applicable

        //                #region Generate Category Item and Attributes level Data instances

        //                if (!categoryData.ApplicantCmplncItemData.IsNullOrEmpty())
        //                {
        //                    String categoryComplianceStatus = ApplicantCategoryComplianceStatus.Incomplete.GetStringValue();
        //                    Int32 categoryComplianceStatusId = ClientDBContext.lkpCategoryComplianceStatus
        //                                                                      .Where(catStatus => catStatus.Code.ToLower().Trim() == categoryComplianceStatus.ToLower().Trim())
        //                                                                      .FirstOrDefault().CategoryComplianceStatusID;

        //                    #region Generate New 'ApplicantComplianceCategoryData' Instance

        //                    ApplicantComplianceCategoryData newCategoryData = new ApplicantComplianceCategoryData();
        //                    newCategoryData.PackageSubscriptionID = dataEntryContract.PackageSubscriptionId;
        //                    newCategoryData.ComplianceCategoryID = categoryData.CatId;
        //                    newCategoryData.StatusID = categoryComplianceStatusId;
        //                    newCategoryData.CreatedOn = DateTime.Now;
        //                    newCategoryData.CreatedByID = currentUserId;

        //                    #endregion

        //                    foreach (ApplicantCmplncItemData itemDataToAdd in categoryData.ApplicantCmplncItemData)
        //                    {
        //                        ComplianceItemAttribute fileUploadTypeAttribute = _lstFileUploadAttributeList.FirstOrDefault(cond => cond.CIA_ItemID == itemDataToAdd.ItmId);

        //                        #region Add new 'ApplicantComplianceItemData' & 'ApplicantCmplncAttrData' and Associate Document

        //                        ApplicantComplianceItemData newItemData = AddApplicantComplianceItemData(currentUserId, newCategoryData, itemDataToAdd.ItmId);

        //                        List<ApplicantCmplncAttrData> attrDataListToAdd = itemDataToAdd.ApplicantCmplncAttrData.Where(x => x.AcadId == AppConsts.NONE).ToList();
        //                        InsertComplianceAttributeData(currentUserId, attrDataListToAdd, newItemData, _lstCalculatedAttributes);

        //                        SetItemAssignmentProperties(newItemData, lstItemAssignmentProperties, itemComplianceStatusList,
        //                                                    reviewerTypeList, lstItemMovementTypes, itemDataToAdd);


        //                        AssociatDocsWithCurrentItem(dataEntryContract.DoccumentId, currentUserId, fileUploadTypeAttribute,
        //                                                    newItemData, null, itemDataToAdd, false);

        //                        #endregion

        //                        newCategoryData.ApplicantComplianceItemDatas.Add(newItemData);
        //                    }

        //                    isDataSavedRequired = true;
        //                    ClientDBContext.ApplicantComplianceCategoryDatas.AddObject(newCategoryData);
        //                }
        //                #endregion

        //                #endregion
        //            }
        //        }
        //    }

        //    appCompItmDataWhichNeedsToBeRemoved.ForEach(acid =>
        //    {
        //        isDataSavedRequired = true;

        //        //// delete item and attribute.
        //        acid.IsDeleted = true;
        //        acid.ModifiedOn = DateTime.Now;
        //        acid.ModifiedByID = currentUserId;

        //        acid.ApplicantComplianceAttributeDatas.Where(cond => !cond.IsDeleted).ForEach(acad =>
        //        {
        //            if (acad.IsNotNull())
        //            {
        //                acad.IsDeleted = true;
        //                acad.ModifiedOn = DateTime.Now;
        //                acad.ModifiedByID = currentUserId;

        //                if (acad.ApplicantComplianceDocumentMaps.IsNotNull())
        //                {
        //                    acad.ApplicantComplianceDocumentMaps.Where(cond => !cond.IsDeleted).ForEach(acdm =>
        //                    {
        //                        acdm.IsDeleted = true;
        //                        acdm.ModifiedByID = currentUserId;
        //                        acdm.ModifiedOn = DateTime.Now;
        //                    });
        //                }
        //            }
        //        });
        //    });

        //    if (isDataSavedRequired)
        //    {
        //        ClientDBContext.SaveChanges();
        //    }
        //    return isDataSavedRequired;
        //}

        /// <summary>
        /// Associate Document with the Item. 
        /// </summary>
        /// <param name="currentDocumentId"></param>
        /// <param name="currentUserId"></param>
        /// <param name="fileUploadTypeAttribute"></param>
        /// <param name="currentItemData"></param>
        /// <param name="lstItemDataFromDb"></param>
        /// <param name="itemDataFromUi"></param>
        /// <param name="ifExceptionAppledFrCrntItem"></param>
        ////private void AssociateItemDocument(Int32 currentDocumentId, Int32 currentUserId, ComplianceItemAttribute fileUploadTypeAttribute
        ////                                        , ApplicantComplianceItemData currentItemData, List<ApplicantComplianceItemData> lstItemDataFromDb
        ////                                        , ApplicantCmplncItemData itemDataFromUi, Boolean ifExceptionAppledFrCrntItem)
        ////{
        ////    List<Int32> docListToBeMapped = new List<Int32>();

        ////    if (itemDataFromUi.IsDataChanged || itemDataFromUi.IsDocAssociationReq)
        ////    {
        ////        docListToBeMapped.Add(currentDocumentId);
        ////    }
        ////    if (itemDataFromUi.IsItemSwapped && lstItemDataFromDb.IsNotNull())
        ////    {
        ////        ApplicantComplianceItemData itemDataFromWhichItemIsSwapped = lstItemDataFromDb.FirstOrDefault(x => x.ComplianceItemID == itemDataFromUi.SwappedItmId);

        ////        if (itemDataFromWhichItemIsSwapped.IsNotNull())
        ////        {
        ////            #region  Copy Compliance Item data from Swapped Item to Current Item Data

        ////            if (ifExceptionAppledFrCrntItem && !itemDataFromUi.IsDataChanged)
        ////            //if (ifExceptionAppledFrCrntItem)
        ////            {
        ////                currentItemData.ExceptionReason = itemDataFromWhichItemIsSwapped.ExceptionReason;
        ////            }

        ////            currentItemData.Notes = itemDataFromWhichItemIsSwapped.Notes;
        ////            currentItemData.VerificationComments = itemDataFromWhichItemIsSwapped.VerificationComments;
        ////            currentItemData.VerificationStatusText = itemDataFromWhichItemIsSwapped.VerificationStatusText;
        ////            currentItemData.StatusComments = itemDataFromWhichItemIsSwapped.StatusComments;

        ////            #endregion


        ////            var _isExceptionStatus = IsItemStatusException(itemDataFromWhichItemIsSwapped.lkpItemComplianceStatu.Code);

        ////            // Required Check
        ////            // Check required as we need to distinguish whether we have to get Exception 
        ////            // or Item Documents for mapping to associate with current Item.
        ////            if (!_isExceptionStatus || (_isExceptionStatus && itemDataFromUi.IsDataChanged))
        ////            //if (!_isExceptionStatus)
        ////            {
        ////                List<Int32> complinaceDocList = GetApplicantComplianceDocListToMapped(itemDataFromWhichItemIsSwapped);
        ////                if (complinaceDocList.IsNotNull() && complinaceDocList.Count() > AppConsts.NONE)
        ////                {
        ////                    docListToBeMapped.AddRange(complinaceDocList);
        ////                }
        ////            }
        ////            else
        ////            {
        ////                List<ExceptionDocumentMapping> excptnDocsListToBeAdded = itemDataFromWhichItemIsSwapped.ExceptionDocumentMappings
        ////                                                                                                         .Where(x => x.ApplicantComplianceItemID
        ////                                                                                                          == itemDataFromWhichItemIsSwapped.ApplicantComplianceItemID
        ////                                                                                                          && x.IsDeleted == false)
        ////                                                                                                        .ToList();
        ////                docListToBeMapped.AddRange(excptnDocsListToBeAdded.Select(x => x.ApplicantDocumentID));
        ////            }
        ////        }
        ////    }

        ////    //This is required to elliminate any duplicate Applicant Document ID (scenario occurs when multiple swapping)
        ////    docListToBeMapped = docListToBeMapped.Distinct().ToList();

        ////    if (fileUploadTypeAttribute.IsNotNull()
        ////           &&
        ////            (!ifExceptionAppledFrCrntItem
        ////                ||
        ////              ifExceptionAppledFrCrntItem && itemDataFromUi.IsDataChanged)
        ////        )
        ////    {
        ////        ManageCurrentItemApplicantComplianceDocument(currentUserId, currentItemData, docListToBeMapped, fileUploadTypeAttribute, itemDataFromUi);
        ////    }
        ////    else if (ifExceptionAppledFrCrntItem)
        ////    {
        ////        ManageCurrentItemExceptionDocument(currentUserId, currentItemData, itemDataFromUi, docListToBeMapped);
        ////    }
        ////}

        #endregion


        #region UAT-1039 : Add contextual video popups on applicant side of complio.
        public String ShowDocumentVideo(Int32 currentUserId, List<Int32> lstCompliancePkgIds)
        {
            //List<Int32> CompliancePkgIDs = _dbContext.PackageSubscriptions.Where(x => x.OrganizationUserID == currentUserId && !x.IsDeleted).Select(x => x.CompliancePackageID).ToList();
            //Check whether Compliance package purchased
            //if (CompliancePkgIDs.IsNotNull() && CompliancePkgIDs.Count > AppConsts.NONE)
            if (!lstCompliancePkgIds.IsNullOrEmpty())
            {
                //Isdeleted check is not applied here.
                if (!_dbContext.ApplicantDocuments.Any(x => x.OrganizationUserID == currentUserId && x.CreatedByID == currentUserId && x.DocumentType == null))
                {
                    return AppConsts.SHOW_UPLOAD_DOC_VID;
                }
                else
                {
                    return AppConsts.ALREADY_UPLOADED_DOC;
                }
            }
            return AppConsts.COMPLIANCE_PKG_NOT_EXIST;
        }

        public String ShowDataEnteredVideo(int currentUserId)
        {
            IEnumerable<Int32> packageSubscriptionIDs = _dbContext.PackageSubscriptions.Where(x => x.OrganizationUserID == currentUserId).Select(x => x.PackageSubscriptionID);
            if (packageSubscriptionIDs.IsNotNull())
            {
                IEnumerable<Int32> AccdIDs = _dbContext.ApplicantComplianceCategoryDatas.Where(cond => packageSubscriptionIDs.Contains(cond.PackageSubscriptionID)).Select(x => x.ApplicantComplianceCategoryID);
                if (!_dbContext.ApplicantComplianceItemDatas.Any(cond => AccdIDs.Contains(cond.ApplicantComplianceCategoryID) && cond.CreatedByID == currentUserId))
                {
                    return AppConsts.SHOW_DATA_ENTRY_VID;
                }
                else
                {
                    return AppConsts.ALREADY_DATA_ENTERED;
                }
            }
            return AppConsts.COMPLIANCE_PKG_NOT_EXIST;
        }
        #endregion



        public List<Order> GetListofOrdersForOrderID(List<int> orderIds)
        {
            return _dbContext.Orders.Where(x => orderIds.Contains(x.OrderID) && !x.IsDeleted).ToList();
        }
        #region Data Entry Tracking
        /// <summary>
        /// 
        /// </summary>
        /// <param name="dataEntryTrackingContract"></param>
        public void DataEntryTimeTracking(DataEntryTrackingContract dataEntryTrackingContract)
        {
            DateTime? AssignOn = null; Int32? AssignBy = null; Int32? AssignTo = null;
            Entity.FlatDataEntryQueueHistory FlateAssignmentHistory = SecurityContext.FlatDataEntryQueueHistories.Where(a => a.FQEQH_FlatQueueID == dataEntryTrackingContract.DocumentId).OrderByDescending(a => a.FDEQH_ModifiedOn).FirstOrDefault();
            if (FlateAssignmentHistory != null && FlateAssignmentHistory.FDEQH_ID > AppConsts.NONE)
            {
                AssignOn = FlateAssignmentHistory.FDEQH_ModifiedOn;
                AssignBy = FlateAssignmentHistory.FDEQH_ModifiedByID;
                AssignTo = FlateAssignmentHistory.FDEQH_AssignToUserID;
            }

            Entity.DataEntryTimeTracking dataEntryTimeTracking = new Entity.DataEntryTimeTracking();
            dataEntryTimeTracking.DET_QueueRecordID = dataEntryTrackingContract.DocumentId;
            dataEntryTimeTracking.DET_QueueProcessUserID = dataEntryTrackingContract.QueueProcessUserId;
            dataEntryTimeTracking.DET_ItemsImpacted = dataEntryTrackingContract.ItemImpacted;
            dataEntryTimeTracking.DET_TrackingStartTime = dataEntryTrackingContract.EntryTime;
            dataEntryTimeTracking.DET_TrackingEndTime = dataEntryTrackingContract.ExitTime;
            dataEntryTimeTracking.DET_StatusID = dataEntryTrackingContract.StatusId;
            dataEntryTimeTracking.DET_IsDeleted = false;
            dataEntryTimeTracking.DET_CreatedById = dataEntryTrackingContract.QueueProcessUserId;
            dataEntryTimeTracking.DET_CreatedOn = DateTime.Now;
            //Production issue changes[26/12/2016]
            dataEntryTimeTracking.DET_DiscardReasonId = dataEntryTrackingContract.DiscardReasonId;
            dataEntryTimeTracking.DET_DiscardReason = dataEntryTrackingContract.DiscardReason;
            dataEntryTimeTracking.DET_StatusNotes = dataEntryTrackingContract.StatusNotes;
            dataEntryTimeTracking.DET_AssignBy = AssignBy;
            dataEntryTimeTracking.DET_AssignTo = AssignTo;
            dataEntryTimeTracking.DET_AssignOn = AssignOn;

            if (!dataEntryTrackingContract.AffectedItemIds.IsNullOrEmpty())
            {
                StringBuilder _sb = new StringBuilder();
                _sb.Append("<ItemData>");

                foreach (var itemId in dataEntryTrackingContract.AffectedItemIds)
                {
                    _sb.Append("<ID>" + itemId + "</ID>");
                }
                _sb.Append("</ItemData>");

                dataEntryTimeTracking.DET_ApplicantData = Convert.ToString(_sb);
            }

            SecurityContext.DataEntryTimeTrackings.AddObject(dataEntryTimeTracking);
            SecurityContext.SaveChanges();
        }
        #endregion

        #region UAT-1176 - Node Employment
        /// <summary>
        /// Method to check if client admin has any Employment Node Permission
        /// </summary>
        /// <param name="tenantID"></param>
        /// <param name="userID"></param>
        /// <returns></returns>
        public Boolean CheckEmploymentNodePermission(Int32 userID)
        {
            //return _dbContext.HierarchyPermissions.Any(cond => cond.HP_OrganizationUserID == userID
            //                                && (cond.DeptProgramMapping.DPM_IsEmployment ?? false) == true
            //                                && (lstPermissionID.Contains(cond.HP_PermissionID ?? 0))
            //                                && (cond.HP_IsDeleted == false));

            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {

                SqlCommand command = new SqlCommand("usp_CheckEmploymentNodePermissionClientAdmin", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@OrgUserID", userID);
                command.Parameters.Add("@resultValue", SqlDbType.Bit);
                command.Parameters["@resultValue"].Direction = ParameterDirection.Output;
                con.Open();
                command.ExecuteNonQuery();
                con.Close();
                return (Boolean)command.Parameters["@resultValue"].Value;
            }
        }
        #endregion

        #region UAT-1025: Update Deadline Date email notification to include category list
        List<PackageSubscription> IComplianceDataRepository.GetPackagesDetailForDeadLineNotification(Int32 selectedNodeId, Int32 organizationUserId)
        {
            String orderPackageTypeCompBkg = OrderPackageTypes.COMPLIANCE_AND_BACKGROUMD_PACKAGE.GetStringValue();
            String orderPackageTypeComp = OrderPackageTypes.COMPLIANCE_PACKAGE.GetStringValue();
            String ordStatusCancelled = ApplicantOrderStatus.Cancelled.GetStringValue();
            String activeArchiveStateCode = ArchiveState.Active.GetStringValue();
            List<PackageSubscription> lstPkgSubscriptionDeadlineNotification = new List<PackageSubscription>();

            List<Order> listOrders = _dbContext.Orders.Where(cond => cond.SelectedNodeID == selectedNodeId
                                                                    && (cond.lkpOrderPackageType.OPT_Code == orderPackageTypeCompBkg
                                                                        || cond.lkpOrderPackageType.OPT_Code == orderPackageTypeComp)
                                                                    && cond.OrganizationUserProfile.OrganizationUserID == organizationUserId && cond.IsDeleted == false
                                                                    ).ToList();
            List<Int32> orderIds = new List<Int32>();

            listOrders.ForEach(ord =>
            {
                List<OrderPaymentDetail> lstOrderPaymentDetail = ord.OrderPaymentDetails.Where(cnd => cnd.lkpOrderStatu.Code != ordStatusCancelled
                                                                        && cnd.OPD_IsDeleted == false).ToList();
                if (lstOrderPaymentDetail.IsNotNull() && lstOrderPaymentDetail.Count() > 0)
                {
                    orderIds.Add(ord.OrderID);
                }

            });

            lstPkgSubscriptionDeadlineNotification = _dbContext.PackageSubscriptions.Where(pkgSub => orderIds.Contains(pkgSub.OrderID.Value) && pkgSub.IsDeleted == false
                                                                                         && (pkgSub.ArchiveStateID == null || pkgSub.lkpArchiveState.AS_Code == activeArchiveStateCode)
                                                                                         ).ToList();
            return lstPkgSubscriptionDeadlineNotification;
        }
        #endregion

        #region UAT-1214:Changes to "Required" and "Optional" labels in order flow
        List<ClientSetting> IComplianceDataRepository.GetBkgOrdFlowLabelSetting(Int32 tenantId, String requiredLabelCode, String optionalLabelCode)
        {
            return _dbContext.ClientSettings.Where(cond => cond.CS_TenantID == tenantId && !cond.CS_IsDeleted && (cond.lkpSetting.Code.Equals(requiredLabelCode)
                                                                          || cond.lkpSetting.Code.Equals(optionalLabelCode))).ToList();
        }
        #endregion

        /// <summary>
        /// Get the list of Client settings by Codes.
        /// </summary>
        /// <param name="tenantId"></param>
        /// <param name="lstCodes"></param>
        /// <returns></returns>
        List<ClientSetting> IComplianceDataRepository.GetClientSettingsByCodes(Int32 tenantId, List<String> lstCodes, String languageCode)
        {
            List<ClientSetting> lstClientSetting = _dbContext.ClientSettings.Where(cond => cond.CS_TenantID == tenantId
                                                       && !cond.CS_IsDeleted
                                                       && lstCodes.Contains(cond.lkpSetting.Code)).ToList();

            if (!lstClientSetting.IsNullOrEmpty())
            {
                foreach (ClientSetting clientSetting in lstClientSetting)
                {
                    if (!languageCode.IsNullOrEmpty() && languageCode == Languages.SPANISH.GetStringValue())
                    {
                        Int32 entityId = clientSetting.CS_ID;
                        String entitytypeCode = LanguageTranslationEntityType.ClientSettings.GetStringValue();
                        clientSetting.CS_SettingValueLangugaeSpecific = GetEntityTypeTranslatedText(entityId, entitytypeCode);
                    }
                    else
                    {
                        clientSetting.CS_SettingValueLangugaeSpecific = clientSetting.CS_SettingValue == null ? "0" : clientSetting.CS_SettingValue;
                    }

                }
                return lstClientSetting;
            }
            return lstClientSetting;
        }

        DataTable IComplianceDataRepository.GetOrderApprovalQueueData(OrderApprovalQueueContract orderApprovalQueueContract, CustomPagingArgsContract customPagingArgsContract, Boolean isBkgScreen)
        {

            String orderBy = QueueConstants.ORDER_QUEUE_DEFAULT_SORTING_FIELDS;
            String ordDirection = null;

            orderBy = String.IsNullOrEmpty(customPagingArgsContract.SortExpression) ? orderBy : customPagingArgsContract.SortExpression;
            ordDirection = customPagingArgsContract.SortDirectionDescending == false ? String.IsNullOrEmpty(customPagingArgsContract.SortExpression) ? "desc" : "asc" : "desc";

            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand command = new SqlCommand("usp_GetDataForOrderQueue", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@OrderID", orderApprovalQueueContract.OrderNumber);
                command.Parameters.AddWithValue("@ApplicantFirstName", orderApprovalQueueContract.FirstName);
                command.Parameters.AddWithValue("@ApplicantLastName", orderApprovalQueueContract.LastName);
                command.Parameters.AddWithValue("@OrderFromDate", orderApprovalQueueContract.OrderFromDate);
                command.Parameters.AddWithValue("@OrderToDate", orderApprovalQueueContract.OrderToDate);
                command.Parameters.AddWithValue("@PaidFromDate", orderApprovalQueueContract.OrderPaidFromDate);
                command.Parameters.AddWithValue("@PaidToDate", orderApprovalQueueContract.OrderPaidToDate);
                command.Parameters.AddWithValue("@SSN", orderApprovalQueueContract.SSN);
                command.Parameters.AddWithValue("@OrderStatusCode", orderApprovalQueueContract.OrderStatusCode);
                command.Parameters.AddWithValue("@PaymentTypeCode", orderApprovalQueueContract.PaymentTypeCode);
                command.Parameters.AddWithValue("@OrderPackageTypeCode", orderApprovalQueueContract.OrderPackageTypeCode);
                command.Parameters.AddWithValue("@ShowOnlyRushOrder", orderApprovalQueueContract.ShowOnlyRushOrder);
                command.Parameters.AddWithValue("@TargetHierarchyNodeIds", orderApprovalQueueContract.DeptProgramMappingIDs);
                command.Parameters.AddWithValue("@CurrentLoggedInUserId", orderApprovalQueueContract.LoggedInUserId);
                command.Parameters.AddWithValue("@OrderBy", orderBy);
                command.Parameters.AddWithValue("@OrderDirection", ordDirection);
                command.Parameters.AddWithValue("@PageIndex", customPagingArgsContract.CurrentPageIndex);
                command.Parameters.AddWithValue("@PageSize", customPagingArgsContract.PageSize);
                command.Parameters.AddWithValue("@isBkg", isBkgScreen);

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > 0)
                {
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        customPagingArgsContract.CurrentPageIndex = Convert.ToInt32(Convert.ToString(ds.Tables[0].Rows[0]["CurrentPageIndex"]));
                        customPagingArgsContract.VirtualPageCount = Convert.ToInt32(Convert.ToString(ds.Tables[0].Rows[0]["VirtualCount"]));
                    }
                    if (ds.Tables[1].Rows.Count > 0)
                    {
                        return ds.Tables[1];
                    }
                }
                return new DataTable();
            }
        }

        #region UAT-1189:WB: Bulk Archive capability

        public DataTable GetApplicantSubscriptionDataBulkArchive(String xmlData, Int32? currentLoggedInUserId)
        {
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {

                SqlCommand command = new SqlCommand("usp_GetApplicantSubscriptionsToBulkArchive", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@XmlData", xmlData);
                command.Parameters.AddWithValue("@CurrentLoggedInUserID", currentLoggedInUserId);
                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > 0 && ds.Tables[0].IsNotNull())
                {
                    return ds.Tables[0];
                }
            }
            return new DataTable();
        }

        public DataTable GetUnMatchedApplicantDetails(String xmlData)
        {
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {

                SqlCommand command = new SqlCommand("usp_GetUnMatchedApplicants", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@XmlData", xmlData);
                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > 0 && ds.Tables[0].IsNotNull())
                {
                    return ds.Tables[0];
                }
            }
            return new DataTable();
        }
        #endregion

        #region UAT-1234: WB: spreadsheet upload to see if applicants have created accounts or ordered

        public DataTable GetUploadedDocumentApplicantOrders(String xmlData, String orderPkgTypes, Int32? currentLoggedInUserId, CustomPagingArgsContract customPagingArgsContract)
        {
            String orderBy = QueueConstants.ORDER_QUEUE_DEFAULT_SORTING_FIELDS;
            String ordDirection = null;
            orderBy = String.IsNullOrEmpty(customPagingArgsContract.SortExpression) ? orderBy : customPagingArgsContract.SortExpression;
            ordDirection = customPagingArgsContract.SortDirectionDescending == false ? String.IsNullOrEmpty(customPagingArgsContract.SortExpression) ? "desc" : "asc" : "desc";

            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand command = new SqlCommand("usp_GetUploadedDocumentApplicantOrders", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@XmlData", xmlData);
                command.Parameters.AddWithValue("@OrderPkgTypes", orderPkgTypes);
                command.Parameters.AddWithValue("@CurrentLoggedInUserID", currentLoggedInUserId);
                command.Parameters.AddWithValue("@OrderBy", orderBy);
                command.Parameters.AddWithValue("@OrderDirection", ordDirection);
                command.Parameters.AddWithValue("@PageIndex", customPagingArgsContract.CurrentPageIndex);
                command.Parameters.AddWithValue("@PageSize", customPagingArgsContract.PageSize);
                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > 0 && ds.Tables[0].IsNotNull())
                {
                    return ds.Tables[0];
                }
            }
            return new DataTable();
        }

        #endregion

        #region [UAT-1245:If payment method is the same, both tracking and screening are getting cancelled when the applicant attempts to cancel the tracking order.]
        /// <summary>
        /// Method to return the order by previous order id.
        /// </summary>
        /// <param name="prevOrderId">previous order id</param>
        /// <param name="orderRequestId">order request type code</param>
        /// <returns></returns>
        Order IComplianceDataRepository.GetOrderByPreviousOrderID(Int32 prevOrderId, List<Int32> orderRequestTypeIDList)
        {
            return _dbContext.Orders.Where(cnd => cnd.PreviousOrderID == prevOrderId && !cnd.IsDeleted && orderRequestTypeIDList.Contains(cnd.OrderRequestTypeID.Value)).FirstOrDefault();
        }
        #endregion

        #region  UAT 1230:WB: As an admin, I should be able to invite a person (or group of people) to create an applicant account

        public Boolean IsOrganisationUserExistByEmail(string email)
        {
            return _dbContext.OrganizationUsers.Any(x => x.PrimaryEmailAddress == email && x.IsActive && !x.IsDeleted);
        }

        /// <summary>
        /// Get Organisation Users by emails
        /// </summary>
        /// <param name="lstEmail"></param>
        /// <returns></returns>
        public List<OrganizationUser> GetOrganisationUsersByEmail(List<String> lstEmail)
        {
            return _dbContext.OrganizationUsers.Where(x => lstEmail.Contains(x.PrimaryEmailAddress) && x.IsActive && !x.IsDeleted).ToList();
        }

        #endregion

        #region  UAT 1304 Instructor/Preceptor screens and functionality
        public ClientSystemDocument GetClientSystemDocument(int clientSystemDocID)
        {
            return _dbContext.ClientSystemDocuments.Where(cond => cond.CSD_ID == clientSystemDocID && !cond.CSD_IsDeleted).FirstOrDefault();
        }
        #endregion

        #region UAT 1080 Addition of notification for orders that are sent for online payment
        public List<usp_GetIncompleteOnlineOrders_Result> GetIncompleteOnlineOrders(int chunkSize, int maxRetryCount, int retryTimeLag)
        {
            return _dbContext.usp_GetIncompleteOnlineOrders(chunkSize, maxRetryCount, retryTimeLag).ToList();
        }

        public void SaveUpdateOrderNotifications(Int32? orderNotificationID, Int32 backgroundProcessUserId, Int32 orderID, Int32? systemCommunicationId, Int16 businessChannelTypeId, Int32 orderNotificationTypeID, string notificationDetail)
        {
            //Update Order Notification
            if (orderNotificationID.HasValue)
            {
                var orderNotification = _dbContext.OrderNotifications.Where(cond => cond.ONTF_ID == orderNotificationID).FirstOrDefault();
                if (orderNotification.IsNotNull())
                {
                    orderNotification.ONTF_ModifiedByID = backgroundProcessUserId;
                    orderNotification.ONTF_ModifiedDate = DateTime.Now;

                    if (systemCommunicationId.HasValue)
                    {
                        orderNotification.ONTF_MSG_SystemCommunicationID = systemCommunicationId.Value;
                    }
                    else
                    {
                        orderNotification.ONTF_RetryCount = orderNotification.ONTF_RetryCount.HasValue ? orderNotification.ONTF_RetryCount.Value + 1 : 1;
                        orderNotification.ONTF_RetryDate = DateTime.Now;
                    }

                    _dbContext.SaveChanges();
                }
            }
            else
            {
                OrderNotification orderNotification = new OrderNotification();
                orderNotification.ONTF_OrderID = orderID;

                if (systemCommunicationId.HasValue)
                {
                    orderNotification.ONTF_MSG_SystemCommunicationID = systemCommunicationId.Value;
                }
                else
                {
                    orderNotification.ONTF_RetryCount = 1;
                    orderNotification.ONTF_RetryDate = DateTime.Now;
                }

                orderNotification.ONTF_BusinessChannelTypeID = businessChannelTypeId;
                orderNotification.ONTF_IsPostal = false;
                orderNotification.ONTF_CreatedByID = backgroundProcessUserId;
                orderNotification.ONTF_CreatedOn = DateTime.Now;
                orderNotification.ONTF_OrderNotificationTypeID = orderNotificationTypeID;
                orderNotification.ONTF_NotificationDetail = notificationDetail;
                _dbContext.OrderNotifications.AddObject(orderNotification);
                _dbContext.SaveChanges();
            }
        }

        #endregion

        #region UAT 1438: Enhancement to allow students to select a User Group.

        public List<ApplicantUserGroupMapping> GetApplicantUserGroupMappingForUser(Int32 LoggedInUserID)
        {
            return _dbContext.ApplicantUserGroupMappings.Where(cond => cond.AUGM_OrganizationUserID == LoggedInUserID && !cond.AUGM_IsDeleted).ToList();
        }

        public Boolean SaveUpdateApplicantUserGroupCustomAttribute(List<ApplicantUserGroupMapping> lstApplicantUserGroupMapping_Added, Int32 loggedInUserID)
        {
            if (!lstApplicantUserGroupMapping_Added.IsNullOrEmpty())
            {
                foreach (ApplicantUserGroupMapping applicantUserGroupMapping in lstApplicantUserGroupMapping_Added)
                {
                    _dbContext.ApplicantUserGroupMappings.AddObject(applicantUserGroupMapping);
                }
            }

            if (_dbContext.SaveChanges() > AppConsts.NONE)
            {
                return true;
            }
            return false;
        }

        public Boolean IsUserGroupCustomAttributeExist(List<Int32> lstHierarchyNodeIds, Int32 loggedInUserID)
        {
            string userGroupCode = CustomAttributeDatatype.User_Group.GetStringValue().ToLower();
            return _dbContext.CustomAttributeMappings.Any(x => lstHierarchyNodeIds.Contains(x.CAM_RecordID) && x.CustomAttribute.lkpCustomAttributeDataType.Code.ToLower() == userGroupCode && !x.CAM_IsDeleted);
        }
        #endregion

        Dictionary<Int32, String> IComplianceDataRepository.GetCategoryListFilterForReport(Int32 tenantID, String nodeIds)
        {
            Dictionary<Int32, String> dicCategoryList = new Dictionary<Int32, String>();
            EntityConnection connection = SecurityContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand command = new SqlCommand("Report.usp_Report_Filter_CategoryList", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@NodeIDs", nodeIds);
                command.Parameters.AddWithValue("@TenantID", tenantID);
                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > AppConsts.NONE && ds.Tables[0].Rows.Count > AppConsts.NONE)
                {
                    dicCategoryList = ds.Tables[0].AsEnumerable()
                                   .ToDictionary<DataRow, Int32, String>(row => row.Field<Int32>("ComplianceCategoryID"),
                                       row => row.Field<String>("CategoryName"));
                }
            }
            return dicCategoryList;
        }

        Dictionary<Int32, String> IComplianceDataRepository.GetItemListFilterForReport(Int32 tenantID, String selectedCategoryIds)
        {
            Dictionary<Int32, String> dicCategoryList = new Dictionary<Int32, String>();
            EntityConnection connection = SecurityContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand command = new SqlCommand("Report.usp_Report_Filter_ItemList", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@CategoryIDs", selectedCategoryIds);
                command.Parameters.AddWithValue("@TenantID", tenantID);
                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > AppConsts.NONE && ds.Tables[0].Rows.Count > AppConsts.NONE)
                {
                    dicCategoryList = ds.Tables[0].AsEnumerable()
                                   .ToDictionary<DataRow, Int32, String>(row => row.Field<Int32>("ItemID"),
                                       row => row.Field<String>("ItemName"));
                }
            }
            return dicCategoryList;
        }

        Dictionary<Int32, String> IComplianceDataRepository.GetHierarchyListFilterForReport(Int32 tenantID, Int32 userID)
        {
            Dictionary<Int32, String> dicCategoryList = new Dictionary<Int32, String>();
            EntityConnection connection = SecurityContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand command = new SqlCommand("Report.usp_Report_Filter_HierarchyList", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@UserID", userID);
                command.Parameters.AddWithValue("@TenantID", tenantID);
                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > AppConsts.NONE && ds.Tables[0].Rows.Count > AppConsts.NONE)
                {
                    dicCategoryList = ds.Tables[0].AsEnumerable()
                                   .ToDictionary<DataRow, Int32, String>(row => row.Field<Int32>("DPM_ID"),
                                       row => row.Field<String>("DPM_Label"));
                }
            }
            return dicCategoryList;
        }

        Dictionary<Int32, String> IComplianceDataRepository.GetUserGroupListFilterForReport(Int32 tenantID)
        {
            Dictionary<Int32, String> dicCategoryList = new Dictionary<Int32, String>();
            EntityConnection connection = SecurityContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand command = new SqlCommand("Report.usp_Report_Filter_UserGroupList", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@TenantID", tenantID);
                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > AppConsts.NONE && ds.Tables[0].Rows.Count > AppConsts.NONE)
                {
                    dicCategoryList = ds.Tables[0].AsEnumerable()
                                   .ToDictionary<DataRow, Int32, String>(row => row.Field<Int32>("UG_ID"),
                                       row => row.Field<String>("UG_Name"));
                }
            }
            return dicCategoryList;
        }

        #region UAT 3683: Move Optional Category Setting From Client Settings to institution hierarchy with look up
        Boolean IComplianceDataRepository.GetOptionalCategorySettingForCompliancePackage(Int32 hierarchyNodeID, Int32 subscriptionID)
        {
            bool optionalCategorySetting = false;
            Int32? nodeID = null;
            if (hierarchyNodeID != AppConsts.NONE)
            {
                nodeID = hierarchyNodeID;
            }

            else
            {
                Int32? orderID = _dbContext.PackageSubscriptions.Where(cond => cond.PackageSubscriptionID == subscriptionID && !cond.IsDeleted).FirstOrDefault().OrderID;
                if (orderID.HasValue)
                {
                    nodeID = _dbContext.Orders.Where(cond => cond.OrderID == orderID && !cond.IsDeleted).FirstOrDefault().SelectedNodeID;
                }
            }

            if (!nodeID.HasValue)
            {
                return false;
            }

            else
            {
                EntityConnection connection = _dbContext.Connection as EntityConnection;
                using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
                {
                    SqlCommand command = new SqlCommand("usp_GetOptionalCategorySettingForNodeWithLookup", con);
                    command.CommandType = CommandType.StoredProcedure;
                    command.Parameters.AddWithValue("@NodeID", nodeID);
                    SqlDataAdapter adp = new SqlDataAdapter();
                    adp.SelectCommand = command;
                    DataSet ds = new DataSet();
                    adp.Fill(ds);
                    if (ds.Tables.Count > 0)
                    {
                        optionalCategorySetting = Convert.ToBoolean(ds.Tables[0].Rows[0]["OptionalCategorySetting"]);
                    }
                }
                return optionalCategorySetting;
            }
        }
        #endregion

        #region bulletin
        /// <summary>
        /// Method for getting institution hierarchy mappped with bulletin Id's using Stored Procedure(usp_GetBulletInData).
        /// </summary>
        /// <param name="selectedInstitutionIds"></param>
        /// <param name="selectedHieararchyIds"></param>
        /// <returns></returns>
        List<BulletinContract> IComplianceDataRepository.GetBulletin(String selectedInstitutionIds, String selectedHieararchyIds)
        {
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            List<BulletinContract> lstBulletIn = new List<BulletinContract>();
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("usp_GetBulletInData", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@SelectedInstitutionIds", selectedInstitutionIds);
                cmd.Parameters.AddWithValue("@SelectedHierarchyNodeIds", selectedHieararchyIds);
                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > 0)
                {
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        lstBulletIn = ds.Tables[0].AsEnumerable().Select(col =>
                            new BulletinContract
                            {
                                BulletinID = Convert.ToInt32(col["BulletInId"]),
                                BulletinTitle = Convert.ToString(col["BullentInTitle"]),
                                BulletinContent = Convert.ToString(col["BulletInContent"]),
                                InstitutionIds = Convert.ToString(col["InstitutionIds"]),
                                InstitutionName = Convert.ToString(col["InstitutionName"]),
                                HieararchyIds = Convert.ToString(col["HierarchyNodeIDs"]),
                                DPMLabel = Convert.ToString(col["DPMLabel"]),
                            }).ToList();
                    }
                }
            }
            return lstBulletIn;
        }

        /// <summary>
        /// Method to add and update institution hierarchy id's corresponding to bulletin id's.
        /// In this we are calling the add method which is another method (private).
        /// </summary>
        /// <param name="bulletinId"></param>
        /// <param name="currentUserId"></param>
        /// <param name="lstDpmIds"></param>
        public void AddUpdateBulletinNodeMapping(Int32 bulletinId, Int32 currentUserId, List<Int32> lstDpmIds)
        {
            List<BulletinNodeMapping> lstBNM = _dbContext.BulletinNodeMappings.Where(bnm => bnm.BNM_BulletinID == bulletinId).ToList();

            var currentDateTime = DateTime.Now;

            if (lstBNM.IsNullOrEmpty())
            {
                AddBulletinNodeMappingInstance(bulletinId, currentUserId, lstDpmIds);
            }
            else
            {
                foreach (var bnm in lstBNM)
                {
                    bnm.BNM_IsDeleted = true;
                    bnm.BNM_ModifiedByID = currentUserId;
                    bnm.BNM_ModifiedOn = currentDateTime;
                }
                AddBulletinNodeMappingInstance(bulletinId, currentUserId, lstDpmIds);
            }
            _dbContext.SaveChanges();
        }

        /// <summary>
        /// just for adding Bulletin Node Mapping which is used in AddUpdateBulletinNodeMapping
        /// for adding new record.
        /// </summary>
        /// <param name="bulletinId"></param>
        /// <param name="currentUserId"></param>
        /// <param name="lstDpmIds"></param>
        private void AddBulletinNodeMappingInstance(Int32 bulletinId, Int32 currentUserId, List<Int32> lstDpmIds)
        {
            foreach (var dpmId in lstDpmIds)
            {
                BulletinNodeMapping _bnm = new BulletinNodeMapping();
                _bnm.BNM_HierarchyNodeID = dpmId;
                _bnm.BNM_BulletinID = bulletinId;
                _bnm.BNM_CreatedByID = currentUserId;
                _bnm.BNM_CreatedOn = DateTime.Now;
                _bnm.BNM_IsDeleted = false;

                _dbContext.BulletinNodeMappings.AddObject(_bnm);
            }
        }

        /// <summary>
        /// Method used to delete the Institution hierarchy Id's corresponding to Bulletin Id.
        /// </summary>
        /// <param name="bulletinId"></param>
        /// <param name="currentUserId"></param>
        public void DeleteBulletinNodeMapping(Int32 bulletinId, Int32 currentUserId)
        {
            List<BulletinNodeMapping> lstBNM = _dbContext.BulletinNodeMappings.Where(bnm => bnm.BNM_BulletinID == bulletinId).ToList();

            if (!lstBNM.IsNullOrEmpty())
            {
                foreach (var bnm in lstBNM)
                {
                    bnm.BNM_IsDeleted = true;
                    bnm.BNM_ModifiedByID = currentUserId;
                    bnm.BNM_ModifiedOn = DateTime.Now;
                }
            }
            _dbContext.SaveChanges();
        }

        #endregion

        #region Bulletins Popup

        /// <summary>
        /// Get Bulletin IDs List
        /// </summary>
        /// <param name="tenantId"></param>
        /// <param name="currentUserId"></param>
        /// <returns></returns>
        List<Int32> IComplianceDataRepository.GetBulletins(Int32 tenantId, Int32 currentUserId)
        {
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            List<Int32> bulletinIDList = new List<Int32>();
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("usp_GetBulletins", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@LoggedInOrgUserID", currentUserId);
                cmd.Parameters.AddWithValue("@LoggedInUserTenantID", tenantId);
                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > 0)
                {
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        bulletinIDList = ds.Tables[0].AsEnumerable().Select(col =>
                                             Convert.ToInt32(col["BulletinID"])).ToList();
                    }
                }
            }
            return bulletinIDList;
        }

        #endregion

        #region UAT-1254
        /// <summary>
        /// Get AMS/Background Package Data points exis or not.
        /// </summary>
        /// <param name="packageSubscriptionID"></param>
        /// <returns>DataTable</returns>
        DataTable IComplianceDataRepository.GetBkgCompDataPointMappingExistOrNot(Int32? packageSubscriptionID, Int32? bkgOrderID)
        {
            packageSubscriptionID = packageSubscriptionID == AppConsts.MINUS_ONE ? null : packageSubscriptionID;
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand command = new SqlCommand("ams.usp_IsDataPointMappingNotExistAndBkgPkgCompleted", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@PackageSubscriptionID", packageSubscriptionID);
                if (bkgOrderID != null)
                    command.Parameters.AddWithValue("@BkgOrderID", bkgOrderID);
                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > 0)
                {
                    return ds.Tables[0];
                }
            }
            return new DataTable();
        }
        #endregion

        #region UAT-1538:Unified Document/ single document option and updates to document exports
        public Entity.UtilityFeatureUsage GetDocumentViewTypeSettingByUserID(Int32 orgUserId, List<Int16> utilityFeatureIds)
        {
            return Context.UtilityFeatureUsages.FirstOrDefault(ufu => ufu.UFU_OrgUserID == orgUserId
                && utilityFeatureIds.Contains(ufu.UFU_UtilityFeatureID) && ufu.UFU_IsDeleted == false);

        }
        #endregion

        #region UAT-1558
        public Int32 UpdateCompPkgGraduationStatus(Int32 orderId, Int16 graduatedId, Int32 currentUser, short dataAuditChangeTypeID, String graduatedCode)
        {
            var pkgSubscription = _dbContext.PackageSubscriptions.Where(cond => cond.OrderID.Value == orderId && !cond.IsDeleted).FirstOrDefault();

            if (pkgSubscription.IsNotNull())
            {
                Boolean IsExpired = pkgSubscription.ExpiryDate < DateTime.Now ? true : false;
                //UAT-2687: Archive actions to show up on admin data audit history
                ApplicantDataAudit applicantDataAuditHistory = new ApplicantDataAudit();
                applicantDataAuditHistory.ADA_PackageSubscriptionID = pkgSubscription.PackageSubscriptionID;

                if (!pkgSubscription.ArchiveStateID.IsNull())
                {
                    if (pkgSubscription.lkpArchiveState.AS_Code == ArchiveState.Archived.GetStringValue() && IsExpired)
                    {
                        applicantDataAuditHistory.ADA_OldValue = "Archived and Expired";
                    }
                    else if (pkgSubscription.lkpArchiveState.AS_Code == ArchiveState.Archived_and_Graduated.GetStringValue() && IsExpired)
                    {
                        applicantDataAuditHistory.ADA_OldValue = "Archived ,Expired and Graduated";
                    }
                    else if (pkgSubscription.lkpArchiveState.AS_Code == ArchiveState.Graduated.GetStringValue() && IsExpired)
                    {
                        applicantDataAuditHistory.ADA_OldValue = "Expired and Graduated";
                    }
                    else if (pkgSubscription.lkpArchiveState.AS_Code == ArchiveState.Archived.GetStringValue())
                    {
                        applicantDataAuditHistory.ADA_OldValue = "Archived";
                    }
                    else if (IsExpired)
                    {
                        applicantDataAuditHistory.ADA_OldValue = "Expired";
                    }
                    else if (pkgSubscription.lkpArchiveState.AS_Code == ArchiveState.Archived_and_Graduated.GetStringValue())
                    {
                        applicantDataAuditHistory.ADA_OldValue = "Archived and Graduated";
                    }
                    else if (pkgSubscription.lkpArchiveState.AS_Code == ArchiveState.Graduated.GetStringValue())
                    {
                        applicantDataAuditHistory.ADA_OldValue = "Graduated";
                    }
                    else if (pkgSubscription.lkpArchiveState.AS_Code == ArchiveState.Active.GetStringValue())
                    {
                        applicantDataAuditHistory.ADA_OldValue = "Active";
                    }
                }
                else
                {
                    applicantDataAuditHistory.ADA_OldValue = IsExpired == true ? "Expired" : String.Empty;
                }

                if (graduatedCode == ArchiveState.Archived.GetStringValue() && IsExpired)
                {
                    applicantDataAuditHistory.ADA_NewValue = "Archived and Expired";
                }
                else if (graduatedCode == ArchiveState.Archived_and_Graduated.GetStringValue() && IsExpired)
                {
                    applicantDataAuditHistory.ADA_NewValue = "Archived ,Expired and Graduated";
                }
                else if (graduatedCode == ArchiveState.Graduated.GetStringValue() && IsExpired)
                {
                    applicantDataAuditHistory.ADA_NewValue = "Expired and Graduated";
                }
                else if (graduatedCode == ArchiveState.Archived.GetStringValue())
                {
                    applicantDataAuditHistory.ADA_NewValue = "Archived";
                }
                else if (IsExpired)
                {
                    applicantDataAuditHistory.ADA_NewValue = "Expired";
                }
                else if (graduatedCode == ArchiveState.Archived_and_Graduated.GetStringValue())
                {
                    applicantDataAuditHistory.ADA_NewValue = "Archived and Graduated";
                }
                else if (graduatedCode == ArchiveState.Graduated.GetStringValue())
                {
                    applicantDataAuditHistory.ADA_NewValue = "Graduated";
                }
                else if (graduatedCode == ArchiveState.Active.GetStringValue())
                {
                    applicantDataAuditHistory.ADA_NewValue = "Active";
                }

                applicantDataAuditHistory.ADA_ChangeTypeID = dataAuditChangeTypeID;
                applicantDataAuditHistory.ADA_IsDeleted = false;
                applicantDataAuditHistory.ADA_ModifiedBy = currentUser;
                applicantDataAuditHistory.ADA_ModifiedOn = DateTime.Now;
                _dbContext.ApplicantDataAudits.AddObject(applicantDataAuditHistory);

                pkgSubscription.ArchiveStateID = graduatedId;
                pkgSubscription.ModifiedByID = currentUser;
                pkgSubscription.ModifiedOn = DateTime.Now;
            }

            if (_dbContext.SaveChanges() > 0)
                return pkgSubscription.PackageSubscriptionID;
            return AppConsts.NONE;
        }
        public Boolean UpdateIsGraduatedBkgPkg(Int32 BkgOrderId, Int16 graduatedId, Int32 currentUserId)
        {
            var BkgPkgDetails = _dbContext.BkgOrders.Where(cond => cond.BOR_MasterOrderID == BkgOrderId && !cond.BOR_IsDeleted).FirstOrDefault();

            if (BkgOrderId.IsNotNull())
            {
                BkgPkgDetails.BOR_ArchiveStateID = graduatedId;
                BkgPkgDetails.BOR_ModifiedByID = currentUserId;
                BkgPkgDetails.BOR_ModifiedOn = DateTime.Now;
            }
            if (_dbContext.SaveChanges() > 0)
                return true;
            return false;
        }

        public List<PackageSubscription> GetActiveSubscriptionListForUser(Int32 currentUserID)
        {
            Int16 mobilityStatusID = ClientDBContext.lkpSubscriptionMobilityStatus.Where(cond => cond.Code == "AAAB" && !cond.IsDeleted).Select(x => x.SubscriptionMobilityStatusID).FirstOrDefault();
            Int16 activeStatusID = ClientDBContext.lkpArchiveStates.Where(cond => cond.AS_Code == "AA" && !cond.AS_IsDeleted).Select(x => x.AS_ID).FirstOrDefault();

            return ClientDBContext.PackageSubscriptions.Include("CompliancePackage").Include("OrganizationUser")
            .Where(cond => cond.OrganizationUserID == currentUserID
                && !cond.IsDeleted
                && (cond.SubscriptionMobilityStatusID == null || cond.SubscriptionMobilityStatusID == mobilityStatusID)
                && cond.ExpiryDate > DateTime.Now && cond.ArchiveStateID == activeStatusID).ToList();
        }
        #endregion

        public ClientSystemDocument GetClientSystemDocumentByComplianceAttributeID(int complianceAttributeID)
        {
            //ComplianceAttributeDocument cad = _dbContext.ComplianceAttributes
            //    .Where(cond => cond.ComplianceAttributeID == complianceAttributeID && !cond.IsDeleted).FirstOrDefault().ComplianceAttributeDocuments.FirstOrDefault();
            //if (!cad.IsNullOrEmpty())
            //{
            //    return cad.ClientSystemDocument;
            //}
            return new ClientSystemDocument();
        }

        public ApplicantDocument GetApplicantDocumentByApplAttrDataID(int applAttrDataID)
        {

            Int32 appDocId = _dbContext.ApplicantComplianceDocumentMaps.Where(cond => cond.ApplicantComplianceAttributeID == applAttrDataID && !cond.IsDeleted).FirstOrDefault().ApplicantDocumentID;
            return _dbContext.ApplicantDocuments
                    .Where(cond => !cond.IsDeleted && cond.ApplicantDocumentID == appDocId).FirstOrDefault();
        }


        #region UAT-1607:Student Data Entry Screen changes
        /// <summary>
        /// Method return all item series for complience category.
        /// </summary>
        /// <param name="compCategoryId">Compliance Category ID </param>
        /// <returns>List of Item Series</returns>
        List<ItemSery> IComplianceDataRepository.GetItemSeriesForCategory(Int32 compCategoryId)
        {
            return _dbContext.ItemSeries.Where(cond => cond.IS_CategoryID == compCategoryId && !cond.IS_IsDeleted && cond.IS_IsActive).ToList();
        }

        /// <summary>
        /// Get Item Series by id
        /// </summary>
        /// <param name="itemSeriesId">itemSeriesId</param>
        /// <returns>Item series</returns>
        ItemSery IComplianceDataRepository.GetItemSeriesByID(Int32 itemSeriesId)
        {
            return _dbContext.ItemSeries.FirstOrDefault(cond => cond.IS_ID == itemSeriesId && !cond.IS_IsDeleted && cond.IS_IsActive);
        }

        List<ItemSeriesItemContract> IComplianceDataRepository.GetItemSeriesItemForCategories(List<Int32> categoryIds)
        {
            List<ItemSeriesItemContract> itemSeriesItemContractLst = new List<ItemSeriesItemContract>();
            List<ItemSery> itemSeriesList = _dbContext.ItemSeries.Where(cond => categoryIds.Contains(cond.IS_CategoryID) && !cond.IS_IsDeleted && cond.IS_IsActive).ToList();
            if (!itemSeriesList.IsNullOrEmpty())
            {
                foreach (var item in itemSeriesList)
                {
                    ItemSeriesItemContract itemSeriesItemContract = new ItemSeriesItemContract();
                    itemSeriesItemContract.ComplianceCategoryID = item.IS_CategoryID;
                    itemSeriesItemContract.ItemSeriesID = item.IS_ID;
                    itemSeriesItemContract.IsSeriesAvailablePostApproval = item.IS_IsAvailablePostApproval;
                    itemSeriesItemContract.ComplianceItemID = item.ItemSeriesItems.Where(cnd => !cnd.ISI_IsDeleted).Select(slct => slct.ISI_ItemID).ToList();
                    itemSeriesItemContractLst.Add(itemSeriesItemContract);
                }
            }
            return itemSeriesItemContractLst;

        }

        String IComplianceDataRepository.SaveSeriesAttributeData(Int32 packageSubscriptionID, Int32 itemSeriesID, Int32 currentLoggedInUserID, String seriesAttributeXML,
                                                    String documentsXML, String calledFrom, Int32 orgUserId, String notes)
        {
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {

                SqlCommand command = new SqlCommand("usp_Series_HandleData", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@PackageSubscriptionID", packageSubscriptionID);
                command.Parameters.AddWithValue("@ItemSeriesID", itemSeriesID);
                command.Parameters.AddWithValue("@SystemUserID", currentLoggedInUserID);
                command.Parameters.AddWithValue("@SeriesAttributeXML", seriesAttributeXML);
                command.Parameters.AddWithValue("@DocumentsXML", documentsXML);
                command.Parameters.AddWithValue("@CalledFrom", calledFrom);
                command.Parameters.AddWithValue("@Notes", notes);
                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > 0)
                {
                    return Convert.ToString(ds.Tables[0].Rows[0][0]);
                }
            }
            return String.Empty;
        }
        #endregion

        public ApplicantComplianceItemData GetApplicantComplianceItemDataByID(Int32 applicantComplianceItemID)
        {
            return _dbContext.ApplicantComplianceItemDatas.Where(obj => obj.ApplicantComplianceItemID == applicantComplianceItemID && obj.IsDeleted == false).FirstOrDefault();
        }


        #region UAT-1597
        public List<PackageSubscription> GetPackageSubscriptionListByIDs(List<int> subscriptionIds, Boolean isResetContext)
        {
            if (isResetContext)
            {
                ResetClientContext();
            }
            return _dbContext.PackageSubscriptions.Where(x => subscriptionIds.Contains(x.PackageSubscriptionID) && !x.IsDeleted).ToList();
        }

        public DataTable GetPackageSubscriptionDataForNotification(String packageSubIds)
        {
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand command = new SqlCommand("usp_GetPackageSubscriptionDataForNotification", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@PkgSubIds", packageSubIds);
                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > 0)
                {
                    return ds.Tables[0];
                }
            }
            return new DataTable();
        }
        #endregion

        #region UAT-1648: As an applicant, I should be able to complete payment for an order that is in "sent for online payment"
        /// <summary>
        /// Method to get Address lookup data on the basis of AddressHandleID
        /// </summary>
        /// <param name="addressHandleID">addressHandleID</param>
        /// <returns>vw_AddressLookUp</returns>
        public vw_AddressLookUp GetAddressLookupByHandlerId(Guid addressHandleID)
        {
            return _dbContext.vw_AddressLookUp.Where(obj => obj.AddressHandleID.Equals(addressHandleID)).FirstOrDefault();
        }

        /// <summary>
        /// Method to update the already existing order for applicant Completing Order Process.
        /// </summary>
        /// <param name="applicantOrder">Existing Order</param>
        /// <param name="applicantOrderDataContract"> applicant Order Data Contract </param>
        /// <param name="orgUserID">Organization USER ID</param>
        /// <param name="compliancePackages">Compliance Package list</param>
        /// <returns></returns>
        public Dictionary<String, String> UpdateApplicantCompletingOrderProcess(Order applicantOrder, ApplicantOrderDataContract applicantOrderDataContract,
                                                                                 out String paymentModeCode, Int32 orgUserID, out List<Int32> newlyAddedOPDIds,
                                                                                 List<OrderCartCompliancePackage> compliancePackages = null, Boolean isLocationTenant = false)
        {
            Dictionary<String, String> _dicInvoiceNumbers = new Dictionary<String, String>();

            var _invoiceNumber = String.Empty;
            //DateTime _creationDateTime = DateTime.Now;
            DateTime _creationDateTime = DateTime.Now;

            newlyAddedOPDIds = new List<Int32>();
            #region UAT 916 Changes
            paymentModeCode = String.Empty; //To be removed
            #endregion

            #region Delete All OPDs Those order status is "Sent for online payment"
            var deletedOPDS = DeleteOPDSForCompletingOrderProcess(applicantOrder, _creationDateTime);
            if (applicantOrderDataContract.IsBillingCodeAmountAvlbl)
            {
                applicantOrder.OrderPaymentDetails.Where(cond => !cond.OPD_IsDeleted).ForEach(opd =>
                    {

                        var paymentdetail = opd;
                        // check from invoice table whether entry is of shipping or not

                        bool IsOrderPayment = true;
                        if (isLocationTenant)
                        {
                            EntityConnection connection = _dbContext.Connection as EntityConnection;
                            DataSet ds = new DataSet();
                            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
                            {
                                SqlCommand command = new SqlCommand("ams.usp_CheckPaymentToBeDeleted", con);
                                command.CommandType = CommandType.StoredProcedure;
                                command.Parameters.AddWithValue("@ID", paymentdetail.OPD_ID);
                                SqlDataAdapter adp = new SqlDataAdapter();
                                adp.SelectCommand = command;
                                adp.Fill(ds);
                                if ((Convert.ToInt16(ds.Tables[0].Rows[0][0]) == 0))
                                {
                                    IsOrderPayment = false;
                                }
                            }
                        }


                        if (!paymentdetail.IsNullOrEmpty() && IsOrderPayment)
                        {
                            paymentdetail.OPD_IsDeleted = true;
                            paymentdetail.OPD_ModifiedByID = applicantOrder.ModifiedByID;
                            paymentdetail.OPD_ModifiedOn = _creationDateTime;
                        }
                        deletedOPDS.Add(paymentdetail);
                    }
                    );
            }


            #endregion

            DeptProgramPackageSubscription programPackageSubscription = new DeptProgramPackageSubscription();

            if (applicantOrderDataContract.ProgramPackageSubscriptionId.IsNotNull() && applicantOrderDataContract.ProgramPackageSubscriptionId > AppConsts.NONE)
                programPackageSubscription = GetDeptProgramPackageSubscriptionDetail(applicantOrderDataContract.ProgramPackageSubscriptionId);

            //Int32 _createdById = applicantOrderDataContract.OrganizationUserProfile.OrganizationUserID;
            Int32 _createdById = orgUserID;
            Int32 _organizationUserID = applicantOrderDataContract.OrganizationUserProfile.OrganizationUserID;

            #region Store Browser agent
            //Need to Update Browser agent setting
            if (!String.IsNullOrEmpty(applicantOrderDataContract.UserBrowserAgentString))
            {
                UserBrowserAgent _browserAgent = applicantOrder.UserBrowserAgents.FirstOrDefault(x => !x.UBA_IsDeleted);
                if (!_browserAgent.IsNullOrEmpty())
                {
                    _browserAgent.UBA_String = applicantOrderDataContract.UserBrowserAgentString;
                    _browserAgent.UBA_CreatedByID = _createdById;
                    _browserAgent.UBA_CreatedOn = _creationDateTime;
                }
            }

            #endregion

            _dbContext.SaveChanges();
            //Get BkgOrderPackage  Data for Opds that are deleted
            var _lstBkgOrderPkg = GetBkgOrderPackageDetail(deletedOPDS);

            #region UAT-1185 get OrderID for each Compliance Packages
            if (compliancePackages.IsNotNull() && compliancePackages.Count > AppConsts.NONE)
            {
                foreach (OrderCartCompliancePackage cp in compliancePackages)
                {
                    if (applicantOrder.DeptProgramPackageID.Equals(cp.DPP_Id))
                    {
                        cp.OrderId = applicantOrder.OrderID;
                        cp.OrderNumber = applicantOrder.OrderNumber;
                    }
                    else
                    {
                        if (applicantOrder.OrderGroupOrderNavProp.IsNotNull() && applicantOrder.OrderGroupOrderNavProp.Count > AppConsts.NONE)
                        {
                            Order o = applicantOrder.OrderGroupOrderNavProp.FirstOrDefault(ord => ord.DeptProgramPackageID == cp.DPP_Id);
                            if (o.IsNotNull())
                            {
                                cp.OrderId = o.OrderID;
                                cp.OrderNumber = o.OrderNumber;
                            }
                        }
                    }
                }
            }
            #endregion

            var _orderStatusId = 0;

            var _bkgPkgTypeId = applicantOrderDataContract.lstOrderPackageTypes.Where(opt => opt.OPT_Code == OrderPackageTypes.BACKGROUND_PACKAGE.GetStringValue()).FirstOrDefault().OPT_ID;
            var _compliancePkgTypeId = applicantOrderDataContract.lstOrderPackageTypes.Where(opt => opt.OPT_Code == OrderPackageTypes.COMPLIANCE_PACKAGE.GetStringValue()).FirstOrDefault().OPT_ID;
            List<OrderPaymentDetail> newlyAddedOPDList = new List<OrderPaymentDetail>();
            foreach (var poId in applicantOrderDataContract.lstGroupedData)
            {
                bool mainOrderPaymentDetailEntry = false;
                if (poId.TotalAmount > AppConsts.NONE)
                {
                    _orderStatusId = GetOrderStatusId(poId.PaymentModeCode);
                }
                else
                {
                    _orderStatusId = GetOrderStatusCode(ApplicantOrderStatus.Paid.GetStringValue());
                }

                #region UAT-1185 Adjust amount of main order payment details if it has extra compliance too
                decimal adjustedAmount = 0;
                List<Int32> childOrderIds = new List<int>();
                foreach (var pkg in poId.lstPackages)
                {
                    if (!pkg.Value)
                    {
                        var pkgId = Convert.ToInt32(pkg.Key.Split('_')[0]);
                        if (pkgId == applicantOrder.DeptProgramPackage.DPP_CompliancePackageID)
                            mainOrderPaymentDetailEntry = true;
                        else
                        {
                            OrderCartCompliancePackage cp = compliancePackages.First(ocp => ocp.CompliancePackageID == pkgId && ocp.OrderId > AppConsts.NONE);
                            if (pkgId == cp.CompliancePackageID)
                            {
                                adjustedAmount += cp.GrandTotal.IsNull() ? AppConsts.NONE : Convert.ToDecimal(cp.GrandTotal);
                                childOrderIds.Add(cp.OrderId);
                            }
                        }
                    }
                    else
                        mainOrderPaymentDetailEntry = true;
                }

                #endregion
                // Store Invoice Number and Payment Mode
                OrderPaymentDetail paymentDetails = null;
                Int32 firstExtraOrderID = 0;
                if (mainOrderPaymentDetailEntry)
                {
                    _invoiceNumber = GenerateInvoiceNumber(applicantOrder.OrderID, applicantOrderDataContract.TenantId, false, childOrderIds);
                    paymentDetails = AddOnlinePaymentTransaction(applicantOrder, _creationDateTime, _invoiceNumber,
                                               poId.TotalAmount, poId.PaymentModeId, _orderStatusId, applicantOrder.CreatedByID, adjustedAmount);

                    newlyAddedOPDList.Add(paymentDetails);

                    int cmpPkgId = 0;
                    if (compliancePackages.IsNotNull() && compliancePackages.Count > AppConsts.NONE)
                    {
                        var compliancePackage = compliancePackages.Find(cp => cp.OrderId.Equals(applicantOrder.OrderID));
                        if (compliancePackage.IsNotNull() && compliancePackage.CompliancePackageID > AppConsts.NONE)
                            cmpPkgId = compliancePackage.CompliancePackageID;
                    }

                    AddOrderPaymentPackageDetail(poId, _lstBkgOrderPkg, paymentDetails, _bkgPkgTypeId, _compliancePkgTypeId, applicantOrder.CreatedByID, _creationDateTime, cmpPkgId);
                }
                else if (childOrderIds.Count > 0)
                {
                    firstExtraOrderID = childOrderIds[0];
                    childOrderIds.RemoveAt(0);

                    _invoiceNumber = GenerateInvoiceNumber(firstExtraOrderID, applicantOrderDataContract.TenantId, false, childOrderIds);

                }
                //UAT 4537 Allow the CC payment method packages that don’t require approval to go through, even while other packages within the same order are still pending approval 
                if (poId.IsApprovalRequiredPaymentGrouping && applicantOrderDataContract.lstGroupedData.Any(x => x.PaymentModeCode == PaymentOptions.Credit_Card.GetStringValue() && x.IsApprovalRequiredPaymentGrouping == false) && poId.PaymentModeCode == PaymentOptions.Credit_Card.GetStringValue())
                    _dicInvoiceNumbers.Add(PaymentOptions.Credit_Card_With_Approval_Required.GetStringValue(), _invoiceNumber);
                else
                    _dicInvoiceNumbers.Add(poId.PaymentModeCode, _invoiceNumber);
                // _dicInvoiceNumbers.Add(poId.PaymentModeCode, _invoiceNumber);

                #region UAT-1185 generate order payment details entries
                if (compliancePackages.IsNotNull() && compliancePackages.Count > AppConsts.NONE && applicantOrder.OrderGroupOrderNavProp.IsNotNull() && applicantOrder.OrderGroupOrderNavProp.Count > AppConsts.NONE)
                {
                    foreach (var pkg in poId.lstPackages)
                    {
                        if (!pkg.Value)
                        {
                            var pkgId = Convert.ToInt32(pkg.Key.Split('_')[0]);

                            OrderCartCompliancePackage cp = compliancePackages.Find(p => p.CompliancePackageID.Equals(pkgId));
                            if (cp.IsNotNull())
                            {
                                Order extraOrder = applicantOrder.OrderGroupOrderNavProp.FirstOrDefault(eo => eo.OrderID.Equals(cp.OrderId));
                                if (extraOrder.IsNotNull())
                                {
                                    if (paymentDetails.IsNull())
                                    {
                                        decimal cpAdjustedAmount = adjustedAmount - (cp.GrandTotal.IsNull() ? AppConsts.NONE : Convert.ToDecimal(cp.GrandTotal));
                                        paymentDetails = AddOnlinePaymentTransaction(extraOrder, _creationDateTime, _invoiceNumber,
                                            poId.TotalAmount, poId.PaymentModeId, _orderStatusId, applicantOrder.CreatedByID, cpAdjustedAmount);

                                        newlyAddedOPDList.Add(paymentDetails);

                                        AddOrderPaymentPackageDetail(poId, null, paymentDetails, _bkgPkgTypeId, _compliancePkgTypeId, applicantOrder.CreatedByID, _creationDateTime, cp.CompliancePackageID);
                                    }
                                    else
                                    {
                                        OrderPaymentDetail opd = AddOrderPaymentDetail(extraOrder, paymentDetails.OnlinePaymentTransaction, _creationDateTime, (cp.GrandTotal.IsNull() ? AppConsts.NONE : Convert.ToDecimal(cp.GrandTotal)), poId.PaymentModeId, _orderStatusId, applicantOrder.CreatedByID);
                                        newlyAddedOPDList.Add(opd);
                                        AddOrderPaymentPackageDetail(poId, null, opd, _bkgPkgTypeId, _compliancePkgTypeId, applicantOrder.CreatedByID, _creationDateTime, cp.CompliancePackageID);
                                    }
                                }
                            }
                        }
                    }
                }
                _dbContext.SaveChanges();
                #endregion
            }

            if (!newlyAddedOPDList.IsNullOrEmpty())
            {
                newlyAddedOPDIds = newlyAddedOPDList.Where(cnd => !cnd.OPD_IsDeleted).Select(slct => slct.OPD_ID).ToList();
            }
            return _dicInvoiceNumbers;
        }

        /// <summary>
        /// Method to update the already existing order for applicant Modify Shipping Process.
        /// </summary>
        /// <param name="applicantOrder">Existing Order</param>
        /// <param name="applicantOrderDataContract"> applicant Order Data Contract </param>
        /// <param name="applicantOrderCart">applicantOrderCart</param>
        /// <param name="orgUserID">Organization USER ID</param>
        /// <param name="compliancePackages">Compliance Package list</param>
        /// <returns></returns>
        public Dictionary<String, String> UpdateApplicantModifyShippingProcess(Order applicantOrder, ApplicantOrderDataContract applicantOrderDataContract, ApplicantOrderCart applicantOrderCart,
                                                                                 out String paymentModeCode, Int32 orgUserID, out List<Int32> newlyAddedOPDIds,
                                                                                 List<OrderCartCompliancePackage> compliancePackages = null, Boolean IsModifyShipping = false)
        {
            Dictionary<String, String> _dicInvoiceNumbers = new Dictionary<String, String>();

            var _mailingAmount = applicantOrderCart.MailingPrice;
            var _invoiceNumber = String.Empty;
            //DateTime _creationDateTime = DateTime.Now;
            DateTime _creationDateTime = DateTime.Now;

            newlyAddedOPDIds = new List<Int32>();
            #region UAT 916 Changes
            paymentModeCode = String.Empty; //To be removed
            #endregion

            #region Delete All OPDs Those order status is "Modify Shipping Sent for online payment"
            var deletedOPDS = DeleteOPDSForCompletingOrderProcessModifyShipping(applicantOrder, _creationDateTime);

            if (applicantOrderDataContract.IsBillingCodeAmountAvlbl)
            {
                applicantOrder.OrderPaymentDetails.Where(cond => !cond.OPD_IsDeleted).ForEach(opd =>
                {
                    var paymentdetail = opd;
                    if (!paymentdetail.IsNullOrEmpty())
                    {
                        paymentdetail.OPD_IsDeleted = true;
                        paymentdetail.OPD_ModifiedByID = applicantOrder.ModifiedByID;
                        paymentdetail.OPD_ModifiedOn = _creationDateTime;
                    }
                    deletedOPDS.Add(paymentdetail);
                }
                    );
            }


            #endregion

            DeptProgramPackageSubscription programPackageSubscription = new DeptProgramPackageSubscription();

            if (applicantOrderDataContract.ProgramPackageSubscriptionId.IsNotNull() && applicantOrderDataContract.ProgramPackageSubscriptionId > AppConsts.NONE)
                programPackageSubscription = GetDeptProgramPackageSubscriptionDetail(applicantOrderDataContract.ProgramPackageSubscriptionId);

            //Int32 _createdById = applicantOrderDataContract.OrganizationUserProfile.OrganizationUserID;
            Int32 _createdById = orgUserID;
            Int32 _organizationUserID = applicantOrderDataContract.OrganizationUserProfile.OrganizationUserID;

            #region Store Browser agent
            //Need to Update Browser agent setting
            if (!String.IsNullOrEmpty(applicantOrderDataContract.UserBrowserAgentString))
            {
                UserBrowserAgent _browserAgent = applicantOrder.UserBrowserAgents.FirstOrDefault(x => !x.UBA_IsDeleted);
                if (!_browserAgent.IsNullOrEmpty())
                {
                    _browserAgent.UBA_String = applicantOrderDataContract.UserBrowserAgentString;
                    _browserAgent.UBA_CreatedByID = _createdById;
                    _browserAgent.UBA_CreatedOn = _creationDateTime;
                }
            }

            #endregion

            _dbContext.SaveChanges();
            //Get BkgOrderPackage  Data for Opds that are deleted
            var _lstBkgOrderPkg = GetBkgOrderPackageDetail(deletedOPDS);

            #region UAT-1185 get OrderID for each Compliance Packages
            if (compliancePackages.IsNotNull() && compliancePackages.Count > AppConsts.NONE)
            {
                foreach (OrderCartCompliancePackage cp in compliancePackages)
                {
                    if (applicantOrder.DeptProgramPackageID.Equals(cp.DPP_Id))
                    {
                        cp.OrderId = applicantOrder.OrderID;
                        cp.OrderNumber = applicantOrder.OrderNumber;
                    }
                    else
                    {
                        if (applicantOrder.OrderGroupOrderNavProp.IsNotNull() && applicantOrder.OrderGroupOrderNavProp.Count > AppConsts.NONE)
                        {
                            Order o = applicantOrder.OrderGroupOrderNavProp.FirstOrDefault(ord => ord.DeptProgramPackageID == cp.DPP_Id);
                            if (o.IsNotNull())
                            {
                                cp.OrderId = o.OrderID;
                                cp.OrderNumber = o.OrderNumber;
                            }
                        }
                    }
                }
            }
            #endregion

            var _orderStatusId = 0;

            var _bkgPkgTypeId = applicantOrderDataContract.lstOrderPackageTypes.Where(opt => opt.OPT_Code == OrderPackageTypes.BACKGROUND_PACKAGE.GetStringValue()).FirstOrDefault().OPT_ID;
            var _compliancePkgTypeId = applicantOrderDataContract.lstOrderPackageTypes.Where(opt => opt.OPT_Code == OrderPackageTypes.COMPLIANCE_PACKAGE.GetStringValue()).FirstOrDefault().OPT_ID;
            List<OrderPaymentDetail> newlyAddedOPDList = new List<OrderPaymentDetail>();
            foreach (var poId in applicantOrderDataContract.lstGroupedData)
            {
                bool mainOrderPaymentDetailEntry = false;
                if (poId.TotalAmount > AppConsts.NONE)
                {
                    _orderStatusId = GetOrderStatusCode(ApplicantOrderStatus.Modify_Shipping_Send_For_Online_Payment.GetStringValue());
                }
                else
                {
                    _orderStatusId = GetOrderStatusCode(ApplicantOrderStatus.Paid.GetStringValue());
                }

                #region UAT-1185 Adjust amount of main order payment details if it has extra compliance too
                decimal adjustedAmount = 0;
                List<Int32> childOrderIds = new List<int>();
                foreach (var pkg in poId.lstPackages)
                {
                    if (!pkg.Value)
                    {
                        var pkgId = Convert.ToInt32(pkg.Key.Split('_')[0]);
                        if (pkgId == applicantOrder.DeptProgramPackage.DPP_CompliancePackageID)
                            mainOrderPaymentDetailEntry = true;
                        else
                        {
                            OrderCartCompliancePackage cp = compliancePackages.First(ocp => ocp.CompliancePackageID == pkgId && ocp.OrderId > AppConsts.NONE);
                            if (pkgId == cp.CompliancePackageID)
                            {
                                adjustedAmount += cp.GrandTotal.IsNull() ? AppConsts.NONE : Convert.ToDecimal(cp.GrandTotal);
                                childOrderIds.Add(cp.OrderId);
                            }
                        }
                    }
                    else
                        mainOrderPaymentDetailEntry = true;
                }

                #endregion
                // Store Invoice Number and Payment Mode
                OrderPaymentDetail paymentDetails = null;
                Int32 firstExtraOrderID = 0;
                if (mainOrderPaymentDetailEntry)
                {
                    _invoiceNumber = GenerateInvoiceNumber(applicantOrder.OrderID, applicantOrderDataContract.TenantId, false, childOrderIds);
                    paymentDetails = AddOnlinePaymentTransaction(applicantOrder, _creationDateTime, _invoiceNumber,
                                               _mailingAmount, poId.PaymentModeId, _orderStatusId, applicantOrder.CreatedByID, adjustedAmount);

                    newlyAddedOPDList.Add(paymentDetails);

                    int cmpPkgId = 0;
                    if (compliancePackages.IsNotNull() && compliancePackages.Count > AppConsts.NONE)
                    {
                        var compliancePackage = compliancePackages.Find(cp => cp.OrderId.Equals(applicantOrder.OrderID));
                        if (compliancePackage.IsNotNull() && compliancePackage.CompliancePackageID > AppConsts.NONE)
                            cmpPkgId = compliancePackage.CompliancePackageID;
                    }

                    AddOrderPaymentPackageDetail(poId, _lstBkgOrderPkg, paymentDetails, _bkgPkgTypeId, _compliancePkgTypeId, applicantOrder.CreatedByID, _creationDateTime, cmpPkgId);
                }
                else if (childOrderIds.Count > 0)
                {
                    firstExtraOrderID = childOrderIds[0];
                    childOrderIds.RemoveAt(0);

                    _invoiceNumber = GenerateInvoiceNumber(firstExtraOrderID, applicantOrderDataContract.TenantId, false, childOrderIds);

                }
                //UAT 4537 Allow the CC payment method packages that don’t require approval to go through, even while other packages within the same order are still pending approval 
                if (poId.IsApprovalRequiredPaymentGrouping && applicantOrderDataContract.lstGroupedData.Any(x => x.PaymentModeCode == PaymentOptions.Credit_Card.GetStringValue() && x.IsApprovalRequiredPaymentGrouping == false) && poId.PaymentModeCode == PaymentOptions.Credit_Card.GetStringValue())
                    _dicInvoiceNumbers.Add(PaymentOptions.Credit_Card_With_Approval_Required.GetStringValue(), _invoiceNumber);
                else
                    _dicInvoiceNumbers.Add(poId.PaymentModeCode, _invoiceNumber);
                // _dicInvoiceNumbers.Add(poId.PaymentModeCode, _invoiceNumber);

                #region UAT-1185 generate order payment details entries
                if (compliancePackages.IsNotNull() && compliancePackages.Count > AppConsts.NONE && applicantOrder.OrderGroupOrderNavProp.IsNotNull() && applicantOrder.OrderGroupOrderNavProp.Count > AppConsts.NONE)
                {
                    foreach (var pkg in poId.lstPackages)
                    {
                        if (!pkg.Value)
                        {
                            var pkgId = Convert.ToInt32(pkg.Key.Split('_')[0]);

                            OrderCartCompliancePackage cp = compliancePackages.Find(p => p.CompliancePackageID.Equals(pkgId));
                            if (cp.IsNotNull())
                            {
                                Order extraOrder = applicantOrder.OrderGroupOrderNavProp.FirstOrDefault(eo => eo.OrderID.Equals(cp.OrderId));
                                if (extraOrder.IsNotNull())
                                {
                                    if (paymentDetails.IsNull())
                                    {
                                        decimal cpAdjustedAmount = adjustedAmount - (cp.GrandTotal.IsNull() ? AppConsts.NONE : Convert.ToDecimal(cp.GrandTotal));
                                        paymentDetails = AddOnlinePaymentTransaction(extraOrder, _creationDateTime, _invoiceNumber,
                                            poId.TotalAmount, poId.PaymentModeId, _orderStatusId, applicantOrder.CreatedByID, cpAdjustedAmount);

                                        newlyAddedOPDList.Add(paymentDetails);

                                        AddOrderPaymentPackageDetail(poId, null, paymentDetails, _bkgPkgTypeId, _compliancePkgTypeId, applicantOrder.CreatedByID, _creationDateTime, cp.CompliancePackageID);
                                    }
                                    else
                                    {
                                        OrderPaymentDetail opd = AddOrderPaymentDetail(extraOrder, paymentDetails.OnlinePaymentTransaction, _creationDateTime, (cp.GrandTotal.IsNull() ? AppConsts.NONE : Convert.ToDecimal(cp.GrandTotal)), poId.PaymentModeId, _orderStatusId, applicantOrder.CreatedByID);
                                        newlyAddedOPDList.Add(opd);
                                        AddOrderPaymentPackageDetail(poId, null, opd, _bkgPkgTypeId, _compliancePkgTypeId, applicantOrder.CreatedByID, _creationDateTime, cp.CompliancePackageID);
                                    }
                                }
                            }
                        }
                    }
                }
                _dbContext.SaveChanges();
                #endregion
            }

            if (!newlyAddedOPDList.IsNullOrEmpty())
            {
                newlyAddedOPDIds = newlyAddedOPDList.Where(cnd => !cnd.OPD_IsDeleted).Select(slct => slct.OPD_ID).ToList();
            }
            return _dicInvoiceNumbers;
        }

        /// <summary>
        /// To delete data from Online Payment Transaction, Order Payment Details and OrderPkg Payment Details 
        /// </summary>
        /// <param name="order"></param>
        /// <param name="invoiceNumber"></param>
        /// <param name="creationDateTime"></param>
        private List<OrderPaymentDetail> DeleteOPDSForCompletingOrderProcess(Order order, DateTime currentDateTime)
        {
            List<OrderPaymentDetail> lstDeletedOPDS = new List<OrderPaymentDetail>();
            String sentForOnlinePaymentCode = ApplicantOrderStatus.Send_For_Online_Payment.GetStringValue();
            String ordrPkgTypeComplianceRushOrderCode = OrderPackageTypes.COMPLIANCE_RUSHORDER_PACKAGE.GetStringValue();
            if (!order.IsNullOrEmpty())
            {
                order.OrderPaymentDetails.Where(cnd => !cnd.OPD_IsDeleted && cnd.lkpOrderStatu != null && cnd.lkpOrderStatu.Code == sentForOnlinePaymentCode).ForEach(opd =>
                {
                    if (!opd.OrderPkgPaymentDetails.Any(OPPD => OPPD.OPPD_BkgOrderPackageID == null && !OPPD.OPPD_IsDeleted
                                                                         && OPPD.lkpOrderPackageType.OPT_Code == ordrPkgTypeComplianceRushOrderCode))
                    {
                        var paymentdetail = opd;
                        //OnlinePaymentTransaction optToDelete = paymentdetail.OnlinePaymentTransaction;
                        //if (optToDelete.IsNotNull())
                        //{
                        //    optToDelete.IsDeleted = true;
                        //    optToDelete.ModifiedByID = order.ModifiedByID;
                        //    optToDelete.ModifiedOn = currentDateTime;
                        if (!paymentdetail.IsNullOrEmpty())
                        {
                            paymentdetail.OPD_IsDeleted = true;
                            paymentdetail.OPD_ModifiedByID = order.ModifiedByID;
                            paymentdetail.OPD_ModifiedOn = currentDateTime;
                        }
                        //}
                        lstDeletedOPDS.Add(paymentdetail);
                    }
                });
            }
            return lstDeletedOPDS;
        }

        /// <summary>
        /// To delete data from Online Payment Transaction, Order Payment Details and OrderPkg Payment Details 
        /// </summary>
        /// <param name="order"></param>
        /// <param name="invoiceNumber"></param>
        /// <param name="creationDateTime"></param>
        private List<OrderPaymentDetail> DeleteOPDSForCompletingOrderProcessModifyShipping(Order order, DateTime currentDateTime)
        {
            List<OrderPaymentDetail> lstDeletedOPDS = new List<OrderPaymentDetail>();
            String sentForOnlinePaymentCode = ApplicantOrderStatus.Modify_Shipping_Send_For_Online_Payment.GetStringValue();
            String ordrPkgTypeComplianceRushOrderCode = OrderPackageTypes.COMPLIANCE_RUSHORDER_PACKAGE.GetStringValue();
            if (!order.IsNullOrEmpty())
            {
                order.OrderPaymentDetails.Where(cnd => !cnd.OPD_IsDeleted && cnd.lkpOrderStatu != null && cnd.lkpOrderStatu.Code == sentForOnlinePaymentCode).ForEach(opd =>
                {
                    if (!opd.OrderPkgPaymentDetails.Any(OPPD => OPPD.OPPD_BkgOrderPackageID == null && !OPPD.OPPD_IsDeleted
                                                                         && OPPD.lkpOrderPackageType.OPT_Code == ordrPkgTypeComplianceRushOrderCode))
                    {
                        var paymentdetail = opd;
                        //OnlinePaymentTransaction optToDelete = paymentdetail.OnlinePaymentTransaction;
                        //if (optToDelete.IsNotNull())
                        //{
                        //    optToDelete.IsDeleted = true;
                        //    optToDelete.ModifiedByID = order.ModifiedByID;
                        //    optToDelete.ModifiedOn = currentDateTime;
                        if (!paymentdetail.IsNullOrEmpty())
                        {
                            paymentdetail.OPD_IsDeleted = true;
                            paymentdetail.OPD_ModifiedByID = order.ModifiedByID;
                            paymentdetail.OPD_ModifiedOn = currentDateTime;
                        }
                        //}
                        lstDeletedOPDS.Add(paymentdetail);
                    }
                });
            }
            return lstDeletedOPDS;
        }

        /// <summary>
        /// Method to Get background order package details for BOP_Ids those are the part of "Sent For Online Payment" status OPDs.
        /// </summary>
        /// <param name="sentForOnlinePaymentDetailList">OPDs those status are "Sent For Online Payment"</param>
        /// <returns>List of BkgOrderPackage</returns>
        public List<BkgOrderPackage> GetBkgOrderPackageDetail(List<OrderPaymentDetail> sentForOnlinePaymentDetailList)
        {
            String ordrPkgTypeBkgCode = OrderPackageTypes.BACKGROUND_PACKAGE.GetStringValue();
            List<Int32> lstBopIDs = new List<Int32>();
            List<BkgOrderPackage> lstBkgOrderPackageList = new List<BkgOrderPackage>();
            foreach (var opd in sentForOnlinePaymentDetailList)
            {
                var bopIds = opd.OrderPkgPaymentDetails.Where(OPPD => OPPD.OPPD_BkgOrderPackageID != null && !OPPD.OPPD_IsDeleted
                                                               && OPPD.lkpOrderPackageType.OPT_Code == ordrPkgTypeBkgCode).Select(slct => slct.OPPD_BkgOrderPackageID.Value)
                                                               .ToList();
                lstBopIDs.AddRange(bopIds);
            }
            lstBkgOrderPackageList = _dbContext.BkgOrderPackages.Where(cnd => !cnd.BOP_IsDeleted && lstBopIDs.Contains(cnd.BOP_ID)).ToList();
            return lstBkgOrderPackageList;
        }

        /// <summary>
        /// Get all package ids purchased by applicant those are "sent for online payment".
        /// </summary>
        /// <param name="organizationUserId">organizationUserId</param>
        /// <returns>List of Compliance Package IDs</returns>
        public List<Int32> GetAppCompPackageSentForOnlinePayment(Int32 organizationUserId)
        {
            List<Int32> lstCompPkgSentForOnlinePayment = new List<Int32>();
            List<OrderPaymentDetail> sentForOnlinePaymentDetail = new List<OrderPaymentDetail>();
            String sentForOnlinePaymentCode = ApplicantOrderStatus.Send_For_Online_Payment.GetStringValue();
            sentForOnlinePaymentDetail = _dbContext.OrderPaymentDetails.Where(cnd => cnd.Order.OrganizationUserProfile.OrganizationUserID == organizationUserId
                                                          && !cnd.Order.OrganizationUserProfile.IsDeleted && !cnd.Order.OrganizationUserProfile.OrganizationUser.IsDeleted
                                                          && !cnd.Order.IsDeleted && cnd.Order.PackageSubscription == null && cnd.lkpOrderStatu != null
                                                          && cnd.lkpOrderStatu.Code == sentForOnlinePaymentCode && !cnd.OPD_IsDeleted
                                                          ).ToList();

            if (!sentForOnlinePaymentDetail.IsNullOrEmpty())
            {
                String ordrPkgTypeComplianceRushOrderCode = OrderPackageTypes.COMPLIANCE_RUSHORDER_PACKAGE.GetStringValue();
                String compliancePackageTypeCode = OrderPackageTypes.COMPLIANCE_PACKAGE.GetStringValue();
                foreach (var opd in sentForOnlinePaymentDetail)
                {
                    if (!opd.OrderPkgPaymentDetails.Any(OPPD => !OPPD.OPPD_IsDeleted && OPPD.lkpOrderPackageType.OPT_Code == ordrPkgTypeComplianceRushOrderCode)
                        && opd.OrderPkgPaymentDetails.Any(OPPD => !OPPD.OPPD_IsDeleted && OPPD.OPPD_BkgOrderPackageID == null
                                                          && OPPD.lkpOrderPackageType.OPT_Code == compliancePackageTypeCode)
                        )
                    {
                        lstCompPkgSentForOnlinePayment.Add(opd.Order.DeptProgramPackage.DPP_CompliancePackageID);
                    }
                }
            }
            return lstCompPkgSentForOnlinePayment;
        }
        #endregion


        public Boolean GetBkgOrderNoteSetting(Int32 tenantId, String code)
        {
            ClientSetting clientSetting = _dbContext.ClientSettings.Where(cond => cond.CS_TenantID == tenantId && !cond.CS_IsDeleted && cond.lkpSetting.Code.Equals(code)).FirstOrDefault();
            if (clientSetting.IsNotNull())
            {
                if (clientSetting.CS_SettingValue.Contains("true") || clientSetting.CS_SettingValue.Contains("false"))
                {
                    return Convert.ToBoolean(clientSetting.CS_SettingValue);
                }
                else
                {
                    return Convert.ToBoolean(Convert.ToInt32(clientSetting.CS_SettingValue));
                }
            }
            return false;
        }

        #region UAT-1581:Everett Enhancement Request: Turn off non-data sync doc going to data entry by tenant
        public ClientSetting GetClientSetting(Int32 tenantId, String settingCode, String languageCode)
        {
            ClientSetting clientSetting = _dbContext.ClientSettings.Where(cond => cond.CS_TenantID == tenantId && !cond.CS_IsDeleted
                                                                          && cond.lkpSetting.Code.Equals(settingCode)).FirstOrDefault();
            if (!clientSetting.IsNullOrEmpty())
            {
                if (!languageCode.IsNullOrEmpty() && languageCode == Languages.SPANISH.GetStringValue())
                {
                    Int32 entityId = clientSetting.CS_ID;
                    String entitytypeCode = LanguageTranslationEntityType.ClientSettings.GetStringValue();
                    clientSetting.CS_SettingValueLangugaeSpecific = GetEntityTypeTranslatedText(entityId, entitytypeCode);
                }
                else
                {
                    clientSetting.CS_SettingValueLangugaeSpecific = clientSetting.CS_SettingValue == null ? "0" : clientSetting.CS_SettingValue;
                }
            }

            return clientSetting;
        }
        #endregion


        public BackgroundServiceExecutionHistory GetLastSuccessfullExecutionHistory(int tenantID, string serviceName)
        {
            return _dbContext.BackgroundServiceExecutionHistories
                .Where(cond => cond.BSEH_EndTime.HasValue && cond.BSEH_ServiceName.ToLower() == serviceName.ToLower())
                .OrderByDescending(x => x.BSEH_Id).FirstOrDefault();
        }

        public Boolean SaveBackgroundServiceExecutionHistory(BackgroundServiceExecutionHistory backgroundServiceExecutionHistory)
        {
            _dbContext.BackgroundServiceExecutionHistories.AddObject(backgroundServiceExecutionHistory);
            if (_dbContext.SaveChanges() > 0)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        //UAT:4522

        public List<GranularPermission> GeNewtGranularPermission(Int32 CurrentLoggedUserId)
        {

            DataSet ds = new DataSet();
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {

                SqlCommand command = new SqlCommand("usp_GetClientAdminGranularPermission", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@OrgUserID", CurrentLoggedUserId);

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                adp.Fill(ds);

            }
            List<GranularPermission> lstGranularPermission = new List<GranularPermission>();
            lstGranularPermission = ds.Tables[0].AsEnumerable().Select(col =>
                  new GranularPermission
                  {
                      EntityCode = col["EntityCode"] == DBNull.Value ? string.Empty : Convert.ToString(col["EntityCode"]),
                      PermissionCode = col["PermissionCode"] == DBNull.Value ? string.Empty : Convert.ToString(col["PermissionCode"]),
                      HierarchyID = col["HierarchyID"] == DBNull.Value ? 0 : Convert.ToInt32(col["HierarchyID"]),
                      MasterDpmId = col["MasterDPMID"] == DBNull.Value ? 0 : Convert.ToInt32(col["MasterDPMID"]),

                  }).ToList();
            return lstGranularPermission;

        }

        public List<Int32> GetUsersToMarkApplicantDocumentsComplete(DateTime fromDate, DateTime toDate, Int32 chunkSize, Int32 lastFetchedOrgUserID)
        {
            List<Int32> lstUsers = new List<int>();

            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {

                SqlCommand command = new SqlCommand("usp_GetUsersToMarkApplicantDocumentsComplete", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@FromDate", fromDate);
                command.Parameters.AddWithValue("@ToDate", toDate);
                command.Parameters.AddWithValue("@ChunkSize", chunkSize);
                command.Parameters.AddWithValue("@LastFetchedOrgUserID", lastFetchedOrgUserID);

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);

                if (ds.IsNotNull() && ds.Tables.IsNotNull() && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    foreach (DataRow row in ds.Tables[0].Rows)
                    {
                        lstUsers.Add(Convert.ToInt32(row["OrganizationUserID"]));
                    }
                }
            }
            return lstUsers;
        }

        public Boolean UpdateStatusForApplicantDocuments(List<Int32> lstUsers, Int32 currentloggedInUserId, Int16 docStatusId)
        {

            List<Entity.ClientEntity.ApplicantDocument> lstApplicantDocuments = _dbContext.ApplicantDocuments.
                                                                  Where(cnd => lstUsers.Contains(cnd.OrganizationUserID.Value) && cnd.IsDeleted == false && cnd.DataEntryDocumentStatusID != docStatusId).ToList();
            lstApplicantDocuments.ForEach(doc =>
            {
                doc.DataEntryDocumentStatusID = docStatusId;
                doc.ModifiedByID = currentloggedInUserId;
                doc.ModifiedOn = DateTime.Now;
            });

            if (_dbContext.SaveChanges() > AppConsts.NONE)
                return true;
            return false;
        }

        #region UAT-1560 : We should be able to add documents that need to be signed to the order process
        public DataTable GetAdditionalDocumentSearch(SearchItemDataContract searchDataContract, CustomPagingArgsContract gridCustomPaging)
        {
            string orderBy = "FirstName";
            string ordDirection = null;

            orderBy = String.IsNullOrEmpty(gridCustomPaging.SortExpression) ? orderBy : gridCustomPaging.SortExpression;
            ordDirection = gridCustomPaging.SortDirectionDescending == false ? null : "desc";

            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand command = new SqlCommand("usp_GetApplicantAdditionalDocSearchData", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@DocumentName", searchDataContract.DocumentName);
                command.Parameters.AddWithValue("@FirstName", searchDataContract.ApplicantFirstName);
                command.Parameters.AddWithValue("@LastName", searchDataContract.ApplicantLastName);
                command.Parameters.AddWithValue("@OrderBy", orderBy);
                command.Parameters.AddWithValue("@OrderDirection", ordDirection);
                command.Parameters.AddWithValue("@PageIndex", gridCustomPaging.CurrentPageIndex);
                command.Parameters.AddWithValue("@PageSize", gridCustomPaging.PageSize);
                command.Parameters.AddWithValue("@OrganisationUserId", searchDataContract.LoggedInUserId);

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > 0)
                {
                    return ds.Tables[0];
                }
                return new DataTable();
            }
        }

        //added lstSystemDocBkgSvcMapping in UAT-3745
        //added Dictionary<Int32, Int32> dicAppDocWithSysDoc in UAT-4558
        public List<ApplicantDocument> UpdateApplicantAdditionalEsignatureDocument(List<Int32?> applicantAdditionalDocumentId, Dictionary<Int32, Int32> dicAppDocWithSysDoc, Int32 orderId, Int32 orgUserProfileId,
                                                                                   Int32 currentLoggedInUserId, Boolean needToSaveMapping, Int16 recordTypeId,
                                                                                   Int16 dataEntryDocCompletedStatusID, List<Int32?> additionalDocumentSendToStudent, List<SystemDocBkgSvcMapping> lstSystemDocBkgSvcMapping = null)
        {

            List<ApplicantDocument> applicantDocumentList = new List<ApplicantDocument>();
            if (!applicantAdditionalDocumentId.IsNullOrEmpty())
            {
                applicantDocumentList = _dbContext.ApplicantDocuments.Where(obj => applicantAdditionalDocumentId.Contains(obj.ApplicantDocumentID)).ToList();

                if (!applicantDocumentList.IsNullOrEmpty())
                {
                    applicantDocumentList.ForEach(appDoc =>
                    {
                        appDoc.IsDeleted = false;
                        appDoc.ModifiedOn = DateTime.Now;
                        appDoc.ModifiedByID = currentLoggedInUserId;
                        appDoc.Description = "E Signed Additional Document";
                        if (appDoc.IsSearchableOnly == false && needToSaveMapping)
                        {
                            appDoc.DataEntryDocumentStatusID = dataEntryDocCompletedStatusID;
                        }
                        //UAT-1835, NYU Migration 3 of 3: Automatic Interval Searching.
                        GenericDocumentMapping genericDocumentMapping = new GenericDocumentMapping();
                        genericDocumentMapping.GDM_RecordID = orderId;
                        genericDocumentMapping.GDM_RecordTypeID = recordTypeId;
                        genericDocumentMapping.GDM_ApplicantDocumentID = appDoc.ApplicantDocumentID;
                        //UAT-1759:Create the ability to mark an "Additional Documents" that the students complete in the order flow as "Send to student"
                        Boolean docNeedToSendToStudent = additionalDocumentSendToStudent.IsNullOrEmpty() ? false : additionalDocumentSendToStudent.Contains(appDoc.ApplicantDocumentID);
                        genericDocumentMapping.GDM_SendToStudent = docNeedToSendToStudent;

                        if (appDoc.IsSearchableOnly == false && needToSaveMapping)
                        {
                            genericDocumentMapping.GDM_IsDeleted = false;
                        }
                        else
                        {
                            genericDocumentMapping.GDM_IsDeleted = true;
                        }
                        genericDocumentMapping.GDM_CreatedOn = DateTime.Now;
                        genericDocumentMapping.GDM_CreatedBy = currentLoggedInUserId;

                        //added in UAT-4558
                        if (dicAppDocWithSysDoc.ContainsKey(appDoc.ApplicantDocumentID))
                            genericDocumentMapping.GDM_SystemDocumentID = dicAppDocWithSysDoc.Where(con => con.Key == appDoc.ApplicantDocumentID).Select(Sel => Sel.Value).FirstOrDefault();
                        //end

                        _dbContext.GenericDocumentMappings.AddObject(genericDocumentMapping);
                        //UAT-3745
                        if (!lstSystemDocBkgSvcMapping.IsNullOrEmpty())
                        {
                            SystemDocBkgSvcMapping systemDocBkgSvcMapping = lstSystemDocBkgSvcMapping.Where(con => con.ApplicantDocumentID == appDoc.ApplicantDocumentID).FirstOrDefault();
                            if (!systemDocBkgSvcMapping.IsNullOrEmpty())
                            {
                                GenericDocumentMapping genericDocumentMappingWithBkgSvc = new GenericDocumentMapping();

                                genericDocumentMappingWithBkgSvc.GDM_RecordID = systemDocBkgSvcMapping.BkgServiceID;
                                genericDocumentMappingWithBkgSvc.GDM_RecordTypeID = systemDocBkgSvcMapping.RecordTypeID;
                                genericDocumentMappingWithBkgSvc.GDM_ApplicantDocumentID = systemDocBkgSvcMapping.ApplicantDocumentID;
                                genericDocumentMappingWithBkgSvc.GDM_SystemDocumentID = systemDocBkgSvcMapping.SystemDocumentID;

                                Boolean docNeedToSendToStudentInBkgSvc = additionalDocumentSendToStudent.IsNullOrEmpty() ? false : additionalDocumentSendToStudent.Contains(appDoc.ApplicantDocumentID);

                                genericDocumentMappingWithBkgSvc.GDM_IsDeleted = false;
                                genericDocumentMappingWithBkgSvc.GDM_CreatedOn = DateTime.Now;
                                genericDocumentMappingWithBkgSvc.GDM_CreatedBy = currentLoggedInUserId;

                                _dbContext.GenericDocumentMappings.AddObject(genericDocumentMappingWithBkgSvc);
                            }
                        }
                    });
                }
            }
            if (_dbContext.SaveChanges() > 0)
                return applicantDocumentList;
            return null;

        }

        public List<ApplicantDocument> UpdateAdditionalDocumentStatusForApproveOrder(Int32 orderId, Int32 currentloggedInUserId, String docTypeCode,
                                                                                     Int16 dataEntryDocNewStatusID, String recordTypeCode, Int32 orgUserId)
        {
            //List<GenericDocumentMapping> lstDocumentMappingToUpdate = _dbContext.GenericDocumentMappings.Where(cnd => cnd.GDM_RecordID == orderId
            //                                                                                           && cnd.lkpRecordType.Code == recordTypeCode && !cnd.GDM_IsDeleted
            //                                                                                           && cnd.ApplicantDocument.lkpDocumentType.DMT_Code == docTypeCode
            //                                                                                           && !cnd.ApplicantDocument.IsDeleted
            //                                                                                           ).ToList();

            List<GenericDocumentMapping> lstDocumentMappingToUpdate = _dbContext.GenericDocumentMappings.Where(cnd => !cnd.GDM_IsDeleted
                                                                                                       && cnd.ApplicantDocument.lkpDocumentType.DMT_Code == docTypeCode
                                                                                                       && !cnd.ApplicantDocument.IsDeleted
                                                                                                       && cnd.ApplicantDocument.OrganizationUserID == orgUserId
                                                                                                       ).ToList();
            //UAT-3745 
            String bkgServiceTypeCode = RecordType.Background_Service.GetStringValue();
            lstDocumentMappingToUpdate = lstDocumentMappingToUpdate.Where(con => con.lkpRecordType.Code != bkgServiceTypeCode).ToList();

            List<ApplicantDocument> listUpdatedApplicantDocument = new List<ApplicantDocument>();
            if (!lstDocumentMappingToUpdate.IsNullOrEmpty())
            {
                lstDocumentMappingToUpdate.ForEach(map =>
                {
                    map.GDM_IsDeleted = true;
                    map.GDM_ModifiedOn = DateTime.Now;
                    map.GDM_ModifiedBy = currentloggedInUserId;

                    map.ApplicantDocument.DataEntryDocumentStatusID = dataEntryDocNewStatusID;
                    map.ApplicantDocument.ModifiedByID = currentloggedInUserId;
                    map.ApplicantDocument.ModifiedOn = DateTime.Now;
                    listUpdatedApplicantDocument.Add(map.ApplicantDocument);
                });

                if (_dbContext.SaveChanges() > 0)
                    return listUpdatedApplicantDocument;
            }
            return new List<ApplicantDocument>();
        }
        #endregion

        #region Invoice Group

        /// <summary>
        /// Get Dept Program Mapping List
        /// </summary>
        /// <returns></returns>
        public List<DeptProgramMapping> GetDeptProgramMappingList()
        {
            return _dbContext.DeptProgramMappings.Where(cond => !cond.DPM_IsDeleted).ToList();
        }

        #endregion

        #region  UAT 1711: Auto Multi-Review
        //public List<ItemReconciliationAvailiblityContract> GetItemReconciliationAvailiblityStatus(Int32 tenantID, String itemIDs)
        //{
        //    EntityConnection connection = SecurityContext.Connection as EntityConnection;
        //    using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
        //    {
        //        SqlCommand command = new SqlCommand("dbo.usp_CheckReconciliationAvailiblityForItem", con);
        //        command.CommandType = CommandType.StoredProcedure;
        //        command.Parameters.AddWithValue("@TenantID", tenantID);
        //        command.Parameters.AddWithValue("@ItemIds", itemIDs);
        //        SqlDataAdapter adp = new SqlDataAdapter();
        //        adp.SelectCommand = command;
        //        DataSet ds = new DataSet();
        //        adp.Fill(ds);
        //        List<ItemReconciliationAvailiblityContract> lstItemReconciliationAvailiblityContract = new List<ItemReconciliationAvailiblityContract>();
        //        lstItemReconciliationAvailiblityContract = ds.Tables[0].AsEnumerable().Select(col =>
        //              new ItemReconciliationAvailiblityContract
        //              {
        //                  ItemID = Convert.ToInt32(col["ItemID"]),
        //                  IsSelected = Convert.ToBoolean(col["IsSelected"]),
        //                  ReviewerCount = col["ReviewerCount"] == DBNull.Value ? 0 : Convert.ToInt32(col["ReviewerCount"]),
        //              }).ToList();
        //        return lstItemReconciliationAvailiblityContract;
        //    }

        //}

        /// <summary>
        /// UAT-4114 : Update Manage Random review to allow different review setting configuration by order node
        /// </summary>
        /// <param name="tenantID"></param>
        /// <param name="itemIDs"></param>
        /// <returns></returns>
        public List<ItemReconciliationAvailiblityContract> GetItemReconciliationAvailiblityStatus(Int32 tenantID, String itemIDs, Int32 subscriptionId)
        {
            EntityConnection connection = ClientDBContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand command = new SqlCommand("dbo.usp_CheckReconciliationAvailiblityForItem", con);
                command.CommandType = CommandType.StoredProcedure;
                //command.Parameters.AddWithValue("@TenantID", tenantID);
                command.Parameters.AddWithValue("@packageSubscriptionId", subscriptionId);
                command.Parameters.AddWithValue("@ItemIds", itemIDs);
                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                List<ItemReconciliationAvailiblityContract> lstItemReconciliationAvailiblityContract = new List<ItemReconciliationAvailiblityContract>();
                lstItemReconciliationAvailiblityContract = ds.Tables[0].AsEnumerable().Select(col =>
                      new ItemReconciliationAvailiblityContract
                      {
                          ItemID = Convert.ToInt32(col["ItemID"]),
                          IsSelected = Convert.ToBoolean(col["IsSelected"]),
                          ReviewerCount = col["ReviewerCount"] == DBNull.Value ? 0 : Convert.ToInt32(col["ReviewerCount"]),
                      }).ToList();
                return lstItemReconciliationAvailiblityContract;
            }

        }

        /// <summary>
        /// UAT 1711 Auto Multi-Review
        /// </summary>
        /// <param name="complianceItemId"></param>
        /// <param name="complianceCategoryId"></param>
        /// <param name="packageSubscriptionId"></param>
        /// <returns></returns>
        public Tuple<List<ReconciliationDetailsDataContract>, List<ApplicantItemVerificationData>> GetApplicantReconciliationDataForVerification(Int32 complianceItemId, Int32 complianceCategoryId, Int32 packageSubscriptionId)
        {
            List<ApplicantItemVerificationData> lstApplicantItemVerificationData = new List<ApplicantItemVerificationData>();
            List<ReconciliationDetailsDataContract> lstReconciliationDetailsDataContract = new List<ReconciliationDetailsDataContract>();
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand command = new SqlCommand("usp_GetReconciliationDetailsData", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@ComplianceItemId", complianceItemId);
                command.Parameters.AddWithValue("@ComplianceCategoryId", complianceCategoryId);
                command.Parameters.AddWithValue("@PackageSubscriptionId", packageSubscriptionId);
                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;

                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > 0)
                {
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        IEnumerable<DataRow> rows = ds.Tables[0].AsEnumerable();
                        #region CONVERT DATA TABLE TO CONTRACT
                        lstReconciliationDetailsDataContract = rows.Select(col =>
                                              new ReconciliationDetailsDataContract
                                              {
                                                  ApplicantComplianceReconciliationDataID = Convert.ToInt32(col["ApplicantComplianceReconciliationDataID"]),
                                                  ReviewerID = col["ReviewerID"] == DBNull.Value ? (Int32?)null : Convert.ToInt32(col["ReviewerID"]),
                                                  PkgSubscriptionID = col["PkgSubscriptionID"] == DBNull.Value ? (Int32?)null : Convert.ToInt32(col["PkgSubscriptionID"]),
                                                  CategoryDataID = col["CategoryDataID"] == DBNull.Value ? (Int32?)null : Convert.ToInt32(col["CategoryDataID"]),
                                                  ItemDataID = col["ItemDataID"] == DBNull.Value ? (Int32?)null : Convert.ToInt32(col["ItemDataID"]),
                                                  AttributeDataID = col["AttributeDataID"] == DBNull.Value ? (Int32?)null : Convert.ToInt32(col["AttributeDataID"]),
                                                  CompliancePackageID = col["CompliancePackageID"] == DBNull.Value ? (Int32?)null : Convert.ToInt32(col["CompliancePackageID"]),
                                                  ComplianceCategoryID = col["ComplianceCategoryID"] == DBNull.Value ? (Int32?)null : Convert.ToInt32(col["ComplianceCategoryID"]),
                                                  ComplianceItemID = col["ComplianceItemID"] == DBNull.Value ? (Int32?)null : Convert.ToInt32(col["ComplianceItemID"]),
                                                  ComplianceAttributeID = col["ComplianceAttributeID"] == DBNull.Value ? (Int32?)null : Convert.ToInt32(col["ComplianceAttributeID"]),
                                                  ItemStatusCode = col["ItemStatusCode"] == DBNull.Value ? String.Empty : Convert.ToString(col["ItemStatusCode"]),
                                                  AttributeValue = col["AttributeValue"] == DBNull.Value ? String.Empty : Convert.ToString(col["AttributeValue"]),
                                                  PackageName = col["PackageName"] == DBNull.Value ? String.Empty : Convert.ToString(col["PackageName"]),
                                                  CategoryName = col["CategoryName"] == DBNull.Value ? String.Empty : Convert.ToString(col["CategoryName"]),
                                                  ItemName = col["ItemName"] == DBNull.Value ? String.Empty : Convert.ToString(col["ItemName"]),
                                                  AttributeName = col["AttributeName"] == DBNull.Value ? String.Empty : Convert.ToString(col["AttributeName"]),
                                                  ReviewerName = col["ReviewerName"] == DBNull.Value ? String.Empty : Convert.ToString(col["ReviewerName"]),
                                                  AttributeDataTypeCode = col["AttributeDataTypeCode"] == DBNull.Value ? String.Empty : Convert.ToString(col["AttributeDataTypeCode"]),
                                                  ItemComplianceStatus = col["ItemComplianceStatus"] == DBNull.Value ? String.Empty : Convert.ToString(col["ItemComplianceStatus"]),
                                                  ItemComplianceStatusDescription = col["ItemComplianceStatusDescription"] == DBNull.Value ? String.Empty : Convert.ToString(col["ItemComplianceStatusDescription"]),
                                                  IsUiRulesViolate = Convert.ToBoolean(col["IsUiRulesViolate"])


                                              }).ToList();
                        #endregion
                    }
                    if (ds.Tables[1].Rows.Count > 0)
                    {
                        IEnumerable<DataRow> rows2 = ds.Tables[1].AsEnumerable();
                        #region CONVERT DATA TABLE TO CONTRACT
                        lstApplicantItemVerificationData = rows2.Select(col =>
                                              new ApplicantItemVerificationData
                                              {
                                                  CompliancePackageId = col["CompliancePackageId"] == DBNull.Value ? (Int32?)null : Convert.ToInt32(col["CompliancePackageId"]),
                                                  SubscriptionMobilityStatusCode = col["SubscriptionMobilityStatusCode"] == DBNull.Value ? String.Empty : Convert.ToString(col["SubscriptionMobilityStatusCode"]),
                                                  ComplianceCatId = Convert.ToInt32(col["ComplianceCatId"]),
                                                  CatName = col["CatName"] == DBNull.Value ? String.Empty : Convert.ToString(col["CatName"]),
                                                  CatDescription = col["CatDescription"] == DBNull.Value ? String.Empty : Convert.ToString(col["CatDescription"]),
                                                  ItemName = col["ItemName"] == DBNull.Value ? String.Empty : Convert.ToString(col["ItemName"]),
                                                  ItemDescription = col["ItemDescription"] == DBNull.Value ? String.Empty : Convert.ToString(col["ItemDescription"]),
                                                  AttributeName = col["AttributeName"] == DBNull.Value ? String.Empty : Convert.ToString(col["AttributeName"]),
                                                  ApplicantCatNotes = col["ApplicantCatNotes"] == DBNull.Value ? String.Empty : Convert.ToString(col["ApplicantCatNotes"]),
                                                  ApplicantCompCatId = col["ApplicantCompCatId"] == DBNull.Value ? (Int32?)null : Convert.ToInt32(col["ApplicantCompCatId"]),
                                                  CatComplianceStatus = col["CatComplianceStatus"] == DBNull.Value ? String.Empty : Convert.ToString(col["CatComplianceStatus"]),
                                                  ItemComplianceStatus = col["ItemComplianceStatus"] == DBNull.Value ? String.Empty : Convert.ToString(col["ItemComplianceStatus"]),
                                                  ApplicantItemNotes = col["ApplicantItemNotes"] == DBNull.Value ? String.Empty : Convert.ToString(col["ApplicantItemNotes"]),
                                                  ExceptionReason = col["ExceptionReason"] == DBNull.Value ? String.Empty : Convert.ToString(col["ExceptionReason"]),
                                                  AssignedToUserId = col["AssignedToUserId"] == DBNull.Value ? (Int32?)null : Convert.ToInt32(col["AssignedToUserId"]),
                                                  ComplianceItemId = Convert.ToInt32(col["ComplianceItemId"]),
                                                  ItemComplianceStatusId = col["ItemComplianceStatusId"] == DBNull.Value ? (Int32?)null : Convert.ToInt32(col["ItemComplianceStatusId"]),
                                                  ApplicantCompItemId = col["ApplicantCompItemId"] == DBNull.Value ? (Int32?)null : Convert.ToInt32(col["ApplicantCompItemId"]),
                                                  ReviewerTenantId = col["ReviewerTenantId"] == DBNull.Value ? (Int32?)null : Convert.ToInt32(col["ReviewerTenantId"]),
                                                  DocumentName = col["DocumentName"] == DBNull.Value ? String.Empty : Convert.ToString(col["DocumentName"]),
                                                  ExceptionDocumentMappingId = col["ExceptionDocumentMappingId"] == DBNull.Value ? (Int32?)null : Convert.ToInt32(col["ExceptionDocumentMappingId"]),
                                                  ApplicantId = col["ApplicantId"] == DBNull.Value ? (Int32?)null : Convert.ToInt32(col["ApplicantId"]),
                                                  VerificationComments = col["VerificationComments"] == DBNull.Value ? String.Empty : Convert.ToString(col["VerificationComments"]),
                                                  ItemComplianceStatusCode = col["ItemComplianceStatusCode"] == DBNull.Value ? String.Empty : Convert.ToString(col["ItemComplianceStatusCode"]),
                                                  ItemComplianceStatusDescription = col["ItemComplianceStatusDescription"] == DBNull.Value ? String.Empty : Convert.ToString(col["ItemComplianceStatusDescription"]),
                                                  AttributeValue = col["AttributeValue"] == DBNull.Value ? String.Empty : Convert.ToString(col["AttributeValue"]),
                                                  ApplAttributeDataId = col["ApplAttributeDataId"] == DBNull.Value ? (Int32?)null : Convert.ToInt32(col["ApplAttributeDataId"]),
                                                  AttributeTypeCode = col["AttributeTypeCode"] == DBNull.Value ? String.Empty : Convert.ToString(col["AttributeTypeCode"]),
                                                  AttributeLabel = col["AttributeLabel"] == DBNull.Value ? String.Empty : Convert.ToString(col["AttributeLabel"]),
                                                  MaximumCharacters = col["MaximumCharacters"] == DBNull.Value ? (Int32?)null : Convert.ToInt32(col["MaximumCharacters"]),
                                                  ComplianceAttributeDatatypeID = col["ComplianceAttributeDatatypeID"] == DBNull.Value ? (Int32?)null : Convert.ToInt32(col["ComplianceAttributeDatatypeID"]),
                                                  ItemExpNotes = col["ItemExpNotes"] == DBNull.Value ? String.Empty : Convert.ToString(col["ItemExpNotes"]),
                                                  OptionText = col["OptionText"] == DBNull.Value ? String.Empty : Convert.ToString(col["OptionText"]),
                                                  OptionValue = col["OptionValue"] == DBNull.Value ? String.Empty : Convert.ToString(col["OptionValue"]),
                                                  ComplianceAttributeId = col["ComplianceAttributeId"] == DBNull.Value ? (Int32?)null : Convert.ToInt32(col["ComplianceAttributeId"]),
                                                  ReviewerTypeCode = col["ReviewerTypeCode"] == DBNull.Value ? String.Empty : Convert.ToString(col["ReviewerTypeCode"]),
                                                  AttTypeCode = col["AttTypeCode"] == DBNull.Value ? String.Empty : Convert.ToString(col["AttTypeCode"]),
                                                  CatComplianceStatusCode = col["CatComplianceStatusCode"] == DBNull.Value ? String.Empty : Convert.ToString(col["CatComplianceStatusCode"]),
                                                  PackageName = col["PackageName"] == DBNull.Value ? String.Empty : Convert.ToString(col["PackageName"]),
                                                  ApplicantName = col["ApplicantName"] == DBNull.Value ? String.Empty : Convert.ToString(col["ApplicantName"]),
                                                  SubmissionDate = col["SubmissionDate"] == DBNull.Value ? (DateTime?)null : Convert.ToDateTime(col["SubmissionDate"]),
                                                  HierarchyNodeID = col["HierarchyNodeID"] == DBNull.Value ? (Int32?)null : Convert.ToInt32(col["HierarchyNodeID"]),
                                                  RushOrderStatus = col["RushOrderStatus"] == DBNull.Value ? String.Empty : Convert.ToString(col["RushOrderStatus"]),
                                                  RushOrderStatusCode = col["RushOrderStatusCode"] == DBNull.Value ? String.Empty : Convert.ToString(col["RushOrderStatusCode"]),
                                                  SystemStatusID = col["SystemStatusID"] == DBNull.Value ? (Int16?)null : Convert.ToInt16(col["SystemStatusID"]),
                                                  SystemStatus = col["SystemStatus"] == DBNull.Value ? String.Empty : Convert.ToString(col["SystemStatus"]),
                                                  EscalationCode = col["EscalationCode"] == DBNull.Value ? String.Empty : Convert.ToString(col["EscalationCode"]),
                                                  SampleDocFormURL = col["SampleDocFormURL"] == DBNull.Value ? String.Empty : Convert.ToString(col["SampleDocFormURL"]),
                                                  SampleDocFormDisplayURLLabel = col["SampleDocFormDisplayURLLabel"] == DBNull.Value ? String.Empty : Convert.ToString(col["SampleDocFormDisplayURLLabel"]),
                                                  CatExceptionStatusCode = col["CatExceptionStatusCode"] == DBNull.Value ? String.Empty : Convert.ToString(col["CatExceptionStatusCode"]),
                                                  CatExpirationDate = col["CatExpirationDate"] == DBNull.Value ? (DateTime?)null : Convert.ToDateTime(col["CatExpirationDate"]),
                                                  CatExceptionItemCode = new Guid(col["CatExceptionItemCode"] == DBNull.Value ? String.Empty : Convert.ToString(col["CatExceptionItemCode"])),
                                                  ItemMovementTypeID = col["ItemMovementTypeID"] == DBNull.Value ? (Int32?)null : Convert.ToInt32(col["ItemMovementTypeID"]),
                                                  ItemExpirationDate = col["ItemExpirationDate"] == DBNull.Value ? (DateTime?)null : Convert.ToDateTime(col["ItemExpirationDate"]),
                                                  ScreeningDocumentId = col["ScreeningDocumentId"] == DBNull.Value ? (Int32?)null : Convert.ToInt32(col["ScreeningDocumentId"]),
                                                  ScreeningDocumentName = col["ScreeningDocumentName"] == DBNull.Value ? null : Convert.ToString(col["ScreeningDocumentName"]),
                                                  ScreeningDocTypeCode = col["ScreeningDocTypeCode"] == DBNull.Value ? null : Convert.ToString(col["ScreeningDocTypeCode"]),
                                                  IsUiRulesViolate = Convert.ToBoolean(col["IsUiRulesViolate"])
                                              }).ToList();
                        #endregion
                    }
                }

            }
            return new Tuple<List<ReconciliationDetailsDataContract>, List<ApplicantItemVerificationData>>(lstReconciliationDetailsDataContract, lstApplicantItemVerificationData);
        }

        #endregion

        #region UAT-1758
        public String GetOvralCompStatusFromClientSetting(Int32 ClientID, Int32 SettingId)
        {
            var clientSetting = _dbContext.ClientSettings.WhereSelect(cond => cond.CS_TenantID == ClientID && cond.CS_SettingID == SettingId && !cond.CS_IsDeleted).FirstOrDefault();
            if (!clientSetting.IsNullOrEmpty())
                return clientSetting.CS_SettingValue;
            else
                return AppConsts.ZERO;
        }
        #endregion

        #region UAT-963: WB: As an ADB admin, I should be able to search one, many, or all institutions on the admin data audit history search
        /// <summary>
        /// Method to return last Synchronised Applicant data audit record id.
        /// </summary>
        /// <param name="tenantId"></param>
        /// <returns></returns>
        public ApplicantDataAuditSyncHistory GetLastSynchedAuditDataRecord()
        {
            return _dbContext.ApplicantDataAuditSyncHistories.Where(cond => !cond.ADASH_IsDeleted).OrderByDescending(ordBy => ordBy.ADASH_ID).FirstOrDefault();
        }

        /// <summary>
        /// Method to sync applicant audit data to multi tenant table of shared data base
        /// </summary>
        /// <param name="tenantId">tenantId</param>
        /// <param name="lastSynchedRecordId">lastSynchedRecordId</param>
        /// <param name="systemUserId">systemUserId</param>
        public void SyncApplicantAuditDataForTenant(Int32 tenantId, Int32? lastSynchedRecordId, Int32 systemUserId, Int32 chunkSize)
        {
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand command = new SqlCommand("usp_SynchroniseApplicantAuditData", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@tenantId", tenantId);
                command.Parameters.AddWithValue("@LastSynchedAuditDataID", lastSynchedRecordId);
                command.Parameters.AddWithValue("@SystemUserId", systemUserId);
                command.Parameters.AddWithValue("@chunkSize", chunkSize);
                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
            }
        }
        #endregion

        void IComplianceDataRepository.SyncReconcillationQueueData(Int32 tenantId, Int32 systemUserId)
        {
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand command = new SqlCommand("Usp_SyncReconcillationQueue", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@TenantId", tenantId);
                command.Parameters.AddWithValue("@SystemUserId", systemUserId);
                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
            }
        }


        #region UAT-1843: Phase 2 5: Combining User group mapping, archive and rotation assignment screens
        public List<StudentBucketAssignmentContract> GetStudentBucketAssignmentSearch(SearchItemDataContract searchDataContract, CustomPagingArgsContract gridCustomPaging)
        {
            String orderBy = QueueConstants.APPLICANT_SEARCH_DEFAULT_SORTING_FIELDS;
            String ordDirection = null;

            orderBy = String.IsNullOrEmpty(gridCustomPaging.SortExpression) ? orderBy : gridCustomPaging.SortExpression;
            ordDirection = gridCustomPaging.SortDirectionDescending == false ? null : "desc";

            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand command = new SqlCommand("usp_GetStudentBucketAssignmentSearch", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@FirstName", searchDataContract.ApplicantFirstName);
                command.Parameters.AddWithValue("@LastName", searchDataContract.ApplicantLastName);
                command.Parameters.AddWithValue("@OrganizationUserID", searchDataContract.OrganizationUserId);
                command.Parameters.AddWithValue("@EmailAddress", searchDataContract.EmailAddress);
                command.Parameters.AddWithValue("@SSN", searchDataContract.ApplicantSSN);
                command.Parameters.AddWithValue("@DOB", searchDataContract.DateOfBirth);
                command.Parameters.AddWithValue("@NodeIDs", searchDataContract.SelectedDPMIds);
                command.Parameters.AddWithValue("@CustomFields", searchDataContract.CustomFields);
                command.Parameters.AddWithValue("@FilterUserGroupID", searchDataContract.FilterUserGroupID);
                command.Parameters.AddWithValue("@OrderBy", orderBy);
                command.Parameters.AddWithValue("@OrderDirection", ordDirection);
                command.Parameters.AddWithValue("@PageIndex", gridCustomPaging.CurrentPageIndex);
                command.Parameters.AddWithValue("@PageSize", gridCustomPaging.PageSize);
                command.Parameters.AddWithValue("@LoggedInOrgUserID", searchDataContract.LoggedInUserId);
                command.Parameters.AddWithValue("@LoggedInOrgUserTenantID", searchDataContract.LoggedInUserTenantId);

                command.Parameters.AddWithValue("@AgencyID", searchDataContract.AgencyIDToFilterRotation);
                command.Parameters.AddWithValue("@ComplioID", searchDataContract.ComplioID);
                command.Parameters.AddWithValue("@RotationName", searchDataContract.RotationName);
                command.Parameters.AddWithValue("@Department", searchDataContract.Department);
                command.Parameters.AddWithValue("@Program", searchDataContract.Program);
                command.Parameters.AddWithValue("@Course", searchDataContract.Course);
                command.Parameters.AddWithValue("@Term", searchDataContract.Term);
                command.Parameters.AddWithValue("@UnitFloorLoc", searchDataContract.UnitFloorLoc);
                command.Parameters.AddWithValue("@NoOfHours", searchDataContract.RecommendedHours);
                command.Parameters.AddWithValue("@NoofStudents", searchDataContract.Students);
                command.Parameters.AddWithValue("@RotationShift", searchDataContract.Shift);
                command.Parameters.AddWithValue("@StartTime", searchDataContract.StartTime);
                command.Parameters.AddWithValue("@EndTime", searchDataContract.EndTime);
                command.Parameters.AddWithValue("@StartDate", searchDataContract.StartDate);
                command.Parameters.AddWithValue("@EndDate", searchDataContract.EndDate);
                command.Parameters.AddWithValue("@DaysList", searchDataContract.DaysIdList);
                command.Parameters.AddWithValue("@ContactList", searchDataContract.ContactIdList);
                command.Parameters.AddWithValue("@TypeSpecialty", searchDataContract.TypeSpecialty);
                command.Parameters.AddWithValue("@RotationCustomAtrributesData", searchDataContract.RotationCustomAttributes);

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > 0)
                {
                    List<StudentBucketAssignmentContract> lstApplicantData = new List<StudentBucketAssignmentContract>();
                    lstApplicantData = ds.Tables[0].AsEnumerable().Select(col =>
                          new StudentBucketAssignmentContract
                          {
                              OrganizationUserID = Convert.ToInt32(col["OrganizationUserID"]),
                              ApplicantFirstName = col["ApplicantFirstName"] == DBNull.Value ? String.Empty : Convert.ToString(col["ApplicantFirstName"]),
                              ApplicantLastName = col["ApplicantLastName"] == DBNull.Value ? String.Empty : Convert.ToString(col["ApplicantLastName"]),
                              DateOfBirth = col["DateOfBirth"] == DBNull.Value ? (DateTime?)null : Convert.ToDateTime(col["DateOfBirth"]),
                              EmailAddress = col["EmailAddress"] == DBNull.Value ? String.Empty : Convert.ToString(col["EmailAddress"]),
                              InstituteName = col["InstituteName"] == DBNull.Value ? String.Empty : Convert.ToString(col["InstituteName"]),
                              SSN = col["SSN"] == DBNull.Value ? String.Empty : Convert.ToString(col["SSN"]),
                              InstitutionHierarchy = col["InstitutionHierarchy"] == DBNull.Value ? String.Empty : Convert.ToString(col["InstitutionHierarchy"]),
                              UserGroups = col["UserGroups"] == DBNull.Value ? String.Empty : Convert.ToString(col["UserGroups"]),
                              RotationNameAssigned = col["RotationNameAssigned"] == DBNull.Value ? String.Empty : Convert.ToString(col["RotationNameAssigned"]),
                              ArchiveStatus = col["ArchiveStatus"] == DBNull.Value ? String.Empty : Convert.ToString(col["ArchiveStatus"]),
                              RotationNotification = col["RotationNotification"] == DBNull.Value ? String.Empty : Convert.ToString(col["RotationNotification"]),
                              BackgroundServiceGroupStatus = col["BackgroundServiceGroupStatus"] == DBNull.Value ? String.Empty : Convert.ToString(col["BackgroundServiceGroupStatus"]),
                              ImmunizationComplianceStatus = col["ImmunizationComplianceStatus"] == DBNull.Value ? String.Empty : Convert.ToString(col["ImmunizationComplianceStatus"]),
                              RotationComplianceStatus = col["RotationComplianceStatus"] == DBNull.Value ? String.Empty : Convert.ToString(col["RotationComplianceStatus"]),
                              TotalCount = col["TotalCount"] == DBNull.Value ? 0 : Convert.ToInt32(col["TotalCount"])
                          }).ToList();
                    return lstApplicantData;
                }
                return new List<StudentBucketAssignmentContract>();
            }
        }
        /// <summary>
        /// get ComplinacePackageArchiveHistory id  using organization user id
        /// </summary>
        /// <param name="orgUserIds"></param>
        /// <param name="UnArchiveId"></param>
        /// <returns></returns>
        public List<Int32> GetComPkgSubArchiveHistoryIds(List<Int32> orgUserIds, Int32 UnArchiveId)
        {
            return _dbContext.CompliancePackageSubscriptionArchiveHistories.Where(cond => !cond.CPSAH_IsDeleted && !cond.PackageSubscription.IsDeleted && !cond.PackageSubscription.OrganizationUser.IsDeleted
                    && orgUserIds.Contains(cond.PackageSubscription.OrganizationUser.OrganizationUserID) && cond.PackageSubscription.ArchiveStateID == UnArchiveId && cond.CPSAH_IsActive).Select(sel => sel.CPSAH_ID).ToList();
        }
        /// <summary>
        /// get bkgOrderArchiveHistory id  using organization user id
        /// </summary>
        /// <param name="orgUserIds"></param>
        /// <param name="UnArchiveId"></param>
        /// <returns></returns>
        public List<Int32> GetbkgOrderArchiveHistoryIds(List<Int32> orgUserIds, Int32 UnArchiveId)
        {
            return _dbContext.BkgOrderArchiveHistories.Where(cond => !cond.BOAH_IsDeleted && !cond.BkgOrder.BOR_IsDeleted && !cond.BkgOrder.OrganizationUserProfile.IsDeleted
                    && orgUserIds.Contains(cond.BkgOrder.OrganizationUserProfile.OrganizationUserID) && cond.BkgOrder.BOR_ArchiveStateID == UnArchiveId && cond.BOAH_IsActive).Select(sel => sel.BOAH_ID).ToList();
        }
        #endregion

        #region UAT-1833: NYU Migration 1 of 3: Batch Upload Admin Ordering

        List<BulkOrderUploadContract> IComplianceDataRepository.UploadBulkOrdersData(String applicantXmlData, String filePath, Int32 curentLoggedInUserID, String orderDataSourceCode)
        {
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand command = new SqlCommand("usp_UploadBulkOrders", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@XmlData", applicantXmlData);
                command.Parameters.AddWithValue("@FilePath", filePath);
                command.Parameters.AddWithValue("@CurrentLoggedInUserID", curentLoggedInUserID);
                command.Parameters.AddWithValue("@OrderDataSourceCode", orderDataSourceCode);

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > 0)
                {
                    List<BulkOrderUploadContract> lstApplicantData = new List<BulkOrderUploadContract>();
                    lstApplicantData = ds.Tables[0].AsEnumerable().Select(col =>
                          new BulkOrderUploadContract
                          {
                              //InstituteName = col["InstituteName"] == DBNull.Value ? String.Empty : Convert.ToString(col["InstituteName"]),
                              BulkOrderUploadID = Convert.ToInt32(col["BulkOrderUploadID"]),
                              BulkOrderUploadFileID = Convert.ToInt32(col["BulkOrderUploadFileID"]),
                              OrganizationUserId = col["ApplicantID"] == DBNull.Value ? (Int32?)null : Convert.ToInt32(col["ApplicantID"]),
                              ApplicantFirstName = col["FirstName"] == DBNull.Value ? String.Empty : Convert.ToString(col["FirstName"]),
                              ApplicantLastName = col["LastName"] == DBNull.Value ? String.Empty : Convert.ToString(col["LastName"]),
                              EmailAddress = col["EmailAddress"] == DBNull.Value ? String.Empty : Convert.ToString(col["EmailAddress"]),
                              PackageID = col["PackageID"] == DBNull.Value ? (Int32?)null : Convert.ToInt32(col["PackageID"]),
                              OrderNodeID = col["OrderNodeID"] == DBNull.Value ? (Int32?)null : Convert.ToInt32(col["OrderNodeID"]),
                              HierarchyNodeID = col["HierarchyNodeID"] == DBNull.Value ? (Int32?)null : Convert.ToInt32(col["HierarchyNodeID"]),
                              StartDate = col["StartDate"] == DBNull.Value ? (DateTime?)null : Convert.ToDateTime(col["StartDate"]),
                              EndDate = col["EndDate"] == DBNull.Value ? (DateTime?)null : Convert.ToDateTime(col["EndDate"]),
                              Interval = col["Interval"] == DBNull.Value ? (Int32?)null : Convert.ToInt32(col["Interval"]),
                              Notes = col["Notes"] == DBNull.Value ? String.Empty : Convert.ToString(col["Notes"]),
                              BulkOrderStatusID = col["BulkOrderStatusID"] == DBNull.Value ? (Int32?)null : Convert.ToInt32(col["BulkOrderStatusID"]),
                              BulkOrderStatusCode = col["BulkOrderStatusCode"] == DBNull.Value ? String.Empty : Convert.ToString(col["BulkOrderStatusCode"]),
                              BulkOrderStatusName = col["BulkOrderStatusName"] == DBNull.Value ? String.Empty : Convert.ToString(col["BulkOrderStatusName"]),
                              TotalCount = col["TotalCount"] == DBNull.Value ? 0 : Convert.ToInt32(col["TotalCount"])
                          }).ToList();
                    return lstApplicantData;
                }
                return new List<BulkOrderUploadContract>();
            }
        }

        #endregion

        #region UAT-2697

        List<BulkOrderUploadContract> IComplianceDataRepository.UploadBulkRepeatedOrdersData(String applicantXmlData, String filePath, Int32 curentLoggedInUserID, String orderDataSourceCode)
        {
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand command = new SqlCommand("usp_UploadBulkRepeatedOrders", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@XmlData", applicantXmlData);
                command.Parameters.AddWithValue("@FilePath", filePath);
                command.Parameters.AddWithValue("@CurrentLoggedInUserID", curentLoggedInUserID);
                command.Parameters.AddWithValue("@OrderDataSourceCode", orderDataSourceCode);

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > 0)
                {
                    List<BulkOrderUploadContract> lstApplicantData = new List<BulkOrderUploadContract>();
                    lstApplicantData = ds.Tables[0].AsEnumerable().Select(col =>
                          new BulkOrderUploadContract
                          {
                              //InstituteName = col["InstituteName"] == DBNull.Value ? String.Empty : Convert.ToString(col["InstituteName"]),
                              BulkOrderUploadID = Convert.ToInt32(col["BulkOrderUploadID"]),
                              BulkOrderUploadFileID = Convert.ToInt32(col["BulkOrderUploadFileID"]),
                              OrganizationUserId = col["ApplicantID"] == DBNull.Value ? (Int32?)null : Convert.ToInt32(col["ApplicantID"]),
                              ApplicantFirstName = col["FirstName"] == DBNull.Value ? String.Empty : Convert.ToString(col["FirstName"]),
                              ApplicantLastName = col["LastName"] == DBNull.Value ? String.Empty : Convert.ToString(col["LastName"]),
                              EmailAddress = col["EmailAddress"] == DBNull.Value ? String.Empty : Convert.ToString(col["EmailAddress"]),
                              PackageID = col["PackageID"] == DBNull.Value ? (Int32?)null : Convert.ToInt32(col["PackageID"]),
                              OrderNodeID = col["OrderNodeID"] == DBNull.Value ? (Int32?)null : Convert.ToInt32(col["OrderNodeID"]),
                              HierarchyNodeID = col["HierarchyNodeID"] == DBNull.Value ? (Int32?)null : Convert.ToInt32(col["HierarchyNodeID"]),
                              StartDate = col["StartDate"] == DBNull.Value ? (DateTime?)null : Convert.ToDateTime(col["StartDate"]),
                              EndDate = col["EndDate"] == DBNull.Value ? (DateTime?)null : Convert.ToDateTime(col["EndDate"]),
                              Interval = col["Interval"] == DBNull.Value ? (Int32?)null : Convert.ToInt32(col["Interval"]),
                              Notes = col["Notes"] == DBNull.Value ? String.Empty : Convert.ToString(col["Notes"]),
                              BulkOrderStatusID = col["BulkOrderStatusID"] == DBNull.Value ? (Int32?)null : Convert.ToInt32(col["BulkOrderStatusID"]),
                              BulkOrderStatusCode = col["BulkOrderStatusCode"] == DBNull.Value ? String.Empty : Convert.ToString(col["BulkOrderStatusCode"]),
                              BulkOrderStatusName = col["BulkOrderStatusName"] == DBNull.Value ? String.Empty : Convert.ToString(col["BulkOrderStatusName"]),
                              TotalCount = col["TotalCount"] == DBNull.Value ? 0 : Convert.ToInt32(col["TotalCount"])
                          }).ToList();
                    return lstApplicantData;
                }
                return new List<BulkOrderUploadContract>();
            }
        }

        #endregion

        public ComplianceItemSubmissionHistory InsertItemSubmissionHistory(Int32? reviewCount, Int32 currentUserId, DateTime? submissionDate, Boolean NotAssesedMultiReview)
        {
            String itemReconStatus = reviewCount.IsNotNull() ? ItemSubmissionReconStatus.SELECTED_FOR_MULTIREVIEW.GetStringValue()
                                                                    : ItemSubmissionReconStatus.MULTI_REVIEW_NOT_REQUIRED.GetStringValue();

            //Added for those cases where we do not require multireview like data is saved from verification detail.
            if (NotAssesedMultiReview)
                itemReconStatus = ItemSubmissionReconStatus.NOT_AssesedMultireview.GetStringValue();

            ComplianceItemSubmissionHistory newComplianceItemSubmissionHistory = new ComplianceItemSubmissionHistory();
            newComplianceItemSubmissionHistory.CISH_ReviewCount = reviewCount;
            //newComplianceItemSubmissionHistory.CISH_SubmissionDate = submissionDate.Value;
            newComplianceItemSubmissionHistory.CISH_SubmissionDate = submissionDate.IsNullOrEmpty() ? DateTime.Now : submissionDate.Value;//UAT-3036
            newComplianceItemSubmissionHistory.CISH_CreatedBy = currentUserId;
            newComplianceItemSubmissionHistory.CISH_CreatedOn = DateTime.Now;
            var statusId = ClientDBContext.lkpItemSubmissionReconStatus.FirstOrDefault(cond => cond.ISRS_Code == itemReconStatus).ISRS_ID;
            newComplianceItemSubmissionHistory.CISH_StatusId = statusId;
            return newComplianceItemSubmissionHistory;
        }

        #region UAT-1812:Creation of an Approval/rejection summary for applicant logins
        /// <summary>
        /// Method to Save Series item rejected status in ApplComplianceItemStatusHistory.
        /// </summary>
        /// <param name="tenantId"></param>
        /// <returns></returns>
        void IComplianceDataRepository.SaveSeriesRejectedItemStatusHistory(List<ApplicantComplianceItemData> lstItemDataId, Int32 loggedInUserID,
                                             Int32 itemRejectedStatusID)
        {
            if (!lstItemDataId.IsNullOrEmpty())
            {
                lstItemDataId.ForEach(slct =>
                {
                    ApplComplianceItemStatusHistory appCompItemStatuHistory = new ApplComplianceItemStatusHistory();
                    appCompItemStatuHistory.ApplComplianceItemDataID = slct.ApplicantComplianceItemID;
                    appCompItemStatuHistory.StatusID = itemRejectedStatusID;
                    appCompItemStatuHistory.CreatedByID = loggedInUserID;
                    appCompItemStatuHistory.CreatedOn = DateTime.Now;

                    _dbContext.ApplComplianceItemStatusHistories.AddObject(appCompItemStatuHistory);
                });

                _dbContext.SaveChanges();
            }

        }
        #endregion

        //UAT-1852 : If a Service Group is complete, but other service groups are not complete within an order, the system should send the applicant an email.
        Boolean IComplianceDataRepository.DeleteNotificationDeliveryListIfExist(NotificationDelivery notificationDelivery, Int32 currentLoggedInId)
        {
            try
            {
                NotificationDelivery dbNotificationDeliverydetails = _dbContext.NotificationDeliveries.Where(cond => cond.ND_EntityId == notificationDelivery.ND_EntityId
                                        && cond.ND_OrganizationUserID == notificationDelivery.ND_OrganizationUserID && !cond.ND_IsDeleted && cond.ND_EntityName == notificationDelivery.ND_EntityName
                                        && cond.ND_SubEventTypeID == notificationDelivery.ND_SubEventTypeID).FirstOrDefault();
                if (!dbNotificationDeliverydetails.IsNullOrEmpty())
                {
                    dbNotificationDeliverydetails.ND_IsDeleted = true;
                    dbNotificationDeliverydetails.ND_ModifiedBy = currentLoggedInId;
                    dbNotificationDeliverydetails.ND_ModifiedOn = DateTime.Now;
                    if (_dbContext.SaveChanges() > 0)
                        return true;
                    else
                        return false;
                }
                return true;
            }
            catch (SysXException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw (new SysXException(ex.Message, ex));
            }
        }

        List<CustomAttribute> IComplianceDataRepository.GetCustomAttributesByTenantID(Int32 tenantID)
        {
            String hierarchyCustomAttributeTypeCode = CustomAttributeUseTypeContext.Hierarchy.GetStringValue();
            List<CustomAttribute> lstCustomAttribute = _dbContext.CustomAttributes
                .Where(cond => cond.lkpCustomAttributeUseType.Code.ToLower() == hierarchyCustomAttributeTypeCode.ToLower()
                && !cond.CA_IsDeleted
                ).ToList();
            foreach (CustomAttribute customAttribute in lstCustomAttribute)
            {
                customAttribute.CA_AttributeName = customAttribute.CA_AttributeLabel.IsNullOrEmpty() ? customAttribute.CA_AttributeName : customAttribute.CA_AttributeLabel;
                customAttribute.CA_CustomAttributeID = customAttribute.CA_CustomAttributeID;
            }
            return lstCustomAttribute;
        }

        /// <summary>
        /// UAT-1834
        /// </summary>
        /// <param name="applicantOrgUserID"></param>
        /// <returns></returns>
        BulkOrderUpload IComplianceDataRepository.GetBulkOrderForApplicant(int applicantOrgUserID)
        {
            String bulkOrderStatusAcceptedCode = BulkOrderStatus.OrderAccepted.GetStringValue();
            String bulkOrderDataSourceCode_Previous = Orderdatasource.Previous.GetStringValue();
            Int32 bulkOrderStatusAcceptedID = _dbContext.lkpBulkOrderStatus.Where(cond => cond.BOS_Code == bulkOrderStatusAcceptedCode && !cond.BOS_IsDeleted)
                                                                             .FirstOrDefault().BOS_ID;
            return _dbContext.BulkOrderUploads.Where(x => x.BOU_ApplicantID == applicantOrgUserID
                                                       && x.BOU_BulkOrderStatusID == bulkOrderStatusAcceptedID
                                                       && x.BOU_IsActive && !x.BOU_IsDeleted
                                                       && (x.lkpOrderDataSource == null || (x.lkpOrderDataSource != null && x.lkpOrderDataSource.ODS_Code != bulkOrderDataSourceCode_Previous))
                                                       ).FirstOrDefault();
        }

        List<BkgOrderPackage> IComplianceDataRepository.GetBkgOrderPackagesByBkgOrderId(int bkgOrderId)
        {
            return _dbContext.BkgOrderPackages.Include("BkgPackageHierarchyMapping.BackgroundPackage").Where(cond => !cond.BOP_IsDeleted && cond.BOP_BkgOrderID == bkgOrderId).ToList();
        }


        //UAT-1835, NYU Migration 3 of 3: Automatic Interval Searching.
        OrganizationUserProfile IComplianceDataRepository.GetOrganizationUserProfileByID(Int32 currentOrgUserId)
        {
            return _dbContext.OrganizationUserProfiles.Where(x => x.OrganizationUserID == currentOrgUserId
                                                               && x.IsActive && !x.IsDeleted)
                                                               .OrderByDescending(x => x.OrganizationUserProfileID).FirstOrDefault();
        }


        List<BulkOrderUpload> IComplianceDataRepository.GetBulkOrderDataForIntervalSearch(int _recordChunkSize)
        {
            EntityConnection connection = ClientDBContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand command = new SqlCommand("[dbo].[usp_GetBulkOrdersReadyForSearch]", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@ChunkSize", _recordChunkSize);

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > 0)
                {
                    IEnumerable<DataRow> rows = ds.Tables[0].AsEnumerable();
                    return rows.Select(x => new BulkOrderUpload
                    {
                        BOU_ID = x["BulkOrderUploadID"].GetType().Name == "DBNull" ? 0 : Convert.ToInt32(x["BulkOrderUploadID"]),
                        BOU_OrderID = x["OrderID"].GetType().Name == "DBNull" ? 0 : Convert.ToInt32(x["OrderID"]),
                        BOU_ApplicantID = x["ApplicantOrgID"].GetType().Name == "DBNull" ? 0 : Convert.ToInt32(x["ApplicantOrgID"]),
                        BOU_LastOrderPlacedDate = Convert.ToDateTime(x["LastOrderPlacedDate"]),
                        BOU_Interval = x["Interval"].GetType().Name == "DBNull" ? 0 : Convert.ToInt32(x["Interval"]),
                        BOU_StartDate = Convert.ToDateTime(x["LastOrderPlacedDate"]),
                        BOU_EndDate = Convert.ToDateTime(x["LastOrderPlacedDate"]),
                    }).ToList();
                }
                else
                {
                    return new List<BulkOrderUpload>();
                }
            }
        }

        #region UAT-2028:Expired items should also show in the Enter Requirements item selection dropdown on the student screen
        /// <summary>
        /// Return A tuple with all available items and mapped items
        /// </summary>
        /// <param name="packageId">packageId</param>
        /// <param name="categoryId">categoryId</param>
        /// <param name="currentUserId">currentUserId</param>
        /// <param name="currentSelectedItem">currentSelectedItem</param>
        /// <param name="needToGetExpireAllItems">needToGetExpireAllItems</param>
        /// <param name="expiringItem"></param>
        /// <returns></returns>
        public Tuple<List<ComplianceItem>, List<Int32>, List<Int32>> GetAllItemsForDataEntry(Int32 packageId, Int32 categoryId, Int32 currentUserId, Int32 itemStatusId_Expired, Int32 currentSelectedItem = 0
                                                              , Boolean needToGetExpireAllItems = false, List<Int32> expiringItem = null)
        {
            List<Int32> mappedNotExpireItemIds = new List<Int32>();
            List<Int32> mappedItemIds = new List<Int32>();
            List<ComplianceItem> lstCompItem = new List<ComplianceItem>();
            List<Int32> availableItemIds = _dbContext.CompliancePackageCategories.Where(cpc => cpc.CPC_CategoryID == categoryId && cpc.CPC_PackageID == packageId && !cpc.CPC_IsDeleted)
           .Join(_dbContext.ComplianceCategories, cpc => cpc.CPC_CategoryID, cc => cc.ComplianceCategoryID, (cpc, cc) => new { CatId = cc.ComplianceCategoryID, IsCCDeleted = cc.IsDeleted, IsCategoryActive = cc.IsActive })
           .Where(cc => !cc.IsCCDeleted && cc.IsCategoryActive)
           .Join(_dbContext.ComplianceCategoryItems, cc => cc.CatId, cci => cci.CCI_CategoryID, (cc, cci) => new { ItemId = cci.CCI_ItemID, IsCCIDeleted = cci.CCI_IsDeleted })
           .Where(cci => !cci.IsCCIDeleted)
           .Join(_dbContext.ComplianceItems, cci => cci.ItemId, ci => ci.ComplianceItemID, (cci, ci) => new { AvailableItemIds = ci.ComplianceItemID, IsCIDeleted = ci.IsDeleted, IsItemActive = ci.IsActive })
           .Where(ci => !ci.IsCIDeleted && ci.IsItemActive)
           .AsEnumerable().Select(id => id.AvailableItemIds).ToList();

            //Get All mapped Items
            mappedItemIds = _dbContext.PackageSubscriptions.Where(ps => ps.CompliancePackageID == packageId && ps.OrganizationUserID == currentUserId && !ps.IsDeleted)
                .Join(_dbContext.ApplicantComplianceCategoryDatas, ps => ps.PackageSubscriptionID, accd => accd.PackageSubscriptionID, (ps, accd) => new { ApplicantCategoryId = accd.ApplicantComplianceCategoryID, CategoryId = accd.ComplianceCategoryID, IsACCDDeleted = accd.IsDeleted })
                .Where(cat => cat.CategoryId == categoryId && !cat.IsACCDDeleted)
                .Join(_dbContext.ApplicantComplianceItemDatas, accd => accd.ApplicantCategoryId, acid => acid.ApplicantComplianceCategoryID, (accd, acid) => new { MappedItemIds = acid.ComplianceItemID, IsACIDDeleted = acid.IsDeleted })
                .Where(acid => !acid.IsACIDDeleted)
                .Select(id => id.MappedItemIds).ToList();
            //Get Mapped Expiring and expired items
            List<Int32> expiringAndExpiredItems = new List<Int32>();
            expiringItem = expiringItem.IsNullOrEmpty() ? new List<Int32>() : expiringItem;

            expiringAndExpiredItems = _dbContext.PackageSubscriptions.Where(ps => ps.CompliancePackageID == packageId && ps.OrganizationUserID == currentUserId && !ps.IsDeleted)
                   .Join(_dbContext.ApplicantComplianceCategoryDatas, ps => ps.PackageSubscriptionID, accd => accd.PackageSubscriptionID, (ps, accd) => new { ApplicantCategoryId = accd.ApplicantComplianceCategoryID, CategoryId = accd.ComplianceCategoryID, IsACCDDeleted = accd.IsDeleted })
                   .Where(cat => cat.CategoryId == categoryId && !cat.IsACCDDeleted)
                   .Join(_dbContext.ApplicantComplianceItemDatas, accd => accd.ApplicantCategoryId, acid => acid.ApplicantComplianceCategoryID, (accd, acid) => new { MappedItemIds = acid.ComplianceItemID, IsACIDDeleted = acid.IsDeleted, ItemStatusID = acid.StatusID })
                   .Where(acid => !acid.IsACIDDeleted && (expiringItem.Contains(acid.MappedItemIds) || acid.ItemStatusID == itemStatusId_Expired))
                   .Select(id => id.MappedItemIds).ToList();

            if (needToGetExpireAllItems)
            {
                //mappedNotExpireItemIds.AddRange(mappedItemIds);
                mappedNotExpireItemIds.AddRange(mappedItemIds.Where(cnd => !expiringAndExpiredItems.Contains(cnd)));
                mappedNotExpireItemIds = mappedNotExpireItemIds.Distinct().ToList();
            }
            else
            {
                mappedNotExpireItemIds = mappedItemIds;
            }



            List<Int32> tempList = mappedNotExpireItemIds;

            foreach (var id in tempList)
            {
                availableItemIds.Remove(availableItemIds.Where(i => Convert.ToInt32(i) == id).FirstOrDefault());
            }

            if (currentSelectedItem == 0)
                lstCompItem = _dbContext.ComplianceItems.Where(item => availableItemIds.Contains(item.ComplianceItemID) && !item.IsDeleted && item.IsActive).ToList();
            else
                lstCompItem = _dbContext.ComplianceItems.Where(item => availableItemIds.Contains(item.ComplianceItemID) && !item.IsDeleted && item.IsActive || item.ComplianceItemID == currentSelectedItem).ToList();
            return new Tuple<List<ComplianceItem>, List<Int32>, List<Int32>>(lstCompItem, mappedItemIds, expiringAndExpiredItems);
        }
        #endregion



        List<CompliancePackageCategory> IComplianceDataRepository.GetPackageListByCategoryId(Int32 categoryId)
        {
            return ClientDBContext.CompliancePackageCategories.Where(obj => obj.CPC_IsActive == true
                                                                        && obj.CPC_IsDeleted == false
                                                                        && obj.CPC_CategoryID == categoryId).ToList();
        }

        PackageSubscription IComplianceDataRepository.GetSubscriptionDetail(Int32 packageId, Int32 orgUserId, Int32 subscriptionMobilityStatusID, Int32 archieveStateId)
        {
            return ClientDBContext.PackageSubscriptions
                                           .Include("CompliancePackage")
                                           .Include("OrganizationUser")
                                           .Include("Order")
                                          .Where(ps => !ps.IsDeleted && !ps.CompliancePackage.IsDeleted
                                           && ps.CompliancePackageID == packageId && ps.OrganizationUserID == orgUserId
                                           && ps.ExpiryDate >= DateTime.Now
                                           && (ps.SubscriptionMobilityStatusID == null || ps.SubscriptionMobilityStatusID != subscriptionMobilityStatusID)
                                           && (ps.ArchiveStateID == null || ps.ArchiveStateID == archieveStateId))
                                           .FirstOrDefault();
        }


        List<ApplicantDocument> IComplianceDataRepository.GetAdditionalDocNeedToSendToStudent(Int32 orderId, String docTypeCode, String recordTypeCode)
        {
            List<GenericDocumentMapping> lstDocMaaping = _dbContext.GenericDocumentMappings
                                                              .Include("ApplicantDocument")
                                                              .Include("ApplicantDocument.OrganizationUser")
                                                              .Where(cnd => cnd.GDM_RecordID == orderId
                                                              && cnd.lkpRecordType.Code == recordTypeCode
                                                              && cnd.ApplicantDocument.lkpDocumentType.DMT_Code == docTypeCode
                                                              && !cnd.ApplicantDocument.IsDeleted
                                                              && cnd.GDM_SendToStudent == true).ToList();
            if (!lstDocMaaping.IsNullOrEmpty())
            {
                return lstDocMaaping.Select(cond => cond.ApplicantDocument).ToList();
            }
            return new List<ApplicantDocument>();
        }


        Boolean IComplianceDataRepository.CheckIfDocumentsAlreadySent(Int32 orderId, Int32 notificationTypeId)
        {
            OrderNotification orderNotificationinDb = ClientDBContext.OrderNotifications.FirstOrDefault(cond => cond.ONTF_OrderID == orderId
                                                                      && cond.ONTF_OrderNotificationTypeID == notificationTypeId);
            if (!orderNotificationinDb.IsNullOrEmpty())
                return true;
            return false;
        }

        #region UAT-1831, Addition of details on cancellations and packages listed on the portfolio detail page
        List<vwOrderDetail> IComplianceDataRepository.GetOrderDetailListByOrgUserID(Int32 organizationUserID)
        {
            List<vwOrderDetail> lstOrderDetailItems = new List<vwOrderDetail>();
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {

                SqlCommand command = new SqlCommand("usp_GetOrderHistoryByOrgUserID", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@OrganizationUserId", organizationUserID);

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        vwOrderDetail item = new vwOrderDetail();
                        item.OrderId = ds.Tables[0].Rows[i]["OrderId"] == DBNull.Value ? AppConsts.NONE : Convert.ToInt32(ds.Tables[0].Rows[i]["OrderId"]);
                        item.OrderNumber = ds.Tables[0].Rows[i]["OrderNumber"] == DBNull.Value ? null : Convert.ToString(ds.Tables[0].Rows[i]["OrderNumber"]);
                        item.OrderDate = ds.Tables[0].Rows[i]["OrderDate"] == DBNull.Value ? (DateTime?)null : Convert.ToDateTime(ds.Tables[0].Rows[i]["OrderDate"]);
                        item.InstituteHierarchy = ds.Tables[0].Rows[i]["InstituteHierarchy"] == DBNull.Value ? null : Convert.ToString(ds.Tables[0].Rows[i]["InstituteHierarchy"]);
                        item.PaymentType = ds.Tables[0].Rows[i]["PaymentType"] == DBNull.Value ? null : Convert.ToString(ds.Tables[0].Rows[i]["PaymentType"]);
                        item.Amount = ds.Tables[0].Rows[i]["Amount"] == DBNull.Value ? AppConsts.NONE : Convert.ToDecimal(ds.Tables[0].Rows[i]["Amount"]);
                        item.OrderStatusName = ds.Tables[0].Rows[i]["OrderStatusName"] == DBNull.Value ? null : Convert.ToString(ds.Tables[0].Rows[i]["OrderStatusName"]);
                        item.OrderStatusCode = ds.Tables[0].Rows[i]["OrderStatusCode"] == DBNull.Value ? null : Convert.ToString(ds.Tables[0].Rows[i]["OrderStatusCode"]);
                        item.RushOrderStatus = ds.Tables[0].Rows[i]["RushOrderStatus"] == DBNull.Value ? null : Convert.ToString(ds.Tables[0].Rows[i]["RushOrderStatus"]);
                        item.SubscriptionOptionID = ds.Tables[0].Rows[i]["SubscriptionOptionID"] == DBNull.Value ? AppConsts.NONE : Convert.ToInt32(ds.Tables[0].Rows[i]["SubscriptionOptionID"]);
                        item.ArchiveStateCode = ds.Tables[0].Rows[i]["ArchiveStateCode"] == DBNull.Value ? null : Convert.ToString(ds.Tables[0].Rows[i]["ArchiveStateCode"]);
                        item.BKgArchiveCode = ds.Tables[0].Rows[i]["BKgArchiveCode"] == DBNull.Value ? null : Convert.ToString(ds.Tables[0].Rows[i]["BKgArchiveCode"]);
                        item.CancellationStatus = ds.Tables[0].Rows[i]["CancellationStatus"] == DBNull.Value ? null : Convert.ToString(ds.Tables[0].Rows[i]["CancellationStatus"]);

                        item.PackageSubscriptionID = ds.Tables[0].Rows[i]["PackageSubscriptionID"] == DBNull.Value ? AppConsts.NONE : Convert.ToInt32(ds.Tables[0].Rows[i]["PackageSubscriptionID"]);
                        item.DeptProgramPackageID = ds.Tables[0].Rows[i]["DeptProgramPackageID"] == DBNull.Value ? AppConsts.NONE : Convert.ToInt32(ds.Tables[0].Rows[i]["DeptProgramPackageID"]);
                        item.PreviousOrderID = ds.Tables[0].Rows[i]["PreviousOrderID"] == DBNull.Value ? AppConsts.NONE : Convert.ToInt32(ds.Tables[0].Rows[i]["PreviousOrderID"]);
                        item.OrderPackageType = ds.Tables[0].Rows[i]["OrderPackageType"] == DBNull.Value ? AppConsts.NONE : Convert.ToInt32(ds.Tables[0].Rows[i]["OrderPackageType"]);
                        item.PackageName = ds.Tables[0].Rows[i]["PackageName"] == DBNull.Value ? null : Convert.ToString(ds.Tables[0].Rows[i]["PackageName"]);
                        item.PackageID = ds.Tables[0].Rows[i]["PackageID"] == DBNull.Value ? AppConsts.NONE : Convert.ToInt32(ds.Tables[0].Rows[i]["PackageID"]);
                        item.PaymentTypeCode = ds.Tables[0].Rows[i]["PaymentTypeCode"] == DBNull.Value ? null : Convert.ToString(ds.Tables[0].Rows[i]["PaymentTypeCode"]);
                        item.PaymentType = ds.Tables[0].Rows[i]["PaymentType"] == DBNull.Value ? null : Convert.ToString(ds.Tables[0].Rows[i]["PaymentType"]);
                        item.PrimaryEmailAddress = ds.Tables[0].Rows[i]["PrimaryEmailAddress"] == DBNull.Value ? null : Convert.ToString(ds.Tables[0].Rows[i]["PrimaryEmailAddress"]);
                        item.FirstName = ds.Tables[0].Rows[i]["FirstName"] == DBNull.Value ? null : Convert.ToString(ds.Tables[0].Rows[i]["FirstName"]);
                        item.LastName = ds.Tables[0].Rows[i]["LastName"] == DBNull.Value ? null : Convert.ToString(ds.Tables[0].Rows[i]["LastName"]);
                        item.OrderPaidDate = ds.Tables[0].Rows[i]["OrderPaidDate"] == DBNull.Value ? (DateTime?)null : Convert.ToDateTime(ds.Tables[0].Rows[i]["OrderPaidDate"]);
                        item.ApplicantFirstName = ds.Tables[0].Rows[i]["ApplicantFirstName"] == DBNull.Value ? null : Convert.ToString(ds.Tables[0].Rows[i]["ApplicantFirstName"]);
                        item.ApplicantLastName = ds.Tables[0].Rows[i]["ApplicantLastName"] == DBNull.Value ? null : Convert.ToString(ds.Tables[0].Rows[i]["ApplicantLastName"]);
                        item.DaysLeftToExpire = ds.Tables[0].Rows[i]["DaysLeftToExpire"] == DBNull.Value ? AppConsts.NONE : Convert.ToInt32(ds.Tables[0].Rows[i]["DaysLeftToExpire"]);
                        item.OrganizationUserID = ds.Tables[0].Rows[i]["OrganizationUserID"] == DBNull.Value ? AppConsts.NONE : Convert.ToInt32(ds.Tables[0].Rows[i]["OrganizationUserID"]);
                        item.RushOrderStatusCode = ds.Tables[0].Rows[i]["RushOrderStatusCode"] == DBNull.Value ? null : Convert.ToString(ds.Tables[0].Rows[i]["RushOrderStatusCode"]);
                        item.DeptProgramMappingID = ds.Tables[0].Rows[i]["DeptProgramMappingID"] == DBNull.Value ? AppConsts.NONE : Convert.ToInt32(ds.Tables[0].Rows[i]["DeptProgramMappingID"]);
                        item.ShowOrderCompletion = ds.Tables[0].Rows[i]["ShowOrderCompletion"] == DBNull.Value ? AppConsts.NONE : Convert.ToInt32(ds.Tables[0].Rows[i]["ShowOrderCompletion"]);
                        item.HasActiveComplianceSubscription = ds.Tables[0].Rows[i]["HasActiveComplianceSubscription"] == DBNull.Value ? AppConsts.NONE : Convert.ToInt32(ds.Tables[0].Rows[i]["HasActiveComplianceSubscription"]);
                        item.SubscriptionMobilityStatusCode = ds.Tables[0].Rows[i]["SubscriptionMobilityStatusCode"] == DBNull.Value ? null : Convert.ToString(ds.Tables[0].Rows[i]["SubscriptionMobilityStatusCode"]);
                        item.OrderPackageTypeCode = ds.Tables[0].Rows[i]["OrderPackageTypeCode"] == DBNull.Value ? null : Convert.ToString(ds.Tables[0].Rows[i]["OrderPackageTypeCode"]);
                        item.PackageSubscriptionArchiveCode = ds.Tables[0].Rows[i]["PackageSubscriptionArchiveCode"] == DBNull.Value ? null : Convert.ToString(ds.Tables[0].Rows[i]["PackageSubscriptionArchiveCode"]);
                        item.PartialOrderCancellationTypeCode = ds.Tables[0].Rows[i]["PartialOrderCancellationTypeCode"] == DBNull.Value ? null : Convert.ToString(ds.Tables[0].Rows[i]["PartialOrderCancellationTypeCode"]);
                        item.DateOfBirth = ds.Tables[0].Rows[i]["DateOfBirth"] == DBNull.Value ? (DateTime?)null : Convert.ToDateTime(ds.Tables[0].Rows[i]["DateOfBirth"]);
                        item.ShowOnlyRushOrder = ds.Tables[0].Rows[i]["ShowOnlyRushOrder"] == DBNull.Value ? (Boolean?)null : Convert.ToBoolean(ds.Tables[0].Rows[i]["ShowOnlyRushOrder"]);
                        item.IsRushOrderForExistingOrder = ds.Tables[0].Rows[i]["IsRushOrderForExistingOrder"] == DBNull.Value ? (Boolean?)null : Convert.ToBoolean(ds.Tables[0].Rows[i]["IsRushOrderForExistingOrder"]);
                        item.IsAutomaticRenewalForPackage = ds.Tables[0].Rows[i]["IsAutomaticRenewalForPackage"] == DBNull.Value ? (Boolean?)null : Convert.ToBoolean(ds.Tables[0].Rows[i]["IsAutomaticRenewalForPackage"]);
                        item.AutomaticRenewalTurnedOff = ds.Tables[0].Rows[i]["AutomaticRenewalTurnedOff"] == DBNull.Value ? (Boolean?)null : Convert.ToBoolean(ds.Tables[0].Rows[i]["AutomaticRenewalTurnedOff"]);

                        lstOrderDetailItems.Add(item);
                    }
                }
            }
            return lstOrderDetailItems;
        }

        List<CancelledBkgCompliancePackageContract> IComplianceDataRepository.GetCancelledPackageByOrderID(Int32 orderID)
        {
            List<CancelledBkgCompliancePackageContract> lstCancelledBkgCompliancePackageContract = new List<CancelledBkgCompliancePackageContract>();
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {

                SqlCommand command = new SqlCommand("usp_GetCancelledPackagesByOrderID", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@OrderID", orderID);

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        CancelledBkgCompliancePackageContract item = new CancelledBkgCompliancePackageContract();
                        item.OrderID = ds.Tables[0].Rows[i]["OrderID"] == DBNull.Value ? AppConsts.NONE : Convert.ToInt32(ds.Tables[0].Rows[i]["OrderID"]);
                        item.PackageName = ds.Tables[0].Rows[i]["PackageName"] == DBNull.Value ? null : Convert.ToString(ds.Tables[0].Rows[i]["PackageName"]);
                        item.CancellationReqDate = ds.Tables[0].Rows[i]["CancellationReqDate"] == DBNull.Value ? (DateTime?)null : Convert.ToDateTime(ds.Tables[0].Rows[i]["CancellationReqDate"]);
                        item.IsCompliancePackage = ds.Tables[0].Rows[i]["IsCompliancePackage"] == DBNull.Value ? false : Convert.ToBoolean(ds.Tables[0].Rows[i]["IsCompliancePackage"]);
                        //item.OrderStatusID = ds.Tables[0].Rows[i]["OrderStatusID"] == DBNull.Value ? AppConsts.NONE : Convert.ToInt32(ds.Tables[0].Rows[i]["OrderStatusID"]);
                        //item.PartialOrderCancellationTypeID = ds.Tables[0].Rows[i]["PartialOrderCancellationTypeID"] == DBNull.Value ? AppConsts.NONE : Convert.ToInt32(ds.Tables[0].Rows[i]["PartialOrderCancellationTypeID"]);
                        //item.BkgIsPartialOrderCancelled = ds.Tables[0].Rows[i]["BkgIsPartialOrderCancelled"] == DBNull.Value ? false : Convert.ToBoolean(ds.Tables[0].Rows[i]["BkgIsPartialOrderCancelled"]);

                        lstCancelledBkgCompliancePackageContract.Add(item);
                    }
                }
            }
            return lstCancelledBkgCompliancePackageContract;
        }
        #endregion

        #region UAT-2218, Creation of a "Required Documents" tab on the left side of the student dashboard.
        List<ApplicantRequiredDocumentsContract> IComplianceDataRepository.GetRequirementDocumentsDetails(Int32 orgUserId)
        {
            List<ApplicantRequiredDocumentsContract> lstApplicantRequiredDocumentsContract = new List<ApplicantRequiredDocumentsContract>();
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {

                SqlCommand command = new SqlCommand("usp_GetRequiredDocumentsDetail", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@OrganizationUserId", orgUserId);

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        ApplicantRequiredDocumentsContract item = new ApplicantRequiredDocumentsContract();
                        item.ParentID = ds.Tables[0].Rows[i]["ParentID"] == DBNull.Value ? AppConsts.NONE : Convert.ToInt32(ds.Tables[0].Rows[i]["ParentID"]);
                        item.Code = ds.Tables[0].Rows[i]["Code"] == DBNull.Value ? null : Convert.ToString(ds.Tables[0].Rows[i]["Code"]);
                        item.DataID = ds.Tables[0].Rows[i]["DataID"] == DBNull.Value ? AppConsts.NONE : Convert.ToInt32(ds.Tables[0].Rows[i]["DataID"]);
                        item.DataValue = ds.Tables[0].Rows[i]["DataValue"] == DBNull.Value ? null : Convert.ToString(ds.Tables[0].Rows[i]["DataValue"]);
                        item.NavigationURL = ds.Tables[0].Rows[i]["SampleDocURL"] == DBNull.Value ? null : Convert.ToString(ds.Tables[0].Rows[i]["SampleDocURL"]);
                        item.NavigationLabel = ds.Tables[0].Rows[i]["SampleDocLabel"] == DBNull.Value ? null : Convert.ToString(ds.Tables[0].Rows[i]["SampleDocLabel"]); //UAT-3819
                        lstApplicantRequiredDocumentsContract.Add(item);
                    }
                }
            }
            return lstApplicantRequiredDocumentsContract;
        }
        #endregion

        #region UAT-3161

        List<ApplicantRequiredDocumentsContract> IComplianceDataRepository.GetRotReqDocumentsDetails(Int32 orgUserId)
        {
            List<ApplicantRequiredDocumentsContract> lstApplicantRotReqDocumentsContract = new List<ApplicantRequiredDocumentsContract>();
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {

                SqlCommand command = new SqlCommand("usp_GetRotReqdDocumentsDetail", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@OrganizationUserId", orgUserId);

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        ApplicantRequiredDocumentsContract item = new ApplicantRequiredDocumentsContract();
                        item.ParentID = ds.Tables[0].Rows[i]["ParentID"] == DBNull.Value ? AppConsts.NONE : Convert.ToInt32(ds.Tables[0].Rows[i]["ParentID"]);
                        item.Code = ds.Tables[0].Rows[i]["Code"] == DBNull.Value ? null : Convert.ToString(ds.Tables[0].Rows[i]["Code"]);
                        item.DataID = ds.Tables[0].Rows[i]["DataID"] == DBNull.Value ? AppConsts.NONE : Convert.ToInt32(ds.Tables[0].Rows[i]["DataID"]);
                        item.DataValue = ds.Tables[0].Rows[i]["DataValue"] == DBNull.Value ? null : Convert.ToString(ds.Tables[0].Rows[i]["DataValue"]);
                        item.NavigationURL = ds.Tables[0].Rows[i]["SampleDocURL"] == DBNull.Value ? null : Convert.ToString(ds.Tables[0].Rows[i]["SampleDocURL"]);
                        item.NavigationLabel = ds.Tables[0].Rows[i]["SampleDocLabel"] == DBNull.Value ? null : Convert.ToString(ds.Tables[0].Rows[i]["SampleDocLabel"]); //UAT-3819
                        lstApplicantRotReqDocumentsContract.Add(item);
                    }
                }
            }
            return lstApplicantRotReqDocumentsContract;
        }
        #endregion
        public List<ApplicantDocumentDetails> GetApplicantPersonalDocumentDetails(Int32 organizationUserID)
        {
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand command = new SqlCommand("dbo.usp_GetPersonalDocumentData", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@OrganizationUserID", organizationUserID);
                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                List<ApplicantDocumentDetails> lstApplicantDocumentDetails = new List<ApplicantDocumentDetails>();
                lstApplicantDocumentDetails = ds.Tables[0].AsEnumerable().Select(col =>
                      new ApplicantDocumentDetails
                      {
                          ApplicantDocumentID = Convert.ToInt32(col["ApplicantDocumentID"]),
                          Description = col["Description"] == DBNull.Value ? String.Empty : Convert.ToString(col["Description"]),
                          FileName = col["FileName"] == DBNull.Value ? String.Empty : Convert.ToString(col["FileName"]),
                          FileType = col["FileType"] == DBNull.Value ? String.Empty : Convert.ToString(col["FileType"]),
                          Size = Convert.ToInt32(col["Size"]),
                          UploadedOn = col["UploadedOn"] == DBNull.Value ? (DateTime?)null : Convert.ToDateTime(col["UploadedOn"]).Date,
                          DocumentPath = col["DocumentPath"] == DBNull.Value ? String.Empty : Convert.ToString(col["DocumentPath"])
                      }).ToList();
                return lstApplicantDocumentDetails;
            }

        }

        List<CustomAttribute> IComplianceDataRepository.GetProfileCustomAttributesByTenantID(Int32 tenantID, Int32 dataTypeId)
        {
            String profileCustomAttributeTypeCode = CustomAttributeUseTypeContext.Profile.GetStringValue();
            List<CustomAttribute> lstCustomAttribute = _dbContext.CustomAttributes.Where
                                                            (cond => cond.lkpCustomAttributeUseType.Code.ToLower() == profileCustomAttributeTypeCode.ToLower()
                                                             && !cond.CA_IsDeleted && cond.CA_CustomAttributeDataTypeID == dataTypeId
                                                                ).ToList();
            foreach (CustomAttribute customAttribute in lstCustomAttribute)
            {
                customAttribute.CA_AttributeName = customAttribute.CA_AttributeLabel.IsNullOrEmpty() ? customAttribute.CA_AttributeName : customAttribute.CA_AttributeLabel;
                customAttribute.CA_CustomAttributeID = customAttribute.CA_CustomAttributeID;
            }
            return lstCustomAttribute;
        }

        Boolean IComplianceDataRepository.AddUpdateProfileCustomAttributes(List<TypeCustomAttributes> customAttributeListToUpdate, Int32 applicantId, Int32 currentUserId)
        {
            List<Int32> attributeIdsToUpdate = customAttributeListToUpdate.Select(cond => cond.CAId).ToList();
            List<CustomAttributeMapping> existingCustomAttributeMappingInDb = GetCustomAttributeMappings(applicantId, attributeIdsToUpdate);
            foreach (TypeCustomAttributes customAttributeToSave in customAttributeListToUpdate)
            {
                CustomAttributeMapping customAttributeMappingToUpdate = existingCustomAttributeMappingInDb.FirstOrDefault(cond =>
                                                                        cond.CAM_CustomAttributeMappingID == customAttributeToSave.CAMId);

                if (customAttributeMappingToUpdate.IsNotNull())
                {
                    customAttributeMappingToUpdate.CAM_ModifiedByID = currentUserId;
                    customAttributeMappingToUpdate.CAM_ModifiedOn = DateTime.Now;

                    CustomAttributeValue customAttributeValueToUpdate = customAttributeMappingToUpdate.CustomAttributeValues.FirstOrDefault(cond => !cond.CAV_IsDeleted);
                    customAttributeValueToUpdate.CAV_AttributeValue = customAttributeToSave.CAValue;
                    customAttributeValueToUpdate.CAV_ModifiedByID = currentUserId;
                    customAttributeValueToUpdate.CAV_ModifiedOn = DateTime.Now;
                }
                else
                {
                    AddCustomAttributeMapping(applicantId, customAttributeToSave, currentUserId);
                }
            }
            if (ClientDBContext.SaveChanges() > 0)
            {
                return true;
            }
            return false;
        }

        private List<CustomAttributeMapping> GetCustomAttributeMappings(Int32 applicantId, List<Int32> attrIdsList)
        {
            List<CustomAttributeMapping> existingCustomAttributeMappingInDb = new List<CustomAttributeMapping>();
            if (!attrIdsList.IsNullOrEmpty())
            {
                existingCustomAttributeMappingInDb = ClientDBContext.CustomAttributeMappings.Include("CustomAttributeValues")
                                                                                              .Where(con => con.CAM_RecordID == applicantId
                                                                                                && attrIdsList.Contains(con.CAM_CustomAttributeID)
                                                                                                && !con.CAM_IsDeleted).ToList();
            }
            return existingCustomAttributeMappingInDb;
        }

        private void AddCustomAttributeMapping(Int32 applicantId, TypeCustomAttributes customAttributeToSave, Int32 currentUserId)
        {
            CustomAttributeMapping customAttributeMappingToAdd = new CustomAttributeMapping();
            customAttributeMappingToAdd.CAM_CustomAttributeID = customAttributeToSave.CAId;
            customAttributeMappingToAdd.CAM_RecordID = applicantId;
            customAttributeMappingToAdd.CAM_IsRequired = customAttributeToSave.IsRequired;
            customAttributeMappingToAdd.CAM_IsDeleted = false;
            customAttributeMappingToAdd.CAM_CreatedByID = currentUserId;
            customAttributeMappingToAdd.CAM_CreatedOn = DateTime.Now;

            CustomAttributeValue customAttributeValueToAdd = new CustomAttributeValue();
            customAttributeValueToAdd.CAV_RecordID = applicantId;
            customAttributeValueToAdd.CAV_AttributeValue = customAttributeToSave.CAValue;
            customAttributeValueToAdd.CAV_IsDeleted = false;
            customAttributeValueToAdd.CAV_CreatedByID = currentUserId;
            customAttributeValueToAdd.CAV_CreatedOn = DateTime.Now;
            customAttributeMappingToAdd.CustomAttributeValues.Add(customAttributeValueToAdd);
            ClientDBContext.CustomAttributeMappings.AddObject(customAttributeMappingToAdd);
        }

        #region UAT-2456:Admin Data Entry: "Discard Documents" should have to go through the process twice
        Boolean IComplianceDataRepository.UpdateDocumentDiscardCount(Int32 fdeqId, Int32 currentUserId, Boolean isDocumentFirstTimeDiscarded)
        {
            Entity.FlatDataEntryQueue currentDocument = SecurityContext.FlatDataEntryQueues.FirstOrDefault(doc => doc.FDEQ_ID == fdeqId && !doc.FDEQ_IsDeleted);
            if (currentDocument.IsNotNull())
            {
                currentDocument.FDEQ_DiscardDocumentCount = currentDocument.FDEQ_DiscardDocumentCount.IsNullOrEmpty() ? AppConsts.NONE + AppConsts.ONE :
                                                                                                                         currentDocument.FDEQ_DiscardDocumentCount + AppConsts.ONE;
                currentDocument.FDEQ_ModifiedOn = DateTime.Now;
                currentDocument.FDEQ_ModifiedByID = currentUserId;
                if (isDocumentFirstTimeDiscarded)
                {
                    currentDocument.FDEQ_AssignToUserID = null;
                    currentDocument.FDEQ_AssignToUserName = String.Empty;
                }
            }
            if (SecurityContext.SaveChanges() > 0)
            {
                return true;
            }
            return false;
        }
        #endregion

        #region UAT-2495
        /// <summary>
        /// 
        /// </summary>
        /// <param name="clientDataUploadId"></param>
        /// <returns></returns>
        List<Entity.SharedDataEntity.ClientDataUploadConfiguration> IComplianceDataRepository.GetClientDataUploadConfiguration(Int32 clientDataUploadId)
        {
            return this.SharedDataDBContext.ClientDataUploadConfigurations.Where(cond => cond.CDUC_ClientDataUploadID == clientDataUploadId && !cond.CDUC_IsDeleted).ToList();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="tenantId"></param>
        /// <returns></returns>
        DataSet IComplianceDataRepository.GetTenantNodeMappingData(Int32 clientDataUploadId)
        {
            EntityConnection connection = this.SharedDataDBContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand command = new SqlCommand("dbo.usp_GetTenantNodeMappingData", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@ClientDataUploadId", clientDataUploadId);
                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                return ds;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="clientDataUploadServHistory"></param>
        /// <returns></returns>
        Boolean IComplianceDataRepository.CreateClientDataUploadServiceHistory(Entity.SharedDataEntity.ClientDataUploadServiceHistory clientDataUploadServHistory)
        {
            this.SharedDataDBContext.ClientDataUploadServiceHistories.AddObject(clientDataUploadServHistory);

            if (this.SharedDataDBContext.SaveChanges() > AppConsts.NONE)
                return true;
            return false;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="Chunksize"></param>
        /// <param name="NodeIds"></param>
        /// <param name="SPName"></param>
        /// <returns></returns>
        Dictionary<String, String> IComplianceDataRepository.GetDataToUpload(Int32 Chunksize, String NodeIds, String SPName)
        {
            Dictionary<String, String> result = new Dictionary<String, String>();
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand command = new SqlCommand("dbo." + SPName, con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@Chunksize", Chunksize);
                command.Parameters.AddWithValue("@NodeIds", NodeIds);
                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > 0)
                {
                    List<Int32> TCUPIDs = new List<Int32>();
                    String XMLResult = "";
                    foreach (DataRow tcupid in ds.Tables[0].Rows)
                    {
                        TCUPIDs.Add(Convert.ToInt32(tcupid["TPCDUId"]));
                    }
                    result.Add("TPCDUIds", String.Join(",", TCUPIDs));
                    if (ds.Tables[1].Rows.Count > AppConsts.NONE)
                    {
                        XMLResult = Convert.ToString(ds.Tables[1].Rows[0]["XMLResult"]);
                    }
                    result.Add("XMLResult", XMLResult);
                }
            }
            return result;
        }

        /// <summary>
        /// Method to update wait until of Client Upload service
        /// </summary>
        /// <param name="clientDataUploadId">clientDataUploadId</param>
        /// <param name="frequency">frequency in minutes</param>
        /// <returns></returns>
        Boolean IComplianceDataRepository.UpdateClientDataUploadService(Int32 clientDataUploadId, Int32 frequency, DateTime processStartDate)
        {
            Entity.SharedDataEntity.ClientDataUpload clientDataUploadData = this.SharedDataDBContext.ClientDataUploads.Where(cond => cond.CDU_ID == clientDataUploadId && !cond.CDU_IsDeleted).FirstOrDefault();

            if (!clientDataUploadData.IsNullOrEmpty())
            {
                if (frequency < 60)
                {
                    clientDataUploadData.CDU_WaitUntil = DateTime.Now.AddMinutes(frequency);
                }
                else
                {
                    DateTime? waitUntil = clientDataUploadData.CDU_WaitUntil;
                    Double? diffMinutes = waitUntil.HasValue ? (processStartDate - clientDataUploadData.CDU_WaitUntil.Value).TotalMinutes : (Double?)null;
                    //when service is stopped due to some reason then do not use wait until as current date time otherwise use them as current date time to calculate wait until value.
                    if (diffMinutes.HasValue && diffMinutes < frequency)
                    {
                        processStartDate = clientDataUploadData.CDU_WaitUntil.Value;
                    }

                    clientDataUploadData.CDU_WaitUntil = processStartDate.AddMinutes(frequency);
                }

                if (this.SharedDataDBContext.SaveChanges() > AppConsts.NONE)
                {
                    return true;
                }

                return false;
            }
            return false;
        }
        #endregion

        //UAT-2494
        List<ClientSettingCustomAttributeContract> IComplianceDataRepository.GetCustomAttributesWithClientSettingmapping()
        {
            List<ClientSettingCustomAttributeContract> lstClientSettingCustomAttributeContract = new List<ClientSettingCustomAttributeContract>();
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {

                SqlCommand command = new SqlCommand("usp_GetCustomAttributeClientSetting", con);
                command.CommandType = CommandType.StoredProcedure;

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        ClientSettingCustomAttributeContract item = new ClientSettingCustomAttributeContract();
                        item.CustomAttributeID = Convert.ToInt32(ds.Tables[0].Rows[i]["CustomAttributeID"]);
                        String CustomAttributeName = Convert.ToString(ds.Tables[0].Rows[i]["SettingName"]).IsNullOrEmpty() ? String.Empty : Convert.ToString(ds.Tables[0].Rows[i]["SettingName"]);
                        if (!CustomAttributeName.IsNullOrEmpty())
                        {
                            item.SettingName = CustomAttributeName + " " + "(Profile Custom Attribute)";
                        }
                        item.SettingOverrideText = Convert.ToString(ds.Tables[0].Rows[i]["SettingOverrideText"]).IsNullOrEmpty() ? String.Empty : Convert.ToString(ds.Tables[0].Rows[i]["SettingOverrideText"]);

                        //item.SettingValue = Convert.ToBoolean(ds.Tables[0].Rows[i]["SettingValue"]).IsNullOrEmpty() ? false : Convert.ToBoolean(ds.Tables[0].Rows[i]["SettingValue"]);
                        item.SettingValue = ds.Tables[0].Rows[i]["SettingValue"] == DBNull.Value ? false : Convert.ToBoolean(ds.Tables[0].Rows[i]["SettingValue"]);

                        item.CustomAttributeDatatypeCode = Convert.ToString(ds.Tables[0].Rows[i]["CustomAttributeDatatypeCode"]).IsNullOrEmpty() ? String.Empty : Convert.ToString(ds.Tables[0].Rows[i]["CustomAttributeDatatypeCode"]);
                        //item.CustomAttributeClientSettingMappingID = Convert.ToInt32(ds.Tables[0].Rows[i]["CustomAttributeClientSettingMappingID"]);
                        item.CustomAttributeClientSettingMappingID = ds.Tables[0].Rows[i]["CustomAttributeClientSettingMappingID"] == DBNull.Value ? AppConsts.NONE : Convert.ToInt32(ds.Tables[0].Rows[i]["CustomAttributeClientSettingMappingID"]);
                        item.SettingID = ds.Tables[0].Rows[i]["SettingID"] == DBNull.Value ? AppConsts.NONE : Convert.ToInt32(ds.Tables[0].Rows[i]["SettingID"]);
                        lstClientSettingCustomAttributeContract.Add(item);
                    }
                }
            }
            return lstClientSettingCustomAttributeContract;
        }

        void IComplianceDataRepository.AddUpdateCustomAttributeClientSetting(List<ClientSettingCustomAttributeContract> lstClientSettingCustomAttributeContract, Int32 loggedInUser)
        {
            List<ClientSettingsCustomAttributeMapping> lstClientSettingsCustomAttributeMapping = _dbContext.ClientSettingsCustomAttributeMappings.Where(cond => cond.CSCAM_IsDeleted == false).ToList();

            //Getting list of custom attributes id which we want to upadate or add.
            List<Int32> lstCustomAttrIDNotToBeDeleted = lstClientSettingCustomAttributeContract.Select(sel => sel.CustomAttributeID).ToList();

            //getting client setting custom attribute  mapping whose custom attributes are deleted but mapping are still present.
            var lstClientSettingCustomAttributeToDelete = lstClientSettingsCustomAttributeMapping.Where(cond => !lstCustomAttrIDNotToBeDeleted.Contains(cond.CustomAttribute.CA_CustomAttributeID) && cond.CustomAttribute.CA_IsDeleted).ToList();

            foreach (var item in lstClientSettingCustomAttributeContract)
            {
                ClientSettingsCustomAttributeMapping clientSettingsCustomAttributeMapping = lstClientSettingsCustomAttributeMapping.Where(cond => cond.CSCAM_CustomAttributeID == item.CustomAttributeID && !cond.CSCAM_IsDeleted).FirstOrDefault();
                if (!clientSettingsCustomAttributeMapping.IsNullOrEmpty())
                {
                    //update
                    clientSettingsCustomAttributeMapping.CSCAM_OverrideText = item.SettingOverrideText;
                    clientSettingsCustomAttributeMapping.CSCAM_Value = item.SettingValue;
                    clientSettingsCustomAttributeMapping.CSCAM_ModifiedBy = loggedInUser;
                    clientSettingsCustomAttributeMapping.CSCAM_ModifiedOn = DateTime.Now;
                }
                else
                {
                    //Add
                    clientSettingsCustomAttributeMapping = new ClientSettingsCustomAttributeMapping();
                    clientSettingsCustomAttributeMapping.CSCAM_SettingID = item.SettingID;
                    clientSettingsCustomAttributeMapping.CSCAM_CustomAttributeID = item.CustomAttributeID;
                    clientSettingsCustomAttributeMapping.CSCAM_Value = item.SettingValue;
                    clientSettingsCustomAttributeMapping.CSCAM_OverrideText = item.SettingOverrideText;
                    clientSettingsCustomAttributeMapping.CSCAM_IsDeleted = false;
                    clientSettingsCustomAttributeMapping.CSCAM_CreatedBy = loggedInUser;
                    clientSettingsCustomAttributeMapping.CSCAM_CreatedOn = DateTime.Now;

                    _dbContext.ClientSettingsCustomAttributeMappings.AddObject(clientSettingsCustomAttributeMapping);
                }
            }

            //List To Delete whose customattributes are deleted but mapping is present in ClientSettingsCustomAttributeMapping table.
            lstClientSettingCustomAttributeToDelete.ForEach(x =>
            {
                x.CSCAM_IsDeleted = true;
                x.CSCAM_ModifiedBy = loggedInUser;
                x.CSCAM_ModifiedOn = DateTime.Now;
            });
            _dbContext.SaveChanges();



            //List<ClientSettingsCustomAttributeMapping> objClientSettingsCustomAttributeMapping = _dbContext.ClientSettingsCustomAttributeMappings.Where(con => con.CSCAM_IsDeleted == false).ToList();

            //foreach (ClientSettingsCustomAttributeMapping clientSettingsCustomAttributeMapping in objClientSettingsCustomAttributeMapping)
            //{
            //    foreach (CustomAttribute customAttribute in objCustomAttributesList)
            //    {
            //        if (clientSettingsCustomAttributeMapping.CSCAM_CustomAttributeID == customAttribute.CA_CustomAttributeID)
            //        {
            //            clientSettingsCustomAttributeMapping.CSCAM_IsDeleted = true;
            //            clientSettingsCustomAttributeMapping.CSCAM_ModifiedBy = loggedInUser;
            //            clientSettingsCustomAttributeMapping.CSCAM_ModifiedOn = DateTime.Now;
            //        }
            //    }
            //}
            //_dbContext.SaveChanges();

        }

        List<ClientSettingCustomAttributeContract> IComplianceDataRepository.GetClientSettingCustomAttribute()
        {
            List<ClientSettingCustomAttributeContract> lstClientSettingCustomAttributeContract = new List<ClientSettingCustomAttributeContract>();
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {

                SqlCommand command = new SqlCommand("usp_GetClientSettingCustomAttribute", con);
                command.CommandType = CommandType.StoredProcedure;

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        ClientSettingCustomAttributeContract item = new ClientSettingCustomAttributeContract();
                        item.CustomAttributeID = Convert.ToInt32(ds.Tables[0].Rows[i]["CustomAttributeID"]);
                        item.SettingName = Convert.ToString(ds.Tables[0].Rows[i]["SettingName"]).IsNullOrEmpty() ? String.Empty : Convert.ToString(ds.Tables[0].Rows[i]["SettingName"]);
                        item.SettingOverrideText = Convert.ToString(ds.Tables[0].Rows[i]["SettingOverrideText"]).IsNullOrEmpty() ? String.Empty : Convert.ToString(ds.Tables[0].Rows[i]["SettingOverrideText"]);
                        item.SettingValue = Convert.ToBoolean(ds.Tables[0].Rows[i]["SettingValue"]).IsNullOrEmpty() ? false : Convert.ToBoolean(ds.Tables[0].Rows[i]["SettingValue"]);
                        item.CustomAttributeDatatypeCode = Convert.ToString(ds.Tables[0].Rows[i]["CustomAttributeDatatypeCode"]).IsNullOrEmpty() ? String.Empty : Convert.ToString(ds.Tables[0].Rows[i]["CustomAttributeDatatypeCode"]);
                        lstClientSettingCustomAttributeContract.Add(item);
                    }
                }
            }
            return lstClientSettingCustomAttributeContract;
        }

        #region Production Issue: Data Entry[26/12/2016]
        Boolean IComplianceDataRepository.IsDiscardDocumentEmailNeedToSend(Int32 DocumentId, Int32 DiscardReasonId, Int32 applicantID, Int32 currentLoggedInUserId)
        {
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand command = new SqlCommand("usp_IsDiscardDocumentEmailNeedToSend", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@DocumentId", DocumentId);
                command.Parameters.AddWithValue("@DiscardReasonId", DiscardReasonId);
                command.Parameters.AddWithValue("@ApplicantId", applicantID);
                command.Parameters.AddWithValue("@CurrentLoggedInUserId", currentLoggedInUserId);
                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.IsNotNull() && ds.Tables.Count > AppConsts.NONE)
                {
                    return Convert.ToBoolean(ds.Tables[0].Rows[0].ItemArray[0]);
                }
            }
            return false;
        }

        #endregion

        #region UAT-2460
        List<Int32> IComplianceDataRepository.GetNextAndPrevPackageSubscriptionIds(Int32 CurrentPackageSubscriptionID, String SelectedArchiveStateCode, Int32? OrganizationUserID = null)
        {
            List<Int32> lstClientSettingCustomAttributeContract = new List<Int32>();
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {

                SqlCommand command = new SqlCommand("usp_GetNextPrevSubscriptionIds", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@PackageSubscriptionID", CurrentPackageSubscriptionID);
                command.Parameters.AddWithValue("@OrganisationUserId", OrganizationUserID);
                command.Parameters.AddWithValue("@ArchivedState", SelectedArchiveStateCode);

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        Int32 item = Convert.ToInt32(ds.Tables[0].Rows[i]["PackageSubscriptionID"]).IsNullOrEmpty() ? AppConsts.NONE : Convert.ToInt32(ds.Tables[0].Rows[i]["PackageSubscriptionID"]);
                        lstClientSettingCustomAttributeContract.Add(item);
                    }
                }
            }
            return lstClientSettingCustomAttributeContract;
        }
        #endregion

        //UAT-2490
        private Boolean SaveAppComplianceItemDataDeletedHistory(ApplicantComplianceItemData applicantComplianceItemData, Int32 currentUserId, String DeletedReasonCode, Int32 AppOrgUserID)
        {
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                con.Open();
                SqlCommand command = new SqlCommand("usp_SaveAppComplianceItemdataDeletedHistory", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@ApplicantComplianceItemID", applicantComplianceItemData.ApplicantComplianceItemID);
                command.Parameters.AddWithValue("@AppOrgUserID", AppOrgUserID);
                command.Parameters.AddWithValue("@LoggedInUserID", currentUserId);
                command.Parameters.AddWithValue("@DeletedReasonCode", DeletedReasonCode);
                command.ExecuteScalar();
                return true;
            }
        }


        public List<ApplicantDocument> GetApplicantDocuments(List<Int32> lstApplicantDocumentIds)
        {
            return _dbContext.ApplicantDocuments.Where(ad => lstApplicantDocumentIds.Contains(ad.ApplicantDocumentID) && !ad.IsDeleted).ToList();
        }

        #region UAT-2610
        Boolean IComplianceDataRepository.RemvPndgItmExpRequestAftrCatApproval(Int32 ApplicantComCatId, Int32 CurrentUserID)
        {
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                con.Open();
                SqlCommand command = new SqlCommand("usp_RemvPndgItmExpRequestAftrCatApproval", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@ApplicantComplianceCategoryDataIds", Convert.ToString(ApplicantComCatId));
                command.Parameters.AddWithValue("@CurrentUserId", CurrentUserID);
                command.ExecuteScalar();
                return true;
            }
        }
        #endregion

        #region Get Tenant Ids for Client Data Upload
        List<Int32> IComplianceDataRepository.GetTenantForClientDataUpload()
        {
            List<Int32> lstTenantIds = new List<Int32>();
            EntityConnection connection = this.SharedDataDBContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {

                SqlCommand command = new SqlCommand("usp_GetTenantIdsForClientDataUpload", con);
                command.CommandType = CommandType.StoredProcedure;

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        Int32 TenantId = Convert.ToInt32(ds.Tables[0].Rows[i]["ClientDataUploadId"]);
                        lstTenantIds.Add(TenantId);
                    }
                }
            }
            return lstTenantIds;
        }

        //UAT:4473
        List<Int32> IComplianceDataRepository.GetTenantDataBasedClientDataUpload(Int32 clientDataUploadId)
        {
            List<Int32> lstTenantIds = new List<Int32>();
            EntityConnection connection = this.SharedDataDBContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {

                SqlCommand command = new SqlCommand("usp_GetTenantDataBasedClientDataUpload", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@ClientDataUploadId", clientDataUploadId);

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        Int32 TenantId = Convert.ToInt32(ds.Tables[0].Rows[i]["TenantID"]);
                        lstTenantIds.Add(TenantId);
                    }
                }
            }
            return lstTenantIds;
        }
        #endregion
        #region UAT 2680
        public Boolean SaveComplianceSearchNote(ComplianceSearchNotesContract complianceSearchNotesContract)
        {
            var packageSubscriptionsData = _dbContext.PackageSubscriptions.Where(a => a.PackageSubscriptionID == complianceSearchNotesContract.PackageSubscriptionID).FirstOrDefault();
            if (packageSubscriptionsData != null)
            {
                packageSubscriptionsData.Notes = complianceSearchNotesContract.Notes;
                packageSubscriptionsData.ModifiedOn = DateTime.Now;
                packageSubscriptionsData.ModifiedByID = complianceSearchNotesContract.CurrentLoggedInUserOrgId;
                _dbContext.SaveChanges();
            }
            return true;
        }
        public ComplianceSearchNotesContract GetComplianceSearchNote(ComplianceSearchNotesContract complianceSearchNotesContract)
        {
            ComplianceSearchNotesContract objComplianceSearchNotesContract = new ComplianceSearchNotesContract();
            var packageSubscriptionsData = _dbContext.PackageSubscriptions.Where(a => a.PackageSubscriptionID == complianceSearchNotesContract.PackageSubscriptionID).FirstOrDefault();
            if (packageSubscriptionsData != null)
            {
                objComplianceSearchNotesContract.Notes = packageSubscriptionsData.Notes;
            }
            return objComplianceSearchNotesContract;
        }
        #endregion

        #region UAT-2618:If a document has ever been associated with any item within a tracking subscription, the refund functionality on the order detail screen should be grayed out
        Boolean IComplianceDataRepository.IsGrayedOutRefundFunctionality(Int32 orderId, Int32 OPD_ID)
        {
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand command = new SqlCommand("usp_IsRefundFunctionalityAvailable", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@OPD_ID", OPD_ID);
                command.Parameters.AddWithValue("@OrderID", orderId);
                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.IsNotNull() && ds.Tables.Count > AppConsts.NONE)
                {
                    return Convert.ToBoolean(ds.Tables[0].Rows[0].ItemArray[0]);
                }
            }
            return false;
        }

        Boolean IComplianceDataRepository.UpdateIsDocAssociated(Int32 packageSubscriptionID, Boolean isDocAssociated, Int32 currentLoggedInuserID)
        {
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                con.Open();
                SqlCommand command = new SqlCommand("usp_UpdateIsDocumentAssociated", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@PackageSubscription_ID", packageSubscriptionID);
                command.Parameters.AddWithValue("@CurrentLoggedInUserID", currentLoggedInuserID);
                command.ExecuteScalar();
                return true;
            }
        }
        #endregion

        public List<UpcomingExpirationContract> GetUpcomingExpiration(String hierarchyIDs, String categoryIDs, String itemIDs, DateTime? dateFrom, DateTime? dateTo, String userGroupIDs, CustomPagingArgsContract customPagingArgsContract, Boolean IsClientAdminLoggedIn, Int32 CurrentLoggedInUserId)
        {
            List<UpcomingExpirationContract> lstUpcomingExpiration = new List<UpcomingExpirationContract>();
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand command = new SqlCommand("usp_UpcomingExpiration", con);
                command.CommandType = CommandType.StoredProcedure;
                if (customPagingArgsContract.SortExpression.IsNullOrEmpty())
                    customPagingArgsContract.SortExpression = "StudentID";
                string ordDir = customPagingArgsContract.SortDirectionDescending ? "desc" : "asc";

                command.Parameters.AddWithValue("@HierarchyIDs", hierarchyIDs);
                command.Parameters.AddWithValue("@CategoryIDs", categoryIDs);
                command.Parameters.AddWithValue("@ItemIDs", itemIDs);
                command.Parameters.AddWithValue("@DateFrom", dateFrom);
                command.Parameters.AddWithValue("@DateTo", dateTo);
                command.Parameters.AddWithValue("@UserGroupIDs", userGroupIDs);
                command.Parameters.AddWithValue("@IsClientAdminLoggedIn", IsClientAdminLoggedIn);
                command.Parameters.AddWithValue("@CurrentLoggedInUserId", CurrentLoggedInUserId);
                command.Parameters.AddWithValue("@OrderBy", customPagingArgsContract.SortExpression);
                command.Parameters.AddWithValue("@OrderDirection", ordDir);
                command.Parameters.AddWithValue("@PageIndex", customPagingArgsContract.CurrentPageIndex);
                command.Parameters.AddWithValue("@PageSize", customPagingArgsContract.PageSize);

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > 0)
                {
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        IEnumerable<DataRow> rows = ds.Tables[0].AsEnumerable();
                        lstUpcomingExpiration = rows.Select(col =>
                              new UpcomingExpirationContract
                              {
                                  StudentID = Convert.ToInt32(col["StudentID"]),
                                  FirstName = col["FirstName"] == DBNull.Value ? String.Empty : Convert.ToString(col["FirstName"]),
                                  LastName = col["LastName"] == DBNull.Value ? String.Empty : Convert.ToString(col["LastName"]),
                                  Category = col["Category"] == DBNull.Value ? String.Empty : Convert.ToString(col["Category"]),
                                  Item = col["Item"] == DBNull.Value ? String.Empty : Convert.ToString(col["Item"]),
                                  ExpirationDate = col["ExpirationDate"] == DBNull.Value ? (DateTime?)null : Convert.ToDateTime(col["ExpirationDate"]),
                                  NonComplianceDate = col["NonComplianceDate"] == DBNull.Value ? (DateTime?)null : Convert.ToDateTime(col["NonComplianceDate"]),
                                  ItemStatus = col["ItemStatus"] == DBNull.Value ? String.Empty : Convert.ToString(col["ItemStatus"]),
                                  UserGroups = col["UserGroups"] == DBNull.Value ? String.Empty : Convert.ToString(col["UserGroups"]),
                                  OrderId = col["OrderId"] == DBNull.Value ? String.Empty : Convert.ToString(col["OrderId"]),
                                  EmailAddress = col["EmailAddress"] == DBNull.Value ? String.Empty : Convert.ToString(col["EmailAddress"]),
                                  CustomAttributes = col["CustomAttributes"] == DBNull.Value ? String.Empty : Convert.ToString(col["CustomAttributes"]),
                                  TotalCount = Convert.ToInt32(col["TotalCount"])
                              }).ToList();
                    }
                }
            }
            return lstUpcomingExpiration;
        }


        public String GetApplicantNameByApplicantId(Int32 applicantId)
        {
            OrganizationUser _OrganisationUser = _dbContext.OrganizationUsers.Where(x => x.OrganizationUserID == applicantId).FirstOrDefault();
            if (_OrganisationUser.IsNullOrEmpty())
                return String.Empty;
            else
                return (_OrganisationUser.FirstName + " " + _OrganisationUser.LastName);
        }
        #region 2727
        public Boolean IsExistClientPieChartTColorSetting(Int32 tenantId, Int32 SettingId, String ColorCode)
        {
            Boolean _returnValue = false;
            try
            {
                //var returnedData = _dbContext.ClientSettings.Where(cond => cond.CS_TenantID != tenantId && cond.CS_SettingID == SettingId && cond.CS_SettingValue == ColorCode && cond.CS_IsDeleted == false).FirstOrDefault();
                //if (returnedData != null)
                //    _returnValue = true;
                //else
                //    _returnValue = false;
                // SharedDataDBContext.Connection
                EntityConnection connection = SharedDataDBContext.Connection as EntityConnection;

                using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
                {

                    SqlCommand command = new SqlCommand("usp_IsClientPieChartColorSettingExist", con);
                    command.CommandType = CommandType.StoredProcedure;
                    command.Parameters.AddWithValue("@TenantId", tenantId);
                    command.Parameters.AddWithValue("@SettingId", SettingId);
                    command.Parameters.AddWithValue("@ColorCode", ColorCode);
                    command.Parameters.Add("@resultValue", SqlDbType.Bit);
                    command.Parameters["@resultValue"].Direction = ParameterDirection.Output;
                    con.Open();
                    command.ExecuteNonQuery();
                    con.Close();
                    return (Boolean)command.Parameters["@resultValue"].Value;
                }
            }
            catch (SysXException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw (new SysXException(ex.Message, ex));
            }
            return _returnValue;
        }
        #endregion

        #region UAT-2842:
        /// <summary>
        /// Gets the order details for the given Order Id.
        /// </summary>
        /// <param name="tenantId">Tenant Id</param>
        /// <param name="orderId">Order Id</param>
        /// <returns></returns>
        public List<Order> GetOrdersByIds(List<Int32> orderIds)
        {
            return _dbContext.Orders
                .Include("DeptProgramPackage")
                .Include("DeptProgramMapping")
                .Include("DeptProgramPackage.CompliancePackage")
                .Include("DeptProgramPackage.DeptProgramMapping")
                .Include("OrderPaymentDetails")
                .Where(cond => orderIds.Contains(cond.OrderID) && !cond.IsDeleted).ToList();
        }
        #endregion

        //#region "Order Queue Test"
        //DataTable IComplianceDataRepository.GetOrderApprovalQueueTestData(OrderApprovalQueueContract orderApprovalQueueContract, CustomPagingArgsContract customPagingArgsContract)
        //{

        //    String orderBy = QueueConstants.ORDER_QUEUE_DEFAULT_SORTING_FIELDS;
        //    String ordDirection = null;

        //    orderBy = String.IsNullOrEmpty(customPagingArgsContract.SortExpression) ? orderBy : customPagingArgsContract.SortExpression;
        //    ordDirection = customPagingArgsContract.SortDirectionDescending == false ? String.IsNullOrEmpty(customPagingArgsContract.SortExpression) ? "desc" : "asc" : "desc";

        //    EntityConnection connection = _dbContext.Connection as EntityConnection;
        //    using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
        //    {
        //        SqlCommand command = new SqlCommand("Sp_GetOrderQueueData", con);
        //        command.CommandType = CommandType.StoredProcedure;
        //        command.Parameters.AddWithValue("@OrderID", orderApprovalQueueContract.OrderNumber);
        //        command.Parameters.AddWithValue("@ApplicantFirstName", orderApprovalQueueContract.FirstName);
        //        command.Parameters.AddWithValue("@ApplicantLastName", orderApprovalQueueContract.LastName);
        //        command.Parameters.AddWithValue("@OrderFromDate", orderApprovalQueueContract.OrderFromDate);
        //        command.Parameters.AddWithValue("@OrderToDate", orderApprovalQueueContract.OrderToDate);
        //        command.Parameters.AddWithValue("@PaidFromDate", orderApprovalQueueContract.OrderPaidFromDate);
        //        command.Parameters.AddWithValue("@PaidToDate", orderApprovalQueueContract.OrderPaidToDate);
        //        command.Parameters.AddWithValue("@SSN", orderApprovalQueueContract.SSN);
        //        command.Parameters.AddWithValue("@OrderStatusCode", orderApprovalQueueContract.OrderStatusCode);
        //        command.Parameters.AddWithValue("@PaymentTypeCode", orderApprovalQueueContract.PaymentTypeCode);
        //        command.Parameters.AddWithValue("@OrderPackageTypeCode", orderApprovalQueueContract.OrderPackageTypeCode);
        //        command.Parameters.AddWithValue("@ShowOnlyRushOrder", orderApprovalQueueContract.ShowOnlyRushOrder);
        //        command.Parameters.AddWithValue("@TargetHierarchyNodeIds", orderApprovalQueueContract.DeptProgramMappingIDs);
        //        command.Parameters.AddWithValue("@CurrentLoggedInUserId", orderApprovalQueueContract.LoggedInUserId);
        //        command.Parameters.AddWithValue("@OrderBy", orderBy);
        //        command.Parameters.AddWithValue("@OrderDirection", ordDirection);
        //        command.Parameters.AddWithValue("@PageIndex", customPagingArgsContract.CurrentPageIndex);
        //        command.Parameters.AddWithValue("@PageSize", customPagingArgsContract.PageSize);

        //        SqlDataAdapter adp = new SqlDataAdapter();
        //        adp.SelectCommand = command;
        //        DataSet ds = new DataSet();
        //        adp.Fill(ds);
        //        if (ds.Tables.Count > 0)
        //        {
        //            //if (ds.Tables[0].Rows.Count > 0)
        //            //{
        //                //customPagingArgsContract.CurrentPageIndex = Convert.ToInt32(Convert.ToString(ds.Tables[0].Rows[0]["CurrentPageIndex"]));
        //               // customPagingArgsContract.VirtualPageCount = Convert.ToInt32(Convert.ToString(ds.Tables[0].Rows[0]["VirtualCount"]));
        //           // }
        //            if (ds.Tables[0].Rows.Count > 0)
        //            {
        //                return ds.Tables[0];
        //            }
        //        }
        //        return new DataTable();
        //    }
        //}
        //#endregion
        public void UpdateScheduleTask(Int32 ScheduleTaskID)
        {
            try
            {
                ScheduledTask scheduledTask = _dbContext.ScheduledTasks.Where(cond => !cond.ST_IsDeleted && cond.ST_ID == ScheduleTaskID).FirstOrDefault();
                if (!scheduledTask.IsNullOrEmpty())
                {
                    scheduledTask.ST_IsApprovalEmailSent = true;
                    _dbContext.SaveChanges();
                }
            }
            catch (SysXException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw (new SysXException(ex.Message, ex));
            }
        }

        #region UAT-2388 : Insert Automatic PAckage Invitation Email Log
        public Boolean InsertAutomaticInvitationLog(Int32 tenantId, Int32 orderID, Int32 currentLoggedInID, Int32 paidStatusID)
        {
            try
            {
                Order orderDetails = _dbContext.Orders.Where(cond => !cond.IsDeleted && cond.OrderID == orderID).FirstOrDefault();
                if (!orderDetails.IsNullOrEmpty() && !orderDetails.BkgOrders.IsNullOrEmpty())
                {
                    List<Nullable<Int32>> PaidBOP_Ids = new List<Nullable<Int32>>();
                    var OPD = orderDetails.OrderPaymentDetails.Where(cond => cond.OPD_OrderStatusID == paidStatusID).ToList();
                    var OPPD = OPD.Select(d => d.OrderPkgPaymentDetails).ToList();
                    foreach (var data in OPPD)
                    {
                        var finalList = data.ToList();
                        PaidBOP_Ids.AddRange(finalList.Where(d => d.OPPD_BkgOrderPackageID.IsNotNull()).Select(d => d.OPPD_BkgOrderPackageID).ToList());
                    }

                    BkgOrder bkgOrder = orderDetails.BkgOrders.FirstOrDefault();
                    if (!bkgOrder.BkgOrderPackages.IsNullOrEmpty())
                    {
                        List<BkgOrderPackage> bkgOrderPackagesList = bkgOrder.BkgOrderPackages.Where(cnd => PaidBOP_Ids.Contains(cnd.BOP_ID)).ToList();
                        if (bkgOrderPackagesList.Count > AppConsts.NONE)
                        {
                            var automaticPackageInvitationList = _dbContext.AutomaticPackageInvitations.Where(s => s.AIP_OrderID == orderDetails.OrderID).ToList();
                            // String emailPlaceholder = bkgOrderPackagesList[0].BkgPackageHierarchyMapping.DeptProgramMapping.DPM_Label;
                            foreach (var item in bkgOrderPackagesList)
                            {
                                BkgPackageHierarchyMapping bkgPackageHierarchyMapping = item.BkgPackageHierarchyMapping;
                                if (!bkgPackageHierarchyMapping.BackgroundPackage.PackageInvitationSettings.IsNullOrEmpty())
                                {
                                    PackageInvitationSetting packageInvitationSetting = bkgPackageHierarchyMapping.BackgroundPackage.PackageInvitationSettings.FirstOrDefault();
                                    if (!packageInvitationSetting.PackageInvitationSettingPackages.IsNullOrEmpty() && packageInvitationSetting.PIS_IsActive)
                                    {
                                        List<Int32> targetPkgIds = packageInvitationSetting.PackageInvitationSettingPackages.Where(cond => !cond.PISP_IsDeleted).Select(sel => sel.PISP_TargetBkgPkgID).ToList();

                                        //String packageIds = String.Join(",", targetPkgIds);
                                        if (!automaticPackageInvitationList.Where(s => s.AIP_SourcePackageID == item.BkgPackageHierarchyMapping.BPHM_BackgroundPackageID).Any())
                                        {
                                            AutomaticPackageInvitation automaticPackageInvitation = new AutomaticPackageInvitation();
                                            if (currentLoggedInID > AppConsts.NONE)
                                                automaticPackageInvitation.AIP_CreatedBy = currentLoggedInID;
                                            else
                                                automaticPackageInvitation.AIP_CreatedBy = bkgOrder.OrganizationUserProfile.OrganizationUserID;

                                            automaticPackageInvitation.AIP_CreatedOn = DateTime.Now;
                                            automaticPackageInvitation.AIP_SendDate = DateTime.Now.AddMonths(packageInvitationSetting.PIS_Months);
                                            automaticPackageInvitation.AIP_DPM_ID = bkgOrderPackagesList[0].BkgPackageHierarchyMapping.DeptProgramMapping.DPM_ID;
                                            automaticPackageInvitation.AIP_IsDeleted = false;
                                            automaticPackageInvitation.AIP_EmailSentStatusID = AppConsts.TWO; //1 = Send, 2= Pending
                                            automaticPackageInvitation.AIP_OrderID = orderDetails.OrderID;
                                            automaticPackageInvitation.AIP_SourcePackageID = item.BkgPackageHierarchyMapping.BPHM_BackgroundPackageID;

                                            foreach (var rowitem in targetPkgIds)
                                            {
                                                AutomaticPackageInvitationData automaticPackageInvitationData = new AutomaticPackageInvitationData();
                                                automaticPackageInvitationData.AIPD_CreatedByID = currentLoggedInID;
                                                automaticPackageInvitationData.AIPD_CreatedOn = DateTime.Now;
                                                automaticPackageInvitationData.AIPD_IsDeleted = false;
                                                automaticPackageInvitationData.AIPD_TargetBkgPkgID = rowitem;
                                                automaticPackageInvitation.AutomaticPackageInvitationDatas.Add(automaticPackageInvitationData);
                                            }

                                            _dbContext.AutomaticPackageInvitations.AddObject(automaticPackageInvitation);
                                            _dbContext.SaveChanges();
                                        }
                                    }
                                }
                            }
                            return true;
                        }
                    }
                }

                return false;
            }
            catch (SysXException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw (new SysXException(ex.Message, ex));
            }
        }
        #endregion


        #region UAT-2802 : If a student has an order at one node, and they go to place an order at a different node, they should see a popup that this is not where they originally ordered their package
        public Boolean IsExistingNodeSelected(Int32 tenantId, Int32 currentLoggedInID, Int32 currentSelectedNodeId, Int32 OrderStatusId)
        {
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {

                SqlCommand command = new SqlCommand("USP_GetExistingNodePackage", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@currentLoggedInID", currentLoggedInID);
                command.Parameters.AddWithValue("@currentSelectedNodeId", currentSelectedNodeId);
                command.Parameters.AddWithValue("@OrderStatusId", OrderStatusId);
                command.Parameters.Add("@resultValue", SqlDbType.Bit);
                command.Parameters["@resultValue"].Direction = ParameterDirection.Output;
                con.Open();
                command.ExecuteNonQuery();
                con.Close();
                return (Boolean)command.Parameters["@resultValue"].Value;
            }
        }
        public bool IsClientOrderFlowMessageSetting(Int32 tenantId, String SettingCode)
        {
            try
            {
                var result = _dbContext.ClientSettings.Where(con => con.lkpSetting.Code == SettingCode && con.CS_TenantID == tenantId && !con.CS_IsDeleted).FirstOrDefault();
                if (result.IsNullOrEmpty() || result.CS_SettingValue == AppConsts.STR_ONE)
                {
                    return true;
                }
                return false;
            }
            catch (SysXException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw (new SysXException(ex.Message, ex));
            }
        }
        #endregion

        #region UAT-2971:- Support Portal

        List<ApplicantData> IComplianceDataRepository.GetSupportPortalSearchData(SearchItemDataContract searchContract, String selectedTenantIds, CustomPagingArgsContract gridCustomPagingContract, Int32 currentLoggedInUserId)
        {
            String orderBy = QueueConstants.APPLICANT_SEARCH_SECONDARY_SORTING_FIELDS;
            String ordDirection = null;

            orderBy = String.IsNullOrEmpty(gridCustomPagingContract.SortExpression) ? orderBy : gridCustomPagingContract.SortExpression;
            ordDirection = gridCustomPagingContract.SortDirectionDescending == false ? "desc" : "asc";

            EntityConnection connection = base.SecurityContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand command = new SqlCommand("usp_GetApplicantDataForSupportPortal", con);
                command.CommandType = CommandType.StoredProcedure;

                command.Parameters.AddWithValue("@UserName", searchContract.UserName);
                command.Parameters.AddWithValue("@SelectedTenantIds", selectedTenantIds);
                command.Parameters.AddWithValue("@FirstName", searchContract.ApplicantFirstName);
                command.Parameters.AddWithValue("@LastName", searchContract.ApplicantLastName);
                command.Parameters.AddWithValue("@SSN", searchContract.ApplicantSSN);
                command.Parameters.AddWithValue("@DOB", searchContract.DateOfBirth);
                command.Parameters.AddWithValue("@EmailAddress", searchContract.EmailAddress);
                command.Parameters.AddWithValue("@LoggedInOrgUserID", currentLoggedInUserId);
                command.Parameters.AddWithValue("@OrderBy", orderBy);
                command.Parameters.AddWithValue("@OrderDirection", ordDirection);
                command.Parameters.AddWithValue("@PageIndex", gridCustomPagingContract.CurrentPageIndex);
                command.Parameters.AddWithValue("@PageSize", gridCustomPagingContract.PageSize);
                command.Parameters.AddWithValue("@SelectedUserTypeCode", searchContract.SelectedUserTypeCode); //UAT-4020
                command.Parameters.AddWithValue("@IsAccountActivated", searchContract.IsAccountActivated); //UAT-4153
                //command.Parameters.AddWithValue("@IsClientAdmin", false); //UAT-4247

                //UAT-4247  BugID : 22009 add custom paging changes
                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);

                if (ds.Tables.Count > 0)
                {
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        gridCustomPagingContract.CurrentPageIndex = Convert.ToInt32(Convert.ToString(ds.Tables[0].Rows[0]["CurrentPageIndex"]));
                        gridCustomPagingContract.VirtualPageCount = Convert.ToInt32(Convert.ToString(ds.Tables[0].Rows[0]["VirtualCount"]));
                    }
                    if (ds.Tables[1].Rows.Count > 0)
                    {
                        List<ApplicantData> lstApplicantData = new List<ApplicantData>();
                        lstApplicantData = ds.Tables[1].AsEnumerable().Select(col =>
                              new ApplicantData
                              {

                                  ApplicantUserName = col["UserName"] == DBNull.Value ? String.Empty : Convert.ToString(col["UserName"]),
                                  OrganizationUserID = Convert.ToInt32(col["OrganizationUserId"]),
                                  UserID = Convert.ToString(col["UserID"]),
                                  ApplicantFirstName = col["ApplicantFirstName"] == DBNull.Value ? String.Empty : Convert.ToString(col["ApplicantFirstName"]),
                                  ApplicantLastName = col["ApplicantLastName"] == DBNull.Value ? String.Empty : Convert.ToString(col["ApplicantLastName"]),
                                  //DateOfBirth = Convert.ToDateTime(col["DateOfBirth"]),
                                  DOB = col["DOB"] == DBNull.Value ? (DateTime?)null : Convert.ToDateTime(col["DOB"]),
                                  InstitutionName = col["InstitutionName"] == DBNull.Value ? String.Empty : Convert.ToString(col["InstitutionName"]),
                                  SSN = col["SSN"] == DBNull.Value ? String.Empty : Convert.ToString(col["SSN"]),
                                  EmailAddress = col["EmailAddress"] == DBNull.Value ? String.Empty : Convert.ToString(col["EmailAddress"]),
                                  IsInMultipleInstitutions = Convert.ToString(col["IsInMultipleInstitutions"]),
                                  TenantID = col["TenantID"] == DBNull.Value ? 0 : Convert.ToInt32(col["TenantID"]),
                                  TotalCount = col["TotalCount"] == DBNull.Value ? 0 : Convert.ToInt32(col["TotalCount"]),
                                  UserType = col["UserType"] == DBNull.Value ? String.Empty : Convert.ToString(col["UserType"]) //UAT-4020
                                  ,
                                  ApplicantAccountActivated = Convert.ToBoolean(col["ApplicantAccountActivated"])
                                  ,
                                  ClientContactID = col["ClientContactID"] == DBNull.Value ? (Int32?)null : Convert.ToInt32(col["ClientContactID"])
                              }).ToList();
                        return lstApplicantData;
                    }
                }
                return new List<ApplicantData>();
            }
        }

        List<BkgOrderQueueNotesContract> IComplianceDataRepository.GetSupportPortalBkgOrderNotes(Int32 applicantOrganizationUserID)
        {
            List<BkgOrderQueueNotesContract> lstSupportPortalBkgOrderNotesNotes = new List<BkgOrderQueueNotesContract>();
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand command = new SqlCommand("usp_GetSupportPortalBkgOrderNotes", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@OrganizationUserID", applicantOrganizationUserID);

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > 0 && !ds.IsNullOrEmpty())
                {
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        IEnumerable<DataRow> rows = ds.Tables[0].AsEnumerable();
                        lstSupportPortalBkgOrderNotesNotes = rows.Select(col =>
                              new BkgOrderQueueNotesContract
                              {
                                  NotesID = col["NotesID"].GetType().Name == "DBNull" ? AppConsts.NONE : Convert.ToInt32(col["NotesID"]),
                                  //ApplicantOrganizationUserID = col["OrganizationUserID"].GetType().Name == "DBNull" ? AppConsts.NONE : Convert.ToInt32(col["OrganizationUserID"]),
                                  OrderID = col["OrderID"].GetType().Name == "DBNull" ? AppConsts.NONE : Convert.ToInt32(col["OrderID"]),
                                  Note = col["Notes"] == DBNull.Value ? String.Empty : Convert.ToString(col["Notes"]),
                                  // IsDeleted = col["IsDeleted"].GetType().Name == "DBNull" ? false : Convert.ToBoolean(col["IsDeleted"]),
                                  CreatedByID = col["CreatedByID"].GetType().Name == "DBNull" ? AppConsts.NONE : Convert.ToInt32(col["CreatedByID"]),
                                  CreatedOn = col["CreatedOn"].GetType().Name == "DBNull" ? DateTime.MinValue : Convert.ToDateTime(col["CreatedOn"]),
                                  // ModifiedByID = col["ModifiedByID"].GetType().Name == "DBNull" ? null : (Int32?)(col["ModifiedByID"]),
                                  // ModifiedOn = col["ModifiedOn"].GetType().Name == "DBNull" ? null : (DateTime?)col["ModifiedOn"],
                                  UserName = col["CreatedBy"].GetType().Name == "DBNull" ? String.Empty : Convert.ToString(col["CreatedBy"]),
                                  OrderNumber = col["OrderNumber"] == DBNull.Value ? String.Empty : Convert.ToString(col["OrderNumber"]),
                              }).ToList();
                    }
                }
            }
            return lstSupportPortalBkgOrderNotesNotes;
        }

        Boolean IComplianceDataRepository.SaveSupportPortalBkgOrderNotes(BkgOrderQueueNote supportPortalBkgOrderNotesToSave)
        {

            if (supportPortalBkgOrderNotesToSave.IsNotNull())
            {
                _dbContext.BkgOrderQueueNotes.AddObject(supportPortalBkgOrderNotesToSave);
                if (_dbContext.SaveChanges() > 0)
                    return true;
            }
            return false;

        }

        BkgOrderQueueNote IComplianceDataRepository.GetSupportPortalBkgOrderNotesByNoteID(Int32 supportPortalBkgOrderNoteId)
        {
            return _dbContext.BkgOrderQueueNotes.Where(cond => cond.BOQN_ID == supportPortalBkgOrderNoteId && !cond.BOQN_IsDeleted).FirstOrDefault();
        }

        Boolean IComplianceDataRepository.UpdateSupportPortalBkgOrderNotes()
        {
            if (_dbContext.SaveChanges() > 0)
            {
                return true;
            }
            return false;
        }



        List<SupportPortalOrderDetailContract> IComplianceDataRepository.GetSupportPortalOrderDetail(Int32 OrganizationUserId)
        {

            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand command = new SqlCommand("usp_GetOrderDetailForSupportPortal", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@OrganizationUserId", OrganizationUserId);

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > 0)
                {
                    List<SupportPortalOrderDetailContract> lstApplicantData = new List<SupportPortalOrderDetailContract>();
                    lstApplicantData = ds.Tables[0].AsEnumerable().Select(col =>
                          new SupportPortalOrderDetailContract
                          {
                              OrderId = Convert.ToInt32(col["OrderId"]),
                              OrderNumber = Convert.ToString(col["OrderNumber"]),
                              InstituteHierarchy = Convert.ToString(col["InstituteHierarchy"]),
                              PackageName = col["PackageName"] == DBNull.Value ? String.Empty : Convert.ToString(col["PackageName"]),
                              PackageLabel = col["PackageLabel"] == DBNull.Value ? String.Empty : Convert.ToString(col["PackageLabel"]),
                              //DateOfBirth = Convert.ToDateTime(col["DateOfBirth"]),
                              PaymentStatus = col["PaymentStatus"] == DBNull.Value ? String.Empty : Convert.ToString(col["PaymentStatus"]),
                              OrderFlag = col["OrderFlag"] == DBNull.Value ? String.Empty : Convert.ToString(col["OrderFlag"]),
                              ArchiveStatus = col["ArchiveStatus"] == DBNull.Value ? String.Empty : Convert.ToString(col["ArchiveStatus"]),
                              ActiveStatus = col["ActiveStatus"] == DBNull.Value ? String.Empty : Convert.ToString(col["ActiveStatus"]),
                              OrderDate = col["OrderDate"] == DBNull.Value ? (DateTime?)null : Convert.ToDateTime(col["OrderDate"]),
                              OrderPaidDate = col["OrderPaidDate"] == DBNull.Value ? (DateTime?)null : Convert.ToDateTime(col["OrderPaidDate"]),
                              OrderCompleteDate = col["OrderCompleteDate"] == DBNull.Value ? (DateTime?)null : Convert.ToDateTime(col["OrderCompleteDate"]),
                              ExceptionPending = col["ExceptionPending"] == DBNull.Value ? (Boolean?)null : Convert.ToBoolean(col["ExceptionPending"]),
                              PackageType = col["PackageType"] == DBNull.Value ? String.Empty : Convert.ToString(col["PackageType"]),
                              //ComplianceCategoryID = col["ComplianceCategoryID"] == DBNull.Value ? (Int32?)null : Convert.ToInt32(col["ComplianceCategoryID"]),
                              PackageSubscriptionID = col["PackageSubscriptionID"] == DBNull.Value ? (Int32?)null : Convert.ToInt32(col["PackageSubscriptionID"]),
                              //ApplicantComplianceItemID = col["ApplicantComplianceItemID"] == DBNull.Value ? (Int32?)null : Convert.ToInt32(col["ApplicantComplianceItemID"]),
                              BkgOrderId = col["BkgOrderId"] == DBNull.Value ? (Int32?)null : Convert.ToInt32(col["BkgOrderId"]),
                              ArchiveStatusCode = col["ArchiveStatusCode"] == DBNull.Value ? String.Empty : Convert.ToString(col["ArchiveStatusCode"]),
                              CompliancePackageStatusCode = col["CompliancePackageStatusCode"] == DBNull.Value ? String.Empty : Convert.ToString(col["CompliancePackageStatusCode"]),
                              PackageTypeCode = col["PackageTypeCode"] == DBNull.Value ? String.Empty : Convert.ToString(col["PackageTypeCode"]),
                              IsOrderItemsComplete = col["IsOrderItemsComplete"] == DBNull.Value ? (Boolean?)null : Convert.ToBoolean(col["IsOrderItemsComplete"]),
                              IsServiceGroupStatusComplete = col["IsServiceGroupStatusComplete"] == DBNull.Value ? (Boolean?)null : Convert.ToBoolean(col["IsServiceGroupStatusComplete"]),
                              OrderStatus = col["OrderStatus"] == DBNull.Value ? String.Empty : Convert.ToString(col["OrderStatus"]),
                              PackageId = col["PackageId"] == DBNull.Value ? (Int32?)null : Convert.ToInt32(col["PackageId"]),
                              IsServiceGroupFlagged = col["IsServiceGroupFlagged"] == DBNull.Value ? (Boolean?)null : Convert.ToBoolean(col["IsServiceGroupFlagged"]),
                              ServicreGroupName = col["ServicreGroupName"] == DBNull.Value ? String.Empty : Convert.ToString(col["ServicreGroupName"]),
                              OrderStatusCode = col["OrderStatusCode"] == DBNull.Value ? String.Empty : Convert.ToString(col["OrderStatusCode"]),
                              IsOrderRenewed = col["IsOrderRenewed"] == DBNull.Value ? false : Convert.ToBoolean(col["IsOrderRenewed"]) //UAT-3807
                          }).ToList();

                    return lstApplicantData;
                }
                return new List<SupportPortalOrderDetailContract>();
            }
        }


        public List<Int32> GetPkgSubArchiveHistoryIds(Int32 PackageSubscriptionId, Int32 UnArchiveId)
        {
            return _dbContext.CompliancePackageSubscriptionArchiveHistories.Where(cond => !cond.CPSAH_IsDeleted && cond.CPSAH_PackageSubscriptionID == PackageSubscriptionId && cond.CPSAH_ChangeTypeID == UnArchiveId
            ).Select(sel => sel.CPSAH_ID).ToList();
        }
        public List<Int32> GetPkgSubArchiveHistoryIds(List<Int32> PackageSubscriptionIds, Int32 UnArchiveId)
        {
            return _dbContext.CompliancePackageSubscriptionArchiveHistories.Where(cond => !cond.CPSAH_IsDeleted && PackageSubscriptionIds.Contains(cond.CPSAH_PackageSubscriptionID) && cond.CPSAH_ChangeTypeID == UnArchiveId
             ).Select(sel => sel.CPSAH_ID).ToList();
        }
        public List<Int32> GetBkgOrderArchiveHistoryIds(Int32 bkgOrderId, Int32 UnArchiveId)
        {
            return _dbContext.BkgOrderArchiveHistories.Where(cond => !cond.BOAH_IsDeleted && cond.BOAH_BkgOrderID == bkgOrderId && cond.BOAH_ChangeTypeID == UnArchiveId
            ).Select(sel => sel.BOAH_ID).ToList();
        }

        public OrganizationUser GetOrganizationUserByUserID(String userId, Boolean isApplicant)
        {
            Guid UserID = new Guid(userId);
            return _dbContext.OrganizationUsers.Where(cond => cond.UserID == UserID && cond.IsDeleted == false && cond.IsApplicant == isApplicant).FirstOrDefault();
        }
        #endregion
        #region UAT-2697:New NYU Bulk Upload Feature
        List<BulkOrderUpload> IComplianceDataRepository.GetBulkOrderDataForRepeatedSearchOrder(int _recordChunkSize)
        {
            EntityConnection connection = ClientDBContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand command = new SqlCommand("[dbo].[usp_GetBulkOrdersReadyForRepeatedSearchData]", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@ChunkSize", _recordChunkSize);

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > 0)
                {
                    IEnumerable<DataRow> rows = ds.Tables[0].AsEnumerable();
                    return rows.Select(x => new BulkOrderUpload
                    {
                        BOU_ID = x["BulkOrderUploadID"].GetType().Name == "DBNull" ? 0 : Convert.ToInt32(x["BulkOrderUploadID"]),
                        BOU_OrderID = x["OrderID"].GetType().Name == "DBNull" ? 0 : Convert.ToInt32(x["OrderID"]),
                        BOU_ApplicantID = x["ApplicantOrgID"].GetType().Name == "DBNull" ? 0 : Convert.ToInt32(x["ApplicantOrgID"]),
                    }).ToList();
                }
                else
                {
                    return new List<BulkOrderUpload>();
                }
            }
        }

        List<Int32> IComplianceDataRepository.CreateBulkOrderForRepeatedSearch(String bulkOrderUploadIDs, Int32 currentLoggedInUserID, Int32 tenantID)
        {
            List<Int32> lstOrderIDs = new List<Int32>();
            EntityConnection connection = ClientDBContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand command = new SqlCommand("[ams].[usp_CreateRepeatedSearchOrders]", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@BulkOrderUploadIDs", bulkOrderUploadIDs);
                command.Parameters.AddWithValue("@CurrentLoggedInUserID", currentLoggedInUserID);
                command.Parameters.AddWithValue("@TenantID", tenantID);

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > 0)
                {
                    IEnumerable<DataRow> rows = null;
                    if (ds.Tables.Count == AppConsts.ONE)
                    {
                        rows = ds.Tables[0].AsEnumerable();
                    }
                    else
                    {
                        rows = ds.Tables[1].AsEnumerable();
                    }
                    rows.ForEach(ordrId =>
                    {

                        lstOrderIDs.Add(ordrId["MasterOrderID"].GetType().Name == "DBNull" ? 0 : Convert.ToInt32(ordrId["MasterOrderID"]));
                    });

                }
            }
            return lstOrderIDs;
        }

        Boolean IComplianceDataRepository.IsApplicantGraduated(Int32 applicantId, Int32 archiveStateGraduatedId, Int32 archiveStateArchivedAndGraduatedId)
        {
            List<PackageSubscription> lstPackageSubscription = _dbContext.PackageSubscriptions.Where(cond => !cond.IsDeleted && cond.OrganizationUserID == applicantId).ToList();

            Int32 totalSubscriptioncount = 0;
            Int32 totalGraduatedcount = 0;
            if (lstPackageSubscription.IsNotNull() && lstPackageSubscription.Count > 0)
            {
                totalSubscriptioncount = lstPackageSubscription.Count;
            }

            List<PackageSubscription> lstGraduatedPackageSubscriptions = _dbContext.PackageSubscriptions.Where(cond => !cond.IsDeleted && (cond.ArchiveStateID == archiveStateGraduatedId || cond.ArchiveStateID == archiveStateArchivedAndGraduatedId) && cond.OrganizationUserID == applicantId).ToList();

            if (lstGraduatedPackageSubscriptions.IsNotNull() && lstGraduatedPackageSubscriptions.Count > 0)
            {
                totalGraduatedcount = lstGraduatedPackageSubscriptions.Count;
            }
            return (totalSubscriptioncount == totalGraduatedcount && totalGraduatedcount > 0) ? true : false;
        }
        #endregion


        #region UAT-2310
        /// <summary>
        /// [Automatic Assign Items to user according to their availability in their bucket/User Assignment queue]
        /// </summary>
        /// <param name="tenantIds"></param>
        /// <param name="currentLoggedInUserId"></param>
        /// <param name="adminUserBucketList"></param>
        /// <returns></returns>
        public List<AutoAssignItemsToUserContract> AutomaticAssigningItemsToUsers(Int32 currentLoggedInUserId, String adminUsersBucketListxml, String verificationQueueDataXmlData, CustomPagingArgsContract verificationGridCustomPaging, String customHTML, String DPMID)
        {
            List<AutoAssignItemsToUserContract> updatedData = new List<AutoAssignItemsToUserContract>();
            //String adminUsersBucketDetailxml = String.Empty;
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                //command.Parameters.AddWithValue("@CurrentLoggedInUserID", currentLoggedInUserId);
                //command.Parameters.AddWithValue("@QueueRecordXML", adminUsersBucketDetailxml);
                //command.Parameters.AddWithValue("@UsersBucketRecordXML", adminUsersBucketDetailxml); 
                SqlParameter[] sqlParameterCollection = new SqlParameter[]
                        {
                             new SqlParameter("@CurrentLoggedInUserID", currentLoggedInUserId),
                            // new SqlParameter("@QueueRecordXML",adminUsersBucketDetailxml),
                             new SqlParameter("@UsersBucketRecordXML",adminUsersBucketListxml),
                             new SqlParameter("@xmldata", verificationQueueDataXmlData),
                             new SqlParameter("@filteringSortingData",verificationGridCustomPaging.IsNullOrEmpty() ? null : verificationGridCustomPaging.XML),
                             new SqlParameter("@CustomAtrributesData", customHTML),
                             new SqlParameter("@InstitutionHierarchy", DPMID),
                             new SqlParameter ("@IsAllClientAssignment",false)
                        };

                base.OpenSQLDataReaderConnection(con);

                using (SqlDataReader dr = base.ExecuteSQLDataReader(con, "usp_AutoAssignment", sqlParameterCollection))
                {
                    if (dr.HasRows)
                    {
                        while (dr.Read())
                        {
                            AutoAssignItemsToUserContract autoAssignItemsToUserContract = new AutoAssignItemsToUserContract();
                            autoAssignItemsToUserContract.OrganizationUserID = dr["OrganizationUserID"].GetType().Name == "DBNull" ? 0 : Convert.ToInt32(dr["OrganizationUserID"]);
                            autoAssignItemsToUserContract.TotalBucketCount = dr["BucketCount"].GetType().Name == "DBNull" ? 0 : Convert.ToInt32(dr["BucketCount"]);
                            autoAssignItemsToUserContract.SubmissionStartDate = Convert.ToDateTime(dr["SubmissionStartDate"]);
                            autoAssignItemsToUserContract.SubmissionEndDate = Convert.ToDateTime(dr["SubmissionEndDate"]);
                            updatedData.Add(autoAssignItemsToUserContract);
                        }
                    }
                }

                base.CloseSQLDataReaderConnection(con);
            }

            return updatedData;
        }
        /// <summary>
        /// [Get All Admin(s) user bucket count]
        /// </summary>
        /// <returns></returns>
        public List<AutoAssignItemsToUserContract> GetAdminUsersBucketDetails(String SelectedTenantXML)
        {
            List<AutoAssignItemsToUserContract> adminUserList = new List<AutoAssignItemsToUserContract>();

            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlParameter[] sqlParameterCollection = new SqlParameter[]
                       {
                             new SqlParameter("@SelectedTenantXML", SelectedTenantXML),

                       };

                base.OpenSQLDataReaderConnection(con);

                using (SqlDataReader dr = base.ExecuteSQLDataReader(con, "usp_GetAdminAssignmentBucketCount", sqlParameterCollection))
                {
                    if (dr.HasRows)
                    {
                        while (dr.Read())
                        {

                            AutoAssignItemsToUserContract autoAssignItemsToUserContract = new AutoAssignItemsToUserContract();
                            autoAssignItemsToUserContract.OrganizationUserID = dr["OrganizationUserID"].GetType().Name == "DBNull" ? 0 : Convert.ToInt32(dr["OrganizationUserID"]);
                            autoAssignItemsToUserContract.TotalBucketCount = dr["TotalBucketCount"].GetType().Name == "DBNull" ? 0 : Convert.ToInt32(dr["TotalBucketCount"]);
                            autoAssignItemsToUserContract.SubmissionStartDate = Convert.ToDateTime(dr["SubmissionStartDate"]);
                            autoAssignItemsToUserContract.SubmissionEndDate = Convert.ToDateTime(dr["SubmissionEndDate"]);
                            autoAssignItemsToUserContract.TenantID = dr["TenantID"].GetType().Name == "DBNull" ? 0 : Convert.ToInt32(dr["TenantID"]);
                            autoAssignItemsToUserContract.CommonBucketCount = dr["CommonBucketCount"].GetType().Name == "DBNull" ? 0 : Convert.ToInt32(dr["CommonBucketCount"]);
                            autoAssignItemsToUserContract.MappedTenants = new List<Int32>();
                            autoAssignItemsToUserContract.MappedTenants.Add(autoAssignItemsToUserContract.TenantID);
                            var bucket = adminUserList.Where(x => x.OrganizationUserID == autoAssignItemsToUserContract.OrganizationUserID
                            && x.SubmissionStartDate == autoAssignItemsToUserContract.SubmissionStartDate
                            && x.SubmissionEndDate == autoAssignItemsToUserContract.SubmissionEndDate).FirstOrDefault();
                            if (bucket.IsNull())
                            {
                                adminUserList.Add(autoAssignItemsToUserContract);
                            }
                            else
                            {
                                bucket.MappedTenants.Add(autoAssignItemsToUserContract.TenantID);
                                bucket.TotalBucketCount = bucket.TotalBucketCount + autoAssignItemsToUserContract.TotalBucketCount;
                            }

                        }
                    }
                }

                base.CloseSQLDataReaderConnection(con);
            }
            return adminUserList;
        }
        #endregion


        DataSet IComplianceDataRepository.GetApplicantAndAgencyUserListForFallOutOfCompNotification(Int32? reqSubsId, Int32? compSubsID)
        {
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand command = new SqlCommand("usp_GetAgncyUserListForOutOfCompNotification", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@ReqSubsId", reqSubsId);
                command.Parameters.AddWithValue("@CompSubsID", compSubsID);

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);

                if (ds.IsNotNull() && !ds.Tables.IsNullOrEmpty() && ds.Tables.Count > 0)
                {
                    return ds;
                }
            }

            return null;
        }


        public List<AutoAssignItemsToUserContract> AutomaticAssigningItemsToUsersFromAllClientAssignmentQueue(Int32 currentLoggedInUserId, String adminUsersBucketListxml, AutoAssignItemsToUserListContract AutoAssignContract)
        {
            List<AutoAssignItemsToUserContract> updatedData = new List<AutoAssignItemsToUserContract>();
            //String adminUsersBucketDetailxml = String.Empty;
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {

                //command.Parameters.AddWithValue("@CurrentLoggedInUserID", currentLoggedInUserId);
                //command.Parameters.AddWithValue("@QueueRecordXML", adminUsersBucketDetailxml);
                //command.Parameters.AddWithValue("@UsersBucketRecordXML", adminUsersBucketDetailxml); 
                SqlParameter[] sqlParameterCollection = new SqlParameter[]
                        {
                             new SqlParameter("@CurrentLoggedInUserID", currentLoggedInUserId),
                            // new SqlParameter("@QueueRecordXML",adminUsersBucketDetailxml),
                             new SqlParameter("@UsersBucketRecordXML",adminUsersBucketListxml),
                             new SqlParameter("@xmldata", String.Empty),
                             new SqlParameter("@filteringSortingData",AutoAssignContract.MultiTenantGridCustomPaging.IsNullOrEmpty() ? String.Empty: AutoAssignContract.MultiTenantGridCustomPaging.XML),
                             new SqlParameter("@CustomAtrributesData", null),
                             new SqlParameter("@InstitutionHierarchy", String.Empty),
                             new SqlParameter ("@IsAllClientAssignment",true)
                        };

                base.OpenSQLDataReaderConnection(con);

                using (SqlDataReader dr = base.ExecuteSQLDataReader(con, "usp_AutoAssignment", sqlParameterCollection))
                {
                    if (dr.HasRows)
                    {
                        while (dr.Read())
                        {
                            AutoAssignItemsToUserContract autoAssignItemsToUserContract = new AutoAssignItemsToUserContract();
                            autoAssignItemsToUserContract.OrganizationUserID = dr["OrganizationUserID"].GetType().Name == "DBNull" ? 0 : Convert.ToInt32(dr["OrganizationUserID"]);
                            autoAssignItemsToUserContract.TotalBucketCount = dr["BucketCount"].GetType().Name == "DBNull" ? 0 : Convert.ToInt32(dr["BucketCount"]);
                            autoAssignItemsToUserContract.SubmissionStartDate = Convert.ToDateTime(dr["SubmissionStartDate"]);
                            autoAssignItemsToUserContract.SubmissionEndDate = Convert.ToDateTime(dr["SubmissionEndDate"]);
                            updatedData.Add(autoAssignItemsToUserContract);
                        }
                    }
                }

                base.CloseSQLDataReaderConnection(con);
            }

            return updatedData;
        }

        public List<Int32> GetApplicantComplianceItemIdList(Int32 packageSubscriptionId, Int32 complianceCategoryId)
        {
            List<Int32> applicantComplianceItemIDs = new List<Int32>();
            List<Int32> applicantComplianceCategoryIDs = _dbContext.ApplicantComplianceCategoryDatas.Where(cond => !cond.IsDeleted && cond.PackageSubscriptionID == packageSubscriptionId && cond.ComplianceCategoryID == complianceCategoryId).Select(sel => sel.ApplicantComplianceCategoryID).ToList();
            if (applicantComplianceCategoryIDs.IsNotNull() && applicantComplianceCategoryIDs.Count > 0)
            {
                applicantComplianceItemIDs = _dbContext.ApplicantComplianceItemDatas.Where(cond => !cond.IsDeleted && applicantComplianceCategoryIDs.Contains(cond.ApplicantComplianceCategoryID)).Select(sel => sel.ApplicantComplianceItemID).ToList();


                Guid wholeCatGUID = new Guid(AppConsts.WHOLE_CATEGORY_GUID);
                List<Int32> applicantCompliancewholeCatItemIDs = new List<Int32>();
                ComplianceItem cmpItem = _dbContext.ComplianceItems.FirstOrDefault(x => x.Code == wholeCatGUID);
                if (cmpItem.IsNotNull())
                {
                    Int32 ComplianceItemId = cmpItem.ComplianceItemID;
                    applicantCompliancewholeCatItemIDs = _dbContext.ApplicantComplianceItemDatas.Where(cond => cond.IsDeleted == true && applicantComplianceCategoryIDs.Contains(cond.ApplicantComplianceCategoryID) && cond.ComplianceItemID == ComplianceItemId).Select(sel => sel.ApplicantComplianceItemID).ToList();
                }

                if (applicantCompliancewholeCatItemIDs.IsNotNull())
                {
                    applicantComplianceItemIDs = applicantComplianceItemIDs.Union(applicantCompliancewholeCatItemIDs).Distinct().ToList();
                }

                return applicantComplianceItemIDs;
            }
            return new List<Int32>();
        }

        #region UAT-3075

        List<CompliancePriorityObjectContract> IComplianceDataRepository.GetCompObjMappings()
        {
            List<CompliancePriorityObjectContract> lstCompObjMappings = new List<CompliancePriorityObjectContract>();
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("usp_GetCompObjMapping", con);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > 0)
                {
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        lstCompObjMappings = ds.Tables[0].AsEnumerable().Select(col =>
                            new CompliancePriorityObjectContract
                            {
                                CCIPOM_ID = col["CCIPOM_ID"] == DBNull.Value ? 0 : Convert.ToInt32(col["CCIPOM_ID"]),
                                CPO_ID = col["CPO_ID"] == DBNull.Value ? 0 : Convert.ToInt32(col["CPO_ID"]),
                                CPO_Name = col["CPO_Name"] == DBNull.Value ? String.Empty : Convert.ToString(col["CPO_Name"]),
                                CategoryID = col["CategoryID"] == DBNull.Value ? 0 : Convert.ToInt32(col["CategoryID"]),
                                CategoryName = col["CategoryName"] == DBNull.Value ? String.Empty : Convert.ToString(col["CategoryName"]),
                                ItemID = col["ItemID"] == DBNull.Value ? 0 : Convert.ToInt32(col["ItemID"]),
                                ItemName = col["ItemName"] == DBNull.Value ? String.Empty : Convert.ToString(col["ItemName"])
                            }).ToList();
                    }
                }
            }
            return lstCompObjMappings;
        }


        List<CompliancePriorityObjectContract> IComplianceDataRepository.GetCategoryItems()
        {
            List<CompliancePriorityObjectContract> lstCategoryItems = (from cc in _dbContext.ComplianceCategories
                                                                       join cci in _dbContext.ComplianceCategoryItems on cc.ComplianceCategoryID equals cci.CCI_CategoryID
                                                                       join ci in _dbContext.ComplianceItems on cci.CCI_ItemID equals ci.ComplianceItemID
                                                                       where cc.IsDeleted == false && cci.CCI_IsDeleted == false && ci.IsDeleted == false
                                                                       select
                                                                       new CompliancePriorityObjectContract()
                                                                       {
                                                                           CategoryID = cc.ComplianceCategoryID,
                                                                           CategoryName = cc.CategoryName,
                                                                           ItemID = ci.ComplianceItemID,
                                                                           ItemName = ci.Name,
                                                                       }).ToList();
            return lstCategoryItems;
        }

        Boolean IComplianceDataRepository.SaveCompObjMapping(CompliancePriorityObjectContract compObjMapping, Int32 currentLoggedInUserId)
        {
            if (!compObjMapping.CCIPOM_ID.IsNullOrEmpty() && compObjMapping.CCIPOM_ID > AppConsts.NONE)
            {
                //Update Compliance priority Object Mapping
                ComplianceCategoryItemPriorityObjectMapping updateCompPriorityObjectMapping = _dbContext.ComplianceCategoryItemPriorityObjectMappings.Where(cond => !cond.CCIPOM_IsDeleted && cond.CCIPOM_ID == compObjMapping.CCIPOM_ID).FirstOrDefault();
                updateCompPriorityObjectMapping.CCIPOM_CompliancePriorityObjectID = compObjMapping.CPO_ID;
                updateCompPriorityObjectMapping.CCIPOM_ComplianceCategoryID = compObjMapping.CategoryID;
                updateCompPriorityObjectMapping.CCIPOM_ComplianceItemID = compObjMapping.ItemID;
                updateCompPriorityObjectMapping.CCIPOM_ModifiedBy = currentLoggedInUserId;
                updateCompPriorityObjectMapping.CCIPOM_ModifiedOn = DateTime.Now;
            }
            else
            {
                //Save Compliance Priority Object Mapping
                ComplianceCategoryItemPriorityObjectMapping saveCompPriorityObjectMapping = new ComplianceCategoryItemPriorityObjectMapping();
                saveCompPriorityObjectMapping.CCIPOM_CompliancePriorityObjectID = compObjMapping.CPO_ID;
                saveCompPriorityObjectMapping.CCIPOM_ComplianceCategoryID = compObjMapping.CategoryID;
                saveCompPriorityObjectMapping.CCIPOM_ComplianceItemID = compObjMapping.ItemID;
                saveCompPriorityObjectMapping.CCIPOM_CreatedBy = currentLoggedInUserId;
                saveCompPriorityObjectMapping.CCIPOM_CreatedOn = DateTime.Now;

                _dbContext.ComplianceCategoryItemPriorityObjectMappings.AddObject(saveCompPriorityObjectMapping);
            }

            if (_dbContext.SaveChanges() > AppConsts.NONE)
                return true;
            return false;
        }

        Boolean IComplianceDataRepository.DeleteCompObjMapping(Int32 compObjMappingID, Int32 currentLoggedInUserId)
        {
            if (!compObjMappingID.IsNullOrEmpty() && compObjMappingID > AppConsts.NONE)
            {
                ComplianceCategoryItemPriorityObjectMapping deleteCompPriorityObjectMapping = _dbContext.ComplianceCategoryItemPriorityObjectMappings.Where(cond => !cond.CCIPOM_IsDeleted && cond.CCIPOM_ID == compObjMappingID).FirstOrDefault();
                deleteCompPriorityObjectMapping.CCIPOM_IsDeleted = true;
                deleteCompPriorityObjectMapping.CCIPOM_ModifiedBy = currentLoggedInUserId;
                deleteCompPriorityObjectMapping.CCIPOM_ModifiedOn = DateTime.Now;
            }
            if (_dbContext.SaveChanges() > AppConsts.NONE)
                return true;
            return false;
        }
        #endregion

        #region [UAT-3077: (1 of ?) Initial Analysis and begin Dev: Pay per submission item type (CC only) for Tracking and Rotation]
        ItemPaymentContract IComplianceDataRepository.CreateItemPaymentOrder(ItemPaymentContract itemPaymentContract, List<lkpObjectType> lstObjectType)
        {
            String responseMessage = String.Empty;
            Int32 orderID = AppConsts.NONE;
            String invoiceNumber = String.Empty;
            using (System.Transactions.TransactionScope scope = new System.Transactions.TransactionScope())
            {
                try
                {
                    Order newOrder = null;
                    if (itemPaymentContract.orderID > AppConsts.NONE)
                    {
                        newOrder = _dbContext.Orders.Where(d => d.OrderID == itemPaymentContract.orderID && !d.IsDeleted).FirstOrDefault();
                    }
                    if (!newOrder.IsNullOrEmpty())
                    {
                        orderID = newOrder.OrderID;
                        OrderPaymentDetail opd = newOrder.OrderPaymentDetails.Where(d => !d.OPD_IsDeleted).FirstOrDefault();
                        if (!opd.IsNullOrEmpty() && !opd.OnlinePaymentTransaction.IsNullOrEmpty())
                        {
                            invoiceNumber = opd.OnlinePaymentTransaction.Invoice_num;
                        }
                    }
                    else
                    {
                        #region Create Order
                        newOrder = new Order();
                        if (itemPaymentContract.IsRequirementPackage)
                        {
                            var ClinicalRotationHierarchyMappingDetails = _dbContext.ClinicalRotationHierarchyMappings.Where(s => s.CRHM_ClinicalRotationID == itemPaymentContract.ClinicalRotationID).FirstOrDefault();
                            newOrder.HierarchyNodeID = ClinicalRotationHierarchyMappingDetails.CRHM_HierarchyNodeID;
                            newOrder.SelectedNodeID = ClinicalRotationHierarchyMappingDetails.CRHM_HierarchyNodeID;
                            itemPaymentContract.RequirementHierarchyNodeId = ClinicalRotationHierarchyMappingDetails.CRHM_HierarchyNodeID;
                        }
                        else
                        {
                            var pkgSubscriptionDetails = _dbContext.PackageSubscriptions.Where(s => s.PackageSubscriptionID == itemPaymentContract.PkgSubscriptionId).FirstOrDefault();
                            newOrder.HierarchyNodeID = pkgSubscriptionDetails.Order.HierarchyNodeID;
                            newOrder.SelectedNodeID = pkgSubscriptionDetails.Order.SelectedNodeID;
                        }
                        newOrder.OrganizationUserProfileID = itemPaymentContract.OrganizationUserProfileID;
                        newOrder.OrderStatusID = itemPaymentContract.OrderStatusID;
                        newOrder.OrderDate = itemPaymentContract.OrderDate;
                        newOrder.OrderMachineIP = itemPaymentContract.MachineIP;
                        newOrder.CreatedByID = itemPaymentContract.CreatedByID;
                        newOrder.CreatedOn = DateTime.Now;
                        newOrder.OrderRequestTypeID = itemPaymentContract.OrderRequestTypeID;
                        newOrder.OrderPackageType = itemPaymentContract.OrderPackageTypeID;
                        newOrder.TotalPrice = itemPaymentContract.TotalPrice;
                        newOrder.GrandTotal = itemPaymentContract.TotalPrice;
                        newOrder.IsDeleted = false;
                        _dbContext.Orders.AddObject(newOrder);
                        _dbContext.SaveChanges();
                        orderID = newOrder.OrderID;

                        #endregion
                        //Get Invoice Number
                        invoiceNumber = GenerateInvoiceNumber(orderID, itemPaymentContract.TenantID, false);
                        #region OnlinePaymentTransaction

                        OnlinePaymentTransaction onlinePaymentTransaction = new OnlinePaymentTransaction();
                        onlinePaymentTransaction.Amount = itemPaymentContract.TotalPrice;
                        onlinePaymentTransaction.Invoice_num = invoiceNumber;
                        onlinePaymentTransaction.CreatedByID = itemPaymentContract.CreatedByID;
                        onlinePaymentTransaction.CreatedOn = DateTime.Now;
                        onlinePaymentTransaction.IsDeleted = false;
                        _dbContext.OnlinePaymentTransactions.AddObject(onlinePaymentTransaction);
                        _dbContext.SaveChanges();
                        #endregion

                        #region OrderPaymentDetail
                        OrderPaymentDetail orderPaymentDetail = new OrderPaymentDetail();
                        orderPaymentDetail.OPD_OrderID = orderID;
                        orderPaymentDetail.OPD_OnlinePaymentTransactionID = onlinePaymentTransaction.OnlinePaymentTransactionID;
                        orderPaymentDetail.OPD_IsDeleted = false;
                        orderPaymentDetail.OPD_CreatedOn = DateTime.Now;
                        orderPaymentDetail.OPD_CreatedByID = itemPaymentContract.CreatedByID;
                        orderPaymentDetail.OPD_PaymentOptionID = itemPaymentContract.PaymentOptionID;
                        orderPaymentDetail.OPD_OrderStatusID = itemPaymentContract.OrderStatusID;
                        orderPaymentDetail.OPD_Amount = itemPaymentContract.TotalPrice;
                        _dbContext.OrderPaymentDetails.AddObject(orderPaymentDetail);
                        _dbContext.SaveChanges();
                        #endregion
                    }

                    #region Entity ID (ACID/ARID)
                    Int32 ItemPaymentOrderMappingEntityID = AppConsts.NONE;
                    if (itemPaymentContract.IsRequirementPackage)
                    {

                        //Requirement/Rotation Data Entry
                        #region Applicant Requirement Category Data Entry

                        ApplicantRequirementCategoryData applicantRequirementCategoryData = new ApplicantRequirementCategoryData();

                        applicantRequirementCategoryData = _dbContext.ApplicantRequirementCategoryDatas.Where(s => s.ARCD_RequirementPackageSubscriptionID == itemPaymentContract.PkgSubscriptionId
                            && s.ARCD_RequirementCategoryID == itemPaymentContract.CategoryID && !s.ARCD_IsDeleted).FirstOrDefault();
                        if (applicantRequirementCategoryData.IsNullOrEmpty())
                        {
                            applicantRequirementCategoryData = new ApplicantRequirementCategoryData();
                            applicantRequirementCategoryData.ARCD_RequirementPackageSubscriptionID = itemPaymentContract.PkgSubscriptionId;
                            applicantRequirementCategoryData.ARCD_RequirementCategoryID = itemPaymentContract.CategoryID;
                            applicantRequirementCategoryData.ARCD_RequirementCategoryStatusID = itemPaymentContract.ApplicantRequirementCategoryDataStatusID;
                            applicantRequirementCategoryData.ARCD_IsDeleted = false;
                            applicantRequirementCategoryData.ARCD_CreatedByID = itemPaymentContract.CreatedByID;
                            applicantRequirementCategoryData.ARCD_CreatedOn = DateTime.Now;
                            _dbContext.ApplicantRequirementCategoryDatas.AddObject(applicantRequirementCategoryData);
                            _dbContext.SaveChanges();
                        }

                        #endregion

                        #region Applicant Compliance Item Data Entry
                        ApplicantRequirementItemData applicantRequirementItemData = null;
                        applicantRequirementItemData = applicantRequirementCategoryData.ApplicantRequirementItemDatas.Where(sel => sel.ARID_RequirementItemID == itemPaymentContract.ItemID
                                                                                                                                               && !sel.ARID_IsDeleted).FirstOrDefault();
                        if (applicantRequirementItemData.IsNullOrEmpty())
                        {
                            applicantRequirementItemData = new Entity.ClientEntity.ApplicantRequirementItemData();
                            applicantRequirementItemData.ARID_RequirementCategoryDataID = applicantRequirementCategoryData.ARCD_ID;
                            applicantRequirementItemData.ARID_RequirementItemID = itemPaymentContract.ItemID;
                            applicantRequirementItemData.ARID_RequirementItemStatusID = itemPaymentContract.ApplicantRequirementItemDataStatusID;
                            applicantRequirementItemData.ARID_IsDeleted = false;
                            applicantRequirementItemData.ARID_CreatedByID = itemPaymentContract.CreatedByID;
                            applicantRequirementItemData.ARID_CreatedOn = DateTime.Now;
                            applicantRequirementItemData.ARID_SubmissionDate = DateTime.Now;
                            _dbContext.ApplicantRequirementItemDatas.AddObject(applicantRequirementItemData);
                            _dbContext.SaveChanges();
                        }
                        else
                        {
                            applicantRequirementItemData.ARID_RequirementItemStatusID = itemPaymentContract.ApplicantRequirementItemDataStatusID;
                            applicantRequirementItemData.ARID_ModifiedOn = DateTime.Now;
                            applicantRequirementItemData.ARID_ModifiedByID = itemPaymentContract.CreatedByID;
                            applicantRequirementItemData.ARID_SubmissionDate = DateTime.Now;
                            _dbContext.SaveChanges();
                        }
                        #endregion
                        ItemPaymentOrderMappingEntityID = applicantRequirementItemData.ARID_ID;
                    }
                    else
                    {

                        //Compliance/Tracking Data Entry
                        #region Applicant Compliance Category Data Entry

                        ApplicantComplianceCategoryData applicantComplianceCategoryData = new ApplicantComplianceCategoryData();

                        applicantComplianceCategoryData = _dbContext.ApplicantComplianceCategoryDatas.Where(s => s.PackageSubscriptionID == itemPaymentContract.PkgSubscriptionId
                            && s.ComplianceCategoryID == itemPaymentContract.CategoryID && !s.IsDeleted).FirstOrDefault();
                        if (applicantComplianceCategoryData.IsNullOrEmpty())
                        {
                            applicantComplianceCategoryData = new ApplicantComplianceCategoryData();
                            applicantComplianceCategoryData.PackageSubscriptionID = itemPaymentContract.PkgSubscriptionId;
                            applicantComplianceCategoryData.ComplianceCategoryID = itemPaymentContract.CategoryID;
                            applicantComplianceCategoryData.StatusID = itemPaymentContract.ApplicantComplianceCategoryDataStatusID;
                            applicantComplianceCategoryData.IsDeleted = false;
                            applicantComplianceCategoryData.CreatedByID = itemPaymentContract.CreatedByID;
                            applicantComplianceCategoryData.CreatedOn = DateTime.Now;
                            _dbContext.ApplicantComplianceCategoryDatas.AddObject(applicantComplianceCategoryData);
                            _dbContext.SaveChanges();

                        }

                        #endregion

                        #region Applicant Compliance Item Data Entry

                        ApplicantComplianceItemData applicantComplianceItemData = null;
                        applicantComplianceItemData = applicantComplianceCategoryData.ApplicantComplianceItemDatas.Where(sel => sel.ComplianceItemID == itemPaymentContract.ItemID
                                                                                                                                               && !sel.IsDeleted).FirstOrDefault();

                        String _errors = String.Empty;
                        Boolean _isAdminReviewRequired = true;
                        Int16? _reviewerTypeId = 0;
                        String _newItemComplianceStatusCode = ApplicantItemComplianceStatus.Incomplete.GetStringValue();
                        if (itemPaymentContract.IsPaid)
                        {//If item is paid then execute ui rules.
                            List<ApplicantComplianceAttributeData> lstAttributeData = new List<ApplicantComplianceAttributeData>();
                            if (!applicantComplianceItemData.IsNullOrEmpty()
                                    && !applicantComplianceItemData.ApplicantComplianceAttributeDatas.IsNullOrEmpty()
                                    && applicantComplianceItemData.ApplicantComplianceAttributeDatas.Count > 0)
                            {
                                lstAttributeData.AddRange(applicantComplianceItemData.ApplicantComplianceAttributeDatas.Where(cond => !cond.IsDeleted).ToList());
                            }
                            else
                            {
                                List<ComplianceItemAttribute> lstAttributes = ClientDBContext.ComplianceItemAttributes.Where(cond => cond.CIA_ItemID == itemPaymentContract.ItemID
                                                                                                                              && !cond.CIA_IsDeleted).ToList();
                                foreach (ComplianceItemAttribute attribute in lstAttributes)
                                {
                                    ApplicantComplianceAttributeData attributeData = new ApplicantComplianceAttributeData();
                                    attributeData.ComplianceAttributeID = attribute.CIA_AttributeID;

                                    if (!attribute.ComplianceAttribute.IsNullOrEmpty()
                                        && !attribute.ComplianceAttribute.lkpComplianceAttributeDatatype.IsNullOrEmpty()
                                        && attribute.ComplianceAttribute.lkpComplianceAttributeDatatype.Code == INTSOF.Utils.ComplianceAttributeDatatypes.Signature.GetStringValue())
                                        attributeData.AttributeValue = "False";

                                    lstAttributeData.Add(attributeData);
                                }

                            }
                            _errors = ValidateUIInput(itemPaymentContract.OrganizationUserID, itemPaymentContract.PkgId, lstAttributeData, itemPaymentContract.ItemID
                                                , itemPaymentContract.CategoryID, itemPaymentContract.PkgSubscriptionId, true, lstObjectType);



                            String incompleteItemStatusCode = String.Empty;

                            var adminReviewer = itemPaymentContract.AssignmentProperty.AssignmentPropertiesReviewers.Where(revType => !revType.IsDeleted).FirstOrDefault(revType => revType.lkpReviewerType.Code.ToLower() == LkpReviewerType.Admin.ToLower() && !revType.IsDeleted);
                            if (adminReviewer.IsNotNull())
                            {
                                _newItemComplianceStatusCode = ApplicantItemComplianceStatus.Pending_Review.GetStringValue();
                                incompleteItemStatusCode = ApplicantItemComplianceStatus.Incomplete.GetStringValue();
                                itemPaymentContract.ApplicantComplianceItemDataStatusID = _errors.IsNullOrEmpty() ? GetReviewStatusByCode(_newItemComplianceStatusCode) : GetReviewStatusByCode(incompleteItemStatusCode);
                                _isAdminReviewRequired = true;
                                _reviewerTypeId = adminReviewer.ReviewerTypeID;
                            }
                            else
                            {
                                _newItemComplianceStatusCode = ApplicantItemComplianceStatus.Pending_Review_For_Client.GetStringValue();
                                incompleteItemStatusCode = ApplicantItemComplianceStatus.Incomplete.GetStringValue();
                                itemPaymentContract.ApplicantComplianceItemDataStatusID = _errors.IsNullOrEmpty() ? GetReviewStatusByCode(_newItemComplianceStatusCode) : GetReviewStatusByCode(incompleteItemStatusCode);
                                _isAdminReviewRequired = false;
                                _reviewerTypeId = itemPaymentContract.AssignmentProperty.AssignmentPropertiesReviewers.Where(revType => !revType.IsDeleted).FirstOrDefault().ReviewerTypeID;
                            }
                        }

                        if (!applicantComplianceItemData.IsNullOrEmpty())
                        {
                            applicantComplianceItemData.StatusID = itemPaymentContract.ApplicantComplianceItemDataStatusID;
                            applicantComplianceItemData.IsDeleted = false;
                            applicantComplianceItemData.ModifiedByID = itemPaymentContract.CreatedByID;
                            applicantComplianceItemData.ModifiedOn = DateTime.Now;
                            applicantComplianceItemData.SubmissionDate = DateTime.Now;
                            applicantComplianceItemData.IsReviewerTypeAdmin = _isAdminReviewRequired;

                            if (Convert.ToBoolean(itemPaymentContract.AssignmentProperty.ApprovalRequired))
                                applicantComplianceItemData.ItemMovementTypeID = GetItemMovementTypeId(_newItemComplianceStatusCode, ComplianceScreenModes.DATAENTRY, _isAdminReviewRequired, itemPaymentContract.ListItemMovementType);

                            applicantComplianceItemData.ReviewerTypeID = _reviewerTypeId == 0 ? null : _reviewerTypeId;
                        }
                        else
                        {
                            applicantComplianceItemData = new Entity.ClientEntity.ApplicantComplianceItemData();
                            applicantComplianceItemData.ApplicantComplianceCategoryID = applicantComplianceCategoryData.ApplicantComplianceCategoryID;
                            applicantComplianceItemData.ComplianceItemID = itemPaymentContract.ItemID;
                            applicantComplianceItemData.StatusID = itemPaymentContract.ApplicantComplianceItemDataStatusID;
                            applicantComplianceItemData.IsDeleted = false;
                            applicantComplianceItemData.CreatedByID = itemPaymentContract.CreatedByID;
                            applicantComplianceItemData.CreatedOn = DateTime.Now;
                            applicantComplianceItemData.SubmissionDate = DateTime.Now;
                            applicantComplianceItemData.IsReviewerTypeAdmin = _isAdminReviewRequired;

                            //if (Convert.ToBoolean(itemPaymentContract.AssignmentProperty.ApprovalRequired))
                            //    applicantComplianceItemData.ItemMovementTypeID = GetItemMovementTypeId(_newItemComplianceStatusCode, ComplianceScreenModes.DATAENTRY, _isAdminReviewRequired, itemPaymentContract.ListItemMovementType);

                            if (Convert.ToBoolean(itemPaymentContract.AssignmentProperty.ApprovalRequired))
                                applicantComplianceItemData.ItemMovementTypeID = GetItemMovementTypeByCode(LkpItemMovementStatus.VIA_DATA_ENTRY_FROM_INCOMPLETE.GetStringValue(), itemPaymentContract.ListItemMovementType);
                            else
                                applicantComplianceItemData.ItemMovementTypeID = GetItemMovementTypeByCode(LkpItemMovementStatus.VIA_DATA_ENTRY_FROM_INCOMPLETE_REVIEW_NOT_REQUIRED.GetStringValue(), itemPaymentContract.ListItemMovementType);


                            applicantComplianceItemData.ReviewerTypeID = _reviewerTypeId == 0 ? null : _reviewerTypeId;

                            _dbContext.ApplicantComplianceItemDatas.AddObject(applicantComplianceItemData);
                        }
                        _dbContext.SaveChanges();
                        #endregion
                        ItemPaymentOrderMappingEntityID = applicantComplianceItemData.ApplicantComplianceItemID;

                        //-------
                        itemPaymentContract.AssignedToUser = applicantComplianceItemData.AssignedToUser;
                        itemPaymentContract.IsReviewerTypeAdmin = applicantComplianceItemData.IsReviewerTypeAdmin;
                        itemPaymentContract.IsReviewerTypeClientAdmin = applicantComplianceItemData.IsReviewerTypeClientAdmin;
                        itemPaymentContract.SubmissionDate = applicantComplianceItemData.SubmissionDate;
                        itemPaymentContract.ApplicantComplianceItemnId = applicantComplianceItemData.ApplicantComplianceItemID;
                        itemPaymentContract.HierarchyNodeID = newOrder.HierarchyNodeID;

                    }
                    #endregion

                    if (!itemPaymentContract.IsPaid)
                    {
                        #region Parking payment Log Table
                        ItemPaymentOrderMapping itemPaymentOrderMapping = null;
                        itemPaymentOrderMapping = _dbContext.ItemPaymentOrderMappings.Where(s => s.IPOM_EntityID == ItemPaymentOrderMappingEntityID && !s.IPOM_IsDeleted).FirstOrDefault();
                        if (itemPaymentOrderMapping.IsNullOrEmpty())
                        {
                            itemPaymentOrderMapping = new ItemPaymentOrderMapping();
                            itemPaymentOrderMapping.IPOM_CreatedByID = itemPaymentContract.CreatedByID;
                            itemPaymentOrderMapping.IPOM_CreatedOn = DateTime.Now;
                            itemPaymentOrderMapping.IPOM_EntityID = ItemPaymentOrderMappingEntityID;//ACID in case of compliance
                            itemPaymentOrderMapping.IPOM_EntityTypeID = itemPaymentContract.ItemPaymentOrderMappingEntityTypeID;
                            itemPaymentOrderMapping.IPOM_IsDeleted = false;
                            itemPaymentOrderMapping.IPOM_OrderID = orderID;
                            itemPaymentOrderMapping.IPOM_OrderPackageTypeID = itemPaymentContract.OrderPackageTypeID;
                            itemPaymentOrderMapping.IPOM_OrderRequestTypeID = itemPaymentContract.OrderRequestTypeID;
                            _dbContext.ItemPaymentOrderMappings.AddObject(itemPaymentOrderMapping);
                        }
                        _dbContext.SaveChanges();
                        #endregion
                    }
                    // orderID = newOrder.OrderID;
                    itemPaymentContract.orderID = orderID;
                    itemPaymentContract.invoiceNumber = invoiceNumber;
                    itemPaymentContract.isOrderSaved = true;
                    scope.Complete();
                    itemPaymentContract.ItemDataId = ItemPaymentOrderMappingEntityID;
                    var res = newOrder.OrderNumber;
                    //_dbContext.Orders.Where(d => d.OrderID == orderID).FirstOrDefault();
                }
                catch (Exception ex)
                {
                    itemPaymentContract.isOrderSaved = false;
                    itemPaymentContract.responseMessage = ex.Message;
                }
            }



            return itemPaymentContract;
        }

        OrganizationUserProfile IComplianceDataRepository.GetOrganizationUserProfileByUserProfileID(Int32 OrganizationUserProfileID)
        {
            return _dbContext.OrganizationUserProfiles.Where(x => x.OrganizationUserProfileID == OrganizationUserProfileID
                                                               && x.IsActive && !x.IsDeleted).FirstOrDefault();
        }

        List<ItemPaymentContract> IComplianceDataRepository.GetItemPaymentDetailBySubscriptionId(Int32 subscriptionID, Boolean isRequirementPackage)
        {
            List<ItemPaymentContract> result = new List<ItemPaymentContract>();
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlParameter[] sqlParameterCollection = new SqlParameter[]
                        {
                             new SqlParameter("@PackageSubscriptionId", subscriptionID),
                             new SqlParameter ("@IsRequirementPackage",isRequirementPackage)
                        };

                base.OpenSQLDataReaderConnection(con);

                using (SqlDataReader dr = base.ExecuteSQLDataReader(con, "usp_GetItemPaymentDetailsBySubscriptionID", sqlParameterCollection))
                {
                    if (dr.HasRows)
                    {
                        while (dr.Read())
                        {
                            ItemPaymentContract ItemPaymentContract = new ItemPaymentContract();
                            ItemPaymentContract.PkgName = dr["PkgName"].GetType().Name == "DBNull" ? String.Empty : Convert.ToString(dr["PkgName"]);
                            ItemPaymentContract.CategoryName = dr["CategoryName"].GetType().Name == "DBNull" ? String.Empty : Convert.ToString(dr["CategoryName"]);
                            ItemPaymentContract.ItemName = dr["ItemName"].GetType().Name == "DBNull" ? String.Empty : Convert.ToString(dr["ItemName"]);
                            ItemPaymentContract.PkgId = dr["PkgId"].GetType().Name == "DBNull" ? 0 : Convert.ToInt32(dr["PkgId"]);
                            ItemPaymentContract.CategoryID = dr["CategoryID"].GetType().Name == "DBNull" ? 0 : Convert.ToInt32(dr["CategoryID"]);
                            ItemPaymentContract.ItemID = dr["ItemID"].GetType().Name == "DBNull" ? 0 : Convert.ToInt32(dr["ItemID"]);
                            ItemPaymentContract.PkgSubscriptionId = subscriptionID;
                            ItemPaymentContract.IsRequirementPackage = isRequirementPackage;
                            ItemPaymentContract.TotalPrice = dr["TotalPrice"].GetType().Name == "DBNull" ? 0 : Convert.ToDecimal(dr["TotalPrice"]);
                            ItemPaymentContract.PaidAmount = dr["PaidAmount"].GetType().Name == "DBNull" ? 0 : Convert.ToDecimal(dr["PaidAmount"]);
                            ItemPaymentContract.ItemDataId = dr["ItemDataId"].GetType().Name == "DBNull" ? 0 : Convert.ToInt32(dr["ItemDataId"]);
                            ItemPaymentContract.OrderStatus = dr["OrderStatus"].GetType().Name == "DBNull" ? String.Empty : Convert.ToString(dr["OrderStatus"]);
                            ItemPaymentContract.OrderStatusCode = dr["OrderStatusCode"].GetType().Name == "DBNull" ? String.Empty : Convert.ToString(dr["OrderStatusCode"]);
                            ItemPaymentContract.orderID = dr["OrderID"].GetType().Name == "DBNull" ? 0 : Convert.ToInt32(dr["OrderID"]);
                            ItemPaymentContract.OrderNumber = dr["OrderNumber"].GetType().Name == "DBNull" ? String.Empty : Convert.ToString(dr["OrderNumber"]);
                            ItemPaymentContract.invoiceNumber = dr["InvoiceNumber"].GetType().Name == "DBNull" ? String.Empty : Convert.ToString(dr["InvoiceNumber"]);
                            ItemPaymentContract.OrganizationUserProfileID = dr["OrganizationUserProfileID"].GetType().Name == "DBNull" ? 0 : Convert.ToInt32(dr["OrganizationUserProfileID"]);
                            ItemPaymentContract.OrganizationUserID = dr["OrganizationUserID"].GetType().Name == "DBNull" ? 0 : Convert.ToInt32(dr["OrganizationUserID"]);
                            result.Add(ItemPaymentContract);
                        }
                    }
                }

                base.CloseSQLDataReaderConnection(con);
            }
            return result;
        }

        String IComplianceDataRepository.GetOrderNumberByOrderID(Int32 orderID)
        {
            return _dbContext.Orders.Where(s => s.OrderID == orderID && !s.IsDeleted).FirstOrDefault().OrderNumber;
        }
        #endregion

        #region UAT-3084
        List<RejectedItemListContract> IComplianceDataRepository.GetRejectedItemListForReSubmission(Int32 orgUserID)
        {
            List<RejectedItemListContract> lstRejectedItemListContract = new List<RejectedItemListContract>();
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand command = new SqlCommand("usp_GetRejectedItemListForReSubmission", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@OrgUserID", orgUserID);

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > 0)
                {
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        IEnumerable<DataRow> rows = ds.Tables[0].AsEnumerable();
                        lstRejectedItemListContract = rows.Select(col =>
                              new RejectedItemListContract
                              {
                                  ApplicantComplianceItemID = Convert.ToInt32(col["ApplicantComplianceItemID"]),
                                  ComplianceItemID = Convert.ToInt32(col["ComplianceItemID"]),
                                  ItemName = col["ItemName"] == DBNull.Value ? String.Empty : Convert.ToString(col["ItemName"]),
                                  RejectionNotes = col["RejectionNotes"] == DBNull.Value ? String.Empty : Convert.ToString(col["RejectionNotes"]),
                                  PackageName = col["PackageName"] == DBNull.Value ? String.Empty : Convert.ToString(col["PackageName"]),
                                  CategoryName = col["CategoryName"] == DBNull.Value ? String.Empty : Convert.ToString(col["CategoryName"])
                              }).ToList();
                    }
                }
            }
            return lstRejectedItemListContract;

        }

        List<ApplicantComplianceItemData> IComplianceDataRepository.GetApplicantComplianceItemDataByIDs(List<Int32> lstApplicantComplianceItemDataIds)
        {
            return _dbContext.ApplicantComplianceItemDatas.Where(obj => lstApplicantComplianceItemDataIds.Contains(obj.ApplicantComplianceItemID) && obj.IsDeleted == false).ToList();
        }

        //Boolean IComplianceDataRepository.UpdateApplicantComplianceItemDataList(List<ApplicantComplianceItemData> lstApplicantComplianceItemData)
        //{
        //    if (!lstApplicantComplianceItemData.IsNullOrEmpty())
        //    {
        //        if (_dbContext.SaveChanges() > AppConsts.NONE)
        //            return true;
        //    }
        //    return false;
        //}

        ComplianceSaveResponse IComplianceDataRepository.SaveApplicantDataForReSubmission(ApplicantComplianceCategoryData applicantCategoryData, ApplicantComplianceItemData applicantItemData, List<ApplicantComplianceAttributeData> lstApplicantData,
          Int32 createdModifiedById, String categoryComplianceStatus, Int32 CompliancePackageID, AssignmentProperty assignmentProperty, Int32 packageSubscriptionId,
          List<lkpItemMovementType> lstItemMovementTypes, List<lkpObjectType> lstObjectTypes, Boolean isDataEntryForm, Int32 OrgUsrID, Int32 tenantId)
        {

            ComplianceSaveResponse complianceSaveResponse = new ComplianceSaveResponse();

            // Get the Applicant Compliance Category Id to check if the category is already added or not. If added, then add the new item under this category. Used in both Add/Update
            //Int32 _applicantComplianceCategoryInitialId = applicantCategoryData.ApplicantComplianceCategoryID = GetApplicantComplianceCategoryId(applicantCategoryData.PackageSubscriptionID, applicantCategoryData.ComplianceCategoryID, createdModifiedById);
            Int32 _categoryComplianceStatusId = _dbContext.lkpCategoryComplianceStatus.Where(catStatus => catStatus.Code.ToLower().Trim() == categoryComplianceStatus.ToLower().Trim()).FirstOrDefault().CategoryComplianceStatusID;

            Int16? _reviewerTypeId = 0;
            Int32 _itemComplianceStatusId;
            String _newItemComplianceStatusCode = String.Empty;
            Boolean _isAdminReviewRequired = false; ;

            if (Convert.ToBoolean(assignmentProperty.ApprovalRequired))
            {
                var adminReviewer = assignmentProperty.AssignmentPropertiesReviewers.Where(revType => !revType.IsDeleted).FirstOrDefault(revType => revType.lkpReviewerType.Code.ToLower() == LkpReviewerType.Admin.ToLower() && !revType.IsDeleted);
                if (adminReviewer.IsNotNull())
                {
                    _newItemComplianceStatusCode = ApplicantItemComplianceStatus.Pending_Review.GetStringValue();
                    _itemComplianceStatusId = GetReviewStatusByCode(_newItemComplianceStatusCode);
                    _isAdminReviewRequired = true;
                    _reviewerTypeId = adminReviewer.ReviewerTypeID;
                }
                else
                {
                    _newItemComplianceStatusCode = ApplicantItemComplianceStatus.Pending_Review_For_Client.GetStringValue();
                    _itemComplianceStatusId = GetReviewStatusByCode(_newItemComplianceStatusCode);
                    _isAdminReviewRequired = false;
                    _reviewerTypeId = assignmentProperty.AssignmentPropertiesReviewers.Where(revType => !revType.IsDeleted).FirstOrDefault().ReviewerTypeID;
                }
            }
            else
                _itemComplianceStatusId = GetReviewStatusByCode(ApplicantItemComplianceStatus.Approved.GetStringValue());

            Int32? itemReviewerCount = null;
            if (_newItemComplianceStatusCode == ApplicantItemComplianceStatus.Pending_Review.GetStringValue())
            {
                //UAT-1712 
                //call for reconciliation
                ItemReconciliationAvailiblityContract reconciliationAvailablity = GetItemReconciliationAvailiblityStatus(tenantId
                , applicantItemData.ComplianceItemID.ToString()
                , packageSubscriptionId)
                .FirstOrDefault();
                if (reconciliationAvailablity.IsSelected)
                {
                    itemReviewerCount = reconciliationAvailablity.ReviewerCount;
                }
            }

            DateTime creationModificationDateTime = DateTime.Now;

            if (applicantCategoryData.ApplicantComplianceCategoryID > 0)
            {
                #region UPDATE DATA

                if (applicantItemData.ApplicantComplianceItemID > 0)
                {

                    ApplicantComplianceItemData applicantComplianceItemDataToUpdate = _dbContext.ApplicantComplianceItemDatas.
                    Where(itemData => itemData.ApplicantComplianceItemID == applicantItemData.ApplicantComplianceItemID).FirstOrDefault();
                    String itemStatuscode = applicantComplianceItemDataToUpdate.lkpItemComplianceStatu.Code;
                    applicantComplianceItemDataToUpdate.ModifiedByID = createdModifiedById;
                    applicantComplianceItemDataToUpdate.ModifiedOn = creationModificationDateTime;
                    applicantComplianceItemDataToUpdate.Notes = applicantItemData.Notes;
                    applicantComplianceItemDataToUpdate.StatusID = _itemComplianceStatusId;
                    applicantComplianceItemDataToUpdate.IsUiRulesViolate = applicantItemData.IsUiRulesViolate;
                    //UAT-1712 : Update Reviewer Count
                    applicantComplianceItemDataToUpdate.ReconciliationReviewCount = itemReviewerCount;

                    if (_newItemComplianceStatusCode != itemStatuscode)
                    {
                        if (Convert.ToBoolean(assignmentProperty.ApprovalRequired))
                            applicantComplianceItemDataToUpdate.ItemMovementTypeID = GetItemMovementTypeId(itemStatuscode, ComplianceScreenModes.DATAENTRY, _isAdminReviewRequired, lstItemMovementTypes);
                    }

                    applicantComplianceItemDataToUpdate.ReviewerTypeID = _reviewerTypeId == 0 ? null : _reviewerTypeId;
                    applicantItemData = applicantComplianceItemDataToUpdate;


                    //Update submission date whenever applicant do his data entry. UAT 522- Submission Date on Verification Queues should be the most recent student submission date.
                    //applicantComplianceItemDataToUpdate.SubmissionDate = creationModificationDateTime;

                    applicantComplianceItemDataToUpdate.ExpirationDate = null;
                    applicantComplianceItemDataToUpdate.ExceptionReason = null;
                    complianceSaveResponse.ItemData = applicantComplianceItemDataToUpdate;
                    //UAT 4737 Submission date changing when item is changed from meets requirements to any other status
                    String oldStatus = itemStatuscode;
                    String newStatus = _newItemComplianceStatusCode;

                    //if (
                    //    ((_newItemComplianceStatusCode == ApplicantItemComplianceStatus.Pending_Review.GetStringValue() && itemStatuscode != ApplicantItemComplianceStatus.Pending_Review_For_Client.GetStringValue())
                    //    || (_newItemComplianceStatusCode == ApplicantItemComplianceStatus.Pending_Review_For_Client.GetStringValue() && itemStatuscode != ApplicantItemComplianceStatus.Pending_Review.GetStringValue())
                    //    || (itemStatuscode == ApplicantItemComplianceStatus.Incomplete.GetStringValue())
                    //    || (itemStatuscode == ApplicantItemComplianceStatus.Exception_Rejected.GetStringValue() && _newItemComplianceStatusCode == ApplicantItemComplianceStatus.Applied_For_Exception.GetStringValue())
                    //    )
                    //     && (itemStatuscode != _newItemComplianceStatusCode)
                    //    )
                    if ((oldStatus == ApplicantItemComplianceStatus.Incomplete.GetStringValue() && newStatus != ApplicantItemComplianceStatus.Incomplete.GetStringValue())
                        || (oldStatus == ApplicantItemComplianceStatus.Pending_Review.GetStringValue()
                            && newStatus == ApplicantItemComplianceStatus.Pending_Review.GetStringValue())
                        || (oldStatus != ApplicantItemComplianceStatus.Pending_Review.GetStringValue()
                            &&
                                (newStatus == ApplicantItemComplianceStatus.Pending_Review.GetStringValue()
                                || newStatus == ApplicantItemComplianceStatus.Pending_Review_For_Client.GetStringValue()
                                || newStatus == ApplicantItemComplianceStatus.Applied_For_Exception.GetStringValue())
                            )
                       )
                    {
                        applicantComplianceItemDataToUpdate.SubmissionDate = creationModificationDateTime;
                        Boolean NotAssesedMultiReview = _newItemComplianceStatusCode != ApplicantItemComplianceStatus.Pending_Review.GetStringValue();
                        ComplianceItemSubmissionHistory itemStatusHistory = InsertItemSubmissionHistory(itemReviewerCount, OrgUsrID, applicantComplianceItemDataToUpdate.SubmissionDate, NotAssesedMultiReview);
                        itemStatusHistory.ApplicantComplianceItemData = applicantComplianceItemDataToUpdate;
                        ClientDBContext.ComplianceItemSubmissionHistories.AddObject(itemStatusHistory);
                    }
                }
                else
                {
                    // applicantItemData.ApplicantComplianceCategoryID = applicantCategoryData.ApplicantComplianceCategoryID;
                    // applicantItemData.ReviewerTypeID = _reviewerTypeId == 0 ? null : _reviewerTypeId;
                    // applicantItemData.StatusID = _itemComplianceStatusId;
                    // //UAT-1712 : Update Reviewer Count
                    //// applicantItemData.ReconciliationReviewCount = itemReviewerCount;

                    // if (applicantItemData.SubmissionDate.IsNull())
                    // {
                    //     applicantItemData.SubmissionDate = creationModificationDateTime;
                    // }

                    // if (Convert.ToBoolean(assignmentProperty.ApprovalRequired))
                    //     applicantItemData.ItemMovementTypeID = GetItemMovementTypeByCode(LkpItemMovementStatus.VIA_DATA_ENTRY_FROM_INCOMPLETE.GetStringValue(), lstItemMovementTypes);
                    // else
                    //     applicantItemData.ItemMovementTypeID = GetItemMovementTypeByCode(LkpItemMovementStatus.VIA_DATA_ENTRY_FROM_INCOMPLETE_REVIEW_NOT_REQUIRED.GetStringValue(), lstItemMovementTypes);
                    // SaveApplicantItemData(applicantItemData, OrgUsrID, creationModificationDateTime);
                    // complianceSaveResponse.ItemData = applicantItemData;

                    // Boolean notAssesedMultiReview = _newItemComplianceStatusCode != ApplicantItemComplianceStatus.Pending_Review.GetStringValue();
                    // ComplianceItemSubmissionHistory itemStatusHistory = InsertItemSubmissionHistory(itemReviewerCount, OrgUsrID, applicantItemData.SubmissionDate, notAssesedMultiReview);
                    // itemStatusHistory.ApplicantComplianceItemData = applicantItemData;
                    // ClientDBContext.ComplianceItemSubmissionHistories.AddObject(itemStatusHistory);
                }

                //foreach (var attributeData in lstApplicantData)
                //{
                //    if (attributeData.ApplicantComplianceAttributeID > 0)
                //    {
                //        ApplicantComplianceAttributeData attributeDataToUpdate = _dbContext.ApplicantComplianceAttributeDatas.Where
                //            (attrData => attrData.ApplicantComplianceAttributeID == attributeData.ApplicantComplianceAttributeID).FirstOrDefault();

                //        attributeDataToUpdate.ModifiedByID = OrgUsrID;
                //        attributeDataToUpdate.ModifiedOn = creationModificationDateTime;
                //        attributeDataToUpdate.AttributeValue = attributeData.AttributeValue;
                //        String _dataTypeCode = GetAttributeTypeCode(attributeData.ComplianceAttributeID);

                //        if (_dataTypeCode == ComplianceAttributeDatatypes.FileUpload.GetStringValue().ToLower().Trim())
                //        {
                //            //String viewDocCode = DocumentType.COMPLIANCE_VIEW_DOCUMENT.GetStringValue();
                //            List<ApplicantComplianceDocumentMap> lstMappedDocuments = _dbContext.ApplicantComplianceDocumentMaps.Where
                //             (documentMap => documentMap.ApplicantComplianceAttributeID == attributeData.ApplicantComplianceAttributeID
                //                 && documentMap.IsDeleted == false).ToList();

                //            List<ApplicantComplianceDocumentMap> lstDocumentToRemove = lstMappedDocuments.Where(cond => !attributeDocuments.ContainsKey(cond.ApplicantDocumentID)
                //               && cond.ApplicantComplianceAttributeID == attributeData.ApplicantComplianceAttributeID).ToList();
                //            foreach (var mappedDoc in lstMappedDocuments)
                //            {
                //                if (attributeDocuments.ContainsKey(mappedDoc.ApplicantDocumentID))
                //                    attributeDocuments.Remove(mappedDoc.ApplicantDocumentID);
                //            }
                //            foreach (var mappedDocuments in lstDocumentToRemove)
                //            {
                //                mappedDocuments.IsDeleted = true;
                //                mappedDocuments.ModifiedByID = orgUsrID;
                //                mappedDocuments.ModifiedOn = creationModificationDateTime;

                //            }
                //            SaveApplicantDocuments(orgUsrID, attributeDocuments, creationModificationDateTime, attributeData, attributeData.ApplicantComplianceAttributeID, null);
                //        }
                //        else if (_dataTypeCode == ComplianceAttributeDatatypes.View_Document.GetStringValue().ToLower().Trim())
                //        {
                //            SaveApplicantDocuments(orgUsrID, null, creationModificationDateTime, attributeData, attributeData.ApplicantComplianceAttributeID, viewAttributeDocuments);
                //        }
                //    }
                //    else
                //    {
                //       // Save the attribute and its document type

                //        SaveApplicantAttributes(applicantItemData, OrgUsrID, attributeDocuments, creationModificationDateTime, attributeData, viewAttributeDocuments);
                //        _dbContext.ApplicantComplianceAttributeDatas.AddObject(attributeData);
                //    }
                //}
                #endregion
            }
            #region Commented


            //else
            //{
            //    #region INSERT DATA

            //    // Applicant Category Data is not added, then no other data is entered. So insert all.
            //    applicantCategoryData.CreatedByID = OrgUsrID; //createdModifiedById; UAT 1261
            //    applicantCategoryData.CreatedOn = creationModificationDateTime;
            //    applicantCategoryData.IsDeleted = false;
            //    applicantCategoryData.StatusID = _categoryComplianceStatusId;
            //    _dbContext.ApplicantComplianceCategoryDatas.AddObject(applicantCategoryData);

            //    #region FOR SECOND APPLICANTITEM DATA BEING SAVED, CHECK IF THE APPLICANTCATEGORY IS ALREADY CREATED OR NOT. IF YES, THEN GET THE APPLICANTCOMPLIANCECATEGORYID

            //    if (_applicantComplianceCategoryInitialId != 0)
            //        applicantItemData.ApplicantComplianceCategoryID = _applicantComplianceCategoryInitialId;
            //    else
            //        applicantItemData.ApplicantComplianceCategoryData = applicantCategoryData;

            //    #endregion

            //    applicantItemData.ReviewerTypeID = _reviewerTypeId == 0 ? null : _reviewerTypeId;
            //    applicantItemData.StatusID = _itemComplianceStatusId;
            //    applicantItemData.ReconciliationReviewCount = itemReviewerCount;

            //    if (Convert.ToBoolean(assignmentProperty.ApprovalRequired))
            //        applicantItemData.ItemMovementTypeID = GetItemMovementTypeByCode(LkpItemMovementStatus.VIA_DATA_ENTRY_FROM_INCOMPLETE.GetStringValue(), lstItemMovementTypes);
            //    else
            //        applicantItemData.ItemMovementTypeID = GetItemMovementTypeByCode(LkpItemMovementStatus.VIA_DATA_ENTRY_FROM_INCOMPLETE_REVIEW_NOT_REQUIRED.GetStringValue(), lstItemMovementTypes);

            //    SaveApplicantItemData(applicantItemData, OrgUsrID, creationModificationDateTime);
            //    complianceSaveResponse.ItemData = applicantItemData;

            //    Boolean notAssesedMultiReview = _newItemComplianceStatusCode != ApplicantItemComplianceStatus.Pending_Review.GetStringValue();
            //    ComplianceItemSubmissionHistory itemStatusHistory = InsertItemSubmissionHistory(itemReviewerCount, OrgUsrID, applicantItemData.SubmissionDate, notAssesedMultiReview);
            //    itemStatusHistory.ApplicantComplianceItemData = applicantItemData;
            //    ClientDBContext.ComplianceItemSubmissionHistories.AddObject(itemStatusHistory);

            //    foreach (var attributeData in lstApplicantData)
            //    {
            //        //if (!(attributeData.AttributeTypeCode == ComplianceAttributeDatatypes.View_Document.GetStringValue() && attributeData.AttributeValue == AppConsts.ZERO))
            //        //{
            //        SaveApplicantAttributes(applicantItemData, orgUsrID, attributeDocuments, creationModificationDateTime, attributeData, viewAttributeDocuments);
            //        _dbContext.ApplicantComplianceAttributeDatas.AddObject(attributeData);
            //        //}

            //    }

            //    #endregion
            //}
            #endregion
            if (_dbContext.SaveChanges() > 0)
                complianceSaveResponse.SaveStatus = true;
            else
                complianceSaveResponse.SaveStatus = false;
            complianceSaveResponse.StatusCode = _newItemComplianceStatusCode;
            complianceSaveResponse.StatusId = _itemComplianceStatusId;
            complianceSaveResponse.UIValidationErrors = String.Empty;
            return complianceSaveResponse;
        }

        Tuple<Boolean, Int32> IComplianceDataRepository.CheckItemPayment(Int32 entityID, Int32 paidOrderStatusID, Int32 itemId, Boolean isRequirement)
        {
            if (itemId > AppConsts.NONE)
            {
                Boolean isItemPaymentType = false;
                if (isRequirement)
                    isItemPaymentType = _dbContext.RequirementItems.Where(s => s.RI_ID == itemId).FirstOrDefault().RI_IsPaymentType.Value;
                else
                    isItemPaymentType = _dbContext.ComplianceItems.Where(s => s.ComplianceItemID == itemId).FirstOrDefault().IsPaymentType.Value;

                if (isItemPaymentType)
                {
                    Order order = new Order();
                    var result = _dbContext.ItemPaymentOrderMappings.Where(ipom => ipom.IPOM_EntityID == entityID && !ipom.IPOM_IsDeleted).FirstOrDefault();

                    if (result.IsNullOrEmpty())
                    {
                        //return new Tuple<Boolean, Int32>(false, order.IsNullOrEmpty() ? AppConsts.NONE : entityID);
                        return new Tuple<Boolean, Int32>(false, AppConsts.NONE);
                    }
                    else
                    {
                        order = _dbContext.Orders.Include("OrderPaymentDetails").Where(s => s.OrderID == result.IPOM_OrderID).FirstOrDefault();
                    }

                    OrderPaymentDetail orderPaymentDetail = new OrderPaymentDetail();

                    if (!order.OrderPaymentDetails.IsNullOrEmpty())
                        orderPaymentDetail = order.OrderPaymentDetails.Where(cond => !cond.OPD_IsDeleted).FirstOrDefault();

                    if (!orderPaymentDetail.IsNullOrEmpty() && orderPaymentDetail.OPD_ID > 0)
                    {
                        if (orderPaymentDetail.OPD_OrderStatusID == paidOrderStatusID)
                        {
                            return new Tuple<Boolean, Int32>(true, order.OrderID);
                        }
                    }
                    return new Tuple<Boolean, Int32>(false, order.IsNullOrEmpty() ? AppConsts.NONE : order.OrderID);
                }
                else
                {
                    return new Tuple<Boolean, Int32>(true, AppConsts.NONE);
                }
            }
            return new Tuple<Boolean, Int32>(true, AppConsts.NONE);

        }
        #endregion

        List<BadgeFormNotificationDataContract> IComplianceDataRepository.SaveBadgeFormNotificationData(string applicantComplianceItemDataIDs, string applicantRequirementItemDataIDs, String PSI_IDs, Int32 currentOrgUserID)
        {
            List<BadgeFormNotificationDataContract> lstBadgeFormNotificationData = new List<BadgeFormNotificationDataContract>();
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand command = new SqlCommand("usp_SaveBadgeFormNotificationData", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@ApplicantComplianceItemDataIDs", applicantComplianceItemDataIDs);
                command.Parameters.AddWithValue("@ApplicantRequirementItemDataIDs", applicantRequirementItemDataIDs);
                command.Parameters.AddWithValue("@PSI_IDs", PSI_IDs);
                command.Parameters.AddWithValue("@CurrentOrgUserID", currentOrgUserID);

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > 0)
                {
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        IEnumerable<DataRow> rows = ds.Tables[0].AsEnumerable();
                        lstBadgeFormNotificationData = rows.Select(col =>
                              new BadgeFormNotificationDataContract
                              {
                                  AppOrgUserID = col["OrgUserID"] == DBNull.Value ? AppConsts.NONE : Convert.ToInt32(col["OrgUserID"]),
                                  ItemDataId = col["ItemDataID"] == DBNull.Value ? AppConsts.NONE : Convert.ToInt32(col["ItemDataID"]),
                                  ItemTypeCode = col["ItemTypeCode"] == DBNull.Value ? string.Empty : Convert.ToString(col["ItemTypeCode"]),
                                  ProfileSharingInvitationGroupID = col["PSIG_ID"] == DBNull.Value ? AppConsts.NONE : Convert.ToInt32(col["PSIG_ID"]),
                                  IsItemApproved = col["IsItemApproved"] == DBNull.Value ? false : Convert.ToBoolean(col["IsItemApproved"]),
                                  IsShareApproved = col["IsShareApproved"] == DBNull.Value ? false : Convert.ToBoolean(col["IsShareApproved"]),
                                  BadgeFormNotificationID = col["BadgeFormNotificationDataID"] == DBNull.Value ? AppConsts.NONE : Convert.ToInt32(col["BadgeFormNotificationDataID"]),
                                  IsRecordUpdated = col["IsUpdated"] == DBNull.Value ? false : Convert.ToBoolean(col["IsUpdated"]),
                                  IsDataByItemApproval = col["DataByItemApproval"] == DBNull.Value ? false : Convert.ToBoolean(col["DataByItemApproval"]),
                              }).ToList();
                    }
                }
            }
            return lstBadgeFormNotificationData;
        }

        List<Int32> IComplianceDataRepository.FilterComplianceDataItemsByStatusCode(string dataIds, string statusCode)
        {
            List<Int32> lstItemDataIds = new List<int>();
            lstItemDataIds = dataIds.Split(',').Select(s => Convert.ToInt32(s)).ToList();

            if (!lstItemDataIds.IsNullOrEmpty())
            {
                return _dbContext.ApplicantComplianceItemDatas.Where(cond => lstItemDataIds.Contains(cond.ApplicantComplianceItemID)
                                                                && cond.lkpItemComplianceStatu.Code == statusCode
                                                                && !cond.IsDeleted)
                                                        .Select(s => s.ApplicantComplianceItemID)
                                                        .ToList();
            }
            else
            {
                return null;
            }

        }

        Int32 IComplianceDataRepository.GetPackageTypeIDByCode(string code)
        {
            var packageType = _dbContext.lkpPackageTypes.Where(cond => cond.PackageTypeCode == code && !cond.IsDeleted).FirstOrDefault();

            if (!packageType.IsNullOrEmpty())
                return packageType.PackageTypeID;
            else
                return AppConsts.NONE;
        }

        Int32 IComplianceDataRepository.GetBagdeFormFieldTypeIDByCode(string code)
        {
            var badgeFormFieldType = _dbContext.lkpBadgeFormFieldTypes.Where(cond => cond.FieldCode == code && !cond.IsDeleted).FirstOrDefault();

            if (!badgeFormFieldType.IsNullOrEmpty())
                return badgeFormFieldType.FieldTypeID;
            else
                return AppConsts.NONE;
        }
        #region UAT-3083
        Dictionary<String, String> IComplianceDataRepository.GetSubscriptionIDByOrderIdForItmPaymt(Int32 OrderID)
        {
            Dictionary<String, String> result = new Dictionary<String, String>();
            ItemPaymentOrderMapping itmOrderPymtMapping = _dbContext.ItemPaymentOrderMappings.Where(cond => cond.IPOM_OrderID == OrderID && !cond.IPOM_IsDeleted).FirstOrDefault();

            if (!itmOrderPymtMapping.IsNullOrEmpty())
            {
                if (itmOrderPymtMapping.lkpOrderPackageType.OPT_Code == OrderPackageTypes.REQUIREMENT_ITEM_PAYMENT.GetStringValue())
                {
                    ApplicantRequirementItemData itemdata = _dbContext.ApplicantRequirementItemDatas.Where(cond => cond.ARID_ID == itmOrderPymtMapping.IPOM_EntityID && !cond.ARID_IsDeleted).FirstOrDefault();
                    if (!itemdata.IsNullOrEmpty())
                    {
                        result.Add("ItemDataID", Convert.ToString(itmOrderPymtMapping.IPOM_EntityID));
                        result.Add("SubscriptionID", Convert.ToString(itemdata.ApplicantRequirementCategoryData.RequirementPackageSubscription.RPS_ID));
                        result.Add("IsRequirementPackage", "true");
                    }
                }
                else if (itmOrderPymtMapping.lkpOrderPackageType.OPT_Code == OrderPackageTypes.TRACKING_ITEM_PAYMENT.GetStringValue())
                {
                    ApplicantComplianceItemData itemdata = _dbContext.ApplicantComplianceItemDatas.Where(cond => cond.ApplicantComplianceItemID == itmOrderPymtMapping.IPOM_EntityID && !cond.IsDeleted).FirstOrDefault();
                    if (!itemdata.IsNullOrEmpty())
                    {
                        if (itemdata.ApplicantComplianceCategoryData.PackageSubscription.lkpArchiveState.AS_Code == ArchiveState.Active.GetStringValue() && (itemdata.ApplicantComplianceCategoryData.PackageSubscription.ExpiryDate.IsNullOrEmpty() || itemdata.ApplicantComplianceCategoryData.PackageSubscription.ExpiryDate > DateTime.Now))
                        {
                            result.Add("ItemDataID", Convert.ToString(itmOrderPymtMapping.IPOM_EntityID));
                            result.Add("SubscriptionID", Convert.ToString(itemdata.ApplicantComplianceCategoryData.PackageSubscription.PackageSubscriptionID));
                            result.Add("IsRequirementPackage", "false");
                        }
                    }
                }
            }
            return result;
        }
        #endregion

        #region UAT-3097:Add SMS notification for Student out of compliance for rotation

        OrganizationUser IComplianceDataRepository.GetOrganizationUserByOranizationID(Int32 organizationUserId)
        {
            return _dbContext.OrganizationUsers.Where(con => con.OrganizationUserID == organizationUserId && !con.IsDeleted).FirstOrDefault();
        }

        #endregion

        #region UAT-3112

        List<BadgeFormNotificationDataContract> IComplianceDataRepository.GetBadgeFormNotificationData(Int32 chunkSize, Int32 currentLoggedInUser)
        {
            List<BadgeFormNotificationDataContract> lstBadgeFormNotificationDataContract = new List<BadgeFormNotificationDataContract>();

            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand command = new SqlCommand("usp_GetBadgeFormNotificationData", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@ChunckSize", chunkSize);
                command.Parameters.AddWithValue("@CurrentLoggedInUser", currentLoggedInUser);

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > 0)
                {
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        IEnumerable<DataRow> rows = ds.Tables[0].AsEnumerable();
                        lstBadgeFormNotificationDataContract = rows.Select(col =>
                              new BadgeFormNotificationDataContract
                              {
                                  BadgeFormNotificationID = Convert.ToInt32(col["BadgeFormNotificationID"]),
                                  ItemDataId = Convert.ToInt32(col["ItemDataId"]),
                                  ProfileSharingInvitationGroupID = Convert.ToInt32(col["ProfileSharingInvitationGroupID"]),
                                  ItemTypeCode = col["ItemTypeCode"] == DBNull.Value ? String.Empty : Convert.ToString(col["ItemTypeCode"]),
                                  PackageName = col["PackageName"] == DBNull.Value ? String.Empty : Convert.ToString(col["PackageName"]),
                                  CategoryName = col["CategoryName"] == DBNull.Value ? String.Empty : Convert.ToString(col["CategoryName"]),
                                  ItemName = col["ItemName"] == DBNull.Value ? String.Empty : Convert.ToString(col["ItemName"]),
                                  AppOrgUserID = Convert.ToInt32(col["AppOrgUserID"]),
                                  ItemID = Convert.ToInt32(col["ItemId"]),
                                  ApplicantFirstName = col["ApplicantFirstName"] == DBNull.Value ? String.Empty : Convert.ToString(col["ApplicantFirstName"]),
                                  ApplicantLastName = col["ApplicantLastName"] == DBNull.Value ? String.Empty : Convert.ToString(col["ApplicantLastName"]),
                                  ApplicantEmailID = col["ApplicantEmailID"] == DBNull.Value ? String.Empty : Convert.ToString(col["ApplicantEmailID"]),
                                  BadgeFormDocumentIDs = col["BadgeFormDocumentIDs"] == DBNull.Value ? String.Empty : Convert.ToString(col["BadgeFormDocumentIDs"]),

                                  SharedReqItemId = col["SharedReqItemId"] == DBNull.Value ? AppConsts.NONE : Convert.ToInt32(col["SharedReqItemId"]),
                                  //UAT-3254
                                  SelectedNodeID = col["SelectedNodeID"] == DBNull.Value ? AppConsts.NONE : Convert.ToInt32(col["SelectedNodeID"]),
                                  RotationHierarchyIds = col["RotationHierarchyIds"] == DBNull.Value ? String.Empty : Convert.ToString(col["RotationHierarchyIds"]),
                              }).ToList();
                    }
                }
            }
            return lstBadgeFormNotificationDataContract;
        }

        Boolean IComplianceDataRepository.UpdateBadgeFormNotificationData(List<BadgeFormNotificationDataContract> lstBadgeFormNotificationDataContract, Int32 currentLoggedInUser)
        {
            List<Int32> lstBadgeFormNotificationDataID = new List<Int32>();

            lstBadgeFormNotificationDataContract.ForEach(x =>
            {
                lstBadgeFormNotificationDataID.Add(x.BadgeFormNotificationID);
            });
            if (!lstBadgeFormNotificationDataID.IsNullOrEmpty())
            {
                List<BadgeFormNotificationData> lstBadgeFormNotificationData = _dbContext.BadgeFormNotificationDatas.Where(con => lstBadgeFormNotificationDataID.Contains(con.BFND_ID)).ToList();
                if (!lstBadgeFormNotificationData.IsNullOrEmpty())
                {
                    Int32 ProcessedBadgeFormStatusId = _dbContext.lkpBadgeFormNotificationStatus.Where(con => con.LBFNS_Code == "AAAB" && !con.LBFNS_IsDeleted).Select(sel => sel.LBFNS_ID).FirstOrDefault();

                    foreach (BadgeFormNotificationData badgeFormNotificationData in lstBadgeFormNotificationData)
                    {
                        //update
                        BadgeFormNotificationDataContract badgeFormNotificationDataContract = lstBadgeFormNotificationDataContract.Where(con => con.BadgeFormNotificationID == badgeFormNotificationData.BFND_ID).FirstOrDefault();
                        if (!badgeFormNotificationDataContract.IsNullOrEmpty())
                        {
                            badgeFormNotificationData.BFND_SystemCommunicationID = badgeFormNotificationDataContract.SystemCommunicationID;
                            badgeFormNotificationData.BFND_ModifiedBy = currentLoggedInUser;
                            badgeFormNotificationData.BFND_ModifiedOn = DateTime.Now;
                            badgeFormNotificationData.BFND_BadgeFormNotificationStatus = ProcessedBadgeFormStatusId;
                            badgeFormNotificationData.BFND_BadgeFormID = badgeFormNotificationDataContract.BadgeFormDocumentIDs;
                        }
                    }
                    if (_dbContext.SaveChanges() > AppConsts.NONE)
                        return true;
                }
            }
            return false;
        }
        Boolean IComplianceDataRepository.UpdateBadgeFormNotificationDataComments(List<BadgeFormNotificationDataContract> lstBadgeFormNotificationDataContract, Int32 currentLoggedInUser)
        {
            List<Int32> lstBadgeFormNotificationDataID = new List<Int32>();
            lstBadgeFormNotificationDataContract.ForEach(x =>
            {
                lstBadgeFormNotificationDataID.Add(x.BadgeFormNotificationID);
            });

            if (!lstBadgeFormNotificationDataID.IsNullOrEmpty())
            {
                List<BadgeFormNotificationData> lstBadgeFormNotificationData = _dbContext.BadgeFormNotificationDatas.Where(con => lstBadgeFormNotificationDataID.Contains(con.BFND_ID)).ToList();
                if (!lstBadgeFormNotificationData.IsNullOrEmpty())
                {
                    foreach (BadgeFormNotificationData badgeFormNotificationData in lstBadgeFormNotificationData)
                    {
                        //update
                        BadgeFormNotificationDataContract badgeFormNotificationDataContract = lstBadgeFormNotificationDataContract.Where(con => con.BadgeFormNotificationID == badgeFormNotificationData.BFND_ID).FirstOrDefault();
                        if (!badgeFormNotificationDataContract.IsNullOrEmpty())
                        {
                            String itemtype = String.Empty;
                            if (badgeFormNotificationDataContract.ItemTypeCode == "ITM")
                            {
                                itemtype = AppConsts.COMPLIANCE_ITEM_ID_VIEW_STATE;
                            }
                            else
                            {
                                itemtype = "RequirementItemID";
                            }
                            badgeFormNotificationData.BFND_Comments = "Document not found for " + itemtype + " : " + badgeFormNotificationDataContract.ItemID;
                            badgeFormNotificationData.BFND_RetryCount = badgeFormNotificationData.BFND_RetryCount + 1;
                            badgeFormNotificationData.BFND_ModifiedBy = currentLoggedInUser;
                            badgeFormNotificationData.BFND_ModifiedOn = DateTime.Now;
                        }
                    }
                    if (_dbContext.SaveChanges() > AppConsts.NONE)
                        return true;
                }
            }
            return false;
        }

        List<Int32> IComplianceDataRepository.GetSystemDocumentsMapped(Int32 ItemID)  //String ItemCode
        {
            List<Int32> lstSystemDocIds = new List<Int32>();
            //if (ItemCode == "ITM")
            //{
            lstSystemDocIds = _dbContext.ComplianceItemSystemDocuments.Where(cond => !cond.CISD_IsDeleted && cond.CISD_ComplianceItemID == ItemID).Select(sel => sel.CISD_SystemDocumentID).ToList();
            //}
            //else
            //{
            //    lstSystemDocIds = _dbContext.RequirementItemSystemDocuments.Where(cond => !cond.RISD_IsDeleted && cond.RISD_RequirementItemID == ItemID).Select(sel => sel.RISD_SystemDocumentID).ToList();
            //}

            return lstSystemDocIds;
        }

        //List<BadgeFormSystemDocField> IComplianceDataRepository.GetSystemDocFieldsMapped(Int32 SystemDocId)
        //{
        //    return _dbContext.BadgeFormSystemDocFields.Where(cond => !cond.BFSDF_IsDeleted && cond.BFSDF_SystemDocID == SystemDocId).ToList();
        //}

        Boolean IComplianceDataRepository.SaveBadgeFormApplicantDocument(Int32 currentLoggedInUserId, List<BadgeFormNotificationDataContract> lstBadingFromNotificationData)
        {
            foreach (BadgeFormNotificationDataContract badgeFormData in lstBadingFromNotificationData)
            {
                if (!badgeFormData.lstApplicantDocuments.IsNullOrEmpty())
                {
                    foreach (ApplicantDocument applicantDoc in badgeFormData.lstApplicantDocuments)
                    {
                        _dbContext.ApplicantDocuments.AddObject(applicantDoc);
                    }
                }
            }

            if (_dbContext.SaveChanges() > AppConsts.NONE)
                return true;
            return false;
        }


        List<BadgeFormDocumentDataContract> IComplianceDataRepository.GetBadgeFormDocumentData(String badgeFormNotificationIds)
        {
            List<BadgeFormDocumentDataContract> lstBadgeFormDocData = new List<BadgeFormDocumentDataContract>();
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand command = new SqlCommand("usp_BadgeFormDocumentData", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@BadgeFormNotificationDataIDs", badgeFormNotificationIds);

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > 0)
                {
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        IEnumerable<DataRow> rows = ds.Tables[0].AsEnumerable();
                        lstBadgeFormDocData = rows.Select(col =>
                              new BadgeFormDocumentDataContract
                              {
                                  BFND_ID = Convert.ToInt32(col["BFND_ID"]),
                                  FullName = col["FullName"] == DBNull.Value ? String.Empty : Convert.ToString(col["FullName"]),
                                  Program = col["Program"] == DBNull.Value ? String.Empty : Convert.ToString(col["Program"]),
                                  Location = col["Location"] == DBNull.Value ? String.Empty : Convert.ToString(col["Location"]),
                                  FullAddress = col["FullAddress"] == DBNull.Value ? String.Empty : Convert.ToString(col["FullAddress"]),
                                  PhoneNumber = col["PhoneNumber"] == DBNull.Value ? String.Empty : Convert.ToString(col["PhoneNumber"]),
                                  RotationName = col["RotationName"] == DBNull.Value ? String.Empty : Convert.ToString(col["RotationName"]),
                                  RotationStartDate = col["RotationStartDate"] == DBNull.Value ? (DateTime?)null : Convert.ToDateTime(col["RotationStartDate"]),
                                  RotationEndDate = col["RotationEndDate"] == DBNull.Value ? (DateTime?)null : Convert.ToDateTime(col["RotationEndDate"]),
                                  ItemSubmisssionDate = col["ItemSubmisssionDate"] == DBNull.Value ? (DateTime?)null : Convert.ToDateTime(col["ItemSubmisssionDate"]),
                                  DOB = col["DOB"] == DBNull.Value ? (DateTime?)null : Convert.ToDateTime(col["DOB"]),
                                  ItemApprovalDate = col["ItemApprovalDate"] == DBNull.Value ? (DateTime?)null : Convert.ToDateTime(col["ItemApprovalDate"]),
                                  Signature = col["Signature"] == DBNull.Value ? null : (byte[])(col["Signature"]),
                                  ShareApprovalDate = col["ShareApprovalDate"] == DBNull.Value ? (DateTime?)null : Convert.ToDateTime(col["ShareApprovalDate"]),
                                  AgencyUserApprovedShare = col["AgencyUserApprovedShare"] == DBNull.Value ? String.Empty : Convert.ToString(col["AgencyUserApprovedShare"]),
                                  UniversalFieldID = col["UniversalFieldID"] == DBNull.Value ? AppConsts.NONE : Convert.ToInt32(col["UniversalFieldID"]),
                                  UniversalFieldValue = col["UniversalFieldValue"] == DBNull.Value ? String.Empty : Convert.ToString(col["UniversalFieldValue"]),
                                  //[SS]:Chanegs related to UAT-4104
                                  ItemExpirationDate = col["ItemExpirationDate"] == DBNull.Value ? (DateTime?)null : Convert.ToDateTime(col["ItemExpirationDate"]),
                                  AttributeID = col["AttributeID"] == DBNull.Value ? AppConsts.NONE : Convert.ToInt32(col["AttributeID"]),
                                  AttributeValue = col["AttributeValue"] == DBNull.Value ? String.Empty : Convert.ToString(col["AttributeValue"])
                              }).ToList();
                    }
                }
            }
            return lstBadgeFormDocData;
        }
        void IComplianceDataRepository.ResetClientEntity()
        {
            base.ResetClientContext();
            _dbContext = base.ClientDBContext;
        }
        #endregion

        #region 3106

        void IComplianceDataRepository.ExecuteOptionalCategoryRule(Int32 currentUserId, Int32 nodeID)
        {
            EntityConnection connection = _dbContext.Connection as EntityConnection;

            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand command = new SqlCommand("usp_ExecuteRulesForOptionalCategory", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@SystemUserID", currentUserId);
                command.Parameters.AddWithValue("@NodeID", nodeID);
                if (con.State == ConnectionState.Closed)
                    con.Open();

                command.ExecuteNonQuery();
                con.Close();
            }
        }
        #endregion

        #region 3224
        public List<BkgCopyPackageDataContract> GetBkgCopyPackageData(Int32 chunkSize, Int32 currentUserID)
        {
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand command = new SqlCommand("ams.usp_GetBkgCopyPackageData", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@ChunkSize", chunkSize);
                command.Parameters.AddWithValue("@CurrentUserID", currentUserID);
                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                List<BkgCopyPackageDataContract> lstBkgCopyPackageDataContract = new List<BkgCopyPackageDataContract>();
                lstBkgCopyPackageDataContract = ds.Tables[0].AsEnumerable().Select(col =>
                      new BkgCopyPackageDataContract
                      {
                          ID = Convert.ToInt32(col["BCPD_ID"]),
                          PackageSubscriptionID = Convert.ToInt32(col["BCPD_PackageSubscriptionID"]),
                          DocXml = col["BCPD_DocXml"] == DBNull.Value ? String.Empty : Convert.ToString(col["BCPD_DocXml"])
                      }).ToList();
                return lstBkgCopyPackageDataContract;
            }

        }

        public void UpdateSubscriptionIDInBkgCopyPackageData(Int32 packageSubscriptionID, Boolean IsRecordProcessed, Boolean IsNeedToUpdateRetryCount, String errorMessage, Int32 currentUserID)
        {
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand command = new SqlCommand("ams.usp_UpdBkgCopyPackageData", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@PackageSubscriptionID", packageSubscriptionID);
                command.Parameters.AddWithValue("@IsRecordProcessed", IsRecordProcessed);
                command.Parameters.AddWithValue("@IsNeedToUpdateRetryCount", IsNeedToUpdateRetryCount);
                command.Parameters.AddWithValue("@ErrorMessage", errorMessage);
                command.Parameters.AddWithValue("@CurrentUserID", currentUserID);
                //@CurrentUserID

                if (con.State == ConnectionState.Closed)
                    con.Open();

                command.ExecuteNonQuery();
                con.Close();
            }

        }
        public Boolean InsertRecordInBkgCopyPackageData(Int32 packageSubscriptionID, String docXml, Int32 currentLoggedInUserId)
        {
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand command = new SqlCommand("ams.usp_InsertBkgCopyPackageData", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@PackageSubscriptionID", packageSubscriptionID);
                command.Parameters.AddWithValue("@DocXml", docXml.IsNullOrEmpty() ? DBNull.Value.ToString() : docXml);
                command.Parameters.AddWithValue("@LoggedInUserId", currentLoggedInUserId);
                command.Parameters.Add("@IsRecordInserted", SqlDbType.Bit);
                command.Parameters["@IsRecordInserted"].Direction = ParameterDirection.Output;
                if (con.State == ConnectionState.Closed)
                    con.Open();
                command.ExecuteNonQuery();
                con.Close();
                return Convert.ToBoolean(command.Parameters["@IsRecordInserted"].Value);
            }
        }
        #endregion

        #region UAT-3338
        RequirementPackageSubscription IComplianceDataRepository.GetRequirementPackageSubscriptionForInstructorPreceptor(Int32 RotationID, Int32 InstructorPreceptorOrgID)
        {
            RequirementPackageSubscription requirementPackageSubscription = new RequirementPackageSubscription();

            List<Int32> lstClinicalRotationRequirementPackageIDs = _dbContext.ClinicalRotationRequirementPackages.Where(cond => cond.CRRP_ClinicalRotationID == RotationID && !cond.CRRP_IsDeleted).Select(sel => sel.CRRP_ID).ToList();
            if (!lstClinicalRotationRequirementPackageIDs.IsNullOrEmpty())
            {
                List<Int32> lstCRS_RequirementPackageSubscriptionIDs = _dbContext.ClinicalRotationSubscriptions.Where(con => lstClinicalRotationRequirementPackageIDs.Contains(con.CRS_ClinicalRotationRequirementPackageID) && !con.CRS_IsDeleted).Select(sel => sel.CRS_RequirementPackageSubscriptionID).ToList();
                if (!lstCRS_RequirementPackageSubscriptionIDs.IsNullOrEmpty())
                {
                    requirementPackageSubscription = _dbContext.RequirementPackageSubscriptions.Where(con => lstCRS_RequirementPackageSubscriptionIDs.Contains(con.RPS_ID) && !con.RPS_IsDeleted && con.RPS_ApplicantOrgUserID == InstructorPreceptorOrgID).FirstOrDefault();
                }
            }
            return requirementPackageSubscription;
        }
        #endregion

        #region UAT-3354
        public DataTable GetDataEntryQueueData(CustomPagingArgsContract gridCustomPaging, Int32? CurrentLoggedInUserID, String institutionHierarchyIds)
        {
            EntityConnection connection = _dbContext.Connection as EntityConnection;

            String orderBy = "DocumentName";
            String ordDirection = null;

            orderBy = String.IsNullOrEmpty(gridCustomPaging.SortExpression) ? orderBy : gridCustomPaging.SortExpression;
            ordDirection = gridCustomPaging.SortDirectionDescending == false ? String.IsNullOrEmpty(gridCustomPaging.SortExpression) ? "desc" : "asc" : "desc";

            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {

                SqlCommand command = new SqlCommand("usp_GetDataEntryQueueData", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@filterXml", gridCustomPaging.XML);
                command.Parameters.AddWithValue("@CurrentLoggedInUserID", CurrentLoggedInUserID);
                command.Parameters.AddWithValue("@InstitutionHierarchy", institutionHierarchyIds.IsNull() ? String.Empty : institutionHierarchyIds);
                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > 1)
                {
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        gridCustomPaging.CurrentPageIndex = Convert.ToInt32(Convert.ToString(ds.Tables[0].Rows[0]["CurrentPageIndex"]));
                        gridCustomPaging.VirtualPageCount = Convert.ToInt32(Convert.ToString(ds.Tables[0].Rows[0]["VirtualCount"]));
                    }
                    return ds.Tables[1];
                }
            }
            return new DataTable();
        }
        #endregion

        #region UAT-3466

        String IComplianceDataRepository.GetNotCompliantRequirementCategoryNames(Int32? SubsID, Boolean IsCompPkgSub)
        {
            String categoryNames = String.Empty;

            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand command = new SqlCommand("usp_GetNotCompliantRequirementCategoryNames", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@PkgSubId", SubsID);
                command.Parameters.AddWithValue("@IsCompPkgSub", IsCompPkgSub);

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);

                if (ds.IsNotNull() && !ds.Tables.IsNullOrEmpty() && ds.Tables.Count > 0)
                {
                    if (ds.Tables[0].Rows.Count > 0)
                    {

                        IEnumerable<DataRow> rows = ds.Tables[0].AsEnumerable();
                        rows.ForEach(col =>
                              {
                                  categoryNames = col["CategoryNames"] == DBNull.Value ? String.Empty : Convert.ToString(col["CategoryNames"]);
                              });
                    }
                }

            }

            return categoryNames;
        }


        #endregion

        #region UAT-3348
        List<CommunicationSettingsSubEventsContract> IComplianceDataRepository.GetCommunicationCopySubEventSetting(Int32 communicationCopySettingID)
        {
            List<CommunicationSettingsSubEventsContract> lstCommunicationSettingsSubEventsContract = new List<CommunicationSettingsSubEventsContract>();
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand command = new SqlCommand("usp_GetCommunicationCopySubEventDetailsBYID", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@CommunicationNodeCopySettingID", communicationCopySettingID);

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);

                if (ds.IsNotNull() && !ds.Tables.IsNullOrEmpty() && ds.Tables.Count > 0)
                {
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        CommunicationSettingsSubEventsContract communicationSettingsSubEventsContract = null;
                        IEnumerable<DataRow> rows = ds.Tables[0].AsEnumerable();
                        rows.ForEach(col =>
                        {
                            communicationSettingsSubEventsContract = new CommunicationSettingsSubEventsContract();
                            communicationSettingsSubEventsContract.CommunicationOverRideId = col["CommunicationOverRideId"] == DBNull.Value ? AppConsts.NONE : Convert.ToInt32(col["CommunicationOverRideId"]);
                            communicationSettingsSubEventsContract.CommunicationNodeSubeventsCopySettingID = col["CommunicationNodeSubeventsCopySettingID"] == DBNull.Value ? AppConsts.NONE : Convert.ToInt32(col["CommunicationNodeSubeventsCopySettingID"]);
                            communicationSettingsSubEventsContract.CommunciationSubEventID = col["CommunicationSubEventID"] == DBNull.Value ? AppConsts.NONE : Convert.ToInt32(col["CommunicationSubEventID"]);
                            communicationSettingsSubEventsContract.CommunciationSubEventName = col["CommunciationSubEventName"] == DBNull.Value ? String.Empty : Convert.ToString(col["CommunciationSubEventName"]);
                            communicationSettingsSubEventsContract.CommunicationTypeName = col["CommunicationTypeName"] == DBNull.Value ? String.Empty : Convert.ToString(col["CommunicationTypeName"]);
                            communicationSettingsSubEventsContract.CommunciationEventName = col["CommunciationEventName"] == DBNull.Value ? String.Empty : Convert.ToString(col["CommunciationEventName"]);
                            communicationSettingsSubEventsContract.NodeCopySettingName = col["NodeCopySettingName"] == DBNull.Value ? String.Empty : Convert.ToString(col["NodeCopySettingName"]);
                            communicationSettingsSubEventsContract.NodeCopySettingID = col["NodeCopySettingID"] == DBNull.Value ? AppConsts.NONE : Convert.ToInt32(col["NodeCopySettingID"]);
                            lstCommunicationSettingsSubEventsContract.Add(communicationSettingsSubEventsContract);
                        });
                    }
                }
            }
            return lstCommunicationSettingsSubEventsContract;
        }
        #endregion

        #region UAT-3528
        List<ReqPkgSubscriptionIDList> IComplianceDataRepository.GetReqPkgSubscriptionIdList(RequirementVerificationQueueContract searchDataContract, Int32 CurrentReqPkgSubscriptionID, Int32 ApplicantRequirementItemID)
        {
            List<ReqPkgSubscriptionIDList> lstRequirementVerificationQueueContract = new List<ReqPkgSubscriptionIDList>();

            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand command = new SqlCommand("usp_GetReqPkgSubsIdListForReqVerification", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@xmlData", searchDataContract.XML);
                command.Parameters.AddWithValue("@CurrentReqPkgSubscriptionID", CurrentReqPkgSubscriptionID);
                command.Parameters.AddWithValue("@ApplicantRequirementItemID", ApplicantRequirementItemID);
                command.Parameters.AddWithValue("@xmlSortingAndFilteringData", searchDataContract.GridCustomPagingArguments.XML);


                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);

                if (ds.Tables.Count > AppConsts.NONE && ds.Tables[0].Rows.Count > 0)
                {
                    lstRequirementVerificationQueueContract = ds.Tables[0].AsEnumerable().Select(x =>
                      new ReqPkgSubscriptionIDList
                      {
                          RequirementPackageSubscriptionID = x["RequirementPackageSubscriptionID"] == DBNull.Value ? 0 : Convert.ToInt32(x["RequirementPackageSubscriptionID"]),
                          ApplicantRequirementItemId = x["ApplicantRequirementItemId"] == DBNull.Value ? 0 : Convert.ToInt32(x["ApplicantRequirementItemId"]),
                          RequirementItemId = x["RequirementItemId"] == DBNull.Value ? 0 : Convert.ToInt32(x["RequirementItemId"]),
                          ApplicantRequirementCategoryId = x["ApplicantRequirementCategoryId"] == DBNull.Value ? 0 : Convert.ToInt32(x["ApplicantRequirementCategoryId"]),
                          RotationId = x["ClinicalRotationID"] == DBNull.Value ? 0 : Convert.ToInt32(x["ClinicalRotationID"]),
                          ApplicantId = x["OrganizationUserID"] == DBNull.Value ? 0 : Convert.ToInt32(x["OrganizationUserID"]),
                          RequirementCategoryID = x["RequirementCategoryID"] == DBNull.Value ? 0 : Convert.ToInt32(x["RequirementCategoryID"]),
                          TenantID = x["TenantID"] == DBNull.Value ? 0 : Convert.ToInt32(x["TenantID"]),
                          AgencyId = x["AgencyId"] == DBNull.Value ? 0 : Convert.ToInt32(x["AgencyId"]),
                          NextSubscriptionID = x["NextSubscriptionID"] == DBNull.Value ? 0 : Convert.ToInt32(x["NextSubscriptionID"]),
                          NextApplicantRequirementItemId = x["NextApplicantRequirementItemId"] == DBNull.Value ? 0 : Convert.ToInt32(x["NextApplicantRequirementItemId"]),
                          NextApplicantRequirementCategoryId = x["NextApplicantRequirementCategoryId"] == DBNull.Value ? 0 : Convert.ToInt32(x["NextApplicantRequirementCategoryId"]),
                          NextRequirementItemId = x["NextRequirementItemId"] == DBNull.Value ? 0 : Convert.ToInt32(x["NextRequirementItemId"]),

                          NextClinicalRotationID = x["NextClinicalRotationID"] == DBNull.Value ? 0 : Convert.ToInt32(x["NextClinicalRotationID"]),
                          NextOrganizationUserID = x["NextOrganizationUserID"] == DBNull.Value ? 0 : Convert.ToInt32(x["NextOrganizationUserID"]),
                          NextRequirementCategoryID = x["NextRequirementCategoryID"] == DBNull.Value ? 0 : Convert.ToInt32(x["NextRequirementCategoryID"]),
                          NextTenantID = x["NextTenantID"] == DBNull.Value ? 0 : Convert.ToInt32(x["NextTenantID"]),
                          NextAgencyId = x["NextAgencyId"] == DBNull.Value ? 0 : Convert.ToInt32(x["NextAgencyId"]),
                          PrevSubscriptionID = x["PrevSubscriptionID"] == DBNull.Value ? 0 : Convert.ToInt32(x["PrevSubscriptionID"]),
                          PrevApplicantRequirementItemId = x["PrevApplicantRequirementItemId"] == DBNull.Value ? 0 : Convert.ToInt32(x["PrevApplicantRequirementItemId"]),
                          PrevApplicantRequirementCategoryId = x["PrevApplicantRequirementCategoryId"] == DBNull.Value ? 0 : Convert.ToInt32(x["PrevApplicantRequirementCategoryId"]),
                          PrevRequirementItemId = x["PrevRequirementItemId"] == DBNull.Value ? 0 : Convert.ToInt32(x["PrevRequirementItemId"]),
                          PrevClinicalRotationID = x["PrevClinicalRotationID"] == DBNull.Value ? 0 : Convert.ToInt32(x["PrevClinicalRotationID"]),
                          PrevOrganizationUserID = x["PrevOrganizationUserID"] == DBNull.Value ? 0 : Convert.ToInt32(x["PrevOrganizationUserID"]),
                          PrevRequirementCategoryID = x["PrevRequirementCategoryID"] == DBNull.Value ? 0 : Convert.ToInt32(x["PrevRequirementCategoryID"]),
                          PrevTenantID = x["PrevTenantID"] == DBNull.Value ? 0 : Convert.ToInt32(x["PrevTenantID"]),
                          PrevAgencyId = x["PrevAgencyId"] == DBNull.Value ? 0 : Convert.ToInt32(x["PrevAgencyId"]),

                      }).ToList();
                }
            }
            return lstRequirementVerificationQueueContract;

        }
        #endregion
        #region UAT-4461
        List<ReqPkgSubscriptionIDList> IComplianceDataRepository.GetApplicantDataByRPSid(Int32 CurrentReqPkgSubscriptionID, Int32 ClinicalRotationId)
        {
            List<ReqPkgSubscriptionIDList> lstRequirementVerificationQueueContract = new List<ReqPkgSubscriptionIDList>();

            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand command = new SqlCommand("usp_GetApplicantDataByRPSid", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@RPS_ID", CurrentReqPkgSubscriptionID);
                command.Parameters.AddWithValue("@RotationId", ClinicalRotationId);

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);

                if (ds.Tables.Count > AppConsts.NONE && ds.Tables[0].Rows.Count > 0)
                {
                    lstRequirementVerificationQueueContract = ds.Tables[0].AsEnumerable().Select(x =>
                      new ReqPkgSubscriptionIDList
                      {
                          RequirementPackageSubscriptionID = x["RequirementPackageSubscriptionID"] == DBNull.Value ? 0 : Convert.ToInt32(x["RequirementPackageSubscriptionID"]),
                          ApplicantRequirementItemId = x["ApplicantRequirementItemId"] == DBNull.Value ? 0 : Convert.ToInt32(x["ApplicantRequirementItemId"]),
                          RequirementItemId = x["RequirementItemId"] == DBNull.Value ? 0 : Convert.ToInt32(x["RequirementItemId"]),
                          ApplicantRequirementCategoryId = x["ApplicantRequirementCategoryId"] == DBNull.Value ? 0 : Convert.ToInt32(x["ApplicantRequirementCategoryId"]),
                          RotationId = x["ClinicalRotationID"] == DBNull.Value ? 0 : Convert.ToInt32(x["ClinicalRotationID"]),
                          ApplicantId = x["OrganizationUserID"] == DBNull.Value ? 0 : Convert.ToInt32(x["OrganizationUserID"]),
                          RequirementCategoryID = x["RequirementCategoryID"] == DBNull.Value ? 0 : Convert.ToInt32(x["RequirementCategoryID"]),
                          TenantID = x["TenantID"] == DBNull.Value ? 0 : Convert.ToInt32(x["TenantID"]),
                          AgencyId = x["AgencyId"] == DBNull.Value ? 0 : Convert.ToInt32(x["AgencyId"]),

                      }).ToList();
                }
            }
            return lstRequirementVerificationQueueContract;

        }
        #endregion
        #region UAT-3563
        void IComplianceDataRepository.UniversalAttributeMapping(Int32 complianceAttributeID, Int32 currentLoggedInUserId, Int32 universalMappingTypeID)
        {
            var complianceAttribute = _dbContext.ComplianceAttributes.Where(cond => cond.ComplianceAttributeID == complianceAttributeID && !cond.IsDeleted).FirstOrDefault();
            if (!complianceAttribute.IsNullOrEmpty())
            {
                var existingComplianceItemAttributesMapping = _dbContext.ComplianceItemAttributes.Where(d => !d.CIA_IsDeleted && d.CIA_AttributeID == complianceAttributeID).ToList();
                if (!existingComplianceItemAttributesMapping.IsNullOrEmpty())
                {
                    foreach (var ComplianceItemAttributesMapping in existingComplianceItemAttributesMapping)
                    {
                        Int32 CIA_ID = ComplianceItemAttributesMapping.CIA_ID;
                        Int32 CCI_ID = AppConsts.NONE;
                        var existingComplianceCategoryItemMapping = ComplianceItemAttributesMapping.ComplianceItem.ComplianceCategoryItems.Where(d => !d.CCI_IsDeleted).ToList();
                        if (!existingComplianceCategoryItemMapping.IsNullOrEmpty())
                        {
                            foreach (var ComplianceCategoryItemMapping in existingComplianceCategoryItemMapping)
                            {
                                //TODO: CCI && CCA combination
                                CCI_ID = ComplianceCategoryItemMapping.CCI_ID;
                                //Get UniversalFieldMapping based on CCI && CCA combination
                                var UniversalFieldMappingData = _dbContext.UniversalFieldMappings.Where(d => d.UFM_CategoryItemMappingID == CCI_ID
                                    && d.UFM_UniversalMappingTypeID == universalMappingTypeID
                                    && d.UFM_ItemAttributeMappingID == CIA_ID && !d.UFM_IsDeleted).ToList();
                                if (!UniversalFieldMappingData.IsNullOrEmpty())
                                {
                                    foreach (var universalFieldMapping in UniversalFieldMappingData)
                                    {
                                        var oldUniversalFieldOptionMapping = _dbContext.UniversalFieldOptionMappings.Where(d => d.UFOM_UniversalFieldMappingID == universalFieldMapping.UFM_ID && !d.UFOM_IsDeleted).ToList();

                                        if (!oldUniversalFieldOptionMapping.IsNullOrEmpty())
                                        {
                                            foreach (var universalFieldOptionMapping in oldUniversalFieldOptionMapping)
                                            {
                                                var oldComplianceAttributeOptionData = complianceAttribute.ComplianceAttributeOptions.Where(d => d.ComplianceAttributeOptionID == universalFieldOptionMapping.UFOM_AttributeOptionID).FirstOrDefault();

                                                if (!oldComplianceAttributeOptionData.IsNullOrEmpty())
                                                {
                                                    var newComplianceAttributeOptionData = complianceAttribute.ComplianceAttributeOptions.Where(d => d.ComplianceItemAttributeID == oldComplianceAttributeOptionData.ComplianceItemAttributeID && d.OptionValue == oldComplianceAttributeOptionData.OptionValue && !d.IsDeleted).FirstOrDefault();

                                                    UniversalFieldOptionMapping dbInsertUniversalFieldOptionMapping = null;
                                                    var existCheck = _dbContext.UniversalFieldOptionMappings.Where(d => d.UFOM_AttributeOptionID == newComplianceAttributeOptionData.ComplianceAttributeOptionID && d.UFOM_UniversalFieldMappingID == universalFieldMapping.UFM_ID && !d.UFOM_IsDeleted).FirstOrDefault();
                                                    if (existCheck.IsNullOrEmpty())
                                                    {
                                                        dbInsertUniversalFieldOptionMapping = new UniversalFieldOptionMapping();
                                                        dbInsertUniversalFieldOptionMapping.UFOM_UniversalFieldMappingID = universalFieldOptionMapping.UFOM_UniversalFieldMappingID;
                                                        dbInsertUniversalFieldOptionMapping.UFOM_UniversalFieldOptionID = universalFieldOptionMapping.UFOM_UniversalFieldOptionID;
                                                        dbInsertUniversalFieldOptionMapping.UFOM_AttributeOptionID = newComplianceAttributeOptionData.ComplianceAttributeOptionID;
                                                        dbInsertUniversalFieldOptionMapping.UFOM_CreatedBy = currentLoggedInUserId;
                                                        dbInsertUniversalFieldOptionMapping.UFOM_CreatedOn = DateTime.Now;
                                                        dbInsertUniversalFieldOptionMapping.UFOM_IsDeleted = false;
                                                        _dbContext.UniversalFieldOptionMappings.AddObject(dbInsertUniversalFieldOptionMapping);
                                                    }
                                                }
                                            }
                                            //TODO : update modified by
                                            oldUniversalFieldOptionMapping.ForEach(d => { d.UFOM_IsDeleted = true; d.UFOM_ModifiedBy = currentLoggedInUserId; d.UFOM_ModifiedOn = DateTime.Now; });
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            _dbContext.SaveChanges();
        }
        #endregion

        #region UAT-3593
        List<ApplicantDocumentDetails> IComplianceDataRepository.GetInstructorRequirementDocumentData(Int32 organizationUserID)
        {
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand command = new SqlCommand("dbo.usp_GetInstructorRequirementDocumentData", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@OrganizationUserID", organizationUserID);
                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                List<ApplicantDocumentDetails> lstApplicantDocumentDetails = new List<ApplicantDocumentDetails>();
                lstApplicantDocumentDetails = ds.Tables[0].AsEnumerable().Select(col =>
                      new ApplicantDocumentDetails
                      {
                          ApplicantDocumentID = Convert.ToInt32(col["ApplicantDocumentID"]),
                          Description = col["Description"] == DBNull.Value ? String.Empty : Convert.ToString(col["Description"]),
                          DocumentTypeCode = col["DocumentTypeCode"] == DBNull.Value ? String.Empty : Convert.ToString(col["DocumentTypeCode"]),
                          FileName = col["FileName"] == DBNull.Value ? String.Empty : Convert.ToString(col["FileName"]),
                          FileType = col["FileType"] == DBNull.Value ? String.Empty : Convert.ToString(col["FileType"]),
                          ItemName = col["ItemName"] == DBNull.Value ? String.Empty : Convert.ToString(col["ItemName"]),
                          Size = Convert.ToInt32(col["Size"]),
                          UploadedBy = col["UploadedBy"] == DBNull.Value ? String.Empty : Convert.ToString(col["UploadedBy"]),
                          UploadedOn = col["UploadedBy"] == DBNull.Value ? (DateTime?)null : Convert.ToDateTime(col["UploadedOn"]).Date,
                          DocumentPath = col["DocumentPath"] == DBNull.Value ? String.Empty : Convert.ToString(col["DocumentPath"]),
                          ApplicantDocItemAssociationID = col["ApplicantDocItemAssociationID"] == DBNull.Value ? String.Empty : Convert.ToString(col["ApplicantDocItemAssociationID"]) //UAT-2296
                      }).ToList();
                return lstApplicantDocumentDetails;
            }

        }

        Boolean IComplianceDataRepository.IsReqDocumentAlreadyUploaded(String documentName, Int32 documentSize, Int32 organizationUserId)//, List<lkpDocumentType> docType)
        {
            //Int32 reqUploadDocTypeID = docType.Where(cond => cond.DMT_Code.Equals(DocumentType.REQUIREMENT_FIELD_UPLOAD_DOCUMENT.GetStringValue())).Select(sel => sel.DMT_ID).FirstOrDefault();
            //List<ApplicantDocument> lstgvb = _dbContext.ApplicantDocuments.Where(doc => doc.FileName.ToLower().Trim() == documentName.ToLower().Trim()).ToList();

            //List<ApplicantDocument> lstassp = _dbContext.ApplicantDocuments.Where(cmd => cmd.OrganizationUserID == organizationUserId && cmd.Size == documentSize).ToList();

            return _dbContext.ApplicantDocuments.Where(doc => doc.FileName.ToLower().Trim() == documentName.ToLower().Trim()
                                && doc.Size == documentSize
                                && doc.OrganizationUserID == organizationUserId
                                && doc.IsDeleted == false).Any();
        }
        #endregion

        #region UAt-3365
        Order IComplianceDataRepository.GetExistingOrderList(Int32 packageId, Int32 orgUserId, List<Int32> IgnoredOrderStatusList)
        {
            var orderList = ClientDBContext.Orders
                                         .Where(cond => !cond.IsDeleted && cond.OrganizationUserProfile.OrganizationUserID == orgUserId
                                            && cond.DeptProgramPackage.DPP_CompliancePackageID == packageId
                                             // && cond.OrderPaymentDetails.Where(d=> !IgnoredOrderStatusList.Contains(d.lkpOrderStatu.OrderStatusID)).FirstOrDefault()
                                             ).OrderByDescending(f => f.OrderID).ToList();
            List<Order> res = new List<Order>();
            foreach (var order in orderList)
            {
                var opd = order.OrderPaymentDetails;
                var orderNeedToDelete = opd.Where(d => IgnoredOrderStatusList.Contains(d.OPD_OrderStatusID.Value)).FirstOrDefault();
                if (orderNeedToDelete.IsNullOrEmpty())
                {
                    res.Add(order);
                }
            }
            return res.OrderByDescending(d => d.OrderID).FirstOrDefault();
            //ps => !ps.IsDeleted && !ps.CompliancePackage.IsDeleted
            //                           && ps.CompliancePackageID == packageId && ps.OrganizationUserID == orgUserId
            //                           && (ps.SubscriptionMobilityStatusID == null || ps.SubscriptionMobilityStatusID != subscriptionMobilityStatusID)
            //                           && (ps.ArchiveStateID == null || ps.ArchiveStateID == archieveStateId))
            //                           .FirstOrDefault();
        }
        #endregion

        #region UAT-3805
        List<RequirementPackageSubscription> IComplianceDataRepository.GetRequirementPackageSubscriptionBySubscriptionIds(List<Int32> lstPackageSubscriptionIds)
        {
            return _dbContext.RequirementPackageSubscriptions.Where(con => lstPackageSubscriptionIds.Contains(con.RPS_ID) && !con.RPS_IsDeleted).ToList();
        }

        List<RequirementPackageSubscription> IComplianceDataRepository.GetRequirementPackageSubscriptionByApplicantComplianceItemIds(List<Int32> lstApplicantComplianceItemIds)
        {
            List<Int32> lstApplicantCategoryDataIds = _dbContext.ApplicantRequirementItemDatas.Where(con => lstApplicantComplianceItemIds.Contains(con.ARID_ID) && !con.ARID_IsDeleted).Select(sel => sel.ARID_RequirementCategoryDataID).Distinct().ToList();
            if (!lstApplicantCategoryDataIds.IsNullOrEmpty())
            {
                List<Int32> lstRequirementPkgSubscriptionIds = _dbContext.ApplicantRequirementCategoryDatas.Where(cond => !cond.ARCD_IsDeleted && lstApplicantCategoryDataIds.Contains(cond.ARCD_ID)).Select(sel => sel.ARCD_RequirementPackageSubscriptionID).Distinct().ToList();
                if (!lstRequirementPkgSubscriptionIds.IsNullOrEmpty())
                {
                    return _dbContext.RequirementPackageSubscriptions.Where(cond => !cond.RPS_IsDeleted && lstRequirementPkgSubscriptionIds.Contains(cond.RPS_ID)).ToList();
                }
            }
            return new List<RequirementPackageSubscription>(); ;
        }



        #endregion


        private String GetEntityTypeTranslatedText(Int32 entityId, String entityTypeCode)
        {
            if (entityId > AppConsts.NONE)
            {
                SystemSpecificLanguageText systemSpecificLanguageTexts = _dbContext.SystemSpecificLanguageTexts.Where(cond => !cond.SELT_IsDeleted && cond.SELT_EntityId == entityId && cond.lkpLanguageTranslationEntityType.EntityTypeCode == entityTypeCode).FirstOrDefault();
                if (!systemSpecificLanguageTexts.IsNullOrEmpty())
                    return systemSpecificLanguageTexts.SELT_TranslationText;
            }
            return String.Empty;
        }


        #region Mobile Web API Code

        Dictionary<String, String> IComplianceDataRepository.SaveOrderPaymentDetail(Int32 tenantID, PkgPaymentGrouping pkgPaymentGrouping, Order order, List<lkpOrderPackageType> lstOrderPackageTypes)
        {
            Dictionary<String, String> _dicInvoiceNumbers = new Dictionary<String, String>();
            var _bkgPkgTypeId = lstOrderPackageTypes.Where(opt => opt.OPT_Code == OrderPackageTypes.BACKGROUND_PACKAGE.GetStringValue()).FirstOrDefault().OPT_ID;
            var _compliancePkgTypeId = lstOrderPackageTypes.Where(opt => opt.OPT_Code == OrderPackageTypes.COMPLIANCE_PACKAGE.GetStringValue()).FirstOrDefault().OPT_ID;
            var _invoiceNumber = String.Empty;
            var _orderStatusId = 0;
            bool mainOrderPaymentDetailEntry = false;
            if (pkgPaymentGrouping.TotalAmount > AppConsts.NONE)
            {
                if (pkgPaymentGrouping.PaymentModeCode.Contains("Additional") == true)
                {
                    var paymentCode = pkgPaymentGrouping.PaymentModeCode.Split('-')[0];
                    _orderStatusId = GetOrderStatusId(paymentCode);
                }
                else
                    _orderStatusId = GetOrderStatusId(pkgPaymentGrouping.PaymentModeCode);
            }
            else
            {
                _orderStatusId = GetOrderStatusCode(ApplicantOrderStatus.Paid.GetStringValue());
            }

            #region UAT-1185 Adjust amount of main order payment details if it has extra compliance too
            decimal adjustedAmount = 0;
            List<Int32> childOrderIds = new List<int>();
            if (!pkgPaymentGrouping.lstPackages.IsNullOrEmpty())
            {
                foreach (var pkg in pkgPaymentGrouping.lstPackages)
                {
                    if (!pkg.Value)
                    {
                        var pkgId = Convert.ToInt32(pkg.Key.Split('_')[0]);
                        if (pkgId == order.DeptProgramPackage.DPP_CompliancePackageID)
                            mainOrderPaymentDetailEntry = true;
                    }
                    else
                        mainOrderPaymentDetailEntry = true;
                }
            }
            else
            {
                mainOrderPaymentDetailEntry = true;
            }

            #endregion
            // Store Invoice Number and Payment Mode
            OrderPaymentDetail paymentDetails = null;
            Int32 firstExtraOrderID = 0;
            if (mainOrderPaymentDetailEntry)
            {
                _invoiceNumber = GenerateInvoiceNumber(order.OrderID, tenantID, false, childOrderIds);
                paymentDetails = AddOnlinePaymentTransaction(order, order.CreatedOn, _invoiceNumber,
                                           pkgPaymentGrouping.TotalAmount, pkgPaymentGrouping.PaymentModeId, _orderStatusId, order.CreatedByID, adjustedAmount);

                List<BkgOrderPackage> _lstBkgOrderPkg = order.BkgOrders.FirstOrDefault().BkgOrderPackages.ToList();
                Int32 _bopId = 0;
                if (_lstBkgOrderPkg.IsNotNull() && _lstBkgOrderPkg.Count > AppConsts.NONE)
                    _bopId = _lstBkgOrderPkg.Where(bop => bop.BOP_IsDeleted == false).FirstOrDefault().BOP_ID;


                OrderPkgPaymentDetail pkgPaymentDetails = new OrderPkgPaymentDetail
                {
                    OrderPaymentDetail = paymentDetails,
                    OPPD_BkgOrderPackageID = _bopId,
                    OPPD_OrderPackageTypeID = _bkgPkgTypeId,
                    OPPD_IsDeleted = false,
                    OPPD_CreatedBy = order.CreatedByID,
                    OPPD_CreatedOn = order.CreatedOn,
                };
                paymentDetails.OrderPkgPaymentDetails.Add(pkgPaymentDetails);

                // AddOrderPaymentPackageDetail(pkgPaymentGrouping, order.BkgOrders.FirstOrDefault().BkgOrderPackages.ToList(), paymentDetails, _bkgPkgTypeId, _compliancePkgTypeId, order.CreatedByID, order.CreatedOn, AppConsts.NONE);
            }
            else if (childOrderIds.Count > 0)
            {
                firstExtraOrderID = childOrderIds[0];
                childOrderIds.RemoveAt(0);

                _invoiceNumber = GenerateInvoiceNumber(firstExtraOrderID, tenantID, false, childOrderIds);

            }
            _dicInvoiceNumbers.Add(pkgPaymentGrouping.PaymentModeCode, _invoiceNumber);
            _dbContext.SaveChanges();
            return _dicInvoiceNumbers;
        }

        public Int32 GetOrderIDByOrderNumber(String orderNumber)
        {
            Int32 orderId = _dbContext.Orders.FirstOrDefault(ord => ord.OrderNumber == orderNumber && ord.IsDeleted == false).OrderID;
            return orderId;
        }

        ApplicantOrderContract IComplianceDataRepository.GetOrderNumberDetails(string orderNumber)
        {
            ApplicantOrderContract result = null;
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand command = new SqlCommand("[ams].[usp_GetOrderNumberDetails]", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@orderNumber", orderNumber);

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > 0
                    && ds.Tables[0].Rows.Count > 0)
                {
                    result = new ApplicantOrderContract();
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        var drOrderDetail = ds.Tables[0].Rows[0];
                        result.packageName = drOrderDetail["Packagename"].ToString();
                        result.OrderNumber = drOrderDetail["OrderNumber"].ToString();
                        // result.GrandTotal = decimal.Parse(drOrderDetail["OPD_Amount"].ToString());
                        // result.PaymentType = drOrderDetail["PaymentType"].ToString();
                        result.BillingCodeAmount = drOrderDetail["BillingCodeAmount"].ToString();
                        //result.selectedPaymentModeData = new List<ApplicantOrderPaymentOptions>
                        //{
                        //    new ApplicantOrderPaymentOptions
                        //    {

                        //    }
                        //}
                        //customPagingArgsContract.VirtualPageCount = Convert.ToInt32(Convert.ToString(ds.Tables[0].Rows[0]["VirtualCount"]));
                    }
                    if (ds.Tables[1].Rows.Count > 0)
                    {
                        var lstCustomAttribute = new List<AttributesForCustomFormContract>();
                        foreach (DataRow dr in ds.Tables[1].Rows)
                        {
                            lstCustomAttribute.Add(new AttributesForCustomFormContract
                            {
                                InstanceID = Convert.ToInt32(dr["BAGM_ID"].ToString()),
                                AttributeId = Convert.ToInt32(dr["BSA_ID"].ToString()),
                                AttributeGroupId = Convert.ToInt32(dr["BSAD_ID"].ToString()),
                                AttriButeGroupName = dr["CFAG_SectionTitle"].ToString(),
                                SectionTitle = dr["CFAG_SectionTitle"].ToString(),
                                AttributeName = dr["BSA_Name"].ToString(),
                                AttributeDataValue = dr["CFOD_Value"].ToString(),
                                IsHiddenFromUI = dr["BPSA_IsHiddenFromUI"].ToString() == "1",
                            });
                        }
                        result.lstCustomAttribute = lstCustomAttribute;
                    }

                    if (ds.Tables[2].Rows.Count > 0)
                    {
                        var lstCustomAttributeInSpanish = new List<AttributesForCustomFormContract>();
                        foreach (DataRow dr in ds.Tables[2].Rows)
                        {
                            lstCustomAttributeInSpanish.Add(new AttributesForCustomFormContract
                            {
                                InstanceID = Convert.ToInt32(dr["BAGM_ID"].ToString()),
                                AttributeId = Convert.ToInt32(dr["BSA_ID"].ToString()),
                                AttributeGroupId = Convert.ToInt32(dr["BSAD_ID"].ToString()),
                                AttriButeGroupName = dr["CFAG_SectionTitle"].ToString(),
                                SectionTitle = dr["CFAG_SectionTitle"].ToString(),
                                AttributeName = dr["BSA_Name"].ToString(),
                                AttributeDataValue = dr["CFOD_Value"].ToString(),
                                IsHiddenFromUI = dr["BPSA_IsHiddenFromUI"].ToString() == "1",
                            });
                        }
                        result.lstCustomAttributeInSpanish = lstCustomAttributeInSpanish;
                    }
                    if (ds.Tables[3].Rows.Count > 0)
                    {
                        var lstPaymentData = new List<PaymentTypeDetails>();
                        foreach (DataRow dr in ds.Tables[3].Rows)
                        {
                            lstPaymentData.Add(new PaymentTypeDetails
                            {
                                PaymentType = dr["PaymentType"].ToString(),
                                Amount = decimal.Parse(dr["OPD_Amount"].ToString()),
                                PaymentTypeCode = dr["PaymentTypeCode"].ToString(),
                                InstructionText = dr["InstructionText"].ToString()
                            });
                        }
                        result.lstPaymentDataDetail = lstPaymentData;
                    }
                }
                //return new DataTable();
            }
            return result;
        }

        List<OrderDetailsContract> IComplianceDataRepository.GetOrderHistory(Int32 organizationUserID)
        {
            List<OrderDetailsContract> _lstorderDetail = new List<OrderDetailsContract>();
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {

                SqlCommand command = new SqlCommand("usp_GetOrderHistory", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@organizationUserID", organizationUserID);
                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        OrderDetailsContract ordDetails = new OrderDetailsContract();
                        ordDetails = new OrderDetailsContract();
                        ordDetails.OrderDate = Convert.ToDateTime(ds.Tables[0].Rows[i]["OrderDate"]);
                        ordDetails.OrderId = Convert.ToInt32(ds.Tables[0].Rows[i]["OrderId"]);
                        ordDetails.OrderNumber = Convert.ToString(ds.Tables[0].Rows[i]["OrderNumber"]);
                        ordDetails.PackageName = Convert.ToString(ds.Tables[0].Rows[i]["PackageName"]);
                        ordDetails.PackageID = Convert.ToInt32(ds.Tables[0].Rows[i]["PackageID"]);
                        ordDetails.BkgOrderStatusID = Convert.ToInt32(ds.Tables[0].Rows[i]["BkgOrderStatusID"]);
                        ordDetails.BkgOrderStatusCode = Convert.ToString(ds.Tables[0].Rows[i]["BkgOrderStatusCode"]);
                        ordDetails.BkgOrderStatus = Convert.ToString(ds.Tables[0].Rows[i]["BkgOrderStatus"]);
                        ordDetails.InstituteHierarchy = Convert.ToString(ds.Tables[0].Rows[i]["InstituteHierarchy"]);
                        ordDetails.DeptProgramMappingID = Convert.ToInt32(ds.Tables[0].Rows[i]["DeptProgramMappingID"]);
                        ordDetails.DeptProgramPackageID = Convert.ToInt32(ds.Tables[0].Rows[i]["DeptProgramPackageID"]);
                        ordDetails.OrderStatusCode = Convert.ToString(ds.Tables[0].Rows[i]["OrderStatusCode"]);
                        ordDetails.OrderStatusName = Convert.ToString(ds.Tables[0].Rows[i]["OrderStatusName"]);
                        ordDetails.PaymentType = Convert.ToString(ds.Tables[0].Rows[i]["PaymentType"]);
                        ordDetails.PaymentTypeCode = Convert.ToString(ds.Tables[0].Rows[i]["PaymentTypeCode"]);
                        ordDetails.Amount = Convert.ToDecimal(ds.Tables[0].Rows[i]["Amount"]);
                        ordDetails.IsFileSentToCBI = ds.Tables[0].Rows[i]["SubmittedToCBI"] == DBNull.Value ? false : Convert.ToBoolean(ds.Tables[0].Rows[i]["SubmittedToCBI"]);
                        ordDetails.IsRescheduleAvailable = ds.Tables[0].Rows[i]["IsRescheduleAvailable"] == DBNull.Value ? false : Convert.ToBoolean(ds.Tables[0].Rows[i]["IsRescheduleAvailable"]);
                        ordDetails.IsOutOfState = ds.Tables[0].Rows[i]["IsOutOfState"] == DBNull.Value ? false : Convert.ToBoolean(ds.Tables[0].Rows[i]["IsOutOfState"]);
                        ordDetails.IsOnsiteAppointment = ds.Tables[0].Rows[i]["IsOnsiteAppointment"] == DBNull.Value ? false : Convert.ToBoolean(ds.Tables[0].Rows[i]["IsOnsiteAppointment"]);
                        ordDetails.IsColoradoFingerPrinting = ds.Tables[0].Rows[i]["IsColoradoFingerPrinting"] == DBNull.Value ? false : Convert.ToBoolean(ds.Tables[0].Rows[i]["IsColoradoFingerPrinting"]);
                        ordDetails.LocationID = ds.Tables[0].Rows[i]["LocationID"] == DBNull.Value ? 0 : Convert.ToInt32(ds.Tables[0].Rows[i]["LocationID"]);
                        ordDetails.IsChangePaymentTypeVisible = Convert.IsDBNull(ds.Tables[0].Rows[i]["IsChangePaymentTypeVisible"]) ? false : Convert.ToBoolean(ds.Tables[0].Rows[i]["IsChangePaymentTypeVisible"]);
                        ordDetails.AppointmentStatus = Convert.ToString(ds.Tables[0].Rows[i]["AppointmentStatus"]);
                        ordDetails.AppointmentStatusCode = Convert.ToString(ds.Tables[0].Rows[i]["AppointmentStatusCode"]);
                        ordDetails.AppointmentStatusID = ds.Tables[0].Rows[i]["AppointmentStatusID"] == DBNull.Value ? 0 : Convert.ToInt32(ds.Tables[0].Rows[i]["AppointmentStatusID"]);
                        ordDetails.BkgPackageHierarchyMappingId = ds.Tables[0].Rows[i]["BkgPackageHierarchyMappingId"] == DBNull.Value ? 0 : Convert.ToInt32(ds.Tables[0].Rows[i]["BkgPackageHierarchyMappingId"]);
                        ordDetails.IsBillingCode = ds.Tables[0].Rows[i]["IsBillingCode"] == DBNull.Value ? false : Convert.ToBoolean(ds.Tables[0].Rows[i]["IsBillingCode"]);
                        ordDetails.LocationName = Convert.ToString(ds.Tables[0].Rows[i]["LocationName"]);
                        ordDetails.IsSendForOnline = Convert.ToBoolean(ds.Tables[0].Rows[i]["IsSendForOnline"]);
                        ordDetails.BillingCode = Convert.ToString(ds.Tables[0].Rows[i]["BillingCode"]);
                        ordDetails.BackageOrderPackageID = Convert.ToInt32(ds.Tables[0].Rows[i]["BackageOrderPackageID"]);
                        if (ds.Tables[0].Rows[i]["SlotDate"].GetType().Name != "DBNull")
                        {
                            DateTime slotDate = Convert.ToDateTime(ds.Tables[0].Rows[i]["SlotDate"]);
                            TimeSpan startTime = new TimeSpan();
                            TimeSpan.TryParse(ds.Tables[0].Rows[i]["StartTime"].ToString(), out startTime);
                            TimeSpan endTime = new TimeSpan();
                            TimeSpan.TryParse(ds.Tables[0].Rows[i]["EndTime"].ToString(), out endTime);
                            ordDetails.StartDateTime = slotDate.Add(startTime);
                            ordDetails.EndDateTime = slotDate.Add(endTime);
                        }
                        _lstorderDetail.Add(ordDetails);
                    }
                }
            }

            return _lstorderDetail;
        }

        public void SaveCABSServiceOrderDetails(List<BackgroundPackagesContract> lstPackages, Order applicantOrder, Int32 orgUserID, PreviousAddressContract mailingAddress = null, Boolean isLocationServiceTenant = false, Boolean isConsent = false)
        {
            DateTime _creationDateTime = DateTime.Now;
            Int32 _createdById = orgUserID;
            if (!lstPackages.IsNullOrEmpty() && lstPackages.Count > 0 && isLocationServiceTenant && applicantOrder.OrderID > 0)
            {
                StringBuilder xmlStringData = new StringBuilder();
                xmlStringData.Append("<BkgpkgAttributes>");
                //Decimal mailingPrice = Convert.ToDecimal(0.00);

                char[] splitParams = new char[] { '(', ')' };

                //if (!mailingAddress.MailingOptionPrice.IsNullOrEmpty())
                //{
                //    String[] MailingPrice1 = mailingAddress.MailingOptionPrice.Split(splitParams);
                //    mailingPrice = Convert.ToDecimal(MailingPrice1[1]);
                //}
                foreach (BackgroundPackagesContract item in lstPackages)
                {
                    //if (item.ServiceCode != BkgServiceType.SIMPLE.GetStringValue())
                    //{
                    //    xmlStringData.Append("<BkgpkgData><NumberOfCopies>" + item.CopiesCount + "</NumberOfCopies><BasePrice>" + item.BasePrice + "</BasePrice><ServiceType>" + item.ServiceCode + "</ServiceType><IsConsent>" + isConsent + "</IsConsent><TotalBkgPackagePrice>" + item.TotalBkgPackagePrice + "</TotalBkgPackagePrice><IsPreviousFPorPP>" + item.IsOrderHistory + "</IsPreviousFPorPP><ReferencedOrderID>" + item.ReferencedOrderID + "</ReferencedOrderID><MailingOptionId>" + mailingAddress.MailingOptionId + "</MailingOptionId><MailingOptionPrice>" + mailingPrice + "</MailingOptionPrice><MailingAddressHandleId>" + mailingAddress.MailingAddressHandleId + "</MailingAddressHandleId> </BkgpkgData>");
                    //}
                    //else
                    //{
                    xmlStringData.Append("<BkgpkgData><NumberOfCopies>" + item.CopiesCount + "</NumberOfCopies><BasePrice>" + item.BasePrice + "</BasePrice><ServiceType>" + item.ServiceCode + "</ServiceType><IsConsent>" + isConsent + "</IsConsent><TotalBkgPackagePrice>" + item.TotalBkgPackagePrice + "</TotalBkgPackagePrice><IsPreviousFPorPP>" + item.IsOrderHistory + "</IsPreviousFPorPP><ReferencedOrderID>" + item.ReferencedOrderID + "</ReferencedOrderID></BkgpkgData>");
                    //}

                }
                xmlStringData.Append("</BkgpkgAttributes>");
                CABSServiceOrderDetail cABSServiceOrderDetail = new CABSServiceOrderDetail();
                cABSServiceOrderDetail.CSOD_OrderID = applicantOrder.OrderID;
                cABSServiceOrderDetail.CSOD_ServiceDetails = xmlStringData.ToString();
                cABSServiceOrderDetail.CSOD_IsActive = true;
                cABSServiceOrderDetail.CSOD_CreatedBy = _createdById;
                cABSServiceOrderDetail.CSOD_CreatedOn = _creationDateTime;
                cABSServiceOrderDetail.CSOD_IsDeleted = false;
                _dbContext.CABSServiceOrderDetails.AddObject(cABSServiceOrderDetail);
                _dbContext.SaveChanges();
            }
        }

        #endregion
        public void AddDataInXMLForModifyShipping(Order applicantOrder, ApplicantOrderDataContract applicantOrderDataContract, Int32 orgUserID, Boolean isLocationServiceTenant = false, PreviousAddressContract mailingAddress = null, FingerPrintAppointmentContract FingerPrintData = null)
        {
            DateTime _creationDateTime = DateTime.Now;
            Int32 _createdById = orgUserID;
            if (!applicantOrderDataContract.lstBackgroundPackages.IsNullOrEmpty() && applicantOrderDataContract.lstBackgroundPackages.Count > 0 && isLocationServiceTenant && applicantOrder.OrderID > 0)
            {
                StringBuilder xmlStringData = new StringBuilder();
                xmlStringData.Append("<BkgpkgAttributes>");
                Decimal mailingPrice = Convert.ToDecimal(0.00);

                char[] splitParams = new char[] { '(', ')' };
                if (!mailingAddress.MailingOptionPrice.IsNullOrEmpty())
                {
                    String[] MailingPrice1 = mailingAddress.MailingOptionPrice.Split(splitParams);
                    mailingPrice = Convert.ToDecimal(MailingPrice1[1]);
                }

                foreach (BackgroundPackagesContract item in applicantOrderDataContract.lstBackgroundPackages)
                {
                    if (item.ServiceCode != BkgServiceType.SIMPLE.GetStringValue() && mailingAddress.MailingOptionId != "0")
                    {
                        xmlStringData.Append("<BkgpkgData><NumberOfCopies>" + item.CopiesCount + "</NumberOfCopies><BasePrice>" + item.BasePrice + "</BasePrice><ServiceType>" + item.ServiceCode + "</ServiceType><IsConsent>" + FingerPrintData.IsConsent + "</IsConsent><TotalBkgPackagePrice>" + item.TotalBkgPackagePrice + "</TotalBkgPackagePrice><IsFromArchivedOrderScreen>" + FingerPrintData.IsFromArchivedOrderScreen + "</IsFromArchivedOrderScreen><ReferencedOrderID>" + item.ReferencedOrderID + "</ReferencedOrderID><IsMailingOnly>" + FingerPrintData.IsMailingOnly + "</IsMailingOnly><MailingOptionId>" + mailingAddress.MailingOptionId + "</MailingOptionId><MailingOptionPrice>" + mailingPrice + "</MailingOptionPrice><MailingAddressHandleId>" + mailingAddress.MailingAddressHandleId + "</MailingAddressHandleId><FCAdditionalPrice>" + item.FCAdditionalPrice + "</FCAdditionalPrice><PPCopiesCount>" + item.PPCopiesCount + "</PPCopiesCount><PPAdditionalPrice>" + item.PPAdditionalPrice + "</PPAdditionalPrice> </BkgpkgData>");
                    }
                    else
                    {
                        xmlStringData.Append("<BkgpkgData><NumberOfCopies>" + item.CopiesCount + "</NumberOfCopies><BasePrice>" + item.BasePrice + "</BasePrice><ServiceType>" + item.ServiceCode + "</ServiceType><IsConsent>" + FingerPrintData.IsConsent + "</IsConsent><TotalBkgPackagePrice>" + item.TotalBkgPackagePrice + "</TotalBkgPackagePrice><IsFromArchivedOrderScreen>" + FingerPrintData.IsFromArchivedOrderScreen + "</IsFromArchivedOrderScreen><ReferencedOrderID>" + item.ReferencedOrderID + "</ReferencedOrderID><IsMailingOnly>" + FingerPrintData.IsMailingOnly + "</IsMailingOnly></BkgpkgData>");
                    }

                }
                xmlStringData.Append("</BkgpkgAttributes>");

                CABSServiceOrderDetail ObjToBeEdited = _dbContext.CABSServiceOrderDetails.FirstOrDefault(x => x.CSOD_OrderID == applicantOrder.OrderID);
                ObjToBeEdited.CSOD_ServiceDetails = xmlStringData.ToString();
                ObjToBeEdited.CSOD_CreatedOn = DateTime.Now;

                //_dbContext.CABSServiceOrderDetails.AddObject(cABSServiceOrderDetail);
                _dbContext.SaveChanges();
            }

        }

        #region UAT-3632
        Dictionary<String, String> IComplianceDataRepository.GetItemPaymentOrderData(Int32 orderID)
        {
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            Dictionary<String, String> dicData = new Dictionary<String, String>();
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {

                SqlCommand command = new SqlCommand("usp_GetItemPaymentDetailsByOrderID", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@OrderID", orderID);
                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);

                if (ds.Tables.Count > 0)
                {
                    Boolean isRequirementPayment = Convert.ToBoolean(ds.Tables[0].Rows[0]["IsRequirementItemPayment"]);
                    dicData.Add("ItemName", Convert.ToString(ds.Tables[0].Rows[0]["ItemName"]));
                    dicData.Add("IsRequirementItemPayment", Convert.ToString(isRequirementPayment));
                    dicData.Add("CIDORorderID", Convert.ToString(ds.Tables[0].Rows[0]["CIDORorderID"]));
                }
                else
                {
                    dicData.Add("ItemName", String.Empty);
                    dicData.Add("IsRequirementItemPayment", "false");
                    dicData.Add("CIDORorderID", String.Empty);
                }
            }
            return dicData;
        }
        #endregion

        #region UAT-3641
        List<SubscriptionOption> IComplianceDataRepository.GetDeptProgramPackageSubscriptionOptions(Int32 dppID)
        {
            return (from a in _dbContext.DeptProgramPackageSubscriptions
                    join b in _dbContext.SubscriptionOptions on a.DPPS_SubscriptionID equals b.SubscriptionOptionID
                    where (a.DPPS_DeptProgramPackageID == dppID && !b.IsDeleted)
                    select b).ToList();


        }
        #endregion
        Boolean IComplianceDataRepository.UpdateOrderStatusForInvoiceWithoutApproval(Int32 orderId, String orderStatusCode, Int32 currentLoggedInUserId, List<lkpOrderStatusType> lstOrderStatusType, Int32 tenantId, List<lkpEventHistory> lstEventHistory, Int32 orderPaymentDetailId = 0)
        {
            Int32 orderStatusId = _dbContext.lkpOrderStatus.FirstOrDefault(x => x.Code.Equals(orderStatusCode) && x.IsDeleted == false).OrderStatusID;

            //OrderPaymentDetail orderPaymentDetail = _dbContext.OrderPaymentDetails.FirstOrDefault(x => x.OPD_OrderID == orderId && x.OPD_IsDeleted == false);
            var orderPaymentDetail = _dbContext.OrderPaymentDetails.FirstOrDefault(opd => opd.OPD_OrderID == orderId
                                                                                                && opd.OPD_IsDeleted == false
                                                                                                && opd.OPD_ID == orderPaymentDetailId);

            //For UAT -2379
            string paymentDueOrderStatus = ApplicantOrderStatus.Payment_Due.GetStringValue();
            Int32 paymentDueOrderStatusId = _dbContext.lkpOrderStatus.FirstOrDefault(x => x.Code.Equals(paymentDueOrderStatus) && x.IsDeleted == false).OrderStatusID;
            string offllineSettlementPaymentType = PaymentOptions.OfflineSettlement.GetStringValue();
            Int32 offllineSettlementPaymentTypeId = _dbContext.lkpPaymentOptions.FirstOrDefault(x => x.Code.Equals(offllineSettlementPaymentType) && x.IsDeleted == false).PaymentOptionID;

            if (orderPaymentDetail.IsNotNull())
            {
                var currentDateTime = DateTime.Now;
                // UAT -2379 , if payment due is getting approved in bulk, set paymenttype as offlinestatement
                if (orderPaymentDetail.OPD_OrderStatusID == paymentDueOrderStatusId && orderPaymentDetail.OPD_PaymentOptionID.IsNull())
                {
                    orderPaymentDetail.OPD_PaymentOptionID = offllineSettlementPaymentTypeId;
                }
                orderPaymentDetail.Order.ApprovedBy = currentLoggedInUserId;
                orderPaymentDetail.Order.ApprovalDate = currentDateTime;
                orderPaymentDetail.OPD_ReferenceNo = null;
                orderPaymentDetail.Order.OrderStatusID = orderStatusId;
                orderPaymentDetail.Order.ModifiedByID = currentLoggedInUserId;
                orderPaymentDetail.Order.ModifiedOn = currentDateTime;
                orderPaymentDetail.OPD_ModifiedByID = currentLoggedInUserId;
                orderPaymentDetail.OPD_ModifiedOn = currentDateTime;
                orderPaymentDetail.OPD_OrderStatusID = orderStatusId; // UAT 916
                orderPaymentDetail.OPD_ApprovedBy = currentLoggedInUserId;
                orderPaymentDetail.OPD_ApprovalDate = currentDateTime;

                //return true;
            }

            if (orderStatusCode == ApplicantOrderStatus.Paid.GetStringValue())
            {
                Int32 _orderId = orderPaymentDetail.OPD_OrderID;
                Int32 _bkgOrderStatusTypeId = lstOrderStatusType.Where(ost => ost.Code == BackgroundOrderStatus.NEW.GetStringValue()).FirstOrDefault().OrderStatusTypeID;
                AddBkgOrderEventHistory(lstEventHistory, _orderId, currentLoggedInUserId, AppConsts.Bkg_Order_Approved, BkgOrderEvents.ORDER_APPROVED.GetStringValue()
                                        , orderPaymentDetailId, _bkgOrderStatusTypeId);
            }
            _dbContext.SaveChanges();
            return true;
        }

        public string GetCreditCardPaymentModeApprovalCode(Int32 dpmId)
        {
            string paymentApprovalCode = string.Empty;
            DeptProgramMapping objDeptProgramMapping = _dbContext.DeptProgramMappings.Where(x => x.DPM_ID == dpmId).FirstOrDefault();
            if (!dpmId.IsNullOrEmpty() && dpmId > AppConsts.NONE)
                objDeptProgramMapping = _dbContext.DeptProgramMappings.Where(x => x.DPM_ID == dpmId).FirstOrDefault();

            if (!objDeptProgramMapping.IsNullOrEmpty())
            {
                lkpPaymentApproval objlkpPaymentApproval = _dbContext.lkpPaymentApprovals.Where(x => x.PA_ID == objDeptProgramMapping.DPM_PaymentApprovalID).FirstOrDefault();
                paymentApprovalCode = Convert.ToString(objlkpPaymentApproval.PA_Code);
            }
            return paymentApprovalCode;
        }

        #region UAT-3954
        public List<String> IsOrderExistForCurrentYear(String orderIds)
        {
            List<String> lstExistingOrders = new List<String>();
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand command = new SqlCommand("usp_CheckAlreadyPaidOrdersInCurrentYear", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@OrderIds", orderIds);

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > 0)
                {
                    foreach (DataRow dRow in ds.Tables[0].Rows)
                    {
                        lstExistingOrders.Add(Convert.ToString(dRow["OrderNumber"]));
                    }
                }

            }
            return lstExistingOrders;
        }
        #endregion

        DataTable IComplianceDataRepository.GetOrderDetails(String OrderID)
        {
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand command = new SqlCommand("usp_GetDataForOrderQueue", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@OrderID", OrderID);


                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > 0)
                {
                    if (ds.Tables[1].Rows.Count > 0)
                    {
                        return ds.Tables[1];
                    }
                }
                return new DataTable();
            }
        }

        #region UAT-3795
        DataTable IComplianceDataRepository.GetCCUsersForWeeklyNonComplaintReport(String communicationSubEventCode, Int32 tenantId)
        {
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {

                SqlCommand command = new SqlCommand("usp_GetCCUsersForWeeklyNonComplaintReport", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@CommunicationSubEventCode", communicationSubEventCode);
                command.Parameters.AddWithValue("@TenantId", tenantId);

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > 0)
                {
                    return ds.Tables[0];
                }
            }
            return new DataTable();
        }

        DataTable IComplianceDataRepository.GetWeeklyNonCompliantReportData(String hierarchyId, Int32 organizationID)
        {
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {

                SqlCommand command = new SqlCommand("usp_GetWeeklyNonCompliantReportData", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@HierarchyIds", hierarchyId);
                command.Parameters.AddWithValue("@OrganizationID", organizationID);

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = command;
                DataSet ds = new DataSet();
                adp.Fill(ds);
                if (ds.Tables.Count > 0)
                {
                    return ds.Tables[0];
                }
            }
            return new DataTable();
        }

        #endregion

        #region UAT-3951
        Boolean IComplianceDataRepository.SaveRejectionReasonAuditHistory(List<Int32> lstRejectionReasonIds, Int32 itemDataId, Int32 currentLoggedInUserId)
        {
            List<Entity.RejectionReason> lstSelectedRejectionReasons = this.SecurityContext.RejectionReasons.Where(x => lstRejectionReasonIds.Contains(x.RR_ID)
                                                                                                                      && !x.RR_IsDeleted).ToList();
            if (!lstSelectedRejectionReasons.IsNullOrEmpty())
            {
                lstSelectedRejectionReasons.ForEach(reason =>
                {
                    RejectionReasonAuditHistory auditHistory = new RejectionReasonAuditHistory();
                    auditHistory.RRAH_ItemDataID = itemDataId;
                    auditHistory.RRAH_RejectionReasonCategoryID = reason.RR_RejectionReasonCategoryID;
                    auditHistory.RRAH_RejectionReasonID = reason.RR_ID;
                    auditHistory.RRAH_ReasonText = reason.RR_ReasonText;
                    auditHistory.RRAH_IsDeleted = false;
                    auditHistory.RRAH_CreatedBy = currentLoggedInUserId;
                    auditHistory.RRAH_CreatedOn = DateTime.Now;

                    _dbContext.RejectionReasonAuditHistories.AddObject(auditHistory);
                });

                if (_dbContext.SaveChanges() > 0)
                {
                    return true;
                }
            }
            return false;
        }
        #endregion
        #region UAT-3704

        Int32? IComplianceDataRepository.GetAgencyRootNodeUsingRotationID(Int32? rotationID)
        {
            Int32? agencyHierarchyRootId = null;
            if (!rotationID.IsNullOrEmpty() && rotationID > AppConsts.NONE)
            {
                EntityConnection connection = _dbContext.Connection as EntityConnection;
                using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
                {
                    SqlParameter[] sqlParameterCollection = new SqlParameter[]
                        {
                            new SqlParameter("@ClinicalRotationID",rotationID),
                        };

                    base.OpenSQLDataReaderConnection(con);
                    using (SqlDataReader dr = base.ExecuteSQLDataReader(con, "usp_GetAgencyRootNodeUsingRotationID", sqlParameterCollection))
                    {
                        if (dr.HasRows)
                        {
                            while (dr.Read())
                            {
                                agencyHierarchyRootId = dr["AgencyHierarchyRootId"] == DBNull.Value ? AppConsts.NONE : Convert.ToInt32(dr["AgencyHierarchyRootId"]);
                            }
                        }
                    }
                }
            }
            return agencyHierarchyRootId;
        }
        #endregion


        #region UAT-4114
        String IComplianceDataRepository.SaveReconciliationQueueConfiguration(Int32 queueConfigurationID, String description, Decimal percentage, Int32 reviews, String InstutionHierarchyID, Int32 currentLoggedInID)
        {
            ReconciliationQueueNodeConfiguration recQueueNodeConfiguration = _dbContext.ReconciliationQueueNodeConfigurations
                    .Where(cond => cond.RQNC_ID == queueConfigurationID && !cond.RQNC_IsDeleted).FirstOrDefault();

            if (recQueueNodeConfiguration.IsNullOrEmpty())
            {
                recQueueNodeConfiguration = new ReconciliationQueueNodeConfiguration();
                recQueueNodeConfiguration.RQNC_CreatedByID = currentLoggedInID;
                recQueueNodeConfiguration.RQNC_CreatedOn = DateTime.Now;
                recQueueNodeConfiguration.RQNC_ReviewerCount = reviews;
                recQueueNodeConfiguration.RQNC_Description = description;
                recQueueNodeConfiguration.RQNC_RecordPercentage = percentage;
                recQueueNodeConfiguration.RQNC_DeptProgramMappingID = Convert.ToInt32(InstutionHierarchyID);

                _dbContext.ReconciliationQueueNodeConfigurations.AddObject(recQueueNodeConfiguration);
            }
            else
            {
                recQueueNodeConfiguration.RQNC_ModifiedByID = currentLoggedInID;
                recQueueNodeConfiguration.RQNC_ModifiedOn = DateTime.Now;
                recQueueNodeConfiguration.RQNC_ReviewerCount = reviews;
                recQueueNodeConfiguration.RQNC_Description = description;
                recQueueNodeConfiguration.RQNC_RecordPercentage = percentage;
                recQueueNodeConfiguration.RQNC_DeptProgramMappingID = Convert.ToInt32(InstutionHierarchyID);
            }

            if (_dbContext.SaveChanges() > AppConsts.NONE)
                return String.Empty;
            return "Data can not be saved";
        }

        Boolean IComplianceDataRepository.DeleteReconciliationQueueConfiguration(Int32 CurrentAssignmentConfigurationId, Int32 CurrentLoggedInUserId)
        {
            ReconciliationQueueNodeConfiguration recQueueNodeConfiguration = _dbContext.ReconciliationQueueNodeConfigurations
                    .Where(cond => cond.RQNC_ID == CurrentAssignmentConfigurationId && !cond.RQNC_IsDeleted).FirstOrDefault();
            if (!recQueueNodeConfiguration.IsNullOrEmpty())
            {
                recQueueNodeConfiguration.RQNC_ModifiedByID = CurrentLoggedInUserId;
                recQueueNodeConfiguration.RQNC_ModifiedOn = DateTime.Now;
                recQueueNodeConfiguration.RQNC_IsDeleted = true;
            }
            if (_dbContext.SaveChanges() > AppConsts.NONE)
                return true;
            return false;
        }
        Boolean IComplianceDataRepository.IsHierarchyNodeSettingAlreadyExists(Int32 CurrentAssignmentConfigurationId, Int32 InstitutionHierarchyID)
        {
            return _dbContext.ReconciliationQueueNodeConfigurations.Where(cond => cond.RQNC_ID != CurrentAssignmentConfigurationId
                && cond.RQNC_DeptProgramMappingID == InstitutionHierarchyID && !cond.RQNC_IsDeleted).Any();
        }
        #endregion
        #region UAT-4161
        Int32 IComplianceDataRepository.GetLastRecordToBeSyncAuditData()
        {
            ApplicantDataAudit DBDataAudit = _dbContext.ApplicantDataAudits.Where(cond => !cond.ADA_IsDeleted).OrderByDescending(ordBy => ordBy.ADA_ApplicantDataAuditID).FirstOrDefault();

            if (!DBDataAudit.IsNullOrEmpty())
            {
                return DBDataAudit.ADA_ApplicantDataAuditID;
            }
            return AppConsts.NONE;
        }

        List<ApplicantDataAudit> IComplianceDataRepository.GetApplicantDataAuditRecords(Int32 chunkSize, Int32 lastSyncId)
        {
            return _dbContext.ApplicantDataAudits.Where(cond => !cond.ADA_IsDeleted && cond.ADA_ApplicantDataAuditID > lastSyncId)
                                                 .OrderBy(ordBy => ordBy.ADA_ApplicantDataAuditID)
                                                 .Take(chunkSize).ToList();
        }


        #endregion

        public ApplicantComplianceAttributeData GetApplicantComplianceAttributeData(Int32 applicantItemDataId, Int32 complianceAttributeID)
        {
            String _viewDocCode = ComplianceAttributeDatatypes.View_Document.GetStringValue();
            return _dbContext.ApplicantComplianceAttributeDatas.Include(SysXEntityConstants.APPLICANT_COMPLIANCE_ITEMDATA).
                             Where(attData => attData.ApplicantComplianceItemID == applicantItemDataId && attData.ComplianceAttributeID == complianceAttributeID
                          && attData.IsDeleted == false && attData.ComplianceAttribute.lkpComplianceAttributeDatatype.Code == _viewDocCode).FirstOrDefault();
        }

        public ApplicantDocument GetApplicantDocumentByApplicantAttrDataID(int applAttrDataID)
        {

            ApplicantComplianceDocumentMap applicantComplianceDocumentMap = _dbContext.ApplicantComplianceDocumentMaps.Where(cond => cond.ApplicantComplianceAttributeID == applAttrDataID && !cond.IsDeleted).FirstOrDefault();
            if (applicantComplianceDocumentMap.IsNotNull())
            {
                Int32 appDocId = applicantComplianceDocumentMap.ApplicantDocumentID;
                return _dbContext.ApplicantDocuments
                        .Where(cond => !cond.IsDeleted && cond.ApplicantDocumentID == appDocId).FirstOrDefault();
            }
            return new ApplicantDocument();
        }

        //UAT-3876

        public bool CheckDataEntryForRequirementPackages(Int32 reqPkgSubscriptionId, Int32 clinicalRotationId, Int32 currentUserId)
        {
            IEnumerable<Int32> ArcdIDs = _dbContext.ApplicantRequirementCategoryDatas.
                Where(cond => cond.ARCD_RequirementPackageSubscriptionID.Equals(reqPkgSubscriptionId) && cond.ARCD_IsDeleted == false).Select(x => x.ARCD_ID);
            if (!_dbContext.ApplicantRequirementItemDatas.Any(cond => ArcdIDs.Contains(cond.ARID_RequirementCategoryDataID) && cond.ARID_CreatedByID == currentUserId && cond.ARID_IsDeleted == false))
                return true; // show tooltip if dataentry is not done.             
            else
                return false;

            //IEnumerable<Int32> reqPackageSubscriptionIDs = _dbContext.RequirementPackageSubscriptions.Where(x => x.RPS_ApplicantOrgUserID == currentUserId).Select(x => x.RPS_ID);
            //if (reqPackageSubscriptionIDs.IsNotNull())
            //{
            //    IEnumerable<Int32> ArcdIDs = _dbContext.ApplicantRequirementCategoryDatas.Where(cond => reqPackageSubscriptionIDs.Contains(cond.ARCD_RequirementPackageSubscriptionID)).Select(x => x.ARCD_ID);
            //    if (!_dbContext.ApplicantRequirementItemDatas.Any(cond => ArcdIDs.Contains(cond.ARID_RequirementCategoryDataID) && cond.ARID_CreatedByID == currentUserId))
            //    {
            //        return true; // show if dataentry is present in table other wise not. 
            //    }
            //    else
            //    {
            //        return false;
            //    }
            //}
            //return false;

        }

        #region UAT-4498

        public void InsertDummyLineItemResultCopy(String lineItemIds, Int32 currentLoggedInUserId)
        {
            EntityConnection connection = _dbContext.Connection as EntityConnection;

            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                SqlCommand command = new SqlCommand("ams.usp_InsertDummyLineItemResultCopy", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@PSLIIDs", lineItemIds);
                command.Parameters.AddWithValue("@CurrentLoggedInUserID", currentLoggedInUserId);

                if (con.State == ConnectionState.Closed)
                    con.Open();

                command.ExecuteNonQuery();
                con.Close();
            }
        }

        public Int32 CheckIsDummyLineItemPkgPaid(Int32 orderId)
        {
            Int32 bkgOrderId = AppConsts.NONE;
            string paidStatusCode = ApplicantOrderStatus.Paid.GetStringValue();
            List<Int32> lstBOPIDs = new List<Int32>();

            String bkgPkgType = OrderPackageTypes.BACKGROUND_PACKAGE.GetStringValue();
            String bkgAndCompliancePkgType = OrderPackageTypes.COMPLIANCE_AND_BACKGROUMD_PACKAGE.GetStringValue();


            Order order = _dbContext.Orders.Where(cond => !cond.IsDeleted && cond.OrderID == orderId && (cond.lkpOrderPackageType.OPT_Code == bkgPkgType
                                      || cond.lkpOrderPackageType.OPT_Code == bkgAndCompliancePkgType)).FirstOrDefault();

            if (!order.IsNullOrEmpty() && !order.BkgOrders.IsNullOrEmpty())
            {
                BkgOrder bkgOrder = order.BkgOrders.FirstOrDefault();

                if (!bkgOrder.BkgOrderPackages.IsNullOrEmpty() && bkgOrder.BkgOrderPackages.Count > AppConsts.NONE)
                {
                    List<BkgOrderPackage> lstBkgOrderPackage = bkgOrder.BkgOrderPackages.Where(cnd => !cnd.BOP_IsDeleted
                                                                              && cnd.BkgOrderPackageSvcGroups.Any(svcGrp => !svcGrp.OPSG_IsDeleted
                                                                              && svcGrp.BkgOrderPackageSvcs.Any(svc => !svc.BOPS_IsDeleted
                                                                              && svc.BkgOrderPackageSvcLineItems.Any(lineItem => !lineItem.PSLI_IsDeleted
                                                                              && lineItem.PSLI_IsDummyLineItem)))).ToList();

                    if (!lstBkgOrderPackage.IsNullOrEmpty())
                    {
                        Boolean isBkgOrderPaid = false;
                        lstBOPIDs = lstBkgOrderPackage.Select(slct => slct.BOP_ID).ToList();

                        isBkgOrderPaid = order.OrderPaymentDetails.Any(opd => !opd.OPD_IsDeleted && opd.lkpOrderStatu.Code == paidStatusCode
                                                      && opd.OrderPkgPaymentDetails.Any(oppd => !oppd.OPPD_IsDeleted && oppd.OPPD_BkgOrderPackageID.HasValue
                                                      && lstBOPIDs.Contains(oppd.OPPD_BkgOrderPackageID.Value)));
                        if (isBkgOrderPaid)
                        {
                            bkgOrderId = bkgOrder.BOR_ID;
                        }
                    }
                }
            }
            return bkgOrderId;
        }

        #endregion

        public DateTime? GetReconciliationLastDate()
        {
            try
            {
                var objReconLastDate = _dbContext.ApplicantComplianceReconciliationDatas.OrderBy(x => x.ACRD_CreatedOn).FirstOrDefault();
                if (objReconLastDate != null)
                    return objReconLastDate.ACRD_CreatedOn;
                else
                    return null;

            }
            catch (Exception)
            {

                throw;
            }

        }

        public List<RecounciliationProductivityData> GetRecounciliationProductivityData(DateTime startDT)
        {
            try
            {
                List<RecounciliationProductivityData> lstRecounciliationProductivityData = new List<RecounciliationProductivityData>();

                EntityConnection connection = _dbContext.Connection as EntityConnection;
                using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
                {
                    SqlCommand command = new SqlCommand("Report.usp_ReconciliationProductivityReport", con);
                    command.CommandType = CommandType.StoredProcedure;
                    command.Parameters.AddWithValue("@StartDate", startDT);


                    SqlDataAdapter adp = new SqlDataAdapter();
                    adp.SelectCommand = command;
                    DataSet ds = new DataSet();
                    adp.Fill(ds);
                    if (ds.Tables.Count > 0)
                    {
                        if (ds.Tables[0].Rows.Count > 0)
                        {
                            // return ds.Tables[0];

                            IEnumerable<DataRow> rows = ds.Tables[0].AsEnumerable();
                            lstRecounciliationProductivityData = rows.Select(col =>
                                  new RecounciliationProductivityData
                                  {
                                      OrganizationUserID = col["UserID"] == DBNull.Value ? AppConsts.NONE : Convert.ToInt32(col["UserID"]),
                                      FirstName = col["FirstName"] == DBNull.Value ? string.Empty : col["FirstName"].ToString(),
                                      LastName = col["LastName"] == DBNull.Value ? string.Empty : col["LastName"].ToString(),
                                      ApprovedCount = col["ApprovedCount"] == DBNull.Value ? AppConsts.NONE : Convert.ToInt32(col["ApprovedCount"]),
                                      RejectedCount = col["RejectedCount"] == DBNull.Value ? AppConsts.NONE : Convert.ToInt32(col["RejectedCount"]),
                                      TotalCount = col["TotalCount"] == DBNull.Value ? AppConsts.NONE : Convert.ToInt32(col["TotalCount"])
                                  }).ToList();


                            return lstRecounciliationProductivityData;
                        }
                    }
                    return new List<RecounciliationProductivityData>();
                }
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }

        #region UAT-4558

        List<GenericDocumentMapping> IComplianceDataRepository.GetGenericDocMapping(Int32 recordId, String applicantDocTypeCode, String recordTypeCode)
        {
            return _dbContext.GenericDocumentMappings.Where(con => con.lkpRecordType.Code == recordTypeCode && con.GDM_RecordID == recordId
                                                              && con.ApplicantDocument.lkpDocumentType.DMT_Code == applicantDocTypeCode
                                                              && !con.ApplicantDocument.IsDeleted).ToList();
        }

        Boolean IComplianceDataRepository.SaveApplicantComplianceData(List<ApplicantComplianceCategoryData> lstApplicantComplianceCategoryDatas)
        {
            lstApplicantComplianceCategoryDatas.ForEach(acd =>
            {
                if (!_dbContext.ApplicantComplianceCategoryDatas.Where(c => !c.IsDeleted).Any(exist => exist.ComplianceCategoryID == acd.ComplianceCategoryID
                           && exist.PackageSubscriptionID == acd.PackageSubscriptionID))
                {
                    _dbContext.ApplicantComplianceCategoryDatas.AddObject(acd);
                }
            });

            if (_dbContext.SaveChanges() > AppConsts.NONE)
                return true;
            return false;
        }

        Boolean IComplianceDataRepository.SaveContextInDb()
        {
            if (_dbContext.SaveChanges() > AppConsts.NONE)
                return true;
            return false;
        }

        #endregion



        #region UAT-5031
        Boolean IComplianceDataRepository.SaveOrderPaymentInvoice(Int32 orderID, Int32 currentLoggedInUserId, Boolean modifyShipping)
        {
            EntityConnection connection = _dbContext.Connection as EntityConnection;
            using (SqlConnection con = new SqlConnection(connection.StoreConnection.ConnectionString))
            {
                con.Open();
                SqlCommand command = new SqlCommand("ams.usp_SaveOrderPaymentInvoice", con);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@OrderID", orderID);
                command.Parameters.AddWithValue("@CurrentLoggedInUserId", currentLoggedInUserId);
                command.Parameters.AddWithValue("@ModifyShipping", modifyShipping);
                command.ExecuteScalar();
                return true;
            }
        }
        #endregion



    }
}