//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAL.PDFConversion {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ApplicantDoc", Namespace="http://schemas.datacontract.org/2004/07/INTSOF.Queues")]
    [System.SerializableAttribute()]
    public partial class ApplicantDoc : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ApplicantDocumentIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.Guid> CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ConversionNotesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CreatedByIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreatedOnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DocumentPathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> DocumentTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsCompressedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsDeletedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsPdfDocumnetFormFlatteningField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MIMEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ModifiedByIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ModifiedOnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> OrganizationUserIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OriginalDocMD5HashField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> OriginalDocSizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PdfDocPathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PdfFileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> SizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TotalPagesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ApplicantDocumentID {
            get {
                return this.ApplicantDocumentIDField;
            }
            set {
                if ((this.ApplicantDocumentIDField.Equals(value) != true)) {
                    this.ApplicantDocumentIDField = value;
                    this.RaisePropertyChanged("ApplicantDocumentID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> Code {
            get {
                return this.CodeField;
            }
            set {
                if ((this.CodeField.Equals(value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ConversionNotes {
            get {
                return this.ConversionNotesField;
            }
            set {
                if ((object.ReferenceEquals(this.ConversionNotesField, value) != true)) {
                    this.ConversionNotesField = value;
                    this.RaisePropertyChanged("ConversionNotes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CreatedByID {
            get {
                return this.CreatedByIDField;
            }
            set {
                if ((this.CreatedByIDField.Equals(value) != true)) {
                    this.CreatedByIDField = value;
                    this.RaisePropertyChanged("CreatedByID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreatedOn {
            get {
                return this.CreatedOnField;
            }
            set {
                if ((this.CreatedOnField.Equals(value) != true)) {
                    this.CreatedOnField = value;
                    this.RaisePropertyChanged("CreatedOn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DocumentPath {
            get {
                return this.DocumentPathField;
            }
            set {
                if ((object.ReferenceEquals(this.DocumentPathField, value) != true)) {
                    this.DocumentPathField = value;
                    this.RaisePropertyChanged("DocumentPath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> DocumentType {
            get {
                return this.DocumentTypeField;
            }
            set {
                if ((this.DocumentTypeField.Equals(value) != true)) {
                    this.DocumentTypeField = value;
                    this.RaisePropertyChanged("DocumentType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsCompressed {
            get {
                return this.IsCompressedField;
            }
            set {
                if ((this.IsCompressedField.Equals(value) != true)) {
                    this.IsCompressedField = value;
                    this.RaisePropertyChanged("IsCompressed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDeleted {
            get {
                return this.IsDeletedField;
            }
            set {
                if ((this.IsDeletedField.Equals(value) != true)) {
                    this.IsDeletedField = value;
                    this.RaisePropertyChanged("IsDeleted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> IsPdfDocumnetFormFlattening {
            get {
                return this.IsPdfDocumnetFormFlatteningField;
            }
            set {
                if ((this.IsPdfDocumnetFormFlatteningField.Equals(value) != true)) {
                    this.IsPdfDocumnetFormFlatteningField = value;
                    this.RaisePropertyChanged("IsPdfDocumnetFormFlattening");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MIME {
            get {
                return this.MIMEField;
            }
            set {
                if ((object.ReferenceEquals(this.MIMEField, value) != true)) {
                    this.MIMEField = value;
                    this.RaisePropertyChanged("MIME");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ModifiedByID {
            get {
                return this.ModifiedByIDField;
            }
            set {
                if ((this.ModifiedByIDField.Equals(value) != true)) {
                    this.ModifiedByIDField = value;
                    this.RaisePropertyChanged("ModifiedByID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ModifiedOn {
            get {
                return this.ModifiedOnField;
            }
            set {
                if ((this.ModifiedOnField.Equals(value) != true)) {
                    this.ModifiedOnField = value;
                    this.RaisePropertyChanged("ModifiedOn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> OrganizationUserID {
            get {
                return this.OrganizationUserIDField;
            }
            set {
                if ((this.OrganizationUserIDField.Equals(value) != true)) {
                    this.OrganizationUserIDField = value;
                    this.RaisePropertyChanged("OrganizationUserID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OriginalDocMD5Hash {
            get {
                return this.OriginalDocMD5HashField;
            }
            set {
                if ((object.ReferenceEquals(this.OriginalDocMD5HashField, value) != true)) {
                    this.OriginalDocMD5HashField = value;
                    this.RaisePropertyChanged("OriginalDocMD5Hash");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> OriginalDocSize {
            get {
                return this.OriginalDocSizeField;
            }
            set {
                if ((this.OriginalDocSizeField.Equals(value) != true)) {
                    this.OriginalDocSizeField = value;
                    this.RaisePropertyChanged("OriginalDocSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PdfDocPath {
            get {
                return this.PdfDocPathField;
            }
            set {
                if ((object.ReferenceEquals(this.PdfDocPathField, value) != true)) {
                    this.PdfDocPathField = value;
                    this.RaisePropertyChanged("PdfDocPath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PdfFileName {
            get {
                return this.PdfFileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PdfFileNameField, value) != true)) {
                    this.PdfFileNameField = value;
                    this.RaisePropertyChanged("PdfFileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> Size {
            get {
                return this.SizeField;
            }
            set {
                if ((this.SizeField.Equals(value) != true)) {
                    this.SizeField = value;
                    this.RaisePropertyChanged("Size");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TotalPages {
            get {
                return this.TotalPagesField;
            }
            set {
                if ((this.TotalPagesField.Equals(value) != true)) {
                    this.TotalPagesField = value;
                    this.RaisePropertyChanged("TotalPages");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ApplicantDocToBeMerged", Namespace="http://schemas.datacontract.org/2004/07/INTSOF.Queues")]
    [System.SerializableAttribute()]
    public partial class ApplicantDocToBeMerged : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ApplicantDocumentIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PdfDocPathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TotalPagesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ApplicantDocumentID {
            get {
                return this.ApplicantDocumentIDField;
            }
            set {
                if ((this.ApplicantDocumentIDField.Equals(value) != true)) {
                    this.ApplicantDocumentIDField = value;
                    this.RaisePropertyChanged("ApplicantDocumentID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PdfDocPath {
            get {
                return this.PdfDocPathField;
            }
            set {
                if ((object.ReferenceEquals(this.PdfDocPathField, value) != true)) {
                    this.PdfDocPathField = value;
                    this.RaisePropertyChanged("PdfDocPath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TotalPages {
            get {
                return this.TotalPagesField;
            }
            set {
                if ((this.TotalPagesField.Equals(value) != true)) {
                    this.TotalPagesField = value;
                    this.RaisePropertyChanged("TotalPages");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ApplicantDocMerging", Namespace="http://schemas.datacontract.org/2004/07/INTSOF.Queues")]
    [System.SerializableAttribute()]
    public partial class ApplicantDocMerging : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ADM_ApplicantDocumentIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ADM_CreatedByIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ADM_CreatedOnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ADM_DocumentStatusIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ADM_EndPageNumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ADM_IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ADM_IsDeletedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ADM_MergingNotesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ADM_ModifiedByIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ADM_ModifiedOnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ADM_SequenceOrderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ADM_StartPageNumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ADM_TotalPagesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ADM_UnifiedPdfDocumentIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsFlattenFileField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UnifiedDocumentPathField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ADM_ApplicantDocumentID {
            get {
                return this.ADM_ApplicantDocumentIDField;
            }
            set {
                if ((this.ADM_ApplicantDocumentIDField.Equals(value) != true)) {
                    this.ADM_ApplicantDocumentIDField = value;
                    this.RaisePropertyChanged("ADM_ApplicantDocumentID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ADM_CreatedByID {
            get {
                return this.ADM_CreatedByIDField;
            }
            set {
                if ((this.ADM_CreatedByIDField.Equals(value) != true)) {
                    this.ADM_CreatedByIDField = value;
                    this.RaisePropertyChanged("ADM_CreatedByID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ADM_CreatedOn {
            get {
                return this.ADM_CreatedOnField;
            }
            set {
                if ((this.ADM_CreatedOnField.Equals(value) != true)) {
                    this.ADM_CreatedOnField = value;
                    this.RaisePropertyChanged("ADM_CreatedOn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ADM_DocumentStatusID {
            get {
                return this.ADM_DocumentStatusIDField;
            }
            set {
                if ((this.ADM_DocumentStatusIDField.Equals(value) != true)) {
                    this.ADM_DocumentStatusIDField = value;
                    this.RaisePropertyChanged("ADM_DocumentStatusID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ADM_EndPageNum {
            get {
                return this.ADM_EndPageNumField;
            }
            set {
                if ((this.ADM_EndPageNumField.Equals(value) != true)) {
                    this.ADM_EndPageNumField = value;
                    this.RaisePropertyChanged("ADM_EndPageNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ADM_ID {
            get {
                return this.ADM_IDField;
            }
            set {
                if ((this.ADM_IDField.Equals(value) != true)) {
                    this.ADM_IDField = value;
                    this.RaisePropertyChanged("ADM_ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ADM_IsDeleted {
            get {
                return this.ADM_IsDeletedField;
            }
            set {
                if ((this.ADM_IsDeletedField.Equals(value) != true)) {
                    this.ADM_IsDeletedField = value;
                    this.RaisePropertyChanged("ADM_IsDeleted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ADM_MergingNotes {
            get {
                return this.ADM_MergingNotesField;
            }
            set {
                if ((object.ReferenceEquals(this.ADM_MergingNotesField, value) != true)) {
                    this.ADM_MergingNotesField = value;
                    this.RaisePropertyChanged("ADM_MergingNotes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ADM_ModifiedByID {
            get {
                return this.ADM_ModifiedByIDField;
            }
            set {
                if ((this.ADM_ModifiedByIDField.Equals(value) != true)) {
                    this.ADM_ModifiedByIDField = value;
                    this.RaisePropertyChanged("ADM_ModifiedByID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ADM_ModifiedOn {
            get {
                return this.ADM_ModifiedOnField;
            }
            set {
                if ((this.ADM_ModifiedOnField.Equals(value) != true)) {
                    this.ADM_ModifiedOnField = value;
                    this.RaisePropertyChanged("ADM_ModifiedOn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ADM_SequenceOrder {
            get {
                return this.ADM_SequenceOrderField;
            }
            set {
                if ((this.ADM_SequenceOrderField.Equals(value) != true)) {
                    this.ADM_SequenceOrderField = value;
                    this.RaisePropertyChanged("ADM_SequenceOrder");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ADM_StartPageNum {
            get {
                return this.ADM_StartPageNumField;
            }
            set {
                if ((this.ADM_StartPageNumField.Equals(value) != true)) {
                    this.ADM_StartPageNumField = value;
                    this.RaisePropertyChanged("ADM_StartPageNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ADM_TotalPages {
            get {
                return this.ADM_TotalPagesField;
            }
            set {
                if ((this.ADM_TotalPagesField.Equals(value) != true)) {
                    this.ADM_TotalPagesField = value;
                    this.RaisePropertyChanged("ADM_TotalPages");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ADM_UnifiedPdfDocumentID {
            get {
                return this.ADM_UnifiedPdfDocumentIDField;
            }
            set {
                if ((this.ADM_UnifiedPdfDocumentIDField.Equals(value) != true)) {
                    this.ADM_UnifiedPdfDocumentIDField = value;
                    this.RaisePropertyChanged("ADM_UnifiedPdfDocumentID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsFlattenFile {
            get {
                return this.IsFlattenFileField;
            }
            set {
                if ((this.IsFlattenFileField.Equals(value) != true)) {
                    this.IsFlattenFileField = value;
                    this.RaisePropertyChanged("IsFlattenFile");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UnifiedDocumentPath {
            get {
                return this.UnifiedDocumentPathField;
            }
            set {
                if ((object.ReferenceEquals(this.UnifiedDocumentPathField, value) != true)) {
                    this.UnifiedDocumentPathField = value;
                    this.RaisePropertyChanged("UnifiedDocumentPath");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TupleOfstringArrayOfApplicantDocToBeMergedodubidBA", Namespace="http://schemas.datacontract.org/2004/07/System")]
    [System.SerializableAttribute()]
    public partial class TupleOfstringArrayOfApplicantDocToBeMergedodubidBA : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string m_Item1Field;
        
        private System.Collections.Generic.List<DAL.PDFConversion.ApplicantDocToBeMerged> m_Item2Field;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string m_Item1 {
            get {
                return this.m_Item1Field;
            }
            set {
                if ((object.ReferenceEquals(this.m_Item1Field, value) != true)) {
                    this.m_Item1Field = value;
                    this.RaisePropertyChanged("m_Item1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Collections.Generic.List<DAL.PDFConversion.ApplicantDocToBeMerged> m_Item2 {
            get {
                return this.m_Item2Field;
            }
            set {
                if ((object.ReferenceEquals(this.m_Item2Field, value) != true)) {
                    this.m_Item2Field = value;
                    this.RaisePropertyChanged("m_Item2");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PDFConversion.IPDFConversion")]
    public interface IPDFConversion {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPDFConversion/DoWork", ReplyAction="http://tempuri.org/IPDFConversion/DoWorkResponse")]
        string DoWork();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPDFConversion/DoWork", ReplyAction="http://tempuri.org/IPDFConversion/DoWorkResponse")]
        System.Threading.Tasks.Task<string> DoWorkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPDFConversion/GeneratePDF", ReplyAction="http://tempuri.org/IPDFConversion/GeneratePDFResponse")]
        byte[] GeneratePDF(string urlToConvert);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPDFConversion/GeneratePDF", ReplyAction="http://tempuri.org/IPDFConversion/GeneratePDFResponse")]
        System.Threading.Tasks.Task<byte[]> GeneratePDFAsync(string urlToConvert);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPDFConversion/ConvertApplicantDocumentToPDF", ReplyAction="http://tempuri.org/IPDFConversion/ConvertApplicantDocumentToPDFResponse")]
        System.Collections.Generic.List<DAL.PDFConversion.ApplicantDoc> ConvertApplicantDocumentToPDF(System.Collections.Generic.List<DAL.PDFConversion.ApplicantDoc> applicantDocuments, int tenantID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPDFConversion/ConvertApplicantDocumentToPDF", ReplyAction="http://tempuri.org/IPDFConversion/ConvertApplicantDocumentToPDFResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<DAL.PDFConversion.ApplicantDoc>> ConvertApplicantDocumentToPDFAsync(System.Collections.Generic.List<DAL.PDFConversion.ApplicantDoc> applicantDocuments, int tenantID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPDFConversion/AppendConvertedDocumentToPDF", ReplyAction="http://tempuri.org/IPDFConversion/AppendConvertedDocumentToPDFResponse")]
        System.Collections.Generic.List<DAL.PDFConversion.ApplicantDocMerging> AppendConvertedDocumentToPDF(int unifiedDocumentID, int tenantID, System.Collections.Generic.List<DAL.PDFConversion.ApplicantDocToBeMerged> applicantDocuments, string previousUnifiedPdfPath, int sequenceOrder, int previousPages, bool IsDocumentFlatten);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPDFConversion/AppendConvertedDocumentToPDF", ReplyAction="http://tempuri.org/IPDFConversion/AppendConvertedDocumentToPDFResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<DAL.PDFConversion.ApplicantDocMerging>> AppendConvertedDocumentToPDFAsync(int unifiedDocumentID, int tenantID, System.Collections.Generic.List<DAL.PDFConversion.ApplicantDocToBeMerged> applicantDocuments, string previousUnifiedPdfPath, int sequenceOrder, int previousPages, bool IsDocumentFlatten);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPDFConversion/ConvertDocumentToPDFForPrint", ReplyAction="http://tempuri.org/IPDFConversion/ConvertDocumentToPDFForPrintResponse")]
        string ConvertDocumentToPDFForPrint(int tenantID, System.Collections.Generic.List<DAL.PDFConversion.ApplicantDocToBeMerged> applicantDocumentsToPrint);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPDFConversion/ConvertDocumentToPDFForPrint", ReplyAction="http://tempuri.org/IPDFConversion/ConvertDocumentToPDFForPrintResponse")]
        System.Threading.Tasks.Task<string> ConvertDocumentToPDFForPrintAsync(int tenantID, System.Collections.Generic.List<DAL.PDFConversion.ApplicantDocToBeMerged> applicantDocumentsToPrint);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPDFConversion/DeleteAppDocumentFromUnifiedPDF", ReplyAction="http://tempuri.org/IPDFConversion/DeleteAppDocumentFromUnifiedPDFResponse")]
        string DeleteAppDocumentFromUnifiedPDF(int tenantID, int pagesToAdd, int newStartPageNumber, string previousUnifiedPdfPath, int unifiedDocumentID, bool isNeedToDeleteUnifiedDocument);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPDFConversion/DeleteAppDocumentFromUnifiedPDF", ReplyAction="http://tempuri.org/IPDFConversion/DeleteAppDocumentFromUnifiedPDFResponse")]
        System.Threading.Tasks.Task<string> DeleteAppDocumentFromUnifiedPDFAsync(int tenantID, int pagesToAdd, int newStartPageNumber, string previousUnifiedPdfPath, int unifiedDocumentID, bool isNeedToDeleteUnifiedDocument);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPDFConversion/MergeAttestationDocuments", ReplyAction="http://tempuri.org/IPDFConversion/MergeAttestationDocumentsResponse")]
        string MergeAttestationDocuments(int tenantID, string attestationDocPathToMerge, string previousAttestationPdfPath, int currentUserId, string fileNameToAppend, string fileName, bool deletePreviousAttestation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPDFConversion/MergeAttestationDocuments", ReplyAction="http://tempuri.org/IPDFConversion/MergeAttestationDocumentsResponse")]
        System.Threading.Tasks.Task<string> MergeAttestationDocumentsAsync(int tenantID, string attestationDocPathToMerge, string previousAttestationPdfPath, int currentUserId, string fileNameToAppend, string fileName, bool deletePreviousAttestation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPDFConversion/GetPdfPageDetails", ReplyAction="http://tempuri.org/IPDFConversion/GetPdfPageDetailsResponse")]
        System.Collections.Generic.List<DAL.PDFConversion.ApplicantDocToBeMerged> GetPdfPageDetails(System.Collections.Generic.List<DAL.PDFConversion.ApplicantDocToBeMerged> applicantDocToBeMergedList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPDFConversion/GetPdfPageDetails", ReplyAction="http://tempuri.org/IPDFConversion/GetPdfPageDetailsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<DAL.PDFConversion.ApplicantDocToBeMerged>> GetPdfPageDetailsAsync(System.Collections.Generic.List<DAL.PDFConversion.ApplicantDocToBeMerged> applicantDocToBeMergedList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPDFConversion/AppendConvertedUnifiedDocumentToPDF", ReplyAction="http://tempuri.org/IPDFConversion/AppendConvertedUnifiedDocumentToPDFResponse")]
        DAL.PDFConversion.TupleOfstringArrayOfApplicantDocToBeMergedodubidBA AppendConvertedUnifiedDocumentToPDF(System.Collections.Generic.List<DAL.PDFConversion.ApplicantDocToBeMerged> applicantDocuments);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPDFConversion/AppendConvertedUnifiedDocumentToPDF", ReplyAction="http://tempuri.org/IPDFConversion/AppendConvertedUnifiedDocumentToPDFResponse")]
        System.Threading.Tasks.Task<DAL.PDFConversion.TupleOfstringArrayOfApplicantDocToBeMergedodubidBA> AppendConvertedUnifiedDocumentToPDFAsync(System.Collections.Generic.List<DAL.PDFConversion.ApplicantDocToBeMerged> applicantDocuments);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPDFConversionChannel : DAL.PDFConversion.IPDFConversion, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PDFConversionClient : System.ServiceModel.ClientBase<DAL.PDFConversion.IPDFConversion>, DAL.PDFConversion.IPDFConversion {
        
        public PDFConversionClient() {
        }
        
        public PDFConversionClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PDFConversionClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PDFConversionClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PDFConversionClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string DoWork() {
            return base.Channel.DoWork();
        }
        
        public System.Threading.Tasks.Task<string> DoWorkAsync() {
            return base.Channel.DoWorkAsync();
        }
        
        public byte[] GeneratePDF(string urlToConvert) {
            return base.Channel.GeneratePDF(urlToConvert);
        }
        
        public System.Threading.Tasks.Task<byte[]> GeneratePDFAsync(string urlToConvert) {
            return base.Channel.GeneratePDFAsync(urlToConvert);
        }
        
        public System.Collections.Generic.List<DAL.PDFConversion.ApplicantDoc> ConvertApplicantDocumentToPDF(System.Collections.Generic.List<DAL.PDFConversion.ApplicantDoc> applicantDocuments, int tenantID) {
            return base.Channel.ConvertApplicantDocumentToPDF(applicantDocuments, tenantID);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<DAL.PDFConversion.ApplicantDoc>> ConvertApplicantDocumentToPDFAsync(System.Collections.Generic.List<DAL.PDFConversion.ApplicantDoc> applicantDocuments, int tenantID) {
            return base.Channel.ConvertApplicantDocumentToPDFAsync(applicantDocuments, tenantID);
        }
        
        public System.Collections.Generic.List<DAL.PDFConversion.ApplicantDocMerging> AppendConvertedDocumentToPDF(int unifiedDocumentID, int tenantID, System.Collections.Generic.List<DAL.PDFConversion.ApplicantDocToBeMerged> applicantDocuments, string previousUnifiedPdfPath, int sequenceOrder, int previousPages, bool IsDocumentFlatten) {
            return base.Channel.AppendConvertedDocumentToPDF(unifiedDocumentID, tenantID, applicantDocuments, previousUnifiedPdfPath, sequenceOrder, previousPages, IsDocumentFlatten);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<DAL.PDFConversion.ApplicantDocMerging>> AppendConvertedDocumentToPDFAsync(int unifiedDocumentID, int tenantID, System.Collections.Generic.List<DAL.PDFConversion.ApplicantDocToBeMerged> applicantDocuments, string previousUnifiedPdfPath, int sequenceOrder, int previousPages, bool IsDocumentFlatten) {
            return base.Channel.AppendConvertedDocumentToPDFAsync(unifiedDocumentID, tenantID, applicantDocuments, previousUnifiedPdfPath, sequenceOrder, previousPages, IsDocumentFlatten);
        }
        
        public string ConvertDocumentToPDFForPrint(int tenantID, System.Collections.Generic.List<DAL.PDFConversion.ApplicantDocToBeMerged> applicantDocumentsToPrint) {
            return base.Channel.ConvertDocumentToPDFForPrint(tenantID, applicantDocumentsToPrint);
        }
        
        public System.Threading.Tasks.Task<string> ConvertDocumentToPDFForPrintAsync(int tenantID, System.Collections.Generic.List<DAL.PDFConversion.ApplicantDocToBeMerged> applicantDocumentsToPrint) {
            return base.Channel.ConvertDocumentToPDFForPrintAsync(tenantID, applicantDocumentsToPrint);
        }
        
        public string DeleteAppDocumentFromUnifiedPDF(int tenantID, int pagesToAdd, int newStartPageNumber, string previousUnifiedPdfPath, int unifiedDocumentID, bool isNeedToDeleteUnifiedDocument) {
            return base.Channel.DeleteAppDocumentFromUnifiedPDF(tenantID, pagesToAdd, newStartPageNumber, previousUnifiedPdfPath, unifiedDocumentID, isNeedToDeleteUnifiedDocument);
        }
        
        public System.Threading.Tasks.Task<string> DeleteAppDocumentFromUnifiedPDFAsync(int tenantID, int pagesToAdd, int newStartPageNumber, string previousUnifiedPdfPath, int unifiedDocumentID, bool isNeedToDeleteUnifiedDocument) {
            return base.Channel.DeleteAppDocumentFromUnifiedPDFAsync(tenantID, pagesToAdd, newStartPageNumber, previousUnifiedPdfPath, unifiedDocumentID, isNeedToDeleteUnifiedDocument);
        }
        
        public string MergeAttestationDocuments(int tenantID, string attestationDocPathToMerge, string previousAttestationPdfPath, int currentUserId, string fileNameToAppend, string fileName, bool deletePreviousAttestation) {
            return base.Channel.MergeAttestationDocuments(tenantID, attestationDocPathToMerge, previousAttestationPdfPath, currentUserId, fileNameToAppend, fileName, deletePreviousAttestation);
        }
        
        public System.Threading.Tasks.Task<string> MergeAttestationDocumentsAsync(int tenantID, string attestationDocPathToMerge, string previousAttestationPdfPath, int currentUserId, string fileNameToAppend, string fileName, bool deletePreviousAttestation) {
            return base.Channel.MergeAttestationDocumentsAsync(tenantID, attestationDocPathToMerge, previousAttestationPdfPath, currentUserId, fileNameToAppend, fileName, deletePreviousAttestation);
        }
        
        public System.Collections.Generic.List<DAL.PDFConversion.ApplicantDocToBeMerged> GetPdfPageDetails(System.Collections.Generic.List<DAL.PDFConversion.ApplicantDocToBeMerged> applicantDocToBeMergedList) {
            return base.Channel.GetPdfPageDetails(applicantDocToBeMergedList);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<DAL.PDFConversion.ApplicantDocToBeMerged>> GetPdfPageDetailsAsync(System.Collections.Generic.List<DAL.PDFConversion.ApplicantDocToBeMerged> applicantDocToBeMergedList) {
            return base.Channel.GetPdfPageDetailsAsync(applicantDocToBeMergedList);
        }
        
        public DAL.PDFConversion.TupleOfstringArrayOfApplicantDocToBeMergedodubidBA AppendConvertedUnifiedDocumentToPDF(System.Collections.Generic.List<DAL.PDFConversion.ApplicantDocToBeMerged> applicantDocuments) {
            return base.Channel.AppendConvertedUnifiedDocumentToPDF(applicantDocuments);
        }
        
        public System.Threading.Tasks.Task<DAL.PDFConversion.TupleOfstringArrayOfApplicantDocToBeMergedodubidBA> AppendConvertedUnifiedDocumentToPDFAsync(System.Collections.Generic.List<DAL.PDFConversion.ApplicantDocToBeMerged> applicantDocuments) {
            return base.Channel.AppendConvertedUnifiedDocumentToPDFAsync(applicantDocuments);
        }
    }
}
