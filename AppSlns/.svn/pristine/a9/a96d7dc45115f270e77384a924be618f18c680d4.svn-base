#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;


namespace CoreWeb
{

    [System.Data.Linq.Mapping.DatabaseAttribute(Name = "HelpDesk")]
    public partial class HelpDeskDataContext : System.Data.Linq.DataContext
    {

        private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();

        #region Extensibility Method Definitions
        partial void OnCreated();
        partial void InsertMessage(Message instance);
        partial void UpdateMessage(Message instance);
        partial void DeleteMessage(Message instance);
        #endregion

        public HelpDeskDataContext() :
            base(global::System.Configuration.ConfigurationManager.ConnectionStrings["HelpDeskConnectionString"].ConnectionString, mappingSource)
        {
            OnCreated();
        }

        public HelpDeskDataContext(string connection) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public HelpDeskDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public HelpDeskDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public HelpDeskDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public System.Data.Linq.Table<Customer> Customers
        {
            get
            {
                return this.GetTable<Customer>();
            }
        }

        public System.Data.Linq.Table<Message> Messages
        {
            get
            {
                return this.GetTable<Message>();
            }
        }
    }

    [Table(Name = "dbo.Customers")]
    public partial class Customer
    {

        private string _CustomerID;

        private string _CompanyName;

        private string _ContactName;

        private string _ContactTitle;

        private string _Address;

        private string _City;

        private string _Region;

        private string _PostalCode;

        private string _Country;

        private string _Phone;

        private string _Fax;

        private System.Nullable<bool> _Bool;

        public Customer()
        {
        }

        [Column(Storage = "_CustomerID", DbType = "NChar(5) NOT NULL", CanBeNull = false)]
        public string CustomerID
        {
            get
            {
                return this._CustomerID;
            }
            set
            {
                if ((this._CustomerID != value))
                {
                    this._CustomerID = value;
                }
            }
        }

        [Column(Storage = "_CompanyName", DbType = "NVarChar(40) NOT NULL", CanBeNull = false)]
        public string CompanyName
        {
            get
            {
                return this._CompanyName;
            }
            set
            {
                if ((this._CompanyName != value))
                {
                    this._CompanyName = value;
                }
            }
        }

        [Column(Storage = "_ContactName", DbType = "NVarChar(30)")]
        public string ContactName
        {
            get
            {
                return this._ContactName;
            }
            set
            {
                if ((this._ContactName != value))
                {
                    this._ContactName = value;
                }
            }
        }

        [Column(Storage = "_ContactTitle", DbType = "NVarChar(30)")]
        public string ContactTitle
        {
            get
            {
                return this._ContactTitle;
            }
            set
            {
                if ((this._ContactTitle != value))
                {
                    this._ContactTitle = value;
                }
            }
        }

        [Column(Storage = "_Address", DbType = "NVarChar(60)")]
        public string Address
        {
            get
            {
                return this._Address;
            }
            set
            {
                if ((this._Address != value))
                {
                    this._Address = value;
                }
            }
        }

        [Column(Storage = "_City", DbType = "NVarChar(15)")]
        public string City
        {
            get
            {
                return this._City;
            }
            set
            {
                if ((this._City != value))
                {
                    this._City = value;
                }
            }
        }

        [Column(Storage = "_Region", DbType = "NVarChar(15)")]
        public string Region
        {
            get
            {
                return this._Region;
            }
            set
            {
                if ((this._Region != value))
                {
                    this._Region = value;
                }
            }
        }

        [Column(Storage = "_PostalCode", DbType = "NVarChar(10)")]
        public string PostalCode
        {
            get
            {
                return this._PostalCode;
            }
            set
            {
                if ((this._PostalCode != value))
                {
                    this._PostalCode = value;
                }
            }
        }

        [Column(Storage = "_Country", DbType = "NVarChar(15)")]
        public string Country
        {
            get
            {
                return this._Country;
            }
            set
            {
                if ((this._Country != value))
                {
                    this._Country = value;
                }
            }
        }

        [Column(Storage = "_Phone", DbType = "NVarChar(24)")]
        public string Phone
        {
            get
            {
                return this._Phone;
            }
            set
            {
                if ((this._Phone != value))
                {
                    this._Phone = value;
                }
            }
        }

        [Column(Storage = "_Fax", DbType = "NVarChar(24)")]
        public string Fax
        {
            get
            {
                return this._Fax;
            }
            set
            {
                if ((this._Fax != value))
                {
                    this._Fax = value;
                }
            }
        }

        [Column(Storage = "_Bool", DbType = "Bit")]
        public System.Nullable<bool> Bool
        {
            get
            {
                return this._Bool;
            }
            set
            {
                if ((this._Bool != value))
                {
                    this._Bool = value;
                }
            }
        }
    }

    [Table(Name = "dbo.Messages")]
    public partial class Message : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _MessageID;

        private string _Folder;

        private string _Body;

        private string _From;

        private string _Subject;

        private System.Nullable<System.DateTime> _Received;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnMessageIDChanging(int value);
        partial void OnMessageIDChanged();
        partial void OnFolderChanging(string value);
        partial void OnFolderChanged();
        partial void OnBodyChanging(string value);
        partial void OnBodyChanged();
        partial void OnFromChanging(string value);
        partial void OnFromChanged();
        partial void OnSubjectChanging(string value);
        partial void OnSubjectChanged();
        partial void OnReceivedChanging(System.Nullable<System.DateTime> value);
        partial void OnReceivedChanged();
        #endregion

        public Message()
        {
            OnCreated();
        }

        [Column(Storage = "_MessageID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int MessageID
        {
            get
            {
                return this._MessageID;
            }
            set
            {
                if ((this._MessageID != value))
                {
                    this.OnMessageIDChanging(value);
                    this.SendPropertyChanging();
                    this._MessageID = value;
                    this.SendPropertyChanged("MessageID");
                    this.OnMessageIDChanged();
                }
            }
        }

        [Column(Storage = "_Folder", DbType = "NVarChar(256)")]
        public string Folder
        {
            get
            {
                return this._Folder;
            }
            set
            {
                if ((this._Folder != value))
                {
                    this.OnFolderChanging(value);
                    this.SendPropertyChanging();
                    this._Folder = value;
                    this.SendPropertyChanged("Folder");
                    this.OnFolderChanged();
                }
            }
        }

        [Column(Storage = "_Body", DbType = "NVarChar(MAX)")]
        public string Body
        {
            get
            {
                return this._Body;
            }
            set
            {
                if ((this._Body != value))
                {
                    this.OnBodyChanging(value);
                    this.SendPropertyChanging();
                    this._Body = value;
                    this.SendPropertyChanged("Body");
                    this.OnBodyChanged();
                }
            }
        }

        [Column(Name = "[From]", Storage = "_From", DbType = "NVarChar(256)")]
        public string From
        {
            get
            {
                return this._From;
            }
            set
            {
                if ((this._From != value))
                {
                    this.OnFromChanging(value);
                    this.SendPropertyChanging();
                    this._From = value;
                    this.SendPropertyChanged("From");
                    this.OnFromChanged();
                }
            }
        }

        [Column(Storage = "_Subject", DbType = "NVarChar(256)")]
        public string Subject
        {
            get
            {
                return this._Subject;
            }
            set
            {
                if ((this._Subject != value))
                {
                    this.OnSubjectChanging(value);
                    this.SendPropertyChanging();
                    this._Subject = value;
                    this.SendPropertyChanged("Subject");
                    this.OnSubjectChanged();
                }
            }
        }

        [Column(Storage = "_Received", DbType = "DateTime")]
        public System.Nullable<System.DateTime> Received
        {
            get
            {
                return this._Received;
            }
            set
            {
                if ((this._Received != value))
                {
                    this.OnReceivedChanging(value);
                    this.SendPropertyChanging();
                    this._Received = value;
                    this.SendPropertyChanged("Received");
                    this.OnReceivedChanged();
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
#pragma warning restore 1591
}