using Business.Interfaces;
using Business.ReportExecutionService;
using Entity.ClientEntity;
using INTSOF.Contracts;
using INTSOF.ServiceUtil;
using INTSOF.UI.Contract;
using INTSOF.UI.Contract.BkgSetup;
using INTSOF.UI.Contract.ComplianceManagement;
using INTSOF.UI.Contract.ComplianceOperation;
using INTSOF.UI.Contract.ScheduleTask;
using INTSOF.UI.Contract.SearchUI;
using INTSOF.Utils;
using INTSOF.Utils.CommonPocoClasses;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Configuration;
using System.Data;
using System.Data.Entity.Core.Objects;
using System.IO;
using System.Linq;
using System.Web;
using System.Web.Configuration;
using System.Xml;
using INTSOF.UI.Contract.ComplianceRuleEngine;
using System.Text;
using CoreWeb.IntsofLoggerModel.Interface;
using CoreWeb.IntsofExceptionModel.Interface;
using INTSOF.ServiceDataContracts.Modules.Common;
using INTSOF.UI.Contract.PackageBundleManagement;
using INTSOF.ServiceDataContracts.Modules.ApplicantClinicalRotation;
using INTSOF.ServiceDataContracts.Modules.ClinicalRotation;
using INTSOF.UI.Contract.BkgOperations;
using System.Web.UI.WebControls;
using INTSOF.ServiceDataContracts.Core;
using INTSOF.UI.Contract.SystemSetUp;
using INTSOF.UI.Contract.Templates;
using iTextSharp.text.pdf;
using iTextSharp.text;
using Org.BouncyCastle.Crypto;
using Org.BouncyCastle.Pkcs;
using Org.BouncyCastle.X509;
using System.Runtime.Serialization.Formatters.Binary;
using INTSOF.UI.Contract.MobileAPI;
using INTSOF.UI.Contract.RecounciliationQueue;
using System.Reflection;
using INTSOF.UI.Contract.FingerPrintSetup;
using System.Data.Entity.Core.Objects.DataClasses;

namespace Business.RepoManagers
{
    public class ComplianceDataManager
    {


        public static lkpOrderRequestType GetLKPOrderRequestType(string code, Int32 tenantID)
        {
            try
            {
                return LookupManager.GetLookUpData<Entity.ClientEntity.lkpOrderRequestType>(tenantID).FirstOrDefault(ps => ps.ORT_Code == code && (ps.ORT_Active ?? false));
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static List<PkgSvcSetupContract> GetPackageTreeForServiceMapping(Int32 tenantId, String packageIds)
        {
            try
            {
                DataTable dt = BALUtils.GetComplianceDataRepoInstance(tenantId).GetPackageTreeForServiceMapping(packageIds);
                return SetDataForTree(dt);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        private static List<PkgSvcSetupContract> SetDataForTree(DataTable table)
        {
            try
            {
                IEnumerable<DataRow> rows = table.AsEnumerable();
                return rows.Select(x => new PkgSvcSetupContract
                {
                    DataId = Convert.ToInt32(Convert.ToString(x["DataId"])),
                    ParentDataId = 1,
                    Name = Convert.ToString(x["Name"]),
                    NodeId = Convert.ToString(x["NodeId"]),
                    ParentNodeId = x["ParentNodeId"].IsNotNull() ? Convert.ToString(x["ParentNodeId"]) : null,
                    Code = Convert.ToString(x["Code"]),
                    ATTRDisplayOrder = Convert.ToInt32(Convert.ToString(x["DisplayOrder"])),
                    // ColorCode = Convert.ToString(x["NodeColorCode"]),
                    //Level = Convert.ToInt32(Convert.ToString("Levels")),
                }).ToList();
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static PackageSubscription GetPackageSubscriptionByPackageID(Int32 compliancePackageID, Int32 organizationUserID, Int32 tenantID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).GetPackageSubscriptionByPackageID(compliancePackageID, organizationUserID);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static PackageSubscription GetPackageSubscriptionByID(Int32 tenantID, Int32 packageSubscriptionID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).GetPackageSubscriptionByID(tenantID, packageSubscriptionID);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static String GetNodeHiearchy(Int32 tenantID, Int32 packageSubscriptionID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).GetNodeHiearchy(packageSubscriptionID);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static ApplicantComplianceItemData GetApplicantData(Int32 packageId, Int32 complianceCategoryId, Int32 complianceItemId, Int32 organizationUserId, Int32 tenantId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetApplicantData(packageId, complianceCategoryId, complianceItemId, organizationUserId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }


        /// <summary>
        /// Get the UserData from Security database, by OrganizationUserID.
        /// </summary>
        /// <param name="organisationUserID"></param>
        /// <returns></returns>
        public static OrganizationUserContract GetUserData(Int32 organisationUserId, Int32 tenantId)
        {
            try
            {
                var data = BALUtils.GetClinicalRotationRepoInstance(tenantId).GetUserData(organisationUserId);
                return ConvertEntityToOrganizationUserContract(data);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }


        public static ComplianceSaveResponse SaveApplicantData(ApplicantComplianceCategoryData applicantCategoryData, ApplicantComplianceItemData applicantItemData, List<ApplicantComplianceAttributeData> lstApplicantData, Int32 createdModifiedById, Dictionary<Int32, Int32> attributeDocuments, String categoryComplianceStatus, String itemComplianceStatus, Int32 packageId, Boolean isUIValidationApplicable, Int32 packageSubscriptionId, Int32 tenantId, Dictionary<Int32, Int32> viewAttributeDocuments, Int32 orgUsrID)
        {
            try
            {
                var lkpObjectType = LookupManager.GetLookUpData<Entity.ClientEntity.lkpObjectType>(tenantId).Where(x => x.OT_IsDeleted == false).ToList();
                AssignmentProperty assignmentProperty = BALUtils.GetComplianceSetupRepoInstance(tenantId).FetchAssignmentOptions(packageId, lkpObjectType, applicantCategoryData.ComplianceCategoryID, applicantItemData.ComplianceItemID);
                List<lkpItemMovementType> lstItemMovementTypes = GetlkpItemMovementType(tenantId);
                List<lkpObjectType> lstObjectTypes = GetlkpObjectType(tenantId);

                return BALUtils.GetComplianceDataRepoInstance(tenantId).SaveApplicantData(applicantCategoryData, applicantItemData, lstApplicantData, createdModifiedById, attributeDocuments, categoryComplianceStatus, packageId, isUIValidationApplicable, assignmentProperty, packageSubscriptionId, lstItemMovementTypes, lstObjectTypes, true, viewAttributeDocuments, orgUsrID, tenantId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static ComplianceSaveResponse DeleteApplicantItemAttributeData(Int32 applicantComplianceItemId, Int32 currentUserId, Int32 tenantId, String DeletedReasonCode, Int32 AppOrgUserID)
        {
            try
            {
                ComplianceSaveResponse tempCompSaveResponse = BALUtils.GetComplianceDataRepoInstance(tenantId).DeleteApplicantItemAttributeData(applicantComplianceItemId, currentUserId, DeletedReasonCode, AppOrgUserID);
                tempCompSaveResponse.SaveStatus = true;
                return tempCompSaveResponse;

            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static ApplicantComplianceItemData SetItemReviewerTypeProperties(ApplicantComplianceItemData itemData, List<ListItemAssignmentProperties> lstItemAssignmentProperties, Nullable<Boolean> isExceptionApplied = false)
        {
            if (isExceptionApplied.Value)
            {
                lstItemAssignmentProperties = lstItemAssignmentProperties.Where(obj => obj.ComplianceItemId == itemData.ComplianceItemID).ToList();
            }
            else
                lstItemAssignmentProperties = lstItemAssignmentProperties.Where(obj => obj.ComplianceItemId == itemData.ComplianceItemID && obj.ApprovalRequired == true).ToList();

            if (lstItemAssignmentProperties.Any(obj => obj.ReviewerTypeCode == LkpReviewerType.Admin))
            {
                itemData.IsReviewerTypeAdmin = true;
            }
            else
            {
                itemData.IsReviewerTypeAdmin = false;
            }

            if (lstItemAssignmentProperties.Any(obj => obj.ReviewerTypeCode == LkpReviewerType.ClientAdmin))
            {
                itemData.IsReviewerTypeClientAdmin = true;
            }
            else
            {
                itemData.IsReviewerTypeClientAdmin = false;
            }

            if (lstItemAssignmentProperties.Any(obj => obj.ThirdPartyReviewerUserId.IsNotNull() || obj.ReviewerTenantId.IsNotNull()))
            {
                itemData.IsReviewerTypeThirdParty = true;
            }
            else
            {
                itemData.IsReviewerTypeThirdParty = false;
            }
            return itemData;
        }

        /// <summary>
        /// List of available Items for Data entry in dropdown
        /// </summary>
        /// <param name="packageId"></param>
        /// <param name="categoryID"></param>
        /// <param name="itemId"></param>
        /// <param name="currentUserId"></param>
        /// <param name="tenantId"></param>
        /// <returns></returns>
        public static List<ComplianceItem> GetAvailableDataEntryItems(Int32 packageId, Int32 categoryID, Int32 currentUserId, Int32 tenantId, Int32 currentSelectedItem = 0)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetAvailableDataEntryItems(packageId, categoryID, currentUserId, currentSelectedItem);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
            }
            return null;
        }

        /// <summary>
        /// Item for which form is to be generated
        /// </summary>
        /// <param name="clientComplianceItemId"></param>
        /// <param name="tenantId"></param>
        /// <returns></returns>
        public static ComplianceItem GetDataEntryComplianceItem(Int32 itemId, Int32 tenantId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetDataEntryComplianceItem(itemId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }
        #region UAT-3083
        public static Tuple<Boolean, Int32> CheckItemPayment(Int32 tenantId, Int32 entityID, Int32 itemId, Boolean isRequirement)
        {
            try
            {
                String OrderStatusCode = "OSPAD";
                Int32 OrderStatusID = LookupManager.GetLookUpData<Entity.ClientEntity.lkpOrderStatu>(tenantId).FirstOrDefault(ps => ps.Code == OrderStatusCode && !ps.IsDeleted).OrderStatusID;
                return BALUtils.GetComplianceDataRepoInstance(tenantId).CheckItemPayment(entityID, OrderStatusID, itemId, isRequirement);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }
        #endregion
        public static Boolean IsItemStatusApproved(Int32 itemId, Int32 tenantId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).IsItemStatusApproved(itemId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }

        }

        /// <summary>
        /// Get the category details for selected category in the applicant dynamic form, with explanaotry Notes.
        /// </summary>
        /// <param name="complianceCategoryId">Id of the selected category.</param>
        /// <returns>Details of the selected category.</returns>
        public static ComplianceCategory GetComplianceCategoryDetails(Int32 complianceCategoryId, Int32 tenantID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).GetComplianceCategoryDetails(complianceCategoryId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static List<CatUpdatedByLatestInfo> GetCatUpdatedByLatestInfo(Int32 categoryID, Int32 packageSubscriptionID, Int32 tenantID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).GetCatUpdatedByLatestInfo(categoryID, packageSubscriptionID);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Get the category details for selected category in the applicant dynamic form, with explanaotry Notes.
        /// </summary>
        /// <param name="complianceCategoryId">Id of the selected PackageSubscriptionID.</param>
        /// <returns>Details of the selected category.</returns>
        public static List<INTSOF.Utils.CommonPocoClasses.ComplianceCategoryPocoClass> GetApplicantComplianceCategoryData(Int32 PackageSubscriptionID, Int32 tenantID)
        {
            try
            {
                List<INTSOF.Utils.CommonPocoClasses.ComplianceCategoryPocoClass> _lst = BALUtils.GetComplianceDataRepoInstance(tenantID).GetApplicantComplianceCategoryData(PackageSubscriptionID);

                Dictionary<Int32, Boolean> LstComplncRqdMapping = BALUtils.GetComplianceSetupRepoInstance(tenantID).GetComplianceRqdForPackage(_lst.FirstOrDefault().PackageId);

                // Update IsComplianceRequired based on the Start Date, End Date and Current setting.
                foreach (var cpcc in _lst)
                {
                    cpcc.IsComplianceRequired = LstComplncRqdMapping.FirstOrDefault(x => x.Key == cpcc.CPC_ID).Value;
                }

                return _lst;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Check If Applicant Has Placed Order.
        /// </summary>
        /// <param name="tenantID">tenantID of logged in user</param>
        /// <param name="currentLoggedInUserId">logged in user id</param>
        /// <returns>Details of the selected category.</returns>
        public static Boolean CheckIfApplicantHasPlacedOrder(Int32 tenantID, Int32 currentLoggedInUserId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).CheckIfApplicantHasPlacedOrder(currentLoggedInUserId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }


        /// <summary>
        /// Get the applicant orders to check if applicant has placed any order and 
        /// user further to check if any payment is due.
        /// </summary>
        /// <param name="tenantID">tenantID of logged in user</param>
        /// <param name="currentLoggedInUserId">logged in user id</param>
        /// <returns>Details of the selected category.</returns>
        public static List<Order> GetApplicantOrders(Int32 tenantID, Int32 currentLoggedInUserId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).GetApplicantOrders(currentLoggedInUserId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Check If Applicant Has any Order with Payment Due.
        /// </summary>
        /// <param name="tenantID">tenantID of logged in user</param>
        /// <param name="currentLoggedInUserId">logged in user id</param>
        /// <returns>True/False.</returns>
        public static Boolean CheckIfApplicantHasPaymentDue(Int32 tenantID, Int32 currentLoggedInUserId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).CheckIfApplicantHasPaymentDue(currentLoggedInUserId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Check If Applicant Has any Order with Payment Due.
        /// </summary>
        /// <param name="tenantID">tenantID of logged in user</param>
        /// <param name="currentLoggedInUserId">logged in user id</param>
        /// <returns>True/False.</returns>
        public static Boolean CheckApplicantPaymentDue(Int32 currentLoggedInUserId, List<Order> lstOrders, Int32 tenantID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).CheckApplicantPaymentDue(currentLoggedInUserId, lstOrders);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        /// <summary>
        /// Get Recent Hierarchy Node ID of an applicant.
        /// </summary>
        /// <param name="applicantID">applicantID</param>
        /// <param name="tenantID">tenantID</param>
        /// <returns>Recent Hierarchy Node ID</returns>
        public static Int32 GetRecentHierachyNodeIDForApplicant(Int32 applicantID, Int32 tenantID)
        {
            try
            {
                var applicantHierarchyMapping = BALUtils.GetComplianceDataRepoInstance(tenantID).GetRecentApplicantHierarchyMappingForApplicant(applicantID);

                if (applicantHierarchyMapping.IsNotNull())
                {
                    return applicantHierarchyMapping.AHM_HierarchyNodeID;
                }
                return 0;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        #region Subscribe Default Package

        public static void SubscribePurchasedPackage(Int32 tenantId, Int32 orderId, Int32 organizationUserID, Int32 packageId,
                                                     DateTime expiryDate, Int32 currentLoggedInUserId, Order order = null)
        {
            Int32 packageSubscriptionId = AppConsts.NONE;
            try
            {
                var currentDateTime = DateTime.Now;

                if (order.IsNull())
                    order = ComplianceDataManager.GetOrderById(tenantId, orderId);


                var _orderStsCode = String.Empty;
                var _orderPaymentDetail = GetComplianceOrdPayDetail(order);
                _orderStsCode = _orderPaymentDetail.lkpOrderStatu.Code;

                var _repoInstance = BALUtils.GetComplianceDataRepoInstance(tenantId);
                lkpPackageComplianceStatu packageStatus = ComplianceSetupManager.GetComplianceStatusByCode(INTSOF.Utils.ApplicantPackageComplianceStatus.Not_Compliant.GetStringValue(), tenantId);
                PackageSubscription archivedPackageSubscription = null;
                if (order.DeptProgramPackage.IsNotNull())
                {
                    archivedPackageSubscription = _repoInstance.GetPackageSubscriptionByPackageID(order.DeptProgramPackage.DPP_CompliancePackageID, organizationUserID);
                }
                //Added this check to update the package subscription for repurchase order.[UST-977:Additional work towards archive ability]
                if (order.IsNotNull() && order.lkpOrderRequestType.IsNotNull()
                     && order.lkpOrderRequestType.ORT_Code == OrderRequestType.NewOrder.GetStringValue() && archivedPackageSubscription.IsNotNull()
                     && archivedPackageSubscription.lkpArchiveState.IsNotNull() && archivedPackageSubscription.lkpArchiveState.AS_Code == ArchiveState.Archived.GetStringValue()
                     && archivedPackageSubscription.ExpiryDate.Value.Date < DateTime.Now.Date
                    )
                {
                    Int16 archiveStateActiveId = LookupManager.GetLookUpData<Entity.ClientEntity.lkpArchiveState>(tenantId).FirstOrDefault(cnd => cnd.AS_Code == ArchiveState.Active.GetStringValue() && cnd.AS_IsDeleted == false).AS_ID;
                    Int16 archiveChangeTypeID = GetComplianceSubsArchiveChangeTypeIdByCode(tenantId, ComplianceSubscriptionArchiveChangeType.RE_PURCHASE.GetStringValue());

                    CompliancePackageSubscriptionArchiveHistory subscriptionArchiveHistoryData = new CompliancePackageSubscriptionArchiveHistory();
                    Order packageSubscriptionOldOrder = _repoInstance.GetOrderById(archivedPackageSubscription.OrderID.Value);
                    #region Create Xml for subscriptionChangeDetail due to archive state change.

                    String subscriptionChangeDetailXML = "<SubscriptionChangeDetails>";
                    subscriptionChangeDetailXML += "<OldExpiryDate>" + archivedPackageSubscription.ExpiryDate.ToString() + "</OldExpiryDate>";
                    subscriptionChangeDetailXML += "<NewExpiryDate>" + expiryDate.ToString() + "</NewExpiryDate>";
                    subscriptionChangeDetailXML += "<OldArchiveStateID>" + archivedPackageSubscription.ArchiveStateID.ToString() + "</OldArchiveStateID>";
                    subscriptionChangeDetailXML += "<NewArchiveStateID>" + archiveStateActiveId.ToString() + "</NewArchiveStateID>";
                    subscriptionChangeDetailXML += "<OldArchiveDate>" + archivedPackageSubscription.ArchiveDate.ToString() + "</OldArchiveDate>";
                    subscriptionChangeDetailXML += "<NewArchiveDate>" + null + "</NewArchiveDate>";
                    subscriptionChangeDetailXML += "<OldOrderID>" + archivedPackageSubscription.OrderID.ToString() + "</OldOrderID>";
                    subscriptionChangeDetailXML += "<NewOrderID>" + order.OrderID.ToString() + "</NewOrderID>";
                    subscriptionChangeDetailXML += "</SubscriptionChangeDetails>";

                    #endregion

                    #region Add Changed Data in CompliancePackageSubscriptionArchiveHistory

                    subscriptionArchiveHistoryData = GetCompliancePkgSubscriptionArchHistoryObject(archiveChangeTypeID, archivedPackageSubscription.PackageSubscriptionID, subscriptionChangeDetailXML, currentLoggedInUserId);

                    #endregion

                    #region Update Package Subscription For Repurchasing of Archived and expired package.

                    archivedPackageSubscription.ExpiryDate = expiryDate;
                    archivedPackageSubscription.ArchiveStateID = archiveStateActiveId;
                    archivedPackageSubscription.ArchiveDate = null;
                    archivedPackageSubscription.OrderID = order.OrderID;
                    archivedPackageSubscription.ModifiedByID = currentLoggedInUserId;
                    archivedPackageSubscription.ModifiedOn = currentDateTime;
                    archivedPackageSubscription.CompliancePackageSubscriptionArchiveHistories.Add(subscriptionArchiveHistoryData);
                    #endregion

                    _repoInstance.UpdatePackageSubscription();

                    List<Int32> lstsubscriptionForExecutingrules = new List<Int32>();
                    lstsubscriptionForExecutingrules.Add(archivedPackageSubscription.PackageSubscriptionID);
                    RuleManager.ExecuteBusinessRules(lstsubscriptionForExecutingrules, tenantId, currentLoggedInUserId);

                }
                //UAT-1220:WB: As an applicant, I should be able to place a new order for a package which is already expired and retain my entered data
                else if (order.IsNotNull() && order.lkpOrderRequestType.IsNotNull()
                     && order.lkpOrderRequestType.ORT_Code == OrderRequestType.NewOrder.GetStringValue() && archivedPackageSubscription.IsNotNull()
                     && archivedPackageSubscription.ExpiryDate.Value.Date < DateTime.Now.Date
                    )
                {
                    archivedPackageSubscription.ExpiryDate = expiryDate;
                    archivedPackageSubscription.OrderID = order.OrderID;
                    archivedPackageSubscription.ModifiedByID = currentLoggedInUserId;
                    archivedPackageSubscription.ModifiedOn = currentDateTime;
                    _repoInstance.UpdatePackageSubscription();

                    List<Int32> lstsubscriptionForExecutingrules = new List<Int32>();
                    lstsubscriptionForExecutingrules.Add(archivedPackageSubscription.PackageSubscriptionID);
                    RuleManager.ExecuteBusinessRules(lstsubscriptionForExecutingrules, tenantId, currentLoggedInUserId);
                }
                else
                {
                    if (order.PartialOrderCancellationTypeID.IsNull() || (order.lkpPartialOrderCancellationType.IsNotNull()
                        && order.lkpPartialOrderCancellationType.Code == PartialOrderCancellationType.BACKGROUND_PACKAGE.GetStringValue()))
                    {
                        PackageSubscription tempPackageSubscription = null;
                        if (order.IsNotNull() && order.PreviousSubscriptionID.IsNotNull())
                        {
                            tempPackageSubscription = BALUtils.GetComplianceDataRepoInstance(tenantId).GetPackageSubscriptionByOrderId(order.PreviousOrderID.Value);

                        }
                        if (!tempPackageSubscription.IsNullOrEmpty() && tempPackageSubscription.CompliancePackageID == packageId)
                        {
                            tempPackageSubscription.OrderID = orderId;
                            tempPackageSubscription.ModifiedByID = currentLoggedInUserId;
                            tempPackageSubscription.ModifiedOn = DateTime.Now;
                            tempPackageSubscription.ExpiryDate = expiryDate.Date.AddHours(23).AddMinutes(59).AddSeconds(59);
                            BALUtils.GetComplianceDataRepoInstance(tenantId).UpdatePackageSubscription();
                        }
                        else
                        {
                            PackageSubscription packageSubscription = new PackageSubscription();
                            packageSubscription.CompliancePackageID = packageId;
                            packageSubscription.CompliancePackageTypeID = order.DeptProgramPackage.CompliancePackage.CompliancePackageTypeID;
                            packageSubscription.OrganizationUserID = organizationUserID;
                            packageSubscription.IsDeleted = false;
                            packageSubscription.CreatedByID = currentLoggedInUserId;
                            packageSubscription.CreatedOn = currentDateTime;
                            if (packageStatus != null)
                                packageSubscription.ComplianceStatusID = packageStatus.PackageComplianceStatusID;
                            packageSubscription.OrderID = orderId;
                            packageSubscription.ExpiryDate = expiryDate.Date.AddHours(23).AddMinutes(59).AddSeconds(59);
                            SetInfoForApprovedOrder(tenantId, order, packageSubscription, _orderStsCode);
                            packageSubscriptionId = _repoInstance.AddPackageSubscriptions(packageSubscription); //need to add code here for UAT-4558

                            //Added in UAT-4558
                            AddComplianceFileUploadDocMap(orderId, tenantId, currentLoggedInUserId);
                            //END

                            String orderRequestTypeCode = order.lkpOrderRequestType.ORT_Code;

                            var _orderPackageType = order.lkpOrderPackageType.OPT_Code;

                            //if (order.lkpOrderStatu.Code == ApplicantOrderStatus.Paid.GetStringValue() &&
                            //(_orderPackageType == OrderPackageTypes.COMPLIANCE_AND_BACKGROUMD_PACKAGE.GetStringValue() ||
                            //_orderPackageType == OrderPackageTypes.COMPLIANCE_PACKAGE.GetStringValue()))
                            if (_orderStsCode == ApplicantOrderStatus.Paid.GetStringValue() &&
                           (_orderPackageType == OrderPackageTypes.COMPLIANCE_AND_BACKGROUMD_PACKAGE.GetStringValue() ||
                           _orderPackageType == OrderPackageTypes.COMPLIANCE_PACKAGE.GetStringValue()))
                            {
                                var _appConfig = _repoInstance.GetAppConfiguration(TenantAppConfigurations.UPLOAD_COMPLIANCE_DATA_KEY.GetStringValue());

                                if (!_appConfig.IsNullOrEmpty() && _appConfig.AC_Value == AppConsts.STR_ONE)
                                {
                                    List<lkpThirdPartyUploadStatu> lstThirdPartyUploadStatus = LookupManager.GetLookUpData<lkpThirdPartyUploadStatu>(tenantId).ToList();

                                    _repoInstance.UpdateApplicantSubcriptions(organizationUserID, currentLoggedInUserId);

                                    var pendingStatus = ThirdPartyUploadStatus.PENDING.GetStringValue();

                                    if (packageSubscriptionId > AppConsts.NONE)
                                    {
                                        ThirdPartyComplianceDataUpload _tpUploadData = new ThirdPartyComplianceDataUpload();
                                        _tpUploadData.TPCDU_OrganizationUserID = organizationUserID;
                                        _tpUploadData.TPCDU_PackageSubscriptionID = packageSubscriptionId;
                                        _tpUploadData.TPCDU_StatusID = lstThirdPartyUploadStatus.Where(tpus => tpus.TPUS_Code == pendingStatus).First().TPUS_ID;
                                        _tpUploadData.TPCDU_IsDeleted = false;
                                        _tpUploadData.TPCDU_CreatedByID = currentLoggedInUserId;
                                        _tpUploadData.TPCDU_CreatedOn = currentDateTime;
                                        _repoInstance.AddThirdPartyDataUpload(_tpUploadData);
                                    }
                                }
                                #region UAT-2960
                                if (_orderPackageType == OrderPackageTypes.COMPLIANCE_PACKAGE.GetStringValue() && packageSubscriptionId > AppConsts.NONE)
                                {
                                    String AlumniTenantCode = AlumniSettings.AlumniTenantID.GetStringValue();
                                    String targetTenantID = AlumniManager.GetAlumniSettingByCode(AlumniTenantCode);
                                    Int32 alumniTenantID = !String.IsNullOrEmpty(targetTenantID) ? Convert.ToInt32(AlumniManager.GetAlumniSettingByCode(AlumniTenantCode)) : AppConsts.NONE;
                                    if (alumniTenantID > AppConsts.NONE && alumniTenantID == tenantId)
                                    {
                                        String complianceDatamovementStatusCode = ComplianceDataMovementStatus.Data_Movement_Due.GetStringValue();
                                        Int32 complianceDatamovementStatusID = LookupManager.GetLookUpData<Entity.lkpComplianceDataMovementStatu>().FirstOrDefault(condition => condition.CDMS_Code == complianceDatamovementStatusCode).CDMS_ID;
                                        BALUtils.GetSecurityRepoInstance().ComplianceDataMovementUpdateLog(orderId, alumniTenantID, packageSubscriptionId, complianceDatamovementStatusID, currentLoggedInUserId);
                                    }
                                }
                                #endregion
                            }

                            // insert data in ApplicantComplianceCategoryData table only if it is not case of change subscription.
                            if (packageSubscription.SubscriptionMobilityStatusID == null || packageSubscription.lkpSubscriptionMobilityStatu.Code != LkpSubscriptionMobilityStatus.DataMovementDue)
                            {
                                //call usp_CreateOptionalCategoryEntry SP when working on tenant db
                                //to insert data in ApplicantComplianceCategoryData table after data get inserted in package Subscription table
                                String packageSubscriptionIdsXML = "<PackageSubscriptionIDs>";
                                packageSubscriptionIdsXML += "<ID>" + packageSubscriptionId + "</ID>";
                                packageSubscriptionIdsXML += "</PackageSubscriptionIDs>";

                                if (packageSubscriptionId > 0)
                                {
                                    BALUtils.GetComplianceDataRepoInstance(tenantId).CreateOptionalCategoryEntry(packageSubscriptionIdsXML, currentLoggedInUserId);
                                }
                            }

                            //[BS] : To handle change payment type scenario in UAT -916
                            if (packageSubscriptionId == AppConsts.NONE)
                            {
                                BALUtils.GetComplianceDataRepoInstance(tenantId).SaveDbContext(orderId);
                            }
                        }
                    }
                    else
                    {
                        BALUtils.GetComplianceDataRepoInstance(tenantId).SaveDbContext(orderId);
                    }
                }
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }

        private static void SetInfoForApprovedOrder(Int32 tenantId, Order order, PackageSubscription packageSubscription, String orderStsCode)
        {
            //Works when order is approved.
            //if (order.IsNotNull() && order.lkpOrderStatu.Code == ApplicantOrderStatus.Paid.GetStringValue())
            if (order.IsNotNull() && orderStsCode == ApplicantOrderStatus.Paid.GetStringValue())
            {
                PackageSubscription previousPackageSubscription = null;
                String orderRequestTypeCode = order.lkpOrderRequestType.ORT_Code;

                //Get the previous package subscription of current order.
                if (order.PreviousSubscriptionID.IsNotNull())
                {
                    previousPackageSubscription = MobilityManager.GetPackageSubscriptionById(order.PreviousSubscriptionID.Value, tenantId, false);
                }

                if (previousPackageSubscription.IsNotNull() && (orderRequestTypeCode == OrderRequestType.ChangeSubscription.GetStringValue() ||
                    orderRequestTypeCode == OrderRequestType.ChangeSubscriptionByAdmin.GetStringValue()))
                {
                    Entity.MappingRequestData mappingRequestData = new Entity.MappingRequestData
                    {
                        FromTenantID = SecurityManager.GetOrganizationUser(previousPackageSubscription.OrganizationUserID.Value).Organization.Tenant.TenantID,
                        ToTenantID = tenantId,
                        FromPackageID = previousPackageSubscription.CompliancePackageID,
                        ToPackageID = order.DeptProgramPackage.DPP_CompliancePackageID,
                        FromPackageName = previousPackageSubscription.CompliancePackage.PackageName,
                        ToPackageName = order.DeptProgramPackage.CompliancePackage.PackageName,
                        //FromNodeId = previousPackageSubscription.Order.HierarchyNodeID == null ? 0 : previousPackageSubscription.Order.HierarchyNodeID.Value,
                        //ToNodeId = order.HierarchyNodeID == null ? 0 : order.HierarchyNodeID.Value
                        //[03202015]: UAT-1067:Hierarchy for orders (background and screening) should display as the full hierarchy sleected during the order, 
                        //not the node the package lives on. 
                        FromNodeId = previousPackageSubscription.Order.SelectedNodeID == null ? 0 : previousPackageSubscription.Order.SelectedNodeID.Value,
                        ToNodeId = order.SelectedNodeID == null ? 0 : order.SelectedNodeID.Value
                    };
                    if (mappingRequestData.FromPackageID != mappingRequestData.ToPackageID)
                    {
                        List<Entity.MappingRequestData> lstMappingRequest = new List<Entity.MappingRequestData>() { mappingRequestData };
                        lstMappingRequest = MobilityManager.AddRecordsInMappingQueue(lstMappingRequest, order.ModifiedByID.Value);

                        //Sets the Mapping master ID, PkgMappingInstanceID.
                        if (lstMappingRequest.IsNotNull() && lstMappingRequest.Count > 0)
                        {
                            //Populated when Order is approved using AddInMappingQueue method.
                            packageSubscription.MappingMasterID = lstMappingRequest.FirstOrDefault().MappingID;

                            //Applicant Change Program and mapping exists: Populated when Order is approved, packageSubscription.PkgMappingInstanceID is null and Mapping is false or null using AddInMappingQueue method. 
                            if (orderRequestTypeCode == OrderRequestType.ChangeSubscription.GetStringValue() && order.IsMappingSkipped != true &&
                                packageSubscription.PkgMappingInstanceID.IsNull())
                            {
                                packageSubscription.PkgMappingInstanceID = lstMappingRequest.FirstOrDefault().ReviewInstanceId;
                            }
                        }
                    }
                }
                //Admin change Program and Due Payment Case: Populated when Order is approved, packageSubscription.PkgMappingInstanceID is null  and Mapping is false or null. Its value is Order.MappingInstanceID. 
                if (orderRequestTypeCode == OrderRequestType.ChangeSubscriptionByAdmin.GetStringValue() && order.IsMappingSkipped != true &&
                            packageSubscription.PkgMappingInstanceID.IsNull())
                {
                    packageSubscription.PkgMappingInstanceID = order.MappingInstanceID;
                }

                if (order.HierarchyNodeID.IsNotNull() && order.HierarchyNodeID.Value > AppConsts.NONE)
                {
                    //Get the mobility instance of current order if node for which order is placed is mobility node.
                    MobilityInstance mobilityInstance = MobilityManager.GetNodeMobilityInstance(tenantId, order.HierarchyNodeID.Value);

                    //Check current node is mobility node or not.
                    if (mobilityInstance.IsNotNull() && mobilityInstance.MI_ID > AppConsts.NONE)
                    {
                        //Mobility instance id will be populated if current node is a mobility node. 
                        packageSubscription.MobilityInstanceID = mobilityInstance.MI_ID;
                    }

                    //Change Subs case
                    if (previousPackageSubscription.IsNotNull() && previousPackageSubscription.OrderID.IsNotNull())
                    {
                        //subscription mobility status should be data movement due for all subscriptions in this case.
                        packageSubscription.SubscriptionMobilityStatusID = MobilityManager.GetMobilityStatusIDByCode(tenantId, LkpSubscriptionMobilityStatus.DataMovementDue);
                        Order previousOrder = ComplianceDataManager.GetOrderById(tenantId, previousPackageSubscription.OrderID.Value);

                        if (previousOrder.IsNotNull() && previousOrder.HierarchyNodeID.IsNotNull())
                        {
                            MobilityInstance previousMobilityInstance = MobilityManager.GetNodeMobilityInstance(tenantId, previousOrder.HierarchyNodeID.Value);

                            var _prevOrderOPD = GetComplianceOrdPayDetail(previousOrder);
                            var _currentDateTime = DateTime.Now;
                            //For previous subscription, status=mobility switched if source and target nodes are mobility nodes connected via mobility mapping. 
                            //Else previous subscription will be isdeleted=1 and previous order will be cancelled.
                            if (previousMobilityInstance.IsNotNull() && previousMobilityInstance.MI_ID > AppConsts.NONE &&
                                previousMobilityInstance.InstHierarchyMobility.IsNotNull() && mobilityInstance.InstHierarchyMobility.IsNotNull() &&
                                previousMobilityInstance.InstHierarchyMobility.IHM_SuccessorID == mobilityInstance.InstHierarchyMobility.IHM_HierarchyID)
                            {
                                //Update the previous order status to paid.
                                ////previousOrder.OrderStatusID = order.OrderStatusID;
                                ////previousOrder.ModifiedByID = order.ModifiedByID.Value;
                                ////previousOrder.ModifiedOn = _currentDateTime;

                                _prevOrderOPD.OPD_OrderStatusID = GetComplianceOrdPayDetail(order).OPD_OrderStatusID;
                                _prevOrderOPD.OPD_ModifiedByID = order.ModifiedByID.Value;
                                _prevOrderOPD.OPD_ModifiedOn = _currentDateTime;

                                //[BS]:[SB]Is_Deleted of previous subscription should be set as 1 when change subscription is done from a non-mobility node which is happening currently. 
                                //When previous subscription is for a mobility node then it will remain 0 so that it remains visible in subscription history.
                                previousPackageSubscription.IsDeleted = false;
                                previousPackageSubscription.SubscriptionMobilityStatusID = MobilityManager.GetMobilityStatusIDByCode(tenantId, LkpSubscriptionMobilityStatus.MobilitySwitched);
                                previousPackageSubscription.ModifiedByID = order.ModifiedByID.Value;
                                previousPackageSubscription.ModifiedOn = DateTime.Now;
                            }
                            else
                            {
                                //Update the previous order status to cancelled
                                String orderStatusCode = ApplicantOrderStatus.Cancelled.GetStringValue();
                                var lkpOrderStatus = ComplianceDataManager.GetOrderStatusList(tenantId).FirstOrDefault(x => x.Code == orderStatusCode);

                                Int32? cancelledOrderStatusID = null;
                                if (lkpOrderStatus.IsNotNull())
                                {
                                    cancelledOrderStatusID = lkpOrderStatus.OrderStatusID;
                                }
                                if (cancelledOrderStatusID.IsNotNull())
                                {
                                    ////previousOrder.OrderStatusID = cancelledOrderStatusID.Value;
                                    ////previousOrder.ModifiedByID = order.ModifiedByID.Value;
                                    ////previousOrder.ModifiedOn = DateTime.Now;

                                    //UAT-1245:If payment method is the same, both tracking and screening are getting cancelled when the applicant attempts to cancel 
                                    //the tracking order.

                                    if (IsOrdPayDetailContainsBkgPackage(_prevOrderOPD))
                                    {
                                        previousOrder.PartialOrderCancellationTypeID = GetPartialOrderCancelTypeForChangeSubs(previousOrder, tenantId);
                                        previousOrder.ModifiedByID = order.ModifiedByID.Value;
                                        previousOrder.ModifiedOn = _currentDateTime;
                                    }
                                    else
                                    {
                                        _prevOrderOPD.OPD_OrderStatusID = cancelledOrderStatusID;
                                        _prevOrderOPD.OPD_ModifiedByID = order.ModifiedByID.Value;
                                        _prevOrderOPD.OPD_ModifiedOn = _currentDateTime;
                                    }

                                    //_prevOrderOPD.OPD_OrderStatusID = cancelledOrderStatusID;
                                    //_prevOrderOPD.OPD_ModifiedByID = order.ModifiedByID.Value;
                                    //_prevOrderOPD.OPD_ModifiedOn = _currentDateTime;
                                }
                                previousPackageSubscription.IsDeleted = true;
                                previousPackageSubscription.ModifiedByID = order.ModifiedByID.Value;
                                previousPackageSubscription.ModifiedOn = DateTime.Now;
                            }
                        }
                    }
                    //}
                }
            }
        }

        /// <summary>
        /// Get the OrderPaymentDetails Object which is associated with a Compliance Package
        /// </summary>
        /// <param name="ord"></param>
        /// <returns></returns>
        public static OrderPaymentDetail GetComplianceOrdPayDetail(Order ord)
        {
            var _isCmpOPD = false;
            var _orderPaymentDetail = new OrderPaymentDetail();
            foreach (var opd in ord.OrderPaymentDetails)
            {
                foreach (var oppd in opd.OrderPkgPaymentDetails)
                {
                    if (oppd.OPPD_BkgOrderPackageID.IsNullOrEmpty() && !oppd.OPPD_IsDeleted && oppd.lkpOrderPackageType.OPT_Code == OrderPackageTypes.COMPLIANCE_PACKAGE.GetStringValue())
                    {
                        _orderPaymentDetail = opd;
                        break;
                    }
                }
                if (_isCmpOPD)
                    break;
            }
            return _orderPaymentDetail;
        }

        #region UAT-1245:If payment method is the same, both tracking and screening are getting cancelled when the applicant attempts to cancel the tracking order.

        /// <summary>
        /// Return true if order Payment details contains Background package
        /// </summary>
        /// <param name="ord"></param>
        /// <returns></returns>
        public static Boolean IsOrdPayDetailContainsBkgPackage(OrderPaymentDetail ordPaymentDetail)
        {
            var _isBkgPackageExist = false;
            foreach (var oppd in ordPaymentDetail.OrderPkgPaymentDetails)
            {
                if (!oppd.OPPD_IsDeleted && oppd.lkpOrderPackageType.OPT_Code == OrderPackageTypes.BACKGROUND_PACKAGE.GetStringValue())
                {
                    _isBkgPackageExist = true;
                    break;
                }
            }
            return _isBkgPackageExist;
        }

        /// <summary>
        /// Return Partial order cancellation type for change subscription
        /// </summary>
        /// <param name="ord"></param>
        /// <returns></returns>
        public static Int32 GetPartialOrderCancelTypeForChangeSubs(Order previousOrder, Int32 tenantId)
        {

            List<lkpPartialOrderCancellationType> lstPartialOrdCancellationType = LookupManager.GetLookUpData<lkpPartialOrderCancellationType>
                                                                                                              (tenantId).ToList();

            String prevPartialOrderCancellationTypeCode = null;
            Int32 newPartialOrderCancellationTypeID = lstPartialOrdCancellationType.FirstOrDefault(cnd => cnd.Code ==
                                                       PartialOrderCancellationType.COMPLIANCE_PACKAGE.GetStringValue()).PartialOrderCancellationTypeID;

            if (previousOrder.PartialOrderCancellationTypeID.IsNotNull())
            {
                prevPartialOrderCancellationTypeCode = lstPartialOrdCancellationType.FirstOrDefault(cnd => cnd.PartialOrderCancellationTypeID ==
                                                       previousOrder.PartialOrderCancellationTypeID).Code;

                if (prevPartialOrderCancellationTypeCode == PartialOrderCancellationType.BACKGROUND_PACKAGE.GetStringValue()
                   || prevPartialOrderCancellationTypeCode == PartialOrderCancellationType.COMPLIANCE_BACKGROUND_PACKAGES.GetStringValue())
                {
                    newPartialOrderCancellationTypeID = lstPartialOrdCancellationType.FirstOrDefault(cnd => cnd.Code ==
                                                        PartialOrderCancellationType.COMPLIANCE_BACKGROUND_PACKAGES.GetStringValue())
                                                        .PartialOrderCancellationTypeID;
                }
            }
            return newPartialOrderCancellationTypeID;
        }

        #endregion

        #endregion

        #region DoccumentUpload

        public static ApplicantDocument GetApplicantUploadedDocument(Int32 applicantUploadedDocumentID, Int32 tenantID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).GetApplicantUploadedDocument(applicantUploadedDocumentID);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }


        public static List<ApplicantDocument> GetApplicantDocuments(Int32 organizationUserID, Int32 tenantID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).GetApplicantDocuments(organizationUserID);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        /// <summary>
        /// This filler out signed document from the applicant document list. 
        /// </summary>
        /// <param name="applicantDocument">ApplicantDocument</param>
        /// <param name="tenantID">tenantID</param>
        /// <returns></returns>
        public static List<ApplicantDocument> GetApplicantDocumentsExceptEsigned(List<ApplicantDocument> applicantDocument, Int32 tenantID)
        {
            try
            {
                List<ApplicantDocument> applicantDocuments = new List<ApplicantDocument>();
                if (applicantDocument.IsNotNull())
                {
                    List<lkpDocumentType> docType = GetlkpDocumentType(tenantID);
                    Int32 disclaimerId = docType.Where(condition => condition.DMT_Code.Equals(DocumentType.DisclaimerDocument.GetStringValue())).FirstOrDefault().DMT_ID;
                    Int32 disclosureId = docType.Where(condition => condition.DMT_Code.Equals(DocumentType.DisclosureDocument.GetStringValue())).FirstOrDefault().DMT_ID;
                    Int32 edsDocTypeId = docType.Where(condition => condition.DMT_Code.Equals(DocumentType.EDS_AuthorizationForm.GetStringValue())).FirstOrDefault().DMT_ID;
                    Int32 dnrDocTypeId = docType.Where(condition => condition.DMT_Code.Equals(DocumentType.Disclosure_n_Release.GetStringValue())).FirstOrDefault().DMT_ID;
                    //UAT-1035 WB: Capture and store order summary and add "Print Receipt" button to Order history for each order's order history. 
                    Int32 rcptDocTypeId = docType.Where(condition => condition.DMT_Code.Equals(DocumentType.Reciept_Document.GetStringValue())).FirstOrDefault().DMT_ID;

                    //UAT-1316 WB:Clinical Rotation Details screen for student.
                    Int32 reqUpldDocTypeId = docType.Where(condition => condition.DMT_Code.Equals(DocumentType.REQUIREMENT_FIELD_UPLOAD_DOCUMENT.GetStringValue())).FirstOrDefault().DMT_ID;
                    Int32 reqViewDocTypeId = docType.Where(condition => condition.DMT_Code.Equals(DocumentType.REQUIREMENT_FIELD_VIEW_DOCUMENT.GetStringValue())).FirstOrDefault().DMT_ID;
                    Int32 rotSyllabusDocTypeId = docType.Where(condition => condition.DMT_Code.Equals(DocumentType.ROTATION_SYLLABUS.GetStringValue())).FirstOrDefault().DMT_ID;
                    Int32 personalDocTypeId = docType.Where(condition => condition.DMT_Code.Equals(DocumentType.PERSONAL_DOCUMENT.GetStringValue())).FirstOrDefault().DMT_ID;
                    //UAT 1559
                    //  Int32 viewDocTypeId = docType.Where(condition => condition.DMT_Code.Equals(DocumentType.COMPLIANCE_VIEW_DOCUMENT.GetStringValue())).FirstOrDefault().DMT_ID;

                    applicantDocuments = applicantDocument.Where(condition => (condition.DocumentType.IsNull() || (condition.DocumentType != disclaimerId
                       && condition.DocumentType != disclosureId && condition.DocumentType != edsDocTypeId && condition.DocumentType != dnrDocTypeId && condition.DocumentType != rcptDocTypeId
                       && condition.DocumentType != reqUpldDocTypeId && condition.DocumentType != reqViewDocTypeId && condition.DocumentType != rotSyllabusDocTypeId && condition.DocumentType != personalDocTypeId
                        && (condition.IsSearchableOnly == null || condition.IsSearchableOnly == false) //UAT-1560:WB: We should be able to add documents that need to be signed to the order process
                       ))).ToList();

                }
                return applicantDocuments;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// This filler out signed document from the applicant document list . 
        /// </summary>
        /// <param name="applicantDocument">object of ApplicantDocuments class</param>
        /// <param name="tenantID">tenantID</param>
        /// <returns></returns>
        public static List<ApplicantDocuments> GetDocumentRelatedToUserExceptEsigned(List<ApplicantDocuments> applicantDocument, Int32 tenantID)
        {
            try
            {
                List<ApplicantDocuments> applicantDocuments = new List<ApplicantDocuments>();
                if (applicantDocument.IsNotNull())
                {
                    List<lkpDocumentType> docType = GetlkpDocumentType(tenantID);
                    Int32 disclaimerId = docType.Where(condition => condition.DMT_Code.Equals(DocumentType.DisclaimerDocument.GetStringValue())).FirstOrDefault().DMT_ID;
                    Int32 disclosureId = docType.Where(condition => condition.DMT_Code.Equals(DocumentType.DisclosureDocument.GetStringValue())).FirstOrDefault().DMT_ID;
                    Int32 edsDocTypeId = docType.Where(condition => condition.DMT_Code.Equals(DocumentType.EDS_AuthorizationForm.GetStringValue())).FirstOrDefault().DMT_ID;
                    Int32 dnrDocTypeId = docType.Where(condition => condition.DMT_Code.Equals(DocumentType.Disclosure_n_Release.GetStringValue())).FirstOrDefault().DMT_ID;
                    Int32 rcptDocTypeId = docType.Where(condition => condition.DMT_Code.Equals(DocumentType.Reciept_Document.GetStringValue())).FirstOrDefault().DMT_ID; //UAT-1035

                    //UAT-1316 WB:Clinical Rotation Details screen for student.
                    Int32 reqUpldDocTypeId = docType.Where(condition => condition.DMT_Code.Equals(DocumentType.REQUIREMENT_FIELD_UPLOAD_DOCUMENT.GetStringValue())).FirstOrDefault().DMT_ID;
                    Int32 reqViewDocTypeId = docType.Where(condition => condition.DMT_Code.Equals(DocumentType.REQUIREMENT_FIELD_VIEW_DOCUMENT.GetStringValue())).FirstOrDefault().DMT_ID;
                    Int32 rotSyllabusDocTypeId = docType.Where(condition => condition.DMT_Code.Equals(DocumentType.ROTATION_SYLLABUS.GetStringValue())).FirstOrDefault().DMT_ID;

                    //UAT 1559
                    //Int32 compViewDocTypeId = docType.Where(condition => condition.DMT_Code.Equals(DocumentType.COMPLIANCE_VIEW_DOCUMENT.GetStringValue())).FirstOrDefault().DMT_ID;

                    applicantDocuments = applicantDocument.Where(condition => (condition.DocumentType.IsNull() || (condition.DocumentType != disclaimerId
                       && condition.DocumentType != disclosureId && condition.DocumentType != edsDocTypeId && condition.DocumentType != dnrDocTypeId && condition.DocumentType != rcptDocTypeId
                       && condition.DocumentType != reqUpldDocTypeId && condition.DocumentType != reqViewDocTypeId && condition.DocumentType != rotSyllabusDocTypeId))).ToList();
                }
                return applicantDocuments;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        public static List<lkpDocumentType> GetlkpDocumentType(Int32 tenantId)
        {
            try
            {
                return LookupManager.GetLookUpData<Entity.ClientEntity.lkpDocumentType>(tenantId).Where(x => x.DMT_IsDeleted == false).ToList();
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="organizationUserID"></param>
        /// <param name="tenantID"></param>
        /// <returns></returns>
        public static List<ApplicantDocuments> GetApplicantDocumentsData(Int32 organizationUserID, Int32 tenantID)
        {
            try
            {
                BALUtils.LogDebug("Class Name: " + MethodBase.GetCurrentMethod().DeclaringType.Name + ":-  Function Name: " + System.Reflection.MethodBase.GetCurrentMethod().Name + " :- Call Method");

                return BALUtils.GetComplianceDataRepoInstance(tenantID).GetApplicantDocumentsData(organizationUserID);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }


        public static Int32 GetApplicantIdForSubscription(Int32 subscriptionId, Int32 tenantID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).GetApplicantIdForSubscription(subscriptionId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static ApplicantDocument GetApplicantDocument(Int32 applicantDocumentId, Int32 tenantID)
        {
            try
            {
                BALUtils.LogDebug("Class Name: " + MethodBase.GetCurrentMethod().DeclaringType.Name + ":-  Function Name: " + System.Reflection.MethodBase.GetCurrentMethod().Name + " :- Call Method");

                return BALUtils.GetComplianceDataRepoInstance(tenantID).GetApplicantDocument(applicantDocumentId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static ApplicantDocument GetFailedUnifiedApplicantDocument(Int32 applicantDocumentId, Int32 tenantID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).GetFailedUnifiedApplicantDocument(applicantDocumentId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="lstApplicantUploadedDocument"></param>
        /// <param name="tenantID"></param>
        /// <returns></returns>
        public static Boolean AddApplicantUploadedDocuments(List<ApplicantDocument> lstApplicantUploadedDocument, Int32 tenantID)
        {
            try
            {
                if (BALUtils.GetComplianceDataRepoInstance(tenantID).AddApplicantUploadedDocuments(lstApplicantUploadedDocument))
                {
                    List<Int32> lstOrgUserIds = lstApplicantUploadedDocument.Select(x => x.OrganizationUserID.Value).Distinct().ToList();
                    return true;
                }
                return false;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="lstApplicantUploadedDocument"></param>
        /// <param name="tenantID"></param>
        /// <returns></returns>
        public static Int32 AddApplicantDocument(ApplicantDocument applicantDocument, Int32 tenantID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).AddApplicantDocument(applicantDocument);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static Boolean UpdateApplicantUploadedDocument(ApplicantDocument applicantUploadedDocument, Int32 tenantID)
        {
            try
            {
                ApplicantDocument applicantDocument = BALUtils.GetComplianceDataRepoInstance(tenantID).UpdateApplicantUploadedDocument(applicantUploadedDocument);
                if (applicantDocument.IsNotNull())
                {
                    // BALUtils.GetSecurityRepoInstance().SynchronizeApplicantDocument(applicantDocument.OrganizationUserID.Value, tenantID);
                    return true;
                }
                return false;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="applicantDocument"></param>
        /// <param name="tenantID"></param>
        /// <returns></returns>
        public static ComplianceItemAttribute ItemHasFileAttribute(Int32 complianceItemId, Int32 tenantID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).ItemHasFileAttribute(complianceItemId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="applicantUploadedDocumentID"></param>
        /// <param name="tenantID"></param>
        /// <returns></returns>
        public static Boolean DeleteApplicantUploadedDocument(Int32 applicantUploadedDocumentID, Int32 tenantID, Int32 currentUserID, Int32? applicantID = null)
        {
            try
            {
                ApplicantDocument applicantDocument = BALUtils.GetComplianceDataRepoInstance(tenantID).DeleteApplicantUploadedDocument(applicantUploadedDocumentID, currentUserID);
                if (applicantDocument.IsNotNull())
                {
                    //BALUtils.GetSecurityRepoInstance().SynchronizeApplicantDocument(applicantDocument.OrganizationUserID.Value, tenantID);
                    return true;
                }
                return false;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static Boolean IsDocumentAlreadyUploaded(String documentName, Int32 documentSize, Int32 organizationUserId, Int32 tenantId, Boolean isPersonalDoc = false)
        {
            try
            {
                //UAT-2244
                List<lkpDocumentType> docType = LookupManager.GetLookUpData<Entity.ClientEntity.lkpDocumentType>(tenantId).Where(x => x.DMT_IsDeleted == false).ToList();
                return BALUtils.GetComplianceDataRepoInstance(tenantId).IsDocumentAlreadyUploaded(documentName, documentSize, organizationUserId, docType, isPersonalDoc);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        /// <summary>
        /// UAT-2128  Get Subscribed Items list
        /// </summary>
        /// <param name="tenantId"></param>
        /// <param name="organizationUserId"></param>
        /// <returns></returns>
        public static List<UploadDocumentContract> GetSubscribedItems(Int32 tenantId, Int32 organizationUserId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetsubscriptionItems(organizationUserId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        #endregion

        #region Verification Queue


        /// <summary>
        /// Gets the active items for the assignment and user work queue based on the given parameters.
        /// </summary>
        /// <param name="tenantId">Tenant Id</param>
        /// <param name="statusCode">Status code</param>
        /// <param name="assignToUserId">Assign to User Id</param>
        /// <param name="reviewerType">Reviewer Type Code</param>
        /// <param name="showIncompleteItems">To Show incomplete Items</param>
        /// <returns>Query for showing active items</returns>
        public static IQueryable<vwComplianceItemDataQueue> GetApplicantComplianceItemData(Int32 tenantId, List<String> lstStatusCode, Int32 assignToUserId, String reviewerType = null, Boolean showIncompleteItems = false, Int32 reviewerId = 0)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetApplicantComplianceItemData(tenantId, lstStatusCode, assignToUserId, reviewerType, showIncompleteItems, reviewerId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        //public static List<ApplicantComplianceItemDataContract> GetRefinedVerificationData(IQueryable<vwComplianceItemDataQueue> lstApplicantComplianceItemData,
        //    CustomPagingArgsContract gridCustomPaging, Int32 selectedPackageId, Int32 selectedCategoryId, Boolean showOnlyRushOrders)
        //{
        //    try
        //    {
        //        Entity.CustomPagingArgs customPagingArgs = new Entity.CustomPagingArgs();
        //        if (selectedPackageId > 0)
        //        {
        //            lstApplicantComplianceItemData = lstApplicantComplianceItemData.Where(x => x.PackageID == selectedPackageId);

        //            if (selectedCategoryId > 0)
        //            {
        //                lstApplicantComplianceItemData = lstApplicantComplianceItemData.Where(x => x.CategoryID == selectedCategoryId);
        //            }
        //        }
        //        if (showOnlyRushOrders)
        //        {
        //            String paidStatus = ApplicantOrderStatus.Paid.GetStringValue();
        //            lstApplicantComplianceItemData = lstApplicantComplianceItemData.Where(x => x.RushOrderStatusCode.Equals(paidStatus));
        //        }
        //        lstApplicantComplianceItemData = customPagingArgs.ApplyFilterOrSort(lstApplicantComplianceItemData, gridCustomPaging);
        //        return AssignValuesToDataModel(lstApplicantComplianceItemData.ToList());
        //    }
        //    catch (SysXException ex)
        //    {
        //        BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
        //        throw ex;
        //    }
        //    catch (Exception ex)
        //    {
        //        BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
        //        throw (new SysXException(ex.Message, ex));
        //    }
        //}

        /// <summary>
        /// Gets the active items for the assignment and user work queue based on the given parameters for client users.
        /// </summary>
        /// <param name="tenantId">Tenant Id</param>
        /// <param name="statusCode">Status code</param>
        /// <param name="assignToUserId">Assign to User Id</param>
        /// <param name="reviewerType">Reviewer Type Code</param>
        /// <param name="showIncompleteItems">To Show incomplete Items</param>
        /// <returns>Query for showing active items</returns>
        //public static IQueryable<vwComplianceItemDataQueueRestricted> GetApplicantComplianceItemDataForClientUsers(Int32 tenantId, List<String> lstStatusCode, Int32 assignToUserId, String reviewerType = null, Boolean showIncompleteItems = false, Int32 reviewerId = 0)
        //{
        //    try
        //    {
        //        return BALUtils.GetComplianceDataRepoInstance(tenantId).GetApplicantComplianceItemDataForClientUsers(tenantId, lstStatusCode, assignToUserId, reviewerType, showIncompleteItems, reviewerId);
        //    }
        //    catch (SysXException ex)
        //    {
        //        BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
        //        throw ex;
        //    }
        //    catch (Exception ex)
        //    {
        //        BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
        //        throw (new SysXException(ex.Message, ex));
        //    }
        //}

        //public static List<ApplicantComplianceItemDataContract> GetRefinedVerificationData(IQueryable<vwComplianceItemDataQueueRestricted> lstApplicantComplianceItemData,
        //    CustomPagingArgsContract gridCustomPaging, Int32 selectedPackageId, Int32 selectedCategoryId, Boolean showOnlyRushOrders, Int32 currentLoggedInUserId)
        //{
        //    try
        //    {
        //        Entity.CustomPagingArgs customPagingArgs = new Entity.CustomPagingArgs();
        //        lstApplicantComplianceItemData = lstApplicantComplianceItemData.Where(x => x.ClientOrgUserId == currentLoggedInUserId);
        //        if (selectedPackageId > 0)
        //        {
        //            lstApplicantComplianceItemData = lstApplicantComplianceItemData.Where(x => x.PackageID == selectedPackageId);

        //            if (selectedCategoryId > 0)
        //            {
        //                lstApplicantComplianceItemData = lstApplicantComplianceItemData.Where(x => x.CategoryID == selectedCategoryId);
        //            }
        //        }
        //        if (showOnlyRushOrders)
        //        {
        //            String paidStatus = ApplicantOrderStatus.Paid.GetStringValue();
        //            lstApplicantComplianceItemData = lstApplicantComplianceItemData.Where(x => x.RushOrderStatusCode.Equals(paidStatus));
        //        }
        //        lstApplicantComplianceItemData = customPagingArgs.ApplyFilterOrSort(lstApplicantComplianceItemData, gridCustomPaging);
        //        return AssignValuesToDataModel(lstApplicantComplianceItemData.ToList());
        //    }
        //    catch (SysXException ex)
        //    {
        //        BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
        //        throw ex;
        //    }
        //    catch (Exception ex)
        //    {
        //        BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
        //        throw (new SysXException(ex.Message, ex));
        //    }
        //}

        /// <summary>
        /// Gets the active items for the assignment and user work queue based on the given parameters.
        /// </summary>
        /// <param name="tenantId">Tenant Id</param>
        /// <param name="statusCode">Status code</param>
        /// <param name="assignToUserId">Assign to User Id</param>
        /// <param name="reviewerType">Reviewer Type Code</param>
        /// <param name="showIncompleteItems">To Show incomplete Items</param>
        /// <returns>Query for showing active items</returns>
        public static List<ApplicantComplianceItemDataContract> GetApplicantComplianceItemData(Int32 tenantId, ItemVerificationQueueData verificationQueueData, CustomPagingArgsContract verificationGridCustomPaging, String customHTML, String DPMid)
        {
            try
            {
                DataTable dataForQueue = BALUtils.GetComplianceDataRepoInstance(tenantId).GetApplicantComplianceItemDataTable(verificationQueueData, verificationGridCustomPaging, customHTML, DPMid);
                return NewAssignValuesToDataModel(dataForQueue);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }


        private static List<ApplicantComplianceItemDataContract> NewAssignValuesToDataModel(DataTable table)
        {
            try
            {
                IEnumerable<DataRow> rows = table.AsEnumerable();
                return rows.Select(x => new ApplicantComplianceItemDataContract
                {
                    ApplicantComplianceItemId = x["ApplicantComplianceItemId"].GetType().Name == "DBNull" ? 0 : Convert.ToInt32(x["ApplicantComplianceItemId"]),
                    ApplicantName = x["ApplicantName"].ToString(),
                    //#region UAT-3355
                    ApplicantFirstName = x["ApplicantFirstName"].ToString(),
                    ApplicantLastName = x["ApplicantLastName"].ToString(),
                    //#endregion
                    ItemName = x["ItemName"].ToString(),
                    SubmissionDate = x["SubmissionDate"].GetType().Name == "DBNull" ? null : (DateTime?)x["SubmissionDate"],
                    VerificationStatus = x["VerificationStatus"].ToString(),
                    SystemStatus = x["SystemStatus"].ToString(),
                    PackageName = x["PackageName"].ToString(),
                    CategoryName = x["CategoryName"].ToString(),
                    AssignedUserName = x["AssignedUserName"].ToString().Trim(),
                    ExceptionReason = x["ExceptionReason"].ToString(),
                    RushOrderStatus = x["RushOrderStatus"].ToString(),
                    CategoryId = Convert.ToInt32(x["CategoryId"]),
                    PackageSubscriptionId = Convert.ToInt32(x["PackageSubscriptionId"]),
                    HierarchyNodeID = x["HierarchyNodeID"].GetType().Name == "DBNull" ? null : (Int32?)x["HierarchyNodeID"],
                    ApplicantId = Convert.ToInt32(x["ApplicantId"]),
                    VerificationStatusCode = Convert.ToString(x["VerificationStatusCode"]),
                    ComplianceItemId = Convert.ToInt32(x["ComplianceItemId"]),
                    ReviewLevel = x["ReviewLevel"].GetType().Name == "DBNull" ? null : (Int32?)x["ReviewLevel"],
                    IsUiRulesViolate = Convert.ToBoolean(x["IsUiRulesViolate"]),
                    CustomAttributes = x["CustomAttributes"].GetType().Name == "DBNull" ? null : Convert.ToString(x["CustomAttributes"])
                }).ToList();
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }


        /// <summary>
        /// Gets the active items for the assignment and user work queue based on the given parameters.
        /// </summary>
        /// <param name="tenantId">Tenant Id</param>
        /// <param name="statusCode">Status code</param>
        /// <param name="assignToUserId">Assign to User Id</param>
        /// <param name="reviewerType">Reviewer Type Code</param>
        /// <param name="showIncompleteItems">To Show incomplete Items</param>
        /// <returns>Query for showing active items</returns>
        //public static IQueryable<vwComplianceItemDataQueueUG> GetApplicantComplianceItemDataUG(Int32 tenantId, List<String> lstStatusCode, Int32 assignToUserId, String reviewerType = null, Boolean showIncompleteItems = false, Int32 reviewerId = 0)
        //{
        //    try
        //    {
        //        return BALUtils.GetComplianceDataRepoInstance(tenantId).GetApplicantComplianceItemDataUG(tenantId, lstStatusCode, assignToUserId, reviewerType, showIncompleteItems, reviewerId);
        //    }
        //    catch (SysXException ex)
        //    {
        //        BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
        //        throw ex;
        //    }
        //    catch (Exception ex)
        //    {
        //        BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
        //        throw (new SysXException(ex.Message, ex));
        //    }
        //}

        //public static List<ApplicantComplianceItemDataContract> GetRefinedVerificationData(IQueryable<vwComplianceItemDataQueueUG> lstApplicantComplianceItemData,
        //    CustomPagingArgsContract gridCustomPaging, Int32 selectedPackageId, Int32 selectedCategoryId, Int32 selectedUserGroupId, Boolean showOnlyRushOrders)
        //{
        //    try
        //    {
        //        Entity.CustomPagingArgs customPagingArgs = new Entity.CustomPagingArgs();
        //        lstApplicantComplianceItemData = lstApplicantComplianceItemData.Where(x => x.ApplicantUserGroupID == selectedUserGroupId);
        //        if (selectedPackageId > 0)
        //        {
        //            lstApplicantComplianceItemData = lstApplicantComplianceItemData.Where(x => x.PackageID == selectedPackageId);

        //            if (selectedCategoryId > 0)
        //            {
        //                lstApplicantComplianceItemData = lstApplicantComplianceItemData.Where(x => x.CategoryID == selectedCategoryId);
        //            }
        //        }
        //        if (showOnlyRushOrders)
        //        {
        //            String paidStatus = ApplicantOrderStatus.Paid.GetStringValue();
        //            lstApplicantComplianceItemData = lstApplicantComplianceItemData.Where(x => x.RushOrderStatusCode.Equals(paidStatus));
        //        }
        //        lstApplicantComplianceItemData = customPagingArgs.ApplyFilterOrSort(lstApplicantComplianceItemData, gridCustomPaging);
        //        return AssignValuesToDataModel(lstApplicantComplianceItemData.ToList());
        //    }
        //    catch (SysXException ex)
        //    {
        //        BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
        //        throw ex;
        //    }
        //    catch (Exception ex)
        //    {
        //        BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
        //        throw (new SysXException(ex.Message, ex));
        //    }
        //}

        /// <summary>
        /// Gets the active items for the assignment and user work queue based on the given parameters for client users.
        /// </summary>
        /// <param name="tenantId">Tenant Id</param>
        /// <param name="statusCode">Status code</param>
        /// <param name="assignToUserId">Assign to User Id</param>
        /// <param name="reviewerType">Reviewer Type Code</param>
        /// <param name="showIncompleteItems">To Show incomplete Items</param>
        /// <returns>Query for showing active items</returns>
        //public static IQueryable<vwComplianceItemDataQueueRestrictedUG> GetApplicantComplianceItemDataForClientUsersUG(Int32 tenantId, List<String> lstStatusCode, Int32 assignToUserId, String reviewerType = null, Boolean showIncompleteItems = false, Int32 reviewerId = 0)
        //{
        //    try
        //    {
        //        return BALUtils.GetComplianceDataRepoInstance(tenantId).GetApplicantComplianceItemDataForClientUsersUG(tenantId, lstStatusCode, assignToUserId, reviewerType, showIncompleteItems, reviewerId);
        //    }
        //    catch (SysXException ex)
        //    {
        //        BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
        //        throw ex;
        //    }
        //    catch (Exception ex)
        //    {
        //        BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
        //        throw (new SysXException(ex.Message, ex));
        //    }
        //}

        //public static List<ApplicantComplianceItemDataContract> GetRefinedVerificationData(IQueryable<vwComplianceItemDataQueueRestrictedUG> lstApplicantComplianceItemData,
        //    CustomPagingArgsContract gridCustomPaging, Int32 selectedPackageId, Int32 selectedCategoryId, Int32 selectedUserGroupId, Boolean showOnlyRushOrders, Int32 currentLoggedInUserId)
        //{
        //    try
        //    {
        //        Entity.CustomPagingArgs customPagingArgs = new Entity.CustomPagingArgs();
        //        lstApplicantComplianceItemData = lstApplicantComplianceItemData.Where(x => x.ClientOrgUserId == currentLoggedInUserId);
        //        lstApplicantComplianceItemData = lstApplicantComplianceItemData.Where(x => x.ApplicantUserGroupID == selectedUserGroupId);
        //        if (selectedPackageId > 0)
        //        {
        //            lstApplicantComplianceItemData = lstApplicantComplianceItemData.Where(x => x.PackageID == selectedPackageId);

        //            if (selectedCategoryId > 0)
        //            {
        //                lstApplicantComplianceItemData = lstApplicantComplianceItemData.Where(x => x.CategoryID == selectedCategoryId);
        //            }
        //        }
        //        if (showOnlyRushOrders)
        //        {
        //            String paidStatus = ApplicantOrderStatus.Paid.GetStringValue();
        //            lstApplicantComplianceItemData = lstApplicantComplianceItemData.Where(x => x.RushOrderStatusCode.Equals(paidStatus));
        //        }
        //        lstApplicantComplianceItemData = customPagingArgs.ApplyFilterOrSort(lstApplicantComplianceItemData, gridCustomPaging);
        //        return AssignValuesToDataModel(lstApplicantComplianceItemData.ToList());
        //    }
        //    catch (SysXException ex)
        //    {
        //        BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
        //        throw ex;
        //    }
        //    catch (Exception ex)
        //    {
        //        BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
        //        throw (new SysXException(ex.Message, ex));
        //    }
        //}

        //public static List<VerificationQueueData> GetVerificationQueueData(VerificationQueueContract verificationQueueContract, Int32 tenantId)
        //{
        //    try
        //    {
        //        return BALUtils.GetComplianceDataRepoInstance(tenantId).GetVerificationQueueData(verificationQueueContract);
        //    }
        //    catch (SysXException ex)
        //    {
        //        BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
        //        throw ex;
        //    }
        //    catch (Exception ex)
        //    {
        //        BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
        //        throw (new SysXException(ex.Message, ex));
        //    }
        //}

        //private static List<ApplicantComplianceItemDataContract> AssignValuesToDataModel(List<vwComplianceItemDataQueue> lstApplicantComplianceItemData)
        //{
        //    try
        //    {
        //        return lstApplicantComplianceItemData.Select(x => new ApplicantComplianceItemDataContract
        //        {
        //            ApplicantComplianceItemId = x.ApplicantComplianceItemId == null ? 0 : x.ApplicantComplianceItemId.Value,
        //            ApplicantName = x.ApplicantName,
        //            ItemName = x.ItemName,
        //            SubmissionDate = x.SubmissionDate,
        //            VerificationStatus = x.VerificationStatus,
        //            SystemStatus = x.SystemStatus,
        //            PackageName = x.PackageName,
        //            CategoryName = x.CategoryName,
        //            AssignedUserName = x.AssignedUserName,
        //            ExceptionReason = x.ExceptionReason,
        //            RushOrderStatus = x.RushOrderStatus,
        //            CategoryId = Convert.ToInt32(x.CategoryID),
        //            PackageSubscriptionId = x.PackageSubscriptionID,
        //            HierarchyNodeID = x.HierarchyNodeID,
        //            ApplicantId = Convert.ToInt32(x.ApplicantId)
        //        }).ToList();
        //    }
        //    catch (SysXException ex)
        //    {
        //        BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
        //        throw ex;
        //    }
        //    catch (Exception ex)
        //    {
        //        BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
        //        throw (new SysXException(ex.Message, ex));
        //    }
        //}

        //private static List<ApplicantComplianceItemDataContract> AssignValuesToDataModel(List<vwComplianceItemDataQueueRestricted> lstApplicantComplianceItemData)
        //{
        //    try
        //    {
        //        return lstApplicantComplianceItemData.Select(x => new ApplicantComplianceItemDataContract
        //        {
        //            ApplicantComplianceItemId = x.ApplicantComplianceItemId == null ? 0 : x.ApplicantComplianceItemId.Value,
        //            ApplicantName = x.ApplicantName,
        //            ItemName = x.ItemName,
        //            SubmissionDate = x.SubmissionDate,
        //            VerificationStatus = x.VerificationStatus,
        //            SystemStatus = x.SystemStatus,
        //            PackageName = x.PackageName,
        //            CategoryName = x.CategoryName,
        //            AssignedUserName = x.AssignedUserName,
        //            ExceptionReason = x.ExceptionReason,
        //            RushOrderStatus = x.RushOrderStatus,
        //            CategoryId = Convert.ToInt32(x.CategoryID),
        //            PackageSubscriptionId = x.PackageSubscriptionID,
        //            HierarchyNodeID = x.HierarchyNodeID,
        //            ApplicantId = Convert.ToInt32(x.ApplicantId)
        //        }).ToList();
        //    }
        //    catch (SysXException ex)
        //    {
        //        BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
        //        throw ex;
        //    }
        //    catch (Exception ex)
        //    {
        //        BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
        //        throw (new SysXException(ex.Message, ex));
        //    }
        //}

        //private static List<ApplicantComplianceItemDataContract> AssignValuesToDataModel(List<vwComplianceItemDataQueueUG> lstApplicantComplianceItemData)
        //{
        //    try
        //    {
        //        return lstApplicantComplianceItemData.Select(x => new ApplicantComplianceItemDataContract
        //        {
        //            ApplicantComplianceItemId = x.ApplicantComplianceItemId == null ? 0 : x.ApplicantComplianceItemId.Value,
        //            ApplicantName = x.ApplicantName,
        //            ItemName = x.ItemName,
        //            SubmissionDate = x.SubmissionDate,
        //            VerificationStatus = x.VerificationStatus,
        //            SystemStatus = x.SystemStatus,
        //            PackageName = x.PackageName,
        //            CategoryName = x.CategoryName,
        //            AssignedUserName = x.AssignedUserName,
        //            ExceptionReason = x.ExceptionReason,
        //            RushOrderStatus = x.RushOrderStatus,
        //            CategoryId = Convert.ToInt32(x.CategoryID),
        //            PackageSubscriptionId = x.PackageSubscriptionID,
        //            HierarchyNodeID = x.HierarchyNodeID,
        //            ApplicantId = Convert.ToInt32(x.ApplicantId)
        //        }).ToList();
        //    }
        //    catch (SysXException ex)
        //    {
        //        BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
        //        throw ex;
        //    }
        //    catch (Exception ex)
        //    {
        //        BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
        //        throw (new SysXException(ex.Message, ex));
        //    }
        //}

        //private static List<ApplicantComplianceItemDataContract> AssignValuesToDataModel(List<vwComplianceItemDataQueueRestrictedUG> lstApplicantComplianceItemData)
        //{
        //    try
        //    {
        //        return lstApplicantComplianceItemData.Select(x => new ApplicantComplianceItemDataContract
        //        {
        //            ApplicantComplianceItemId = x.ApplicantComplianceItemId == null ? 0 : x.ApplicantComplianceItemId.Value,
        //            ApplicantName = x.ApplicantName,
        //            ItemName = x.ItemName,
        //            SubmissionDate = x.SubmissionDate,
        //            VerificationStatus = x.VerificationStatus,
        //            SystemStatus = x.SystemStatus,
        //            PackageName = x.PackageName,
        //            CategoryName = x.CategoryName,
        //            AssignedUserName = x.AssignedUserName,
        //            ExceptionReason = x.ExceptionReason,
        //            RushOrderStatus = x.RushOrderStatus,
        //            CategoryId = Convert.ToInt32(x.CategoryID),
        //            PackageSubscriptionId = x.PackageSubscriptionID,
        //            HierarchyNodeID = x.HierarchyNodeID,
        //            ApplicantId = Convert.ToInt32(x.ApplicantId)
        //        }).ToList();
        //    }
        //    catch (SysXException ex)
        //    {
        //        BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
        //        throw ex;
        //    }
        //    catch (Exception ex)
        //    {
        //        BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
        //        throw (new SysXException(ex.Message, ex));
        //    }
        //}

        public static vwApplicantComplianceItemData GetApplicantVerificationDetails(Int32 subscriptionID, Int32 tenantId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetApplicantVerificationDetails(subscriptionID);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        //public static List<Int32?> GetSubscriptionIdList(Int32 TenantId, Int32? PackageId, Int32? CategoryId, Int32? UserGroupId, Boolean? IncludeIncompleteItems, Boolean? ShowOnlyRushOrder, String StatusCodes, Int32? ReviewerId, String ReviewerType, Int32? AssignToUserId, Int32? SubscriptionId, Int32? orgUserId, out Int32 PageIndex, out Int32 TotalPage, Boolean isDefaultThirdParty, Boolean IsEscalationRecords)
        public static List<PkgSubscriptionIDList> GetSubscriptionIdList(Int32 TenantId, Int32? PackageId, Int32? CategoryId, Int32? UserGroupId, Boolean? IncludeIncompleteItems,
            Boolean? ShowOnlyRushOrder, String StatusCodes, Int32? ReviewerId, String reviewerType, Int32? AssignToUserId, Int32? SubscriptionId, Int32 ApplicantComplianceItemID,
            Int32? orgUserId, Boolean isDefaultThirdParty, Boolean IsEscalationRecords, Int32 currentLoggedInUser)
        {
            try
            {
                return AssignSubscriptionDataToModel(BALUtils.GetComplianceDataRepoInstance(TenantId).GetSubscriptionIdList(TenantId, PackageId, CategoryId, UserGroupId, IncludeIncompleteItems, ShowOnlyRushOrder, StatusCodes, ReviewerId, reviewerType, AssignToUserId, SubscriptionId, ApplicantComplianceItemID, orgUserId, isDefaultThirdParty, IsEscalationRecords, currentLoggedInUser));
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        private static List<PkgSubscriptionIDList> AssignSubscriptionDataToModel(DataTable table)
        {
            try
            {
                List<PkgSubscriptionIDList> lstServiceFormTenantMapping = new List<PkgSubscriptionIDList>();
                IEnumerable<DataRow> rows = table.AsEnumerable();
                if (rows.Count() > 0)
                {
                    lstServiceFormTenantMapping = rows.Select(x => new PkgSubscriptionIDList
                    {
                        PackageSubscriptionID = x["PackageSubscriptionID"].GetType().Name != "DBNull" ? Convert.ToInt32(x["PackageSubscriptionID"]) : 0,
                        applicantcomplianceitemid = x["applicantcomplianceitemid"].GetType().Name != "DBNull" ? Convert.ToInt32(x["applicantcomplianceitemid"]) : 0,
                        applicantcompliancecategoryid = x["applicantcompliancecategoryid"].GetType().Name != "DBNull" ? Convert.ToInt32(x["applicantcompliancecategoryid"]) : 0,
                        complianceitemid = x["complianceitemid"].GetType().Name != "DBNull" ? Convert.ToInt32(x["complianceitemid"]) : 0,
                    }).ToList();
                }

                return lstServiceFormTenantMapping;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Assigns the items corresponding to the given list of Compliance Item Ids to the selected user.
        /// </summary>
        /// <param name="complianceItemIds">List of Compliance Item Ids</param>
        /// <param name="userId">Selected user Id</param>
        /// <param name="currentLoggedInUserId">Current Logged In User Id</param>
        /// <param name="tenantId">Tenant Id</param>
        /// <returns>True if items assigned successfully</returns>
        public static Boolean AssignItemsToUser(List<Int32> complianceItemIds, Int32 userId, Int32 currentLoggedInUserId, Int32 tenantId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).AssignItemsToUser(complianceItemIds, userId, currentLoggedInUserId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static Tuple<List<Int32>, String> AssignItemsToUserNew(Int32 tenantId, String xml, Int32 currentLoggedInUserId, Int32 assignToUserId, Boolean IsMutipleTimesAssignmentAllowed)
        {
            try
            {
                DataTable dt = BALUtils.GetComplianceDataRepoInstance(tenantId).AssignItemsToUserNew(tenantId, xml, currentLoggedInUserId, assignToUserId, IsMutipleTimesAssignmentAllowed);
                List<Int32> idsUnAssigned = new List<Int32>();
                String errorMessage = String.Empty;
                IEnumerable<DataRow> rows = dt.AsEnumerable();

                if (dt.Rows.Count > AppConsts.NONE)   //UAT-2809
                {
                    errorMessage = rows.Select(x => Convert.ToString(x["ErrorMessage"])).FirstOrDefault();
                }
                if (errorMessage.IsNullOrEmpty())
                {
                    idsUnAssigned = rows.Select(x =>
                        Convert.ToInt32(x["RecordID"])).ToList();

                }
                return new Tuple<List<Int32>, String>(idsUnAssigned, errorMessage);  //UAT 2809 
                // return idsUnAssigned;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        #region ApplicantComplianceItemData for Verification

        /// <summary>
        /// To get Compliance Item data submitted by applicant
        /// </summary>
        /// <param name="applicantComplianceItemID"></param>
        /// <param name="tenantId"></param>
        /// <returns></returns>
        public static ApplicantComplianceItemData GetApplicantComplianceItemData(Int32 applicantComplianceItemID, Int32 tenantId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetApplicantComplianceItemData(applicantComplianceItemID);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }



        //public static List<ApplicantDocuments> GetItemRelatedDocument(Int32 applicantComplianceItemID, Int32 tenantId, Int32 packageId)
        //{
        //    try
        //    {
        //        String code = ComplianceAttributeDatatypes.FileUpload.GetStringValue();
        //        return null;//BALUtils.GetComplianceDataRepoInstance(tenantId).GetItemRelatedDocument(applicantComplianceItemID, packageId);
        //    }
        //    catch (SysXException ex)
        //    {
        //        BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
        //        throw ex;
        //    }
        //    catch (Exception ex)
        //    {
        //        BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
        //        throw (new SysXException(ex.Message, ex));
        //    }
        //}

        //public static List<ApplicantDocuments> GetItemRelatedDocumentForException(Int32 applicantComplianceItemID, Int32 tenantId, Int32 packageId)
        //{
        //    try
        //    {
        //        return null;//BALUtils.GetComplianceDataRepoInstance(tenantId).GetItemRelatedDocumentException(applicantComplianceItemID, packageId);
        //    }
        //    catch (SysXException ex)
        //    {
        //        BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
        //        throw ex;
        //    }
        //    catch (Exception ex)
        //    {
        //        BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
        //        throw (new SysXException(ex.Message, ex));
        //    }
        //}


        public static List<ApplicantItemVerificationData> GetApplicantDataForVerification(Int32 complianceCategoryId, Int32 packageSubscriptionId, Int32 tenantId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetApplicantDataForVerification(complianceCategoryId, packageSubscriptionId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }


        public static Boolean RenameFile(String oldFileNamwe, String newFileName)
        {
            try
            {
                File.Move(oldFileNamwe, newFileName);
                return true;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                return false;

            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                return false;
            }
        }


        public static Boolean UpdateDocumentPath(String newFileName, String oldFileName, Int32 documentId, Int32 tenantId, Int32 orguserId)
        {
            try
            {
                Boolean aWSUseS3 = false;
                if (!ConfigurationManager.AppSettings["AWSUseS3"].IsNullOrEmpty())
                {
                    aWSUseS3 = Convert.ToBoolean(ConfigurationManager.AppSettings["AWSUseS3"]);
                }
                if (aWSUseS3 == false)
                {
                    if (RenameFile(oldFileName, newFileName))
                    {
                        if (BALUtils.GetComplianceDataRepoInstance(tenantId).UpdateDocumentPath(newFileName, documentId))
                        {
                            //BALUtils.GetSecurityRepoInstance().SynchronizeApplicantDocument(orguserId, tenantId);
                            return true;
                        }
                        return false;
                    }
                    else
                    {
                        return false;
                    }
                }
                else
                {
                    //AWS code to save document to S3 location
                    AmazonS3Documents objAmazonS3 = new AmazonS3Documents();
                    String returnFilePath = objAmazonS3.MoveDocument(oldFileName, newFileName);
                    if (BALUtils.GetComplianceDataRepoInstance(tenantId).UpdateDocumentPath(returnFilePath, documentId))
                    {
                        return true;
                    }
                    return false;
                }


            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }




        /// <summary>
        /// CategoryNotes updated by the admins when all items are having exceptions applied.
        /// </summary>
        /// <param name="applicantComplianceCategoryId"></param>
        /// <param name="notes"></param>
        /// <param name="currentUserId"></param>
        public static void UpdateApplicantCategoryNotes(Int32 applicantComplianceCategoryId, String notes, Int32 currentUserId, Int32 tenantId)
        {
            try
            {
                BALUtils.GetComplianceDataRepoInstance(tenantId).UpdateApplicantCategoryNotes(applicantComplianceCategoryId, notes, currentUserId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        #endregion
        public static List<Entity.OrganizationUser> GetOrganizationUsersByIds(List<Int32?> lstUserIds)
        {
            try
            {
                return BALUtils.GetSecurityRepoInstance().GetOrganizationUsersByIds(lstUserIds);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static IQueryable<Entity.OrganizationUser> GetOrganizationUserInfoByUserId(String UserId)
        {
            try
            {
                return BALUtils.GetSecurityRepoInstance().GetOrganizationUserInfoByUserId(UserId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static Entity.OrganizationUser GetOrganizationUserDetailByOrganizationUserId(int organizationUserId)
        {
            try
            {
                return BALUtils.GetSecurityRepoInstance().GetOrganizationUserDetail(organizationUserId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// To get lkpItemComplianceStatus table data
        /// </summary>
        /// <param name="currentStatusCode"></param>
        /// <param name="selectedTenantId"></param>
        /// <returns></returns>
        public static Int32 GetlkpItemComplianceStatus(String currentStatusCode, Int32 selectedTenantId)
        {
            try
            {
                return LookupManager.GetLookUpData<Entity.ClientEntity.lkpItemComplianceStatu>(selectedTenantId).FirstOrDefault(x => x.Code == currentStatusCode && x.IsDeleted == false).ItemComplianceStatusID;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }


        public static List<lkpItemComplianceStatu> GetItemComplianceStatus(Int32 tenantId)
        {
            try
            {
                return LookupManager.GetLookUpData<Entity.ClientEntity.lkpItemComplianceStatu>(tenantId).Where(x => x.IsDeleted == false).ToList();
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static List<lkpPackageComplianceStatu> GetOverAllComplianceStatus(Int32 tenantId)
        {
            try
            {
                return LookupManager.GetLookUpData<Entity.ClientEntity.lkpPackageComplianceStatu>(tenantId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }



        public static List<lkpCategoryComplianceStatu> GetCategoryComplianceStatus(Int32 tenantId)
        {
            try
            {
                return LookupManager.GetLookUpData<Entity.ClientEntity.lkpCategoryComplianceStatu>(tenantId).Where(x => x.IsDeleted == false).ToList();
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static lkpCategoryComplianceStatu GetCategoryComplianceStatusByCode(String categoryComplianceStatusCode, Int32 tenantId)
        {
            try
            {
                return LookupManager.GetLookUpData<Entity.ClientEntity.lkpCategoryComplianceStatu>(tenantId).Where(lkpCC => lkpCC.Code == categoryComplianceStatusCode
                && lkpCC.IsDeleted == false).FirstOrDefault();
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }


        ///// <summary>
        ///// To update Item Data Status
        ///// </summary>
        ///// <param name="itemDataId"></param>
        ///// <param name="comments"></param>
        ///// <param name="currentStatusId"></param>
        ///// <param name="currentLoggedInUserId"></param>
        ///// <param name="selectedTenantId"></param>
        ///// <param name="clientAdminId"></param>
        ///// <returns></returns>
        //public static Boolean UpdateItemDataStatus(Int32 itemDataId, String comments, Int32 currentStatusId, Int32 currentLoggedInUserId, Int32 selectedTenantId, Int32? reviewerTenantId
        //   , DateTime dtCurrentDateTime, Int16 clientAdminId = 0, Int32 reviewerUserId = 0)
        //{
        //    try 
        //    {
        //        BALUtils.GetComplianceDataRepoInstance(selectedTenantId).UpdateItemStatus(itemDataId, comments, currentStatusId, currentLoggedInUserId, clientAdminId, reviewerTenantId, reviewerUserId, dtCurrentDateTime);
        //        return true;
        //    }
        //    catch (SysXException ex)
        //    {
        //        BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
        //        throw ex;
        //    }
        //    catch (Exception ex)
        //    {
        //        BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
        //        throw (new SysXException(ex.Message, ex));
        //    }
        //}


        /// <summary>
        /// Save/Update Applicant data from Verification details screen and Update item status
        /// </summary>
        //public static Boolean SaveApplicanteDataVerificationDetails(ApplicantComplianceCategoryData applicantCategoryData, ApplicantComplianceItemData applicantItemData, List<ApplicantComplianceAttributeData> lstApplicantData,
        //     Int32 createdModifiedById, String adminComments, Int32 _newStatus, Int16 reviewerTypeId, Int32? reviewerTenantId, Int32 thirdPartyReviewerUserId, Int32 applicantId
        //    , Boolean IsAdminReviewRequired, String newItemStatusCode, String currentTenantTypeCode, Int32 packageId, Int32 tenantId)

        public static Boolean SaveApplicanteDataVerificationDetails(VerificationDetailsContract verificationDetailsContract, String recordActionType, Int32 tenantId
                                                                   , out ApplicantComplianceItemData _applicantItemData, Boolean IsReconciliationDataSaved
                                                                   , List<Int32> rejectionReasonIds)
        {
            try
            {
                String _categoryStatus = ApplicantCategoryComplianceStatus.Incomplete.GetStringValue();
                List<lkpCategoryComplianceStatu> lstCategoryStatus = LookupManager.GetLookUpData<lkpCategoryComplianceStatu>(tenantId).ToList();
                List<lkpItemMovementType> lstMovementTypes = GetlkpItemMovementType(tenantId);

                Int32 _categoryComplianceStatusId = lstCategoryStatus.Where(catSts => catSts.Code == _categoryStatus).FirstOrDefault().CategoryComplianceStatusID;

                _applicantItemData = BALUtils.GetComplianceDataRepoInstance(tenantId).SaveApplicanteDataVerificationDetails(verificationDetailsContract, recordActionType,
                    _categoryComplianceStatusId, lstMovementTypes, tenantId, IsReconciliationDataSaved);
                if (IsReconciliationDataSaved)
                {

                    RecounciliationProductivityData objRecounProdData = new RecounciliationProductivityData();
                    objRecounProdData.TenantID = tenantId;
                    objRecounProdData.OrganizationUserID = verificationDetailsContract.createdModifiedById;
                    //objRecounProdData.FirstName=
                    //objRecounProdData.LastName=
                    objRecounProdData.ApprovedCount = verificationDetailsContract.newItemStatusCode.ToString() == "APRD" ? 1 : 0;
                    objRecounProdData.RejectedCount = verificationDetailsContract.newItemStatusCode.ToString() == "NAPD" ? 1 : 0;
                    objRecounProdData.TotalCount = !string.IsNullOrEmpty(verificationDetailsContract.newItemStatusCode.ToString()) ? 1 : 0;
                    objRecounProdData.CreatedBy = verificationDetailsContract.createdModifiedById;
                    objRecounProdData.ProductivityDate = DateTime.Now;
                    InsertUpdateReconciliationProductivityData(objRecounProdData);
                }
                //UAT-3951
                if (!rejectionReasonIds.IsNullOrEmpty() && !_applicantItemData.IsNullOrEmpty() && _applicantItemData.ApplicantComplianceItemID > 0)
                {
                    SaveRejectionReasonAuditHistory(tenantId, rejectionReasonIds, _applicantItemData.ApplicantComplianceItemID, verificationDetailsContract.createdModifiedById);
                }

                return true;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        private static List<lkpObjectType> GetlkpObjectType(Int32 tenantId)
        {
            List<lkpObjectType> lstObjectTypes = LookupManager.GetLookUpData<lkpObjectType>(tenantId).ToList();
            return lstObjectTypes;
        }

        private static List<lkpItemMovementType> GetlkpItemMovementType(Int32 tenantId)
        {
            List<lkpItemMovementType> lstMovementTypes = LookupManager.GetLookUpData<lkpItemMovementType>(tenantId).ToList();
            return lstMovementTypes;
        }

        public static Boolean UpdateApplicantComplianceDocumentMaps(List<ApplicantComplianceDocumentMap> toAddDocumentMap, List<Int32> toDeleteApplicantComplianceDocumentMapIDs, Int32 currentUserId, Int32 tenantId)
        {
            try
            {
                BALUtils.GetComplianceDataRepoInstance(tenantId).UpdateApplicantComplianceDocumentMaps(toAddDocumentMap, toDeleteApplicantComplianceDocumentMapIDs, currentUserId);
                return true;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Insert/Update Documents related data for all items 
        /// 1. EXCEPT incomplete
        /// 2. Data for other attributes has been already added but FileType attribute is being added for the first time
        /// </summary>
        /// <param name="toAddDocumentMap"></param>
        /// <param name="ToAddDocumentMapException"></param>
        /// <returns></returns>
        public static Boolean AddUpdateApplicantComplianceDocumentMappingData(ApplicantComplianceDocumentMap toAddDocumentMap, ExceptionDocumentMapping ToAddDocumentMapException, Int32 applicantComplianceItemDataId, Int32 complianceAttributeId, Int32 tenantId)
        {
            try
            {
                BALUtils.GetComplianceDataRepoInstance(tenantId).AddUpdateApplicantComplianceDocumentMappingData(toAddDocumentMap, ToAddDocumentMapException, applicantComplianceItemDataId, complianceAttributeId);
                return true;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Add Category, Item, Attribute & Document mapping for Incomplete Items
        /// </summary>  
        /// <param name="toAddDocumentMap"></param>
        /// <param name="categoryData"></param>
        /// <param name="itemData"></param>
        /// <param name="attributeData"></param>
        /// <returns></returns>
        public static Boolean AddIncompleteDocumentMapping(ApplicantComplianceDocumentMap toAddDocumentMap, ApplicantComplianceCategoryData categoryData,
              ApplicantComplianceItemData itemData, ApplicantComplianceAttributeData attributeData, Int32 packageSubscriptionId, Int32 applicantId, out Int32 itemDataId
            , Int32 tenantId)
        {
            try
            {
                BALUtils.GetComplianceDataRepoInstance(tenantId).AddIncompleteDocumentMapping(toAddDocumentMap, categoryData, itemData, attributeData, packageSubscriptionId, applicantId, out itemDataId);
                return true;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }


        public static Boolean RemoveMapping(Int32 applicantMappingId, Int32 curentUserId, Boolean Isexception, Int32 TenantId)
        {
            try
            {
                BALUtils.GetComplianceDataRepoInstance(TenantId).RemoveMapping(applicantMappingId, curentUserId, Isexception);
                return true;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static Boolean AssignUnAssignItemDocuments(List<ApplicantComplianceDocumentMap> toAddDocumentMap, List<ExceptionDocumentMapping> ToAddDocumentMapException, List<Int32> ToDeleteApplicantComplianceDocumentMapIDs, Boolean IsException, Int32 tenantid, Int32 CurrentUserId, Int32 applicantComplianceItemId)
        {
            try
            {
                BALUtils.GetComplianceDataRepoInstance(tenantid).AssignUnAssignItemDocuments(toAddDocumentMap, ToAddDocumentMapException,
                    ToDeleteApplicantComplianceDocumentMapIDs, IsException, CurrentUserId, applicantComplianceItemId);
                return true;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static Boolean AssignUnAssignIncompleteItemDocuments(List<ApplicantComplianceDocumentMap> toAddDocumentMap, List<Int32> toDeleteDocumentMap, ApplicantComplianceCategoryData categoryData,
      ApplicantComplianceItemData itemData, ApplicantComplianceAttributeData attributeData, Int32 packageSubscriptionId, Int32 applicantId, out Int32 itemDataId, Int32 currentUserId, Int32 tenantId, List<ListItemAssignmentProperties> lstAssignmentProperties)
        {
            try
            {
                BALUtils.GetComplianceDataRepoInstance(tenantId).AssignUnAssignIncompleteItemDocuments(toAddDocumentMap, toDeleteDocumentMap, categoryData, itemData, attributeData, packageSubscriptionId, applicantId, currentUserId, out itemDataId, lstAssignmentProperties);
                return true;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static String ValidateDocumentMappingRules(Int32 organizationUserId, Int32 compliancePackageId, List<ApplicantComplianceAttributeData> lstApplicantData,
            ApplicantComplianceItemData applicantItemData, Int32 categoryId, Int32 packageSubscriptionId, Boolean isDataEntry, Int32 tenantId)
        {
            try
            {
                DAL.Interfaces.IComplianceDataRepository _repoInstance = BALUtils.GetComplianceDataRepoInstance(tenantId);
                List<lkpObjectType> lstObjectTypes = GetlkpObjectType(tenantId);

                return _repoInstance.ValidateUIDocuments(organizationUserId, compliancePackageId, lstApplicantData, applicantItemData, categoryId, packageSubscriptionId, lstObjectTypes);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static String ValidateUIInput(Int32 organizationUserId, Int32 compliancePackageId, List<ApplicantComplianceAttributeData> lstApplicantData, Int32 categoryId, ApplicantComplianceItemData applicantItemData, Int32 packageSubscriptionId, Boolean isDataEntry, Int32 tenantId, List<ApplicantComplianceAttributeData> lstCompleteApplicantData = null)
        {
            try
            {
                Int32 _attributeId = AppConsts.NONE;
                Int32 _applicantAttributeDataId = AppConsts.NONE;
                Int32 _documentCount = AppConsts.NONE;

                DAL.Interfaces.IComplianceDataRepository _repoInstance = BALUtils.GetComplianceDataRepoInstance(tenantId);

                if (applicantItemData.ApplicantComplianceItemID != AppConsts.NONE)
                {
                    if (_repoInstance.GetDocumentTypeAttributeData(applicantItemData.ApplicantComplianceItemID, out _attributeId, out _applicantAttributeDataId, out _documentCount))
                    {
                        lstApplicantData.Add(new ApplicantComplianceAttributeData
                        {
                            AttributeValue = Convert.ToString(_documentCount),
                            ApplicantComplianceAttributeID = _applicantAttributeDataId,
                            ComplianceAttributeID = _attributeId
                        });
                    }
                }
                else // Validate the Incomplete items' documents
                {
                    ComplianceItemAttribute _itemAttribute = _repoInstance.ItemHasFileAttribute(applicantItemData.ComplianceItemID);
                    if (_itemAttribute.IsNotNull())
                    {
                        lstApplicantData.Add(new ApplicantComplianceAttributeData
                        {
                            AttributeValue = AppConsts.ZERO,
                            ApplicantComplianceAttributeID = AppConsts.NONE,
                            ComplianceAttributeID = _itemAttribute.CIA_AttributeID
                        });
                    }
                }
                List<lkpObjectType> lstObjectTypes = GetlkpObjectType(tenantId);
                return _repoInstance.ValidateUIInput(organizationUserId, compliancePackageId, lstApplicantData, applicantItemData.ComplianceItemID, categoryId, packageSubscriptionId, isDataEntry, lstObjectTypes, lstCompleteApplicantData);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static Dictionary<Int32, String> ValidateUIRulesVerificationDetail(List<ApplicantComplianceItemData> lstItemData, List<ApplicantComplianceAttributeData> lstAttributeData,
          Int32 packageSubscriptionId, Int32 compliancePackageId, Int32 categoryId, Int32 organizationUserId, Int32 tenantId)
        {
            try
            {
                DAL.Interfaces.IComplianceDataRepository _repoInstance = BALUtils.GetComplianceDataRepoInstance(tenantId);

                #region GET DATA OF DOCUMENT TYPE ATTRIBUTES OF ALL ITEM TYPES EXCEPT INCOMPLETE ITEMS, FOR UI VALIDATION

                // Get Item Ids of all items Except INCOMPLETE items, to get their data
                List<Int32> _lstApplicantItemDataIds = lstItemData.Where(itemData => itemData.ApplicantComplianceItemID != AppConsts.NONE)
                                                                  .Select(itemData => itemData.ApplicantComplianceItemID).ToList();

                List<ApplicantComplianceAttributeData> _lstDocumentTypeAttributesData = _repoInstance.GetAllDocumentTypeAttributData(_lstApplicantItemDataIds);

                if (_lstDocumentTypeAttributesData.IsNotNull() && _lstDocumentTypeAttributesData.Count() > AppConsts.NONE)
                {
                    foreach (var attributeData in _lstDocumentTypeAttributesData)
                    {
                        //lstAttributeData.AddRange(_lstDocumentTypeAttributesData);  
                        lstAttributeData.Add(new ApplicantComplianceAttributeData
                        {
                            AttributeValue = attributeData.AttributeValue,
                            ApplicantComplianceAttributeID = attributeData.ApplicantComplianceAttributeID,
                            ComplianceAttributeID = attributeData.ComplianceAttributeID,
                            ApplicantComplianceItemID = attributeData.ApplicantComplianceItemID,
                            ComplianceItemId = Convert.ToInt32(attributeData.ApplicantComplianceItemData.ComplianceItemID),
                        });
                    }

                }


                #endregion

                #region   CREATE DATA OF DOCUMENT TYPE ATTRIBUTES OF INCOMPLETE ITEM TYPES, FOR UI VALIDATION

                List<ApplicantComplianceItemData> _lstIncompleteItems = lstItemData.Where(itemData => itemData.ApplicantComplianceItemID == AppConsts.NONE
                                                                      && itemData.IsFileUploadApplicable).ToList();

                foreach (var incompleteItem in _lstIncompleteItems)
                {
                    lstAttributeData.Add(new ApplicantComplianceAttributeData
                    {
                        AttributeValue = AppConsts.ZERO,
                        ApplicantComplianceAttributeID = AppConsts.NONE,
                        ComplianceAttributeID = Convert.ToInt32(incompleteItem.FileUploadAttributeId),
                        ComplianceItemId = Convert.ToInt32(incompleteItem.ComplianceItemID)
                    });
                }

                #endregion
                List<lkpObjectType> lstObjectTypes = GetlkpObjectType(tenantId);
                return _repoInstance.ValidateUIRulesVerificationDetail(lstItemData, lstAttributeData, packageSubscriptionId, compliancePackageId, categoryId, organizationUserId, lstObjectTypes, tenantId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        #endregion

        #region ApplicantComplianceItemData for Exception

        /// <summary>
        /// Get Applicant Compliance Item by id
        /// </summary>
        /// <param name="tenantId"></param>
        /// <param name="categoryId"></param>
        /// <returns></returns>
        public static ApplicantComplianceItemData GetApplicantComplianceItemDataByID(Int32 tenantId, Int32 applicantComlianceCategoryID, Int32 itemID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetApplicantComplianceItemDataByID(applicantComlianceCategoryID, itemID);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static ApplicantComplianceItemData GetApplicantComplianceItemDataByID(Int32 tenantId, Int32 applicantComplianceItemID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetApplicantComplianceItemDataByID(applicantComplianceItemID);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// To update Item Data Status
        /// </summary>
        /// <param name="ItemDataId"></param>
        /// <param name="currentStatusId"></param>
        /// <param name="currentLoggedInUserId"></param>
        /// <returns></returns>
        public static Boolean UpdateItemData(Int32 itemDataId, String comments, Int32 currentStatusId, Int32 currentLoggedInUserId, Int32 selectedTenantId, String currentLoggedInUserName, List<Int32> ListOfIdToRemoveDocument, Int32 itemId, List<Int32> ListOfIdToAddDocument)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(selectedTenantId).UpdateItemData(itemDataId, comments, currentStatusId, currentLoggedInUserId, currentLoggedInUserName, ListOfIdToRemoveDocument, itemId, ListOfIdToAddDocument);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }

        }

        /// <summary>
        /// To update Item Data Status
        /// </summary>
        /// <param name="ItemDataId"></param>
        /// <param name="currentStatusId"></param>
        /// <param name="currentLoggedInUserId"></param>
        /// <returns></returns>
        public static Boolean UpdateExceptionVerificationItemData(Int32 itemDataId, Int32 itemId, String comments, Int32 statusId, Int32 currentLoggedInUserId, String currentLoggedInUserName, List<Int32> lstDocumentsToRemove,
                                                                  Int32 selectedTenantId, List<ListItemAssignmentProperties> lstAssignmentProperties, String recordActionType, String currentLoggedInUserInitials, String statusCode, DateTime? itemExpirationDate = null)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(selectedTenantId).UpdateExceptionVerificationItemData(itemDataId, itemId, comments, statusId, currentLoggedInUserId, currentLoggedInUserName, lstDocumentsToRemove, lstAssignmentProperties, recordActionType, currentLoggedInUserInitials, statusCode, itemExpirationDate);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }

        }

        public static void RemoveExceptionDocumentMapping(Int32 mappingId, Int32 currentUserId, Int32 selectedTenantId)
        {
            try
            {
                BALUtils.GetComplianceDataRepoInstance(selectedTenantId).RemoveExceptionDocumentMapping(mappingId, currentUserId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Save the Applicant uploaded documents and map with ApplicantComplianceItemData
        /// </summary>
        /// <param name="applicantDocument"></param>
        /// <param name="applicantComplianceItemId"></param>
        /// <param name="tenantId"></param>
        /// <returns></returns>
        public static Boolean SaveApplicantUploadedDocuments(List<ApplicantDocument> applicantDocumentList,
            int applicantComplianceItemId,
            int tenantId)
        {
            try
            {
                if (BALUtils.GetComplianceDataRepoInstance(tenantId).SaveApplicantUploadedDocuments(applicantDocumentList, applicantComplianceItemId))
                {
                    List<Int32> lstOrgUserIds = applicantDocumentList.Select(x => x.OrganizationUserID.Value).Distinct().ToList();
                    foreach (Int32 orgUserId in lstOrgUserIds)
                        //BALUtils.GetSecurityRepoInstance().SynchronizeApplicantDocument(orgUserId, tenantId);
                        return true;
                }
                return false;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static int SaveApplicantDocument(ApplicantDocument applicantDocument, int tenantId)
        {
            Int32 docId = BALUtils.GetComplianceDataRepoInstance(tenantId).SaveApplicantDocument(applicantDocument);
            //BALUtils.GetSecurityRepoInstance().SynchronizeApplicantDocument(applicantDocument.OrganizationUserID.Value, tenantId);
            return docId;
        }


        /// <summary>
        /// Save the Applicant uploaded documents and map with ApplicantComplianceItemData and Add in ApplicantComplianceItemData
        /// </summary>
        /// <param name="applicantDocument"></param>
        /// <param name="applicantComplianceItemID"></param>
        /// <returns></returns>
        public static Int32 SaveInApplicantItemDataAndMapTable(Int32 tenantID, ApplicantDocument applicantDocument, ApplicantComplianceItemData applicantComplianceItemData)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).SaveInApplicantItemDataAndMapTable(applicantDocument, applicantComplianceItemData);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }

        }
        #endregion

        #region Exception
        public static ComplianceSaveResponse SaveExceptionData(ApplicantComplianceCategoryData applicantCategoryData, ApplicantComplianceItemData applicantComplianceItemData, string statusName, string reviewerTypeCode, string categoryStatusCode, int tenantId, List<ExceptionDocumentMapping> exceptionDocumentMappings, List<int> SavedApplicantDocumentIds, Boolean isCategory, String categoryExceptionStatusCode, Int32 orgnaizationUserID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).SaveExceptionData(applicantCategoryData, applicantComplianceItemData, statusName, categoryStatusCode, reviewerTypeCode, exceptionDocumentMappings, SavedApplicantDocumentIds, isCategory, categoryExceptionStatusCode, orgnaizationUserID);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static ComplianceSaveResponse UpdateExceptionData(int tenantId, ApplicantComplianceItemData applicantComplianceItemData, List<ExceptionDocumentMapping> exceptionMapping, List<int> SavedApplicantDocumentIds, string reviewerTypeCode, string itemstatusCodeName
                                                                        , String categoryStatusCode, String categoryExceptionStatusCode)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).UpdateExceptionData(applicantComplianceItemData, exceptionMapping, SavedApplicantDocumentIds, reviewerTypeCode, itemstatusCodeName, categoryStatusCode, categoryExceptionStatusCode);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static ComplianceSaveResponse RemoveExceptionData(Int32 applicantComplianceItem, Int32 organizationUserId, Int32 tenantId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).RemoveExceptionData(applicantComplianceItem, organizationUserId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        #endregion Exception

        #region Search

        /// <summary>
        /// TODO: Will remove this method when custom paging is implemented in applicant search. 
        /// Search the data in vwComplianceItemDataQueue and returns the matched result.
        /// </summary>
        /// <param name="searchItemDataContract">List of fields and their data to be searched.</param>
        /// <returns>ApplicantComplianceItemData</returns>
        public static IQueryable<T> PerformSearch<T>(SearchItemDataContract searchItemDataContract, String orderByFieldName)
        {
            try
            {
                Dictionary<String, String> searchOptions = GetSearchOptions(searchItemDataContract);
                return BALUtils.GetComplianceDataRepoInstance(searchItemDataContract.ClientID).PerformSearch<T>(searchOptions, orderByFieldName);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Search the data in vwComplianceItemDataQueue and returns the matched result.
        /// </summary>
        /// <param name="searchItemDataContract">List of fields and their data to be searched.</param>
        /// <returns>ApplicantComplianceItemData</returns>
        public static IQueryable<T> PerformSearch<T>(SearchItemDataContract searchItemDataContract, CustomPagingArgsContract customPagingArgsContract)
        {
            try
            {
                Dictionary<String, String> searchOptions = GetSearchOptions(searchItemDataContract);
                return BALUtils.GetComplianceDataRepoInstance(searchItemDataContract.ClientID).PerformSearch<T>(searchOptions, customPagingArgsContract);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        private static Dictionary<String, String> GetSearchOptions(SearchItemDataContract searchItemDataContract)
        {
            Dictionary<String, String> searchOptions = new Dictionary<String, String>();
            searchOptions.Add("ClientID", searchItemDataContract.ClientID.ToString());
            searchOptions.Add("PackageID", searchItemDataContract.PackageID.ToString());
            searchOptions.Add("CategoryID", searchItemDataContract.CategoryID.ToString());
            searchOptions.Add("StatusID", searchItemDataContract.StatusID.IsNotNull() && searchItemDataContract.StatusID.Count() > 0 ?
            String.Join(SysXSearchConsts.SEARCH_MULTIVALUE_SEPERATOR.ToString(), searchItemDataContract.StatusID.ToArray()) : null);
            searchOptions.Add("ApplicantFirstName", searchItemDataContract.ApplicantFirstName + SysXSearchConsts.SEARCH_MULTIVALUE_SEPERATOR);
            searchOptions.Add("ApplicantLastName", searchItemDataContract.ApplicantLastName + SysXSearchConsts.SEARCH_MULTIVALUE_SEPERATOR);
            searchOptions.Add("ProgramID", searchItemDataContract.ProgramID.ToString());
            searchOptions.Add("DateOfBirth", searchItemDataContract.DateOfBirth.HasValue ? searchItemDataContract.DateOfBirth.Value.ToString() : null);
            searchOptions.Add("ItemLabel", searchItemDataContract.ItemLabel + SysXSearchConsts.SEARCH_MULTIVALUE_SEPERATOR);
            //searchOptions.Add("ItemName", searchItemDataContract.ItemLabel + SysXSearchConsts.SEARCH_MULTIVALUE_SEPERATOR);
            //searchOptions.Add("ItemScreenLabel", searchItemDataContract.ItemLabel + SysXSearchConsts.SEARCH_MULTIVALUE_SEPERATOR);
            searchOptions.Add("AssignedToUserID", searchItemDataContract.AssignedToUserID.IsNotNull() ? searchItemDataContract.AssignedToUserID.ToString() : null);
            searchOptions.Add("ApplicantMiddleName", searchItemDataContract.ApplicantMiddleName + SysXSearchConsts.SEARCH_MULTIVALUE_SEPERATOR);
            searchOptions.Add("EmailAddress", searchItemDataContract.EmailAddress + SysXSearchConsts.SEARCH_MULTIVALUE_SEPERATOR);
            searchOptions.Add("SecondaryEmailAddress", searchItemDataContract.SecondaryEmailAddress + SysXSearchConsts.SEARCH_MULTIVALUE_SEPERATOR);
            searchOptions.Add("OrderStatusCode", searchItemDataContract.LstStatusCode.IsNotNull() && searchItemDataContract.LstStatusCode.Count() > 0 ?
                String.Join(SysXSearchConsts.SEARCH_MULTIVALUE_SEPERATOR.ToString(), searchItemDataContract.LstStatusCode.ToArray()) : null);
            searchOptions.Add("PaymentTypeCode", searchItemDataContract.LstPaymentType.IsNotNull() && searchItemDataContract.LstPaymentType.Count() > 0 ?
                String.Join(SysXSearchConsts.SEARCH_MULTIVALUE_SEPERATOR.ToString(), searchItemDataContract.LstPaymentType.ToArray()) : null);

            searchOptions.Add("OrderPackageTypeCode", searchItemDataContract.lstOrderPackageTypes.IsNotNull() && searchItemDataContract.lstOrderPackageTypes.Count() > 0 ?
              String.Join(SysXSearchConsts.SEARCH_MULTIVALUE_SEPERATOR.ToString(), searchItemDataContract.lstOrderPackageTypes.ToArray()) : null);

            searchOptions.Add("OrderId", searchItemDataContract.OrderID.ToString());
            searchOptions.Add("DepartmentID", searchItemDataContract.DepartmentID.ToString());
            if (searchItemDataContract.LstPackageID.IsNotNull() && searchItemDataContract.LstPackageID.Count() > 0)
            {
                searchOptions["PackageID"] = String.Join(SysXSearchConsts.SEARCH_MULTIVALUE_SEPERATOR.ToString(), searchItemDataContract.LstPackageID.ToArray());
            }
            if (searchItemDataContract.LstProgramID.IsNotNull() && searchItemDataContract.LstProgramID.Count() > 0)
            {
                searchOptions["ProgramID"] = String.Join(SysXSearchConsts.SEARCH_MULTIVALUE_SEPERATOR.ToString(), searchItemDataContract.LstProgramID.ToArray());
            }
            searchOptions.Add("ShowOnlyRushOrder", searchItemDataContract.ShowOnlyRushOrder.ToString());
            searchOptions.Add("OrganizationUserId", searchItemDataContract.OrganizationUserId.IsNotNull() ? searchItemDataContract.OrganizationUserId.ToString() : "0");
            searchOptions.Add("ApplicantSSN", searchItemDataContract.ApplicantSSN.IsNotNull() ? searchItemDataContract.ApplicantSSN.ToString() : null);

            searchOptions.Add("OrderDate", searchItemDataContract.LstOrderCreatedDate.IsNotNull() && searchItemDataContract.LstOrderCreatedDate.Count() > 0 ?
               String.Join(SysXSearchConsts.SEARCH_MULTIVALUE_SEPERATOR.ToString(), searchItemDataContract.LstOrderCreatedDate.ToArray()) : null);

            searchOptions.Add("OrderPaidDate", searchItemDataContract.LstOrderPaidDate.IsNotNull() && searchItemDataContract.LstOrderPaidDate.Count() > 0 ?
               String.Join(SysXSearchConsts.SEARCH_MULTIVALUE_SEPERATOR.ToString(), searchItemDataContract.LstOrderPaidDate.ToArray()) : null);
            // START UAT-539 Rajeev Jha 11 Aug 2014
            //searchOptions.Add("DeptProgramMappingID", searchItemDataContract.DeptProgramMappingID.ToString());
            //if condition added to filter those hierarchy node id only on which current loggedIn user has permission
            if (searchItemDataContract.LstUserNodePermissions.IsNotNull()) // case of client admin
            {
                if (searchItemDataContract.LstNodeId.IsNotNull() && searchItemDataContract.LstNodeId.Count() > 0)
                {
                    //if particular hierarchy is selected
                    searchItemDataContract.LstUserNodePermissions = searchItemDataContract.LstUserNodePermissions.Intersect(searchItemDataContract.LstNodeId).ToList();
                }
                searchOptions.Add("DeptProgramMappingID", searchItemDataContract.LstUserNodePermissions.Count > 0 ? String.Join(SysXSearchConsts.SEARCH_MULTIVALUE_SEPERATOR.ToString(), searchItemDataContract.LstUserNodePermissions.ToArray()) : "-1");
            }
            else // case of super admin or ADB admin
            {
                searchOptions.Add("DeptProgramMappingID", searchItemDataContract.LstNodeId.IsNotNull() && searchItemDataContract.LstNodeId.Count() > 0 ?
                String.Join(SysXSearchConsts.SEARCH_MULTIVALUE_SEPERATOR.ToString(), searchItemDataContract.LstNodeId.ToArray()) : null);
            }

            // END UAT-539 Rajeev Jha 11 Aug 2014

            searchOptions.Add("ArchiveStateCode", searchItemDataContract.LstArchiveState.IsNotNull() && searchItemDataContract.LstArchiveState.Count() > 0 ?
            String.Join(SysXSearchConsts.SEARCH_MULTIVALUE_SEPERATOR.ToString(), searchItemDataContract.LstArchiveState.ToArray()) : null);

            searchOptions.Add("ClientOrgUserId", searchItemDataContract.LoggedInUserId.ToString());

            return searchOptions;
        }

        public static List<ComplianceRecord> GetComplianceRecordsSearch(SearchItemDataContract searchItemDataContract, CustomPagingArgsContract customPagingArgsContract)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(searchItemDataContract.ClientID).GetComplianceRecordsSearch(searchItemDataContract, customPagingArgsContract);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }


        // Method for "Use SP for Compliance Item Data Search"
        public static List<ComplianceItemData> GetComplianceItemDataSearch(SearchItemDataContract searchItemDataContract, CustomPagingArgsContract customPagingArgsContract)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(searchItemDataContract.ClientID).GetComplianceItemDataSearch(searchItemDataContract, customPagingArgsContract).ToList();
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        #endregion

        #region Update Client Db
        /// <summary>
        /// Method to copy user data to Client Db
        /// </summary>
        /// <param name="myOrgUser"></param>
        public static void CopyUserToClient(Entity.OrganizationUser myOrgUser, OrganizationUserDepartment orgUSerDeptID)
        {
            #region copy all Organization User properties
            OrganizationUser orgUser = new OrganizationUser();
            OrganizationUserDepartment orgUserDept = new OrganizationUserDepartment();
            orgUserDept.OUD_OrganizationUserID = myOrgUser.OrganizationUserID;
            orgUserDept.OUD_OrganizationID = orgUSerDeptID.OUD_OrganizationID;
            orgUser.OrganizationUserID = myOrgUser.OrganizationUserID;
            orgUser.UserID = myOrgUser.UserID;
            orgUser.OrganizationID = myOrgUser.OrganizationID;
            orgUser.BillingAddressID = myOrgUser.BillingAddressID;
            orgUser.ContactID = myOrgUser.ContactID;
            orgUser.UserTypeID = myOrgUser.UserTypeID;
            orgUser.DepartmentID = myOrgUser.DepartmentID;
            orgUser.SysXBlockID = myOrgUser.SysXBlockID;
            orgUser.AddressHandleID = myOrgUser.AddressHandleID;
            //orgUser.AddressHandle = myOrgUser.AddressHandle;
            orgUser.FirstName = myOrgUser.FirstName;
            orgUser.LastName = myOrgUser.LastName;
            orgUser.VerificationCode = myOrgUser.VerificationCode;
            orgUser.OfficeReturnDateTime = myOrgUser.OfficeReturnDateTime;
            orgUser.IsOutOfOffice = myOrgUser.IsOutOfOffice;
            orgUser.IsNewPassword = myOrgUser.IsNewPassword;
            orgUser.IgnoreIPRestriction = myOrgUser.IgnoreIPRestriction;
            orgUser.IsMessagingUser = myOrgUser.IsMessagingUser;
            orgUser.IsSystem = myOrgUser.IsSystem;
            orgUser.IsDeleted = myOrgUser.IsDeleted;
            orgUser.IsActive = myOrgUser.IsActive;
            orgUser.ExpireDate = myOrgUser.ExpireDate;
            orgUser.CreatedByID = myOrgUser.CreatedByID;
            orgUser.CreatedOn = myOrgUser.CreatedOn;
            orgUser.ModifiedByID = myOrgUser.ModifiedByID;
            orgUser.ModifiedOn = myOrgUser.ModifiedOn;
            orgUser.IsSubscribeToEmail = myOrgUser.IsSubscribeToEmail;
            orgUser.IsApplicant = myOrgUser.IsApplicant;
            orgUser.PhotoName = myOrgUser.PhotoName;
            orgUser.OriginalPhotoName = myOrgUser.OriginalPhotoName;
            orgUser.DOB = myOrgUser.DOB;
            orgUser.SSN = myOrgUser.SSN;
            orgUser.Gender = myOrgUser.Gender;
            orgUser.PhoneNumber = myOrgUser.PhoneNumber;
            orgUser.MiddleName = myOrgUser.MiddleName;
            orgUser.Alias1 = myOrgUser.Alias1;
            orgUser.Alias2 = myOrgUser.Alias2;
            orgUser.Alias3 = myOrgUser.Alias3;
            orgUser.PrimaryEmailAddress = myOrgUser.PrimaryEmailAddress;
            orgUser.SecondaryEmailAddress = myOrgUser.SecondaryEmailAddress;
            orgUser.SecondaryPhone = myOrgUser.SecondaryPhone;
            #endregion

            #region update Address
            Entity.ClientEntity.AddressHandle objAH = new Entity.ClientEntity.AddressHandle();
            Entity.ClientEntity.Address objAddress = new Entity.ClientEntity.Address();
            objAH.AddressHandleID = myOrgUser.AddressHandle.AddressHandleID;
            objAH.ContextID = myOrgUser.AddressHandle.ContextID;
            //orgUser.AddressHandleID = objAH.AddressHandleID;

            Entity.Address objAddrss;
            objAddrss = myOrgUser.AddressHandle.Addresses.FirstOrDefault(p => p.AddressHandleID.Equals(myOrgUser.AddressHandleID));
            objAddress.Address1 = objAddrss.Address1;
            objAddress.Address2 = objAddrss.Address2;
            objAddress.ZipCodeID = objAddrss.ZipCodeID;
            objAddress.CreatedOn = objAddrss.CreatedOn;
            objAddress.AddressTypeID = objAddrss.AddressTypeID;
            objAddress.CreatedByID = objAddrss.CreatedByID;
            objAddress.IsActive = objAddrss.IsActive;
            //objAddress.AddressHandle = 

            orgUser.AddressHandle = objAH;
            orgUser.AddressHandle.AddressHandleID = objAH.AddressHandleID;
            orgUser.AddressHandle.ContextID = objAH.ContextID;
            #endregion

            BALUtils.GetComplianceDataRepoInstance(myOrgUser.Organization.TenantID.Value).AddOrganizationUser(orgUser);
            BALUtils.GetComplianceDataRepoInstance(myOrgUser.Organization.TenantID.Value).AddOrganizationUserDept(orgUserDept);
            //BALUtils.GetComplianceDataRepoInstance(myOrgUser.Organization.TenantID.Value).AddAddress(objAddress);
            // BALUtils.GetComplianceDataRepoInstance(myOrgUser.Organization.TenantID.Value).AddAddressHandle(objAH);
        }
        public static void CopyUserToClientOrgProfile(Entity.OrganizationUserProfile myOrgUser)
        {
            OrganizationUserProfile orgUser = new OrganizationUserProfile();
            orgUser.OrganizationUserProfileID = myOrgUser.OrganizationUserProfileID;
            orgUser.OrganizationUserID = myOrgUser.OrganizationUserID;
            orgUser.AddressHandleID = myOrgUser.AddressHandleID;
            orgUser.FirstName = myOrgUser.FirstName;
            orgUser.LastName = myOrgUser.LastName;
            orgUser.VerificationCode = myOrgUser.VerificationCode;
            orgUser.OfficeReturnDateTime = myOrgUser.OfficeReturnDateTime;
            orgUser.IsDeleted = myOrgUser.IsDeleted;
            orgUser.IsActive = myOrgUser.IsActive;
            orgUser.ExpireDate = myOrgUser.ExpireDate;
            orgUser.CreatedByID = myOrgUser.CreatedByID;
            orgUser.CreatedOn = myOrgUser.CreatedOn;
            orgUser.ModifiedByID = myOrgUser.ModifiedByID;
            orgUser.ModifiedOn = myOrgUser.ModifiedOn;
            orgUser.PhotoName = myOrgUser.PhotoName;
            orgUser.OriginalPhotoName = myOrgUser.OriginalPhotoName;
            orgUser.DOB = myOrgUser.DOB;
            orgUser.SSN = myOrgUser.SSN;
            orgUser.Gender = myOrgUser.Gender;
            orgUser.PhoneNumber = myOrgUser.PhoneNumber;
            orgUser.MiddleName = myOrgUser.MiddleName;
            orgUser.Alias1 = myOrgUser.Alias1;
            orgUser.Alias2 = myOrgUser.Alias2;
            orgUser.Alias3 = myOrgUser.Alias3;
            orgUser.PrimaryEmailAddress = myOrgUser.PrimaryEmailAddress;
            orgUser.SecondaryEmailAddress = myOrgUser.SecondaryEmailAddress;
            orgUser.SecondaryPhone = myOrgUser.SecondaryPhone;

            BALUtils.GetComplianceDataRepoInstance(myOrgUser.OrganizationUser.Organization.TenantID.Value).AddOrganizationUserProfile(orgUser);


        }

        public static void UpdateUserToClient(Entity.OrganizationUser myOrgUser)
        {
            var repoInstance = BALUtils.GetComplianceDataRepoInstance(myOrgUser.Organization.TenantID.Value);
            OrganizationUser orgUser = repoInstance.GetOrganisationUser(myOrgUser);

            #region update OrganizationUser
            if (orgUser != null && orgUser.IsApplicant == true)
            {
                orgUser.OrganizationUserID = myOrgUser.OrganizationUserID;
                orgUser.UserID = myOrgUser.UserID;
                orgUser.OrganizationID = myOrgUser.OrganizationID;
                orgUser.BillingAddressID = myOrgUser.BillingAddressID;
                orgUser.ContactID = myOrgUser.ContactID;
                orgUser.UserTypeID = myOrgUser.UserTypeID;
                orgUser.DepartmentID = myOrgUser.DepartmentID;
                orgUser.SysXBlockID = myOrgUser.SysXBlockID;
                orgUser.AddressHandleID = myOrgUser.AddressHandleID;
                orgUser.FirstName = myOrgUser.FirstName;
                orgUser.LastName = myOrgUser.LastName;
                orgUser.VerificationCode = myOrgUser.VerificationCode;
                orgUser.OfficeReturnDateTime = myOrgUser.OfficeReturnDateTime;
                orgUser.IsOutOfOffice = myOrgUser.IsOutOfOffice;
                orgUser.IsNewPassword = myOrgUser.IsNewPassword;
                orgUser.IgnoreIPRestriction = myOrgUser.IgnoreIPRestriction;
                orgUser.IsMessagingUser = myOrgUser.IsMessagingUser;
                orgUser.IsSystem = myOrgUser.IsSystem;
                orgUser.IsDeleted = myOrgUser.IsDeleted;
                orgUser.IsActive = myOrgUser.IsActive;
                orgUser.ExpireDate = myOrgUser.ExpireDate;
                orgUser.CreatedByID = myOrgUser.CreatedByID;
                orgUser.CreatedOn = myOrgUser.CreatedOn;
                orgUser.ModifiedByID = myOrgUser.ModifiedByID;
                orgUser.ModifiedOn = myOrgUser.ModifiedOn;
                orgUser.IsSubscribeToEmail = myOrgUser.IsSubscribeToEmail;
                orgUser.IsApplicant = myOrgUser.IsApplicant;
                orgUser.PhotoName = myOrgUser.PhotoName;
                orgUser.OriginalPhotoName = myOrgUser.OriginalPhotoName;
                orgUser.DOB = myOrgUser.DOB;
                orgUser.SSN = myOrgUser.SSN;
                orgUser.Gender = myOrgUser.Gender;
                orgUser.PhoneNumber = myOrgUser.PhoneNumber;
                orgUser.MiddleName = myOrgUser.MiddleName;
                orgUser.Alias1 = myOrgUser.Alias1;
                orgUser.Alias2 = myOrgUser.Alias2;
                orgUser.Alias3 = myOrgUser.Alias3;
                orgUser.PrimaryEmailAddress = myOrgUser.PrimaryEmailAddress;
                orgUser.SecondaryEmailAddress = myOrgUser.SecondaryEmailAddress;
                orgUser.SecondaryPhone = myOrgUser.SecondaryPhone;

            }
            #endregion
            //# region AddressData
            // Entity.ClientEntity.AddressHandle objAH = orgUser.AddressHandle;
            // Entity.ClientEntity.Address objAddress = orgUser.AddressHandle.Addresses.FirstOrDefault(p => p.AddressHandleID.Equals(myOrgUser.AddressHandleID));
            // objAH.AddressHandleID  = myOrgUser.AddressHandle.AddressHandleID;
            // objAH.ContextID = myOrgUser.AddressHandle.ContextID;
            // orgUser.AddressHandleID = myOrgUser.AddressHandleID;

            // Entity.Address objAddrss;
            // objAddrss = myOrgUser.AddressHandle.Addresses.FirstOrDefault(p => p.AddressHandleID.Equals(myOrgUser.AddressHandleID));
            // objAddress.Address1 = objAddrss.Address1;
            // objAddress.Address2 = objAddrss.Address2;
            // objAddress.ZipCodeID = objAddrss.ZipCodeID;
            // objAddress.CreatedOn = objAddrss.CreatedOn;

            ////objAddress.AddressHandle = objAH;
            // orgUser.AddressHandle = objAH;
            // orgUser.AddressHandle.AddressHandleID = objAH.AddressHandleID;
            // orgUser.AddressHandle.ContextID = objAH.ContextID;
            //#endregion

            repoInstance.UpdateOrganizationData(orgUser);
            // return (BALUtils.GetComplianceDataRepoInstance(organizationUser) as IBaseRepository).UpdateObjectEntity(organizationUser);
        }

        public static void CopyUserUpdateToClientOrgUserProfile(Entity.OrganizationUser myOrgUser)
        {
            var repoInstance = BALUtils.GetComplianceDataRepoInstance(myOrgUser.Organization.TenantID.Value);
            OrganizationUserProfile orgUserProfile = repoInstance.GetOrganizationUserProfile(myOrgUser);
            //OrganizationUser myOrgUser = repoInstance.GetOrganisationUser(myOrgUser);
            OrganizationUser OrgUser = new OrganizationUser();
            OrganizationUserProfile orgUserProfileNew = new OrganizationUserProfile();

            #region update OrganizationUserProfile

            orgUserProfileNew.OrganizationUserProfileID = orgUserProfile.OrganizationUserProfileID;
            orgUserProfileNew.OrganizationUserID = OrgUser.OrganizationUserID;
            orgUserProfileNew.UserTypeID = OrgUser.UserTypeID;
            orgUserProfileNew.AddressHandleID = OrgUser.AddressHandleID;
            orgUserProfileNew.FirstName = OrgUser.FirstName;
            orgUserProfileNew.LastName = OrgUser.LastName;
            orgUserProfileNew.VerificationCode = OrgUser.VerificationCode;
            orgUserProfileNew.OfficeReturnDateTime = OrgUser.OfficeReturnDateTime;
            orgUserProfileNew.IsDeleted = OrgUser.IsDeleted;
            orgUserProfileNew.IsActive = OrgUser.IsActive;
            orgUserProfileNew.ExpireDate = OrgUser.ExpireDate;
            orgUserProfileNew.CreatedByID = OrgUser.CreatedByID;
            orgUserProfileNew.CreatedOn = OrgUser.CreatedOn;
            orgUserProfileNew.ModifiedByID = OrgUser.ModifiedByID;
            orgUserProfileNew.ModifiedOn = OrgUser.ModifiedOn;
            orgUserProfileNew.PhotoName = OrgUser.PhotoName;
            orgUserProfileNew.OriginalPhotoName = OrgUser.OriginalPhotoName;
            orgUserProfileNew.DOB = OrgUser.DOB;
            orgUserProfileNew.SSN = OrgUser.SSN;
            orgUserProfileNew.Gender = OrgUser.Gender;
            orgUserProfileNew.PhoneNumber = OrgUser.PhoneNumber;
            orgUserProfileNew.MiddleName = OrgUser.MiddleName;
            orgUserProfileNew.Alias1 = OrgUser.Alias1;
            orgUserProfileNew.Alias2 = OrgUser.Alias2;
            orgUserProfileNew.Alias3 = OrgUser.Alias3;
            orgUserProfileNew.PrimaryEmailAddress = OrgUser.PrimaryEmailAddress;
            orgUserProfileNew.SecondaryEmailAddress = OrgUser.SecondaryEmailAddress;
            orgUserProfileNew.SecondaryPhone = OrgUser.SecondaryPhone;

            #endregion
            BALUtils.GetComplianceDataRepoInstance(myOrgUser.Organization.TenantID.Value).AddOrganizationUserProfile(orgUserProfileNew);
        }

        public static Boolean CopyTenantToClient(List<Entity.ClientRelation> clientChildRelationList, Int32 tenantId)
        {
            try
            {
                List<ClientRelation> clientChildRelationListToCopy = new List<ClientRelation>();
                foreach (Entity.ClientRelation clientChildRelation in clientChildRelationList)
                {
                    if (clientChildRelation != null)
                    {
                        ClientRelation clientChildRelationCopy = new ClientRelation()
                        {
                            ClientRelationID = clientChildRelation.ClientRelationID,
                            TenantID = clientChildRelation.TenantID,
                            RelatedTenantID = clientChildRelation.RelatedTenantID,
                            IsActive = clientChildRelation.IsActive,
                            IsDeleted = clientChildRelation.IsDeleted,
                            IsParent = clientChildRelation.IsParent,
                            CreatedByID = clientChildRelation.CreatedByID,
                            CreatedOn = clientChildRelation.CreatedOn
                        };
                        clientChildRelationListToCopy.Add(clientChildRelationCopy);
                    }
                }

                return BALUtils.GetComplianceDataRepoInstance(tenantId).CopyTenantToClient(clientChildRelationListToCopy);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static Boolean checkTenantExistIfNotcreate(List<Int32> relatedTenantIds, Int32 tenantId)
        {
            try
            {
                List<Int32> listTenantIdToCopy = BALUtils.GetComplianceDataRepoInstance(tenantId).checkIfTenantExist(relatedTenantIds);
                List<Tenant> copyOfTenantsToBeCopied = new List<Tenant>();
                if (listTenantIdToCopy != null)
                {
                    List<Tenant> TenantsToBeCopied = BALUtils.GetComplianceDataRepoInstance(SecurityManager.DefaultTenantID).getTenantsToBeCopied(listTenantIdToCopy);
                    foreach (Tenant tenant in TenantsToBeCopied)
                    {
                        Tenant copyTenant = new Tenant
                        {
                            TenantID = tenant.TenantID,
                            TenantTypeID = tenant.TenantTypeID,
                            ValidatedAddressID = tenant.ValidatedAddressID,
                            ContactID = tenant.ContactID,
                            AddressHandleID = tenant.AddressHandleID,
                            TenantName = tenant.TenantName,
                            TenantDesc = tenant.TenantDesc,
                            IsDeleted = tenant.IsDeleted,
                            IsActive = tenant.IsActive,
                            ExpireDate = tenant.ExpireDate,
                            CreatedByID = tenant.CreatedByID,
                            CreatedOn = DateTime.Now
                        };
                        if (tenant.Organizations.FirstOrDefault() != null)
                        {
                            Organization organization = new Organization
                            {
                                OrganizationID = tenant.Organizations.FirstOrDefault().OrganizationID,
                                TenantID = tenant.Organizations.FirstOrDefault().TenantID,
                                ParentOrganizationID = tenant.Organizations.FirstOrDefault().ParentOrganizationID,
                                ContactID = tenant.Organizations.FirstOrDefault().ContactID,
                                AddressHandleID = tenant.AddressHandleID,
                                OrganizationName = tenant.Organizations.FirstOrDefault().OrganizationName,
                                OrganizationDesc = tenant.Organizations.FirstOrDefault().OrganizationDesc,
                                IsActive = tenant.Organizations.FirstOrDefault().IsActive,
                                ExpireDate = tenant.Organizations.FirstOrDefault().ExpireDate,
                                IsDeleted = tenant.Organizations.FirstOrDefault().IsDeleted,
                                IsSystemType = tenant.Organizations.FirstOrDefault().IsSystemType,
                                CreatedByID = tenant.CreatedByID,
                                CreatedOn = DateTime.Now
                            };
                            copyTenant.Organizations.Add(organization);
                        }
                        copyOfTenantsToBeCopied.Add(copyTenant);
                    }
                    if (copyOfTenantsToBeCopied.Count() > 0)
                    {
                        BALUtils.GetComplianceDataRepoInstance(tenantId).CopyTenantToClient(copyOfTenantsToBeCopied);
                    }
                    return true;
                }
                return false;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// retrieve supplier relation byrelated supplier id and supplier id.
        /// </summary>
        /// <param name="supplierId">supplierId</param>
        /// <param name="relatedSupplierId">relatedSupplierId</param>
        /// <returns></returns>
        public static Boolean DeleteSubTenant(Int32 tenantId, Int32 relatedTenantId, Int32 currentUserId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).DeleteSubTenant(tenantId, relatedTenantId, currentUserId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(ex);
                throw (new SysXException(ex.Message, ex));
            }
        }


        /// <summary>
        /// Retrieve a list of institution Type tenant.
        /// </summary>
        /// <returns>list of institution Type tenant</returns>
        public static List<Tenant> getClientTenant()
        {
            try
            {
                Int32 defaultTenantId = SecurityManager.DefaultTenantID;
                //return BALUtils.GetComplianceDataRepoInstance(defaultTenantId).getClientTenant(defaultTenantId);
                String TenantTypeCodeForInstitution = TenantType.Institution.GetStringValue();
                Int32 tenantTypeId = LookupManager.GetLookUpData<lkpTenantType>(defaultTenantId).FirstOrDefault(condition => condition.TenantTypeCode == TenantTypeCodeForInstitution).TenantTypeID;
                //List<Tenant> tenant = LookupManager.GetLookUpData<Tenant>(defaultTenantId).OrderBy(o => o.TenantName).Where(condition => condition.IsActive && !condition.IsDeleted && condition.TenantTypeID == tenantTypeId).ToList();
                short businessChannelTypeID = AppConsts.COMPLIO_BUSINESS_CHANNEL_TYPE;
                Boolean IgnoreBusinessChannelCheck = false;
                if (BALUtils.SessionService.BusinessChannelType.IsNotNull())
                {
                    businessChannelTypeID = BALUtils.SessionService.BusinessChannelType.BusinessChannelTypeID;
                }
                else
                {
                    if (BALUtils.SessionService.GetCustomData(ResourceConst.APPLICANT_ORDER_CART).IsNotNull())
                    {
                        IgnoreBusinessChannelCheck = true;
                    }
                }
                // List<Tenant> tenant = BALUtils.GetSecurityRepoInstance().GetClientTenantsBasedOnBusinessChannelType(businessChannelTypeID);

                List<Tenant> tenant = LookupManager.GetLookUpData<Entity.vw_GetTenants>().Where(cond => (cond.BCT.Value == businessChannelTypeID) || IgnoreBusinessChannelCheck)
                                                                     .Select(col =>
                                                                                new Tenant
                                                                                {
                                                                                    TenantID = col.TenantID,
                                                                                    TenantName = col.TenantName,
                                                                                    TenantTypeID = col.TenantTypeID

                                                                                }).Distinct().ToList();

                tenant = tenant.OrderBy(o => o.TenantName).Where(x => x.TenantTypeID == tenantTypeId).ToList();
                return tenant;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Retrieve a list of institution Type and super admin tenants.
        /// </summary>
        /// <param name="tenantId">Super admin tenant id</param>
        /// <returns>list of institution Type and super admin tenants</returns>
        public static List<Tenant> GetMasterAndInstitutionTypeTenants(Int32 defaultTenantId)
        {
            try
            {
                // List<Tenant> tenantsList = BALUtils.GetComplianceDataRepoInstance(tenantId).GetMasterAndInstitutionTypeTenants(tenantId);
                String TenantTypeCodeForInstitution = TenantType.Institution.GetStringValue();
                Int32 tenantTypeIdForInstitution = LookupManager.GetLookUpData<lkpTenantType>(defaultTenantId).FirstOrDefault(condition => condition.TenantTypeCode == TenantTypeCodeForInstitution && condition.IsActive).TenantTypeID;
                //List<Tenant> tenantsList = LookupManager.GetLookUpData<Tenant>(defaultTenantId).OrderBy(o => o.TenantName).Where(condition => (condition.TenantTypeID == tenantTypeIdForInstitution || condition.TenantID == defaultTenantId) && !condition.IsDeleted).ToList();
                short businessChannelTypeID = AppConsts.COMPLIO_BUSINESS_CHANNEL_TYPE;
                if (BALUtils.SessionService.BusinessChannelType.IsNotNull())
                {
                    businessChannelTypeID = BALUtils.SessionService.BusinessChannelType.BusinessChannelTypeID;
                }
                //List<Tenant> tenantsList = BALUtils.GetSecurityRepoInstance().GetClientTenantsBasedOnBusinessChannelType(businessChannelTypeID);
                List<Tenant> tenantsList = LookupManager.GetLookUpData<Entity.vw_GetTenants>().Where(cond => cond.BCT.Value == businessChannelTypeID)
                                                                                                .Select(col =>
                                                                                                new Tenant
                                                                                                {
                                                                                                    TenantID = col.TenantID,
                                                                                                    TenantName = col.TenantName,
                                                                                                    TenantTypeID = col.TenantTypeID

                                                                                                }).ToList();
                tenantsList = tenantsList.OrderBy(o => o.TenantName).Where(x => x.TenantTypeID == tenantTypeIdForInstitution || x.TenantID == defaultTenantId).ToList();
                Tenant masterTenant = tenantsList.FirstOrDefault(x => x.TenantID == defaultTenantId);
                if (!masterTenant.IsNullOrEmpty())
                {
                    masterTenant.TenantName = "Master";
                    tenantsList.Remove(masterTenant);
                    tenantsList.Insert(AppConsts.NONE, masterTenant);
                }
                return tenantsList;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static List<Tenant> GetTenantList(Int32 defaultTenantId, Boolean ignoreBusinessChannelCheck = false)
        {
            try
            {
                // List<Tenant> tenantsList = BALUtils.GetComplianceDataRepoInstance(tenantId).GetMasterAndInstitutionTypeTenants(tenantId);
                String TenantTypeCodeForInstitution = TenantType.Institution.GetStringValue();
                Int32 tenantTypeIdForInstitution = LookupManager.GetLookUpData<lkpTenantType>(defaultTenantId).FirstOrDefault(condition => condition.TenantTypeCode == TenantTypeCodeForInstitution && condition.IsActive).TenantTypeID;
                //List<Tenant> tenantsList = LookupManager.GetLookUpData<Tenant>(defaultTenantId).OrderBy(o => o.TenantName).Where(condition => (condition.TenantTypeID == tenantTypeIdForInstitution || condition.TenantID == defaultTenantId) && !condition.IsDeleted).ToList();
                short businessChannelTypeID = AppConsts.COMPLIO_BUSINESS_CHANNEL_TYPE;
                if (BALUtils.SessionService != null && BALUtils.SessionService.BusinessChannelType.IsNotNull())
                {
                    businessChannelTypeID = BALUtils.SessionService.BusinessChannelType.BusinessChannelTypeID;
                }
                //List<Tenant> tenantsList = BALUtils.GetSecurityRepoInstance().GetClientTenantsBasedOnBusinessChannelType(businessChannelTypeID);
                List<Tenant> tenantsList = new List<Tenant>();
                if (ignoreBusinessChannelCheck)
                {
                    tenantsList = LookupManager.GetLookUpData<Entity.vw_GetTenants>().Where(cond => cond.BCT.Value == businessChannelTypeID || ignoreBusinessChannelCheck)
                                                                                                .Select(col =>
                                                                                                new Tenant
                                                                                                {
                                                                                                    TenantID = col.TenantID,
                                                                                                    TenantName = col.TenantName,
                                                                                                    TenantTypeID = col.TenantTypeID

                                                                                                }).ToList();
                }
                else
                {
                    tenantsList = LookupManager.GetLookUpData<Entity.vw_GetTenants>().Where(cond => cond.BCT.Value == businessChannelTypeID)
                                                                                                   .Select(col =>
                                                                                                   new Tenant
                                                                                                   {
                                                                                                       TenantID = col.TenantID,
                                                                                                       TenantName = col.TenantName,
                                                                                                       TenantTypeID = col.TenantTypeID

                                                                                                   }).ToList();

                }
                tenantsList = tenantsList.OrderBy(o => o.TenantName).Where(x => x.TenantTypeID == tenantTypeIdForInstitution).ToList();
                return tenantsList;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Retrieve a list of Parent tenant.
        /// </summary>
        /// <returns>list of parent tenant</returns>
        public static List<Tenant> getParentTenant(Int32 subTenantId)
        {
            try
            {
                Int32 defaultTenantId = SecurityManager.DefaultTenantID;
                return BALUtils.GetComplianceDataRepoInstance(defaultTenantId).getParentTenant(subTenantId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        #endregion

        #region Order Queue And Order Detail Screen

        /// <summary>
        /// Gets the List of Active Order Status.
        /// </summary>
        /// <param name="tenantId">Tenant Id</param>
        /// <returns>List of active status</returns>
        public static List<lkpOrderStatu> GetOrderStatusList(Int32 tenantId)
        {
            try
            {
                return LookupManager.GetLookUpData<Entity.ClientEntity.lkpOrderStatu>(tenantId).Where(x => x.IsDeleted == false).ToList();
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Gets the List of Active Payment types.
        /// </summary>
        /// <param name="tenantId">Tenant Id</param>
        /// <returns>List of active status</returns>
        public static List<lkpPaymentOption> GetPaymentTypeList(Int32 tenantId)
        {
            try
            {
                return LookupManager.GetLookUpData<Entity.ClientEntity.lkpPaymentOption>(tenantId).Where(x => x.IsDeleted == false && !x.Code.Equals(PaymentOptions.OfflineSettlement.GetStringValue())).ToList();
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Gets the List of Active Complaince State.
        /// </summary>
        /// <param name="tenantId">Tenant Id</param>
        /// <returns>List of active status</returns>
        public static List<lkpArchiveState> GetArchiveStateList(Int32 tenantId)
        {
            try
            {
                //Commented as two more status graduated and archived graduated added for UAt-1558.
                String activeStatusCode = ArchiveState.Active.GetStringValue();
                String archiveStatusCode = ArchiveState.Archived.GetStringValue();
                List<lkpArchiveState> lkpArchiveSatetList = LookupManager.GetLookUpData<Entity.ClientEntity.lkpArchiveState>(tenantId).Where(x => x.AS_IsDeleted == false
                                                                                                                                     && (x.AS_Code == activeStatusCode || x.AS_Code == archiveStatusCode))
                                                                                                                                     .ToList();
                lkpArchiveState lkpArchiveStateRow = new lkpArchiveState();
                lkpArchiveStateRow.AS_Name = ArchiveState.All.ToString();
                lkpArchiveStateRow.AS_Code = ArchiveState.All.GetStringValue();
                lkpArchiveSatetList.Add(lkpArchiveStateRow);
                return lkpArchiveSatetList;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static List<lkpArchiveState> GetArchiveStateListForNonCompliantReport(Int32 tenantId)
        {
            try
            {
                String activeStatusCode = ArchiveState.Active.GetStringValue();
                List<lkpArchiveState> lkpArchiveSatetList = LookupManager.GetLookUpData<Entity.ClientEntity.lkpArchiveState>(tenantId).Where(x => x.AS_IsDeleted == false
                                                                                                                                     && (x.AS_Code == activeStatusCode))
                                                                                                                                     .ToList();

                lkpArchiveState lkpInactiveStateRow = new lkpArchiveState();
                lkpInactiveStateRow.AS_Name = ArchiveState.Inactive.ToString();
                lkpInactiveStateRow.AS_Code = ArchiveState.Inactive.GetStringValue();
                lkpArchiveSatetList.Add(lkpInactiveStateRow);
                lkpArchiveState lkpArchiveStateRow = new lkpArchiveState();
                lkpArchiveStateRow.AS_Name = ArchiveState.All.ToString();
                lkpArchiveStateRow.AS_Code = ArchiveState.All.GetStringValue();
                lkpArchiveSatetList.Add(lkpArchiveStateRow);


                return lkpArchiveSatetList;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// UAT-685 Implemented.
        /// </summary>
        public static Boolean SaveScheduleTask(List<ScheduledTask> lstScheduleTask, Int32 tenantId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).SaveScheduleTask(lstScheduleTask);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Gets the list Of Active Orders filtered on the bases of statuses.
        /// </summary>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="lstStatusCode">List Of Status Code</param>
        /// <returns>Query for fetching active orders</returns>
        public static IQueryable<vwOrderDetail> GetOrderDetailList(Int32 tenantId, Int32 currentUserId, List<String> lstStatusCode)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetOrderDetailList(lstStatusCode, currentUserId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Returns the list of the Orders, for which Rush Order can be placed
        /// </summary>
        /// <returns></returns>
        public static List<Int32> GetPossibleRushOrderIds(List<vwOrderDetail> lstOrderDetails, Int32 tenantId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetPossibleRushOrderIds(lstOrderDetails);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Gets the details for the given Order Id.
        /// </summary>
        /// <param name="tenantId">Tenant Id</param>
        /// <param name="orderId">Order Id</param>
        /// <returns></returns>
        public static OrderPaymentDetail GetOrderDetailById(Int32 tenantId, Int32 orderId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetOrderDetailById(orderId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Gets the successfull Online Payment Transaction details, for an Order
        /// </summary>
        /// <param name="orderId">Order Id</param>
        /// <returns></returns>
        public static OnlinePaymentTransaction GetSuccessfullOrderPaymentDetails(Int32 orderId, Int32 tenantId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetSuccessfullOrderPaymentDetails(orderId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Gets the Online payment transaction record by invoice number
        /// </summary>
        /// <param name="orderId">Order Id</param>
        /// <returns></returns>
        public static OnlinePaymentTransaction GetOnlinePayTransactionByInvNum(String invoiceNumber, Int32 tenantId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetOnlinePayTransactionByInvNum(invoiceNumber);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Generates an entry for the Refund request in Order Details screen
        /// </summary>
        /// <param name="refundHistory"></param>
        public static void AddRefundHistory(RefundHistory refundHistory, Int32 tenantId)
        {
            try
            {
                BALUtils.GetComplianceDataRepoInstance(tenantId).AddRefundHistory(refundHistory);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Returns the list of Refunds associated with the current order
        /// </summary>
        /// <param name="orderId"></param>
        /// <returns></returns>
        public static List<RefundHistory> GetRefundHistory(Int32 orderId, Int32 tenantId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetRefundHistory(orderId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static Boolean CheckIsInvoiceOnly(Int32 tenantId, Int32 hierarchyId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).CheckIsInvoiceOnly(hierarchyId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        public static PackageSubscription GetPackageSubscriptionDetailByOrderId(Int32 tenantId, Int32 orderId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetPackageSubscriptionDetailByOrderId(orderId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static List<OrderContract> PerformSearchForOrderQueue(SearchItemDataContract searchItemDataContract, CustomPagingArgsContract customPagingArgsContract)
        {
            try
            {
                List<vwOrderDetail> lstOrderDetail = PerformSearch<vwOrderDetail>(searchItemDataContract, customPagingArgsContract).ToList();
                return lstOrderDetail.Select(x => new OrderContract
                {
                    InstituteHierarchy = x.InstituteHierarchy,
                    PackageName = x.PackageName,
                    PaymentType = x.PaymentType,
                    OrderStatusCode = x.OrderStatusCode,
                    OrderStatusName = x.OrderStatusName,
                    OrderId = x.OrderId,
                    FirstName = x.FirstName,
                    LastName = x.LastName,
                    RushOrderStatus = x.RushOrderStatus,
                    OrderDate = x.OrderDate,
                    DateOfBirth = x.DateOfBirth,
                    Amount = x.Amount,
                    //IsInvoiceApproval = (x.PaymentTypeCode.Trim().Equals("PTIN") && x.OrderStatusCode.Trim().Equals("OSPPA")) ? true : false,
                    //UAT-916
                    IsInvoiceApproval = GetIsInvoiceApproval(searchItemDataContract.ClientID, x.OrderId),
                    // If Order Already Exists in the Scheduled Task List then its Approval is initiated
                    IsInvoiceApprovalInitiated = (GetScheduleTasksToProcess(searchItemDataContract.ClientID, TaskType.INVOICEORDERBULKAPPROVE.GetStringValue()).Any(obj => obj.RecordID == x.OrderId)) ? true : false,
                    AutomaticRenewalTurnedOff = x.AutomaticRenewalTurnedOff.IsNull() || x.AutomaticRenewalTurnedOff == false ? false : true,
                    HasActiveComplianceSubscription = Convert.ToBoolean(x.HasActiveComplianceSubscription),
                    PackageID = x.PackageID,
                    IsAutomaticRenewalForPackage = x.IsAutomaticRenewalForPackage.IsNull() || x.IsAutomaticRenewalForPackage == false ? false : true,
                }).ToList();
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }


        public static List<OrderContract> GetOrderApprovalQueueData(OrderApprovalQueueContract searchItemDataContract, CustomPagingArgsContract customPagingArgsContract, Boolean isBkgScreen = false)
        {
            try
            {
                DataTable tempDataTable = BALUtils.GetComplianceDataRepoInstance(searchItemDataContract.ClientID).GetOrderApprovalQueueData(searchItemDataContract, customPagingArgsContract, isBkgScreen);
                return GetOrderQueueSearchData(tempDataTable);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        private static List<OrderContract> GetOrderQueueSearchData(DataTable dataTable)
        {
            try
            {
                List<OrderContract> lstOrderContract = new List<OrderContract>();
                IEnumerable<DataRow> rows = dataTable.AsEnumerable();
                lstOrderContract = rows.Select(col =>
                      new OrderContract
                      {
                          FirstName = col["FirstName"] == DBNull.Value ? String.Empty : Convert.ToString(col["FirstName"]),
                          LastName = col["LastName"] == DBNull.Value ? String.Empty : Convert.ToString(col["LastName"]),
                          InstituteHierarchy = col["InstituteHierarchy"] == DBNull.Value ? String.Empty : Convert.ToString(col["InstituteHierarchy"]),
                          PaymentType = col["PaymentType"] == DBNull.Value ? String.Empty : Convert.ToString(col["PaymentType"]),
                          OrderStatusCode = col["OrderStatusCode"] == DBNull.Value ? String.Empty : Convert.ToString(col["OrderStatusCode"]),
                          OrderStatusName = col["OrderStatusName"] == DBNull.Value ? String.Empty : Convert.ToString(col["OrderStatusName"]),
                          SSN = col["SSN"] == DBNull.Value ? String.Empty : Convert.ToString(col["SSN"]),
                          OrderDate = col["OrderDate"] == DBNull.Value ? (DateTime?)null : Convert.ToDateTime(col["OrderDate"]),
                          DateOfBirth = col["DateOfBirth"] == DBNull.Value ? (DateTime?)null : Convert.ToDateTime(col["DateOfBirth"]),
                          OrderId = Convert.ToInt32(col["OrderID"]),
                          PackageID = Convert.ToInt32(col["PackageID"]),
                          HasActiveComplianceSubscription = Convert.ToBoolean(col["HasActiveComplianceSubscription"]),
                          IsAutomaticRenewalForPackage = Convert.ToBoolean(col["IsAutomaticRenewalForPackage"]),
                          AutomaticRenewalTurnedOff = Convert.ToBoolean(col["AutomaticRenewalTurnedOff"]),
                          IsInvoiceApproval = Convert.ToBoolean(col["IsInvoiceApproval"]),
                          IsInvoiceApprovalInitiated = Convert.ToBoolean(col["IsInvoiceApprovalInitiated"]),
                          Amount = col["Amount"] == DBNull.Value ? (Decimal?)null : Convert.ToDecimal(col["Amount"]),
                          TotalCount = Convert.ToInt32(col["TotalCount"]),
                          OrderNumber = Convert.ToString(col["OrderNumber"]),
                          IsCardWithApproval = Convert.ToBoolean(col["IsCardWithApproval"]),
                          CancelledBy = col["CancelledBy"] == DBNull.Value ? String.Empty : Convert.ToString(col["CancelledBy"]), //UAT-4490
                          CancelledOn = col["CancelledOn"] == DBNull.Value ? (DateTime?)null : Convert.ToDateTime(col["CancelledOn"]), //UAT-4490

                      }).ToList();
                return lstOrderContract;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static List<OrderContract> GetOrderDetails(String OrderID, Int32 tenantID)
        {
            try
            {
                DataTable tempDataTable = BALUtils.GetComplianceDataRepoInstance(tenantID).GetOrderDetails(OrderID);
                return GetOrderQueueSearchData(tempDataTable);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }


        /// <summary>
        /// Saves the reference number in th order table and changes th status from Pending paymnt Approved to Paid.
        /// Inserts new records in the package Subscription table for the same order.
        /// </summary>
        /// <param name="tenantId">Tenant Id</param>
        /// <param name="orderId">Order Id</param>
        /// <param name="orderStatusCode">StatusCode to be updated</param>
        /// <param name="packageID">Package ID</param>
        /// <param name="currentLoggedInUserId"></param>
        /// <param name="organisationUserID">CurrentLoggedInUserId</param>
        /// <param name="referenceNumber">Reference Number</param>
        /// <param name="expiryDate">Expiry Date</param>
        /// <param name="orderPaymentDetailsId">OrderPaymentDetailId - Required for Updating the statu to Approved in the table.
        /// If this is zero, than it is Normal Order flow and need to update the status for all</param>
        /// <returns>True, if status is updated. Else false.</returns>
        public static Boolean UpdateOrderStatus(Int32 tenantId, Int32 orderId, String orderStatusCode, Int32 packageID, Int32 currentLoggedInUserId,
                                                Int32 organisationUserID, String referenceNumber, DateTime expiryDate, Int32 orderPaymentDetailId = 0)
        {
            try
            {
                List<lkpEventHistory> lstEventHistory = LookupManager.GetLookUpData<lkpEventHistory>(tenantId).Where(eh => !eh.EH_IsDeleted).ToList();
                List<lkpOrderStatusType> lstOrderStatusType = LookupManager.GetLookUpData<lkpOrderStatusType>(tenantId).ToList();

                if (BALUtils.GetComplianceDataRepoInstance(tenantId).UpdateOrderStatus(orderId, orderStatusCode, currentLoggedInUserId, referenceNumber,
                    lstEventHistory, lstOrderStatusType, tenantId, orderPaymentDetailId))
                {
                    Order tempOrder = BALUtils.GetComplianceDataRepoInstance(tenantId).GetOrderById(orderId);
                    //Added a check of newOrder to restrict the repurchase order enter in if condition, because we have treated repurchase order as new order for archived and expired subscriptions but previousOrderId is not null in this scenario. 
                    if (tempOrder != null && tempOrder.PreviousOrderID != null && tempOrder.lkpOrderRequestType.ORT_Code != OrderRequestType.NewOrder.GetStringValue())
                    {
                        var repoInstance = BALUtils.GetComplianceDataRepoInstance(tenantId);
                        PackageSubscription tempPackageSubscription = BALUtils.GetComplianceDataRepoInstance(tenantId).GetPackageSubscriptionByOrderId(tempOrder.PreviousOrderID.Value);
                        if (tempPackageSubscription != null)
                        {
                            tempPackageSubscription.ModifiedByID = currentLoggedInUserId;
                            tempPackageSubscription.ModifiedOn = DateTime.Now;

                            if (tempOrder.lkpOrderRequestType.ORT_Code == OrderRequestType.ChangeSubscription.GetStringValue())
                            {
                                //UAT-2333:As a student, I should be able to complete a subscription change from one node to another where the package is shared.

                                if (tempPackageSubscription.CompliancePackageID != packageID)
                                {
                                    tempPackageSubscription.IsDeleted = true;
                                }

                                Order objOrder = BALUtils.GetComplianceDataRepoInstance(tenantId).GetOrderById(tempOrder.PreviousOrderID ?? 0);
                                if (objOrder != null)
                                {
                                    var _compliancePkgOPD = GetComplianceOrdPayDetail(objOrder);
                                    //UAT-1245:If payment method is the same, both tracking and screening are getting cancelled when the applicant attempts to cancel 
                                    //the tracking order.

                                    if (IsOrdPayDetailContainsBkgPackage(_compliancePkgOPD))
                                    {
                                        objOrder.PartialOrderCancellationTypeID = GetPartialOrderCancelTypeForChangeSubs(objOrder, tenantId);
                                        objOrder.ModifiedByID = currentLoggedInUserId;
                                        objOrder.ModifiedOn = DateTime.Now;
                                    }
                                    else
                                    {
                                        var _cancellationOrdStsId = ComplianceDataManager.GetOrderStatusList(tenantId).Where(t => t.Code == ApplicantOrderStatus.Cancelled.GetStringValue()).Select(t => t.OrderStatusID).FirstOrDefault();
                                        if (_compliancePkgOPD.IsNotNull())
                                            _compliancePkgOPD.OPD_OrderStatusID = _cancellationOrdStsId;

                                        objOrder.OrderStatusID = _cancellationOrdStsId;
                                    }

                                }
                                if (packageID != AppConsts.NONE)
                                    SubscribePurchasedPackage(tenantId, orderId, organisationUserID, packageID, expiryDate, currentLoggedInUserId, tempOrder);
                            }
                            else if (tempOrder.lkpOrderRequestType.ORT_Code == OrderRequestType.ChangeSubscriptionByAdmin.GetStringValue())
                            {
                                //if (tempPackageSubscription.CompliancePackageID == packageID)
                                //{
                                //    tempPackageSubscription.OrderID = orderId;
                                //    tempPackageSubscription.ModifiedByID = currentLoggedInUserId;
                                //    tempPackageSubscription.ModifiedOn = DateTime.Now;
                                //    tempPackageSubscription.ExpiryDate = expiryDate.Date.AddHours(23).AddMinutes(59).AddSeconds(59);
                                //}
                                if (packageID != AppConsts.NONE)
                                    SubscribePurchasedPackage(tenantId, orderId, organisationUserID, packageID, expiryDate, currentLoggedInUserId, tempOrder);
                            }

                            else
                            {
                                tempPackageSubscription.OrderID = tempOrder.OrderID;
                                //UAT-1462:where students renew their subscription it should extend from the date of renewal and not the expiration date.
                                //if (orderToUpdate.SubscriptionMonth != null)
                                //    tempPackageSubscription.ExpiryDate = tempPackageSubscription.ExpiryDate.Value.AddMonths(orderToUpdate.SubscriptionMonth.Value);
                                if (tempOrder.SubscriptionMonth != null)
                                {
                                    DateTime currentdate = DateTime.Now;
                                    //Added below condition to set expiry date of subscription after expiry.
                                    if (tempPackageSubscription.ExpiryDate.IsNotNull() && tempPackageSubscription.ExpiryDate.Value.Date <= currentdate.Date)
                                    {

                                        currentdate = currentdate.AddMonths(tempOrder.SubscriptionMonth.Value);
                                        tempPackageSubscription.ExpiryDate = currentdate.Date.AddHours(23).AddMinutes(59).AddSeconds(59);
                                    }
                                    else
                                    {
                                        tempPackageSubscription.ExpiryDate = tempPackageSubscription.ExpiryDate.Value.AddMonths(tempOrder.SubscriptionMonth.Value);
                                    }
                                }
                                return BALUtils.GetComplianceDataRepoInstance(tenantId).UpdatePackageSubscription();
                            }


                            return true;
                        }
                        else if (tempOrder.lkpOrderRequestType.ORT_Code == OrderRequestType.ChangeSubscriptionByAdmin.GetStringValue())
                        {
                            // UAT -2379 inclued null case of tempPackageSubscription in PaymentDue status

                            // UAT -2379 ---In case Of PaymentDue status ,when tempPackageSubscription is null, even then package subscription should be created
                            if (packageID != AppConsts.NONE)
                                SubscribePurchasedPackage(tenantId, orderId, organisationUserID, packageID, expiryDate, currentLoggedInUserId, tempOrder);
                            return true;
                        }
                    }
                    else
                    {
                        if (packageID != AppConsts.NONE)
                            SubscribePurchasedPackage(tenantId, orderId, organisationUserID, packageID, expiryDate, currentLoggedInUserId, tempOrder);

                        //This method is used for save the context of the DB for the case of BkgPackages only
                        else if (packageID == 0)
                        {
                            BALUtils.GetComplianceDataRepoInstance(tenantId).SaveDbContext(orderId);
                        }
                        return true;
                    }
                }
                return false;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Cancel the order with the staus Cancellation requested and updates the status to Cancelled.
        /// </summary>
        /// <param name="tenantId"></param>
        /// <param name="orderId"></param>
        /// <param name="orderStatusCode"></param>
        /// <param name="currentLoggedInUserId"></param>
        /// <param name="isCancelledByApplicant"></param>
        /// <param name="rejctionReason"></param>
        /// <param name="orderPaymentDetailID"></param>
        /// <param name="IsCompliancePackageInclude"></param>
        /// <param name="isInstantCancellation"></param>
        /// <returns></returns>
        public static Boolean CancelPlacedOrder(Int32 tenantId, Int32 orderId, String orderStatusCode, Int32 currentLoggedInUserId, Boolean isCancelledByApplicant = false, String rejctionReason = null, Int32? orderPaymentDetailID = null, Boolean? IsCompliancePackageInclude = null, Boolean isInstantCancellation = false)
        {
            try
            {
                Boolean isLocationTenant = SecurityManager.IsLocationServiceTenant(tenantId);
                List<lkpEventHistory> lstEventHistory = LookupManager.GetLookUpData<lkpEventHistory>(tenantId).Where(eh => !eh.EH_IsDeleted).ToList();
                return BALUtils.GetComplianceDataRepoInstance(tenantId).CancelPlacedOrder(orderId, orderStatusCode, currentLoggedInUserId, rejctionReason, isCancelledByApplicant, lstEventHistory, orderPaymentDetailID, IsCompliancePackageInclude, isInstantCancellation, isLocationTenant);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Rejects the cancellation request and updates the order its previous status.
        /// </summary>
        /// <param name="tenantId">Tenant Id</param>
        /// <param name="orderId">Order id</param>
        /// <param name="currentLoggedInUserId">currentLoggedInUserId</param>
        /// <param name="rejectionReason">Rejection Reason</param>
        /// <returns>True if order is updated</returns>
        public static Boolean RejectCancellationRequest(Int32 tenantId, Int32 orderId, Int32 currentLoggedInUserId, String rejectionReason)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).RejectCancellationRequest(orderId, currentLoggedInUserId, rejectionReason);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Request to Cancel the order with the staus Pending to Approve and updates the status to Cancellation requested.
        /// </summary>
        /// <param name="tenantId">Tenant Id</param>
        /// <param name="order">Order Entity object</param>
        /// <param name="orderStatusCode">StatusCode to be updated</param>
        /// <returns>True/False</returns>
        public static Boolean UpdateOrderByOrderID(Int32 tenantId, Order order, String orderStatusCode)
        {
            try
            {
                //UAt-916:Pass optional parameter when applicant cancel order from OrderHistory.
                BALUtils.GetComplianceDataRepoInstance(tenantId).UpdateOrderByOrderID(order, orderStatusCode, false, null, null);
                return true;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// check Package Subscription Details for the given orderids.
        /// </summary>
        /// <param name="orderId">Order Id List</param>
        /// <returns></returns>
        public static Boolean IsPackageSubscribedForOrderIds(Int32 tenantId, List<Int32> orderIds)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).IsPackageSubscribedForOrderIds(orderIds);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        #endregion

        #region Order selection & Payment

        public static String GetNextPagePathByOrderStageID(ApplicantOrderCart applicantOrderCart, Int32 currentOrderStageID)
        {
            if (applicantOrderCart.IsNotNull() && applicantOrderCart.lstApplicantOrder.IsNotNull() && applicantOrderCart.lstApplicantOrder[0].IsNotNull() &&
                applicantOrderCart.lstApplicantOrder[0].LstOrderStageTrackID.IsNotNull() && applicantOrderCart.lstApplicantOrder[0].LstOrderStageTrackID.Count > 0)
            {
                Int32 lastOrderStageID = applicantOrderCart.lstApplicantOrder[0].LstOrderStageTrackID.Last();

                switch (currentOrderStageID)
                {
                    case OrderStages.PendingOrder:
                        return SetNextPagePathForPendingOrder(lastOrderStageID);

                    case OrderStages.RenewalOrder:
                        return SetNextPagePathForPendingOrder(lastOrderStageID);

                    case OrderStages.ApplicantProfile:
                        return SetNextPagePathForProfile(lastOrderStageID);

                    case OrderStages.CustomForms:
                        return SetNextPagePathForCustomForms(lastOrderStageID);

                    case OrderStages.BalancePayment:
                        return SetNextPagePathForApplicantBalancePayment(lastOrderStageID, applicantOrderCart);//return null; 

                    case OrderStages.Disclosure:
                        return SetNextPagePathForDisclosure(lastOrderStageID);

                    case OrderStages.Disclaimer:
                        return SetNextPagePathForDisclaimer(lastOrderStageID);

                    case OrderStages.OrderReview:
                        return SetNextPagePathForOrderReview(lastOrderStageID);

                    case OrderStages.OrderPayment:
                        return SetNextPagePathForOrderPayment(lastOrderStageID, applicantOrderCart);  //return null; UAT 904 : Step number displayed during order flow is incorrect when applicant navigates to “Payment Details” screen from “Credit Card Payment” screen using “Back” button.

                    case OrderStages.RushOrderReview:
                        return SetNextPagePathForRushOrderReview(lastOrderStageID, applicantOrderCart);

                    case OrderStages.OnlinePaymentSubmission:
                        return SetNextPagePathForOnlinePayment(lastOrderStageID);

                    case OrderStages.PaypalPaymentSubmission:
                        return SetNextPagePathForOnlinePayment(lastOrderStageID);

                    case OrderStages.OnlineConfirmation:
                        return SetNextPagePathForOnlineConfirmation(lastOrderStageID);

                    case OrderStages.RushOrderConfirmation:
                        return SetNextPagePathForRushOrderConfirmation(lastOrderStageID);

                    case OrderStages.CIMAccountSelection:
                        return SetNextPagePathForCIMAccountSelection(lastOrderStageID);

                    case OrderStages.OrderPaymentDetails:
                        return SetNextPageOrderPaymentDetails(lastOrderStageID, applicantOrderCart);
                    //UAT-1560:WB: We should be able to add documents that need to be signed to the order process
                    case OrderStages.RequiredDocumentation:
                        return SetNextPagePathForRequiredDocumentation(lastOrderStageID);
                    default:
                        return SetNextPagePath(ChildControls.ApplicantPendingOrder); ;
                }
            }
            else if (currentOrderStageID != OrderStages.PendingOrder)
            {
                return SetNextPagePath(ChildControls.ApplicantPendingOrder);
            }
            return null;
        }

        private static String SetNextPagePathForPendingOrder(Int32 lastOrderStageID)
        {
            if (lastOrderStageID == OrderStages.ApplicantProfile)
            {
                return SetNextPagePath(ChildControls.ApplicantProfile);
            }
            else if (lastOrderStageID == OrderStages.CustomForms)
            {
                return SetNextPagePath(ChildControls.CustomFormLoad, true);
            }
            else if (lastOrderStageID == OrderStages.Disclosure)
            {
                return SetNextPagePath(ChildControls.ApplicantDisclosurePage);
            }
            else if (lastOrderStageID == OrderStages.Disclaimer)
            {
                return SetNextPagePath(ChildControls.ApplicantDisclaimerPage);
            }
            else if (lastOrderStageID == OrderStages.RushOrderReview || lastOrderStageID == OrderStages.RushOrderConfirmation)
            {
                return SetNextPagePath(ChildControls.RushOrderReview);
            }
            else if (lastOrderStageID == OrderStages.OrderReview)
            {
                return SetNextPagePath(ChildControls.ApplicantOrderReview);
            }
            else if (lastOrderStageID >= OrderStages.OrderPayment)
            {
                return SetNextPagePath(ChildControls.OrderPayment);
            }
            else if (lastOrderStageID == OrderStages.RequiredDocumentation)
            {
                return SetNextPagePath(ChildControls.ApplicantRequiredDocumentationPage);
            }
            return null;
        }

        private static String SetNextPagePathForProfile(Int32 lastOrderStageID)
        {
            if (lastOrderStageID == OrderStages.CustomForms)
            {
                return SetNextPagePath(ChildControls.CustomFormLoad, true);
            }
            else if (lastOrderStageID == OrderStages.Disclaimer)
            {
                return SetNextPagePath(ChildControls.ApplicantDisclaimerPage);
            }
            else if (lastOrderStageID == OrderStages.Disclosure)
            {
                return SetNextPagePath(ChildControls.ApplicantDisclosurePage);
            }
            else if (lastOrderStageID == OrderStages.RushOrderReview || lastOrderStageID == OrderStages.RushOrderConfirmation)
            {
                return SetNextPagePath(ChildControls.RushOrderReview);
            }
            else if (lastOrderStageID == OrderStages.OrderReview)
            {
                return SetNextPagePath(ChildControls.ApplicantOrderReview);
            }
            else if (lastOrderStageID >= OrderStages.OrderPayment)
            {
                return SetNextPagePath(ChildControls.OrderPayment);
            }
            return null;
        }

        private static String SetNextPagePathForCustomForms(Int32 lastOrderStageID)
        {
            if (lastOrderStageID == OrderStages.Disclaimer)
            {
                return SetNextPagePath(ChildControls.ApplicantDisclaimerPage);
            }
            else if (lastOrderStageID == OrderStages.Disclosure)
            {
                return SetNextPagePath(ChildControls.ApplicantDisclosurePage);
            }
            else if (lastOrderStageID == OrderStages.RushOrderReview || lastOrderStageID == OrderStages.RushOrderConfirmation)
            {
                return SetNextPagePath(ChildControls.RushOrderReview);
            }
            else if (lastOrderStageID == OrderStages.OrderReview)
            {
                return SetNextPagePath(ChildControls.ApplicantOrderReview);
            }
            else if (lastOrderStageID >= OrderStages.OrderPayment)
            {
                return SetNextPagePath(ChildControls.OrderPayment);
            }
            else if (lastOrderStageID == OrderStages.ApplicantProfile)
            {
                return SetNextPagePath(ChildControls.ApplicantProfile);
            }
            else if (lastOrderStageID == OrderStages.ApplicantProfileCompleted)
            {
                return null;
            }
            return null;
        }

        private static String SetNextPagePathForDisclosure(Int32 lastOrderStageID)
        {
            // UAT-5184
            //if (lastOrderStageID == OrderStages.Disclaimer)
            //{
            //    return SetNextPagePath(ChildControls.ApplicantDisclaimerPage);
            //}
            // else 
            if (lastOrderStageID == OrderStages.RushOrderReview || lastOrderStageID == OrderStages.RushOrderConfirmation)
            {
                return SetNextPagePath(ChildControls.RushOrderReview);
            }
            else if (lastOrderStageID == OrderStages.OrderReview)
            {
                return SetNextPagePath(ChildControls.ApplicantOrderReview);
            }
            else if (lastOrderStageID >= OrderStages.OrderPayment)
            {
                return SetNextPagePath(ChildControls.OrderPayment);
            }
            else if (lastOrderStageID == OrderStages.ApplicantProfile)
            {
                return SetNextPagePath(ChildControls.ApplicantProfile);
            }
            else if (lastOrderStageID == OrderStages.CustomForms)
            {
                return SetNextPagePath(ChildControls.CustomFormLoad, true);
            }
            // UAT-5184
            //else if (lastOrderStageID == OrderStages.CustomFormsCompleted || lastOrderStageID == OrderStages.ApplicantProfileCompleted)
            //{
            //    return null;
            //}
            else if (lastOrderStageID == OrderStages.CustomForms)  // UAT-5184
            {
                return SetNextPagePath(ChildControls.CustomFormLoad, true);
            }
            return null;
        }

        private static String SetNextPagePathForDisclaimer(Int32 lastOrderStageID)
        {
            //if (lastOrderStageID == OrderStages.Disclosure)
            //{
            //    return SetNextPagePath(ChildControls.ApplicantDisclosurePage);
            //}
            if (lastOrderStageID == OrderStages.RenewalOrder)
            {
                return SetNextPagePath(ChildControls.RenewalOrder);
            }
            else if (lastOrderStageID == OrderStages.RushOrderReview || lastOrderStageID == OrderStages.RushOrderConfirmation)
            {
                return SetNextPagePath(ChildControls.RushOrderReview);
            }
            else if (lastOrderStageID == OrderStages.OrderReview)
            {
                return SetNextPagePath(ChildControls.ApplicantOrderReview);
            }
            else if (lastOrderStageID >= OrderStages.OrderPayment)
            {
                return SetNextPagePath(ChildControls.OrderPayment);
            }
            else if (lastOrderStageID == OrderStages.ApplicantProfile)
            {
                return SetNextPagePath(ChildControls.ApplicantProfile);
            }
            // UAT-5184
            //else if (lastOrderStageID == OrderStages.CustomForms)
            //{
            //    return SetNextPagePath(ChildControls.CustomFormLoad, true);
            //}
            else if (lastOrderStageID == OrderStages.CustomFormsCompleted || lastOrderStageID == OrderStages.ApplicantProfileCompleted)  // UAT-5184
            {
                return null;
            }
            return null;
        }

        private static String SetNextPagePathForOrderReview(Int32 lastOrderStageID)
        {
            if (lastOrderStageID == OrderStages.PendingOrder)
            {
                return SetNextPagePath(ChildControls.ApplicantPendingOrder);
            }
            else if (lastOrderStageID == OrderStages.RenewalOrder)
            {
                return SetNextPagePath(ChildControls.RenewalOrder);
            }
            else if (lastOrderStageID == OrderStages.RushOrderReview || lastOrderStageID == OrderStages.RushOrderConfirmation)
            {
                return SetNextPagePath(ChildControls.RushOrderReview);
            }
            else if (lastOrderStageID >= OrderStages.OrderPayment)
            {
                return SetNextPagePath(ChildControls.OrderPayment);
            }
            else if (lastOrderStageID == OrderStages.ApplicantProfile)
            {
                return SetNextPagePath(ChildControls.ApplicantProfile);
            }
            else if (lastOrderStageID == OrderStages.CustomForms)
            {
                return SetNextPagePath(ChildControls.CustomFormLoad, true);
            }
            return null;
        }

        private static String SetNextPagePathForOnlinePayment(Int32 lastOrderStageID)
        {
            if (lastOrderStageID == OrderStages.PendingOrder)
            {
                return SetNextPagePath(ChildControls.ApplicantPendingOrder);
            }
            else if (lastOrderStageID == OrderStages.RenewalOrder)
            {
                return SetNextPagePath(ChildControls.RenewalOrder);
            }
            else if (lastOrderStageID == OrderStages.ApplicantProfile)
            {
                return SetNextPagePath(ChildControls.ApplicantProfile);
            }
            else if (lastOrderStageID == OrderStages.Disclaimer)
            {
                return SetNextPagePath(ChildControls.ApplicantDisclaimerPage);
            }
            else if (lastOrderStageID == OrderStages.RushOrderConfirmation)
            {
                return SetNextPagePath(ChildControls.RushOrderReview);
            }
            else if (lastOrderStageID == OrderStages.OrderReview)
            {
                return SetNextPagePath(ChildControls.ApplicantOrderReview);
            }
            else if (lastOrderStageID > OrderStages.OrderPayment)
            {
                return SetNextPagePath(ChildControls.OrderPayment);
            }
            return null;
        }

        private static String SetNextPagePathForOnlineConfirmation(Int32 lastOrderStageID)
        {
            if (lastOrderStageID == OrderStages.PendingOrder)
            {
                return SetNextPagePath(ChildControls.ApplicantPendingOrder);
            }
            else if (lastOrderStageID == OrderStages.RenewalOrder)
            {
                return SetNextPagePath(ChildControls.RenewalOrder);
            }
            else if (lastOrderStageID == OrderStages.ApplicantProfile)
            {
                return SetNextPagePath(ChildControls.ApplicantProfile);
            }
            else if (lastOrderStageID == OrderStages.Disclaimer)
            {
                return SetNextPagePath(ChildControls.ApplicantDisclaimerPage);
            }
            else if (lastOrderStageID == OrderStages.RushOrderReview || lastOrderStageID == OrderStages.RushOrderConfirmation)
            {
                return SetNextPagePath(ChildControls.RushOrderReview);
            }
            else if (lastOrderStageID == OrderStages.OrderReview)
            {
                return SetNextPagePath(ChildControls.ApplicantOrderReview);
            }
            return null;
        }

        private static String SetNextPagePathForRushOrderConfirmation(Int32 lastOrderStageID)
        {
            if (lastOrderStageID != OrderStages.RushOrderReview && lastOrderStageID != OrderStages.RushOrderConfirmation
                && lastOrderStageID != OrderStages.CIMAccountSelection)
            {
                return SetNextPagePath(ChildControls.RushOrderReview);
            }
            return null;
        }

        private static String SetNextPagePathForCIMAccountSelection(Int32 lastOrderStageID)
        {
            if (lastOrderStageID == OrderStages.RushOrderConfirmation)
            {
                return SetNextPagePath(ChildControls.ApplicantRushOrderConfirmPage);
            }
            else if (lastOrderStageID == OrderStages.OnlineConfirmation)
            {
                return SetNextPagePath(ChildControls.ApplicantOrderConfirmation);
            }
            return null;
        }

        private static String SetNextPagePathForOrderPayment(Int32 lastOrderStageID, ApplicantOrderCart orderCart)
        {
            if (lastOrderStageID == OrderStages.CIMAccountSelection)
            {
                return RedirectToCIMAccountSelectionPage(orderCart);
            }
            return null;
        }

        private static String SetNextPagePathForRushOrderReview(Int32 lastOrderStageID, ApplicantOrderCart orderCart)
        {
            if (lastOrderStageID == OrderStages.CIMAccountSelection)
            {
                return RedirectToCIMAccountSelectionPage(orderCart);
            }
            return null;
        }

        private static String SetNextPagePathForApplicantBalancePayment(Int32 lastOrderStageID, ApplicantOrderCart orderCart)
        {
            if (lastOrderStageID == OrderStages.CIMAccountSelection)
            {
                return RedirectToCIMAccountSelectionPage(orderCart);
            }
            return null;
        }

        private static String SetNextPageOrderPaymentDetails(Int32 lastOrderStageID, ApplicantOrderCart orderCart)
        {
            if (lastOrderStageID == OrderStages.CIMAccountSelection)
            {
                return RedirectToCIMAccountSelectionPage(orderCart);
            }
            return null;
        }

        private static string RedirectToCIMAccountSelectionPage(ApplicantOrderCart orderCart)
        {
            if (!orderCart.InvoiceNumber.IsNullOrEmpty() && orderCart.lstApplicantOrder[0].OrderId > 0)
            {
                //var _invNumber = orderCart.InvoiceNumber.First(d => d.Value == PaymentOptions.Credit_Card.GetStringValue()).Value;
                var _invNumber = orderCart.InvoiceNumber.First(d => d.Key == PaymentOptions.Credit_Card.GetStringValue()).Value;
                Dictionary<String, String> queryString = new Dictionary<String, String>();
                queryString = new Dictionary<String, String>
                                                                 {
                                                                    { "invnum", _invNumber},
                                                                    {"OrderId", Convert.ToString(orderCart.lstApplicantOrder[0].OrderId)}
                                                                 };

                return String.Format("~/ComplianceOperations/Pages/CIMAccountSelection.aspx?args={0}", queryString.ToEncryptedQueryString());
            }
            return null;
        }

        private static String SetNextPagePath(String nextPage, Boolean isCustomForm = false)
        {
            Dictionary<String, String> queryString = new Dictionary<String, String>();
            queryString = new Dictionary<String, String>
                                                                 {
                                                                    {AppConsts.CHILD,  nextPage}
                                                                 };

            if (!isCustomForm)
                return String.Format("~/ComplianceOperations/Default.aspx?args={0}", queryString.ToEncryptedQueryString());
            else
                return String.Format("~/BkgOperations/Default.aspx?args={0}", queryString.ToEncryptedQueryString());
        }

        public static List<lkpPaymentOption> GetPaymentOptions(Int32 tenantId, Int32 DPPSId)
        {
            try
            {
                DeptProgramPackageSubscription packSubscription = BALUtils.GetComplianceDataRepoInstance(tenantId).GetDeptProgramPackageSubscriptionForPaymentOption(DPPSId);
                Int32 programId = 0;
                if (packSubscription.IsNotNull())
                {
                    programId = packSubscription.DeptProgramPackage.DPP_DeptProgramMappingID;
                }
                List<Int32> lst = BALUtils.GetComplianceDataRepoInstance(tenantId).GetDeptProgramPaymentOptionsByDepProgramMappingId(programId).Select(dppo => dppo.DPPO_PaymentOptionID).ToList();

                return LookupManager.GetLookUpData<Entity.ClientEntity.lkpPaymentOption>(tenantId).Where(paymentOptns => paymentOptns.IsDeleted == false && lst.Contains(paymentOptns.PaymentOptionID) && !paymentOptns.Code.Equals(PaymentOptions.OfflineSettlement.GetStringValue())).ToList();
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// To get Payment Options by DPM_ID
        /// </summary>
        /// <param name="tenantId"></param>
        /// <param name="DPM_ID"></param>
        /// <returns></returns>
        public static List<lkpPaymentOption> GetPaymentOptionsByDPMId(Int32 tenantId, Int32 DPM_ID)
        {
            try
            {
                List<Int32> lst = BALUtils.GetComplianceDataRepoInstance(tenantId).GetDeptProgramPaymentOptionsByDepProgramMappingId(DPM_ID).Select(dppo => dppo.DPPO_PaymentOptionID).ToList();
                return LookupManager.GetLookUpData<Entity.ClientEntity.lkpPaymentOption>(tenantId).Where(paymentOptns => paymentOptns.IsDeleted == false && lst.Contains(paymentOptns.PaymentOptionID) && !paymentOptns.Code.Equals(PaymentOptions.OfflineSettlement.GetStringValue())).ToList();
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static DeptProgramPackageSubscription GetApplicantPackageDetails(Int32 dppsId, Int32 tenantId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetApplicantPackageDetails(dppsId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static String GetInstituteHierarchyLabel(Int32 dpmId, Int32 tenantId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetInstituteHierarchyLabel(dpmId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Saves the Applicant Order 
        /// </summary>
        /// <param name="userOrder"></param>
        /// <param name="applicantOrderDataContract"></param>
        /// <param name="updateMainProfile"></param>
        /// <param name="lstPrevAddress"></param>
        /// <param name="lstPersonAliasContract"></param>
        /// <param name="paymentModeCode"></param>
        /// <param name="orderId"></param>
        /// <returns></returns>
        public static Dictionary<String, String> SubmitApplicantOrder(Order userOrder, ApplicantOrderDataContract applicantOrderDataContract, Boolean updateMainProfile,
         List<PreviousAddressContract> lstPrevAddress, List<PersonAliasContract> lstPersonAliasContract, out String paymentModeCode, out Int32 orderId, Int32 orgUserID, List<OrderCartCompliancePackage> compliancePackages = null, List<ApplicantOrder> lstApplicantOrder = null, PreviousAddressContract mailingAddress = null, FingerPrintAppointmentContract FingerPrintData = null)
        {
            try
            {

                Dictionary<String, Object> dicAddressData = new Dictionary<String, Object>();

                if (applicantOrderDataContract.OrganizationUserProfile.AddressHandle.IsNotNull())
                {
                    Address addressNew = applicantOrderDataContract.OrganizationUserProfile.AddressHandle.Addresses
                                                                   .Where(add => add.AddressHandleID == applicantOrderDataContract.OrganizationUserProfile.AddressHandleID)
                                                                   .FirstOrDefault();
                    if (addressNew.IsNotNull())
                    {
                        dicAddressData.Add("address1", addressNew.Address1);
                        dicAddressData.Add("address2", addressNew.Address2);
                        dicAddressData.Add("zipcodeid", addressNew.ZipCodeID);
                    }
                }

                Int32 _profileIdMaster;
                Int32 _addressIdMaster;
                Guid _addressHandleIdMaster;
                List<Entity.ResidentialHistoryProfile> lstResidentialHistoryProfile = new List<Entity.ResidentialHistoryProfile>();

                //CBI|| CABS
                Boolean isLocationServiceTenant = SecurityManager.IsLocationServiceTenant(applicantOrderDataContract.TenantId);

                if (updateMainProfile)
                {
                    #region UPDATE ORIGINAL DATA IN CLIENT AND MASTER DB's
                    List<Entity.ResidentialHistory> lstResendentialHistory = new List<Entity.ResidentialHistory>();
                    List<Entity.PersonAlia> lstPersonAlias = new List<Entity.PersonAlia>();

                    foreach (var perAlias in lstPersonAliasContract)
                    {
                        //lstPersonAlias.Add(new Entity.PersonAlia
                        //{
                        //    PA_ID = perAlias.ID,
                        //    PA_FirstName = perAlias.FirstName,
                        //    //UAT-2212:Addition of Alias Middle name that is required and has "no middle name"/"-----" functionality
                        //    PA_MiddleName = perAlias.MiddleName,
                        //    PA_LastName = perAlias.LastName
                        //});

                        Entity.PersonAlia personAlia = new Entity.PersonAlia();
                        personAlia.PA_ID = perAlias.ID;
                        personAlia.PA_FirstName = perAlias.FirstName;
                        personAlia.PA_MiddleName = perAlias.MiddleName;
                        personAlia.PA_LastName = perAlias.LastName;

                        lstPersonAlias.Add(personAlia);

                        if (!isLocationServiceTenant.IsNullOrEmpty() && isLocationServiceTenant)
                        {
                            if (!perAlias.Suffix.IsNullOrEmpty())
                            {
                                Entity.PersonAliasExtension personAliasExtension = new Entity.PersonAliasExtension();
                                personAliasExtension.PAE_Suffix = perAlias.Suffix.ToString();
                                personAliasExtension.PAE_PersonAliasID = perAlias.ID;
                                personAlia.PersonAliasExtensions.Add(personAliasExtension);


                            }
                        }
                    }

                    // Update the Master database Profile
                    Entity.OrganizationUser orgUserMaster = (Entity.OrganizationUser)MapOrganizationUserProfileToOrganizationUser
                                                                                    (applicantOrderDataContract.OrganizationUserProfile, 1, orgUserID);
                    SecurityManager.UpdateApplicanDetailsMaster(orgUserMaster, dicAddressData, out _addressIdMaster, lstPrevAddress, mailingAddress, out lstResendentialHistory,
                                                                ref lstPersonAlias, isLocationServiceTenant);

                    // Update the Client database Profile
                    Entity.ClientEntity.OrganizationUser orgUserClient = (Entity.ClientEntity.OrganizationUser)MapOrganizationUserProfileToOrganizationUser
                                                                         (applicantOrderDataContract.OrganizationUserProfile, 2, orgUserID);
                    BALUtils.GetComplianceDataRepoInstance(applicantOrderDataContract.TenantId).UpdateApplicanDetailsClient(orgUserClient, dicAddressData, _addressIdMaster,
                                                                                                                            lstResendentialHistory, lstPersonAlias, mailingAddress);
                    SecurityManager.SynchoniseUserProfile(orgUserMaster.OrganizationUserID, applicantOrderDataContract.TenantId, orgUserID);
                    _addressIdMaster = 0;
                    #endregion

                    #region UAT-3824:-  Code to save user language mapping
                    SecurityManager.AddUpdateLanguageMapping(orgUserMaster, lstApplicantOrder[0].SelectedCommLang);
                    #endregion


                    try
                    {
                        if (!isLocationServiceTenant)
                        {
                            Entity.Tenant tenant = SecurityManager.GetTenant(applicantOrderDataContract.TenantId);
                            //Create Dictionary
                            Dictionary<String, object> dictMailData = new Dictionary<string, object>();
                            dictMailData.Add(EmailFieldConstants.USER_FULL_NAME, string.Concat(orgUserClient.FirstName, " ", orgUserClient.LastName));
                            dictMailData.Add(EmailFieldConstants.INSTITUTE_NAME, tenant.TenantName);

                            Entity.CommunicationMockUpData mockData = new Entity.CommunicationMockUpData();
                            mockData.UserName = string.Concat(orgUserClient.FirstName, " ", orgUserClient.LastName);
                            mockData.EmailID = orgUserClient.PrimaryEmailAddress;
                            mockData.ReceiverOrganizationUserID = orgUserClient.OrganizationUserID;

                            //Send mail
                            CommunicationManager.SendPackageNotificationMail(CommunicationSubEvents.NOTIFICATION_PROFILE_CHANGE, dictMailData, mockData,
                                                                            applicantOrderDataContract.TenantId, 0);

                            //Send Message
                            CommunicationManager.SaveMessageContent(CommunicationSubEvents.NOTIFICATION_PROFILE_CHANGE, dictMailData, orgUserClient.OrganizationUserID,
                                                                    applicantOrderDataContract.TenantId);
                        }
                    }
                    catch (Exception ex)
                    {
                        BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                    }
                }

                #region SAVE ORDER AND PROFILES IN THE CLIENT AND MASTER DATABASES

                List<Entity.PersonAliasProfile> lstPersonAliasProfile = new List<Entity.PersonAliasProfile>();
                foreach (var perAlias in lstPersonAliasContract)
                {
                    //lstPersonAliasProfile.Add(new Entity.PersonAliasProfile
                    //{
                    //    PAP_ID = perAlias.ID,
                    //    PAP_FirstName = perAlias.FirstName,
                    //    PAP_LastName = perAlias.LastName,
                    //    //UAT-2212:Addition of Alias Middle name that is required and has "no middle name"/"-----" functionality
                    //    PAP_MiddleName = perAlias.MiddleName,
                    //    PAP_SequenceId = perAlias.AliasSequenceId
                    //});
                    Entity.PersonAliasProfile personAliasProfile = new Entity.PersonAliasProfile();
                    personAliasProfile.PAP_ID = perAlias.ID;
                    personAliasProfile.PAP_FirstName = perAlias.FirstName;
                    personAliasProfile.PAP_LastName = perAlias.LastName;
                    //UAT-2212:Addition of Alias Middle name that is required and has "no middle name"/"-----" functionality
                    personAliasProfile.PAP_MiddleName = perAlias.MiddleName;
                    personAliasProfile.PAP_SequenceId = perAlias.AliasSequenceId;

                    lstPersonAliasProfile.Add(personAliasProfile);

                    //CBI|| CABS
                    if (!isLocationServiceTenant.IsNullOrEmpty() && isLocationServiceTenant)
                    {
                        if (!perAlias.Suffix.IsNullOrEmpty())
                        {
                            Entity.PersonAliasProfileExtension personAliasProfileExtension = new Entity.PersonAliasProfileExtension();
                            personAliasProfileExtension.PAPE_Suffix = perAlias.Suffix.ToString();
                            personAliasProfile.PersonAliasProfileExtensions.Add(personAliasProfileExtension);
                        }
                    }
                }
                SecurityManager.SaveApplicantOrderProcessMaster(MapUserProfileClientToUserProfileMaster(applicantOrderDataContract.OrganizationUserProfile, orgUserID),
                                                                dicAddressData, out _profileIdMaster, out _addressIdMaster, out _addressHandleIdMaster,
                                                                lstPrevAddress, out lstResidentialHistoryProfile, ref lstPersonAliasProfile, isLocationServiceTenant);
                applicantOrderDataContract.OrganizationUserProfile.OrganizationUserProfileID = _profileIdMaster;// Id from the master table

                List<lkpEventHistory> _lstLkpEventHistoryBkgOrders = LookupManager.GetLookUpData<lkpEventHistory>(applicantOrderDataContract.TenantId)
                                                                                  .Where(eh => !eh.EH_IsDeleted).ToList();
                String _orderCreatedCode = BkgOrderEvents.ORDER_CREATED.GetStringValue();

                Int32 _orderCreatedId = _lstLkpEventHistoryBkgOrders.Where(eh => eh.EH_Code == _orderCreatedCode).FirstOrDefault().EH_ID;

                applicantOrderDataContract.AddressIdMaster = _addressIdMaster;
                applicantOrderDataContract.AddressHandleIdMaster = _addressHandleIdMaster;
                applicantOrderDataContract.lstResidentialHistoryProfile = lstResidentialHistoryProfile;
                applicantOrderDataContract.lstPersonAliasProfile = lstPersonAliasProfile;
                applicantOrderDataContract.OrderCreatedStatusId = _orderCreatedId;


                if (!applicantOrderDataContract.lstBackgroundPackages.IsNullOrEmpty())
                {
                    List<lkpOrderStatusType> _lstOrderStatusTypes = LookupManager.GetLookUpData<lkpOrderStatusType>(applicantOrderDataContract.TenantId);
                    applicantOrderDataContract.BkgOrderStatusTypeId = _lstOrderStatusTypes.Where(ot => ot.Code == BackgroundOrderStatus.PAYMENT_PENDING.GetStringValue())
                                                                                            .FirstOrDefault().OrderStatusTypeID;

                    List<lkpOrderLineItemStatu> _lstOrderLineItemStatus = LookupManager.GetLookUpData<lkpOrderLineItemStatu>(applicantOrderDataContract.TenantId);
                    String _orderLineItemStatusType = OrderLineItemStatusType.NEW.GetStringValue();
                    applicantOrderDataContract.OrderLineItemStatusId = _lstOrderLineItemStatus.Where(olists => olists.OLIS_Code == _orderLineItemStatusType
                                                                                                && !olists.OLIS_IsDeleted).FirstOrDefault().OLIS_ID;
                    //Start UAT-4498
                    String _autoCompletedOrderLineItemStatusType = OrderLineItemStatusType.AUTO_COMPLETE.GetStringValue();
                    applicantOrderDataContract.AutoCompletedOrderLineItemStatusId = _lstOrderLineItemStatus.Where(olists => olists.OLIS_Code == _autoCompletedOrderLineItemStatusType
                                                                                                && !olists.OLIS_IsDeleted).FirstOrDefault().OLIS_ID;
                    //ENd UAT-4498
                    applicantOrderDataContract.lstSvcAttributeGrps = BackgroundSetupManager.GetServiceAttributeGroupsByTenant(applicantOrderDataContract.TenantId);
                }

                //Get SvcLineItem Status Id from lookup
                String dispatchedExternalVendorCode = SvcLineItemDispatchStatus.NOT_DISPATCHED.GetStringValue();
                Int16 PSLI_DispatchedExternalVendor = LookupManager.GetLookUpData<Entity.ClientEntity.lkpSvcLineItemDispatchStatu>(applicantOrderDataContract.TenantId)
                                                                   .FirstOrDefault(cnd => cnd.SLIDS_Code == dispatchedExternalVendorCode).SLIDS_ID;

                //UAT-4498
                String dispatchedLineItemStatusCode = SvcLineItemDispatchStatus.DISPATCHED.GetStringValue();
                applicantOrderDataContract.DispatchedSvcLineItemDispatchStatusId = LookupManager.GetLookUpData<Entity.ClientEntity.lkpSvcLineItemDispatchStatu>(applicantOrderDataContract.TenantId)
                                                                    .FirstOrDefault(cnd => cnd.SLIDS_Code == dispatchedLineItemStatusCode).SLIDS_ID;
                //END UAT-4498

                #region Get Order RequestTypeID  [UAT-977: Additional work towards archive ability]
                String orderRequestNewOrderTypeCode = OrderRequestType.NewOrder.GetStringValue();
                Int32 orderRequestNewOrderTypeId = LookupManager.GetLookUpData<Entity.ClientEntity.lkpOrderRequestType>(applicantOrderDataContract.TenantId)
                                                                   .FirstOrDefault(cnd => cnd.ORT_Code == orderRequestNewOrderTypeCode && cnd.ORT_Active == true).ORT_ID;

                applicantOrderDataContract.NewSvcGrpReviewStatusTypeId =
                    LookupManager.GetLookUpData<Entity.ClientEntity.lkpBkgSvcGrpReviewStatusType>(applicantOrderDataContract.TenantId)
                                                                   .First(sgrs => sgrs.BSGRS_ReviewCode == BkgSvcGrpReviewStatusType.NEW.GetStringValue() && !sgrs.BSGRS_IsDeleted).BSGRS_ID;

                applicantOrderDataContract.NewSvcGrpStatusTypeId =
                   LookupManager.GetLookUpData<Entity.ClientEntity.lkpBkgSvcGrpStatusType>(applicantOrderDataContract.TenantId)
                                                                  .First(sgs => sgs.BSGS_StatusCode == BkgSvcGrpStatusType.NEW.GetStringValue() && !sgs.BSGS_IsDeleted).BSGS_ID;

                // Start UAT - 4498
                applicantOrderDataContract.CompletedSvcGrpStatusTypeId =
                   LookupManager.GetLookUpData<Entity.ClientEntity.lkpBkgSvcGrpStatusType>(applicantOrderDataContract.TenantId)
                                                                  .First(sgs => sgs.BSGS_StatusCode == BkgSvcGrpStatusType.COMPLETED.GetStringValue() && !sgs.BSGS_IsDeleted).BSGS_ID;

                applicantOrderDataContract.AutoReviewSvcGrpReviewStatusTypeId =
                     LookupManager.GetLookUpData<Entity.ClientEntity.lkpBkgSvcGrpReviewStatusType>(applicantOrderDataContract.TenantId)
                                                                    .First(sgrs => sgrs.BSGRS_ReviewCode == BkgSvcGrpReviewStatusType.AUTO_REVIEW_COMPLETED.GetStringValue() && !sgrs.BSGRS_IsDeleted).BSGRS_ID;
                //end UAT-4498

                #endregion

                // Save Applicant Order
                var _dicInvoiceNumbers = BALUtils.GetComplianceDataRepoInstance(applicantOrderDataContract.TenantId).
                                   SaveApplicantOrderProcessClient(userOrder, applicantOrderDataContract, PSLI_DispatchedExternalVendor, out paymentModeCode, out orderId, orgUserID, orderRequestNewOrderTypeId, compliancePackages, isLocationServiceTenant, FingerPrintData, mailingAddress);




                //UAT_4360
                if (isLocationServiceTenant && !FingerPrintData.IsFromArchivedOrderScreen)
                {
                    var attributesToFetch = new List<string>
                    {
                        AppConsts.CBIUniqueID,
                        AppConsts.ReasonFingerprinted,
                        AppConsts.BillingORI,
                        AppConsts.AcctName
                    };
                    var lstLookUpContract = BALUtils.GetComplianceDataRepoInstance(applicantOrderDataContract.TenantId)
                        .FetchFingerprintOrderKeyData(applicantOrderDataContract.lstBkgOrderData, attributesToFetch);

                    if (!lstLookUpContract.Where(x => x.Name == "CBIUniqueID").FirstOrDefault().Code.IsNullOrEmpty())
                    {
                        FingerPrintSetUpManager.SaveFingerPrintOrderKeyData(applicantOrderDataContract.TenantId, orgUserID, lstLookUpContract, orderId);
                    }
                }


                //Save Custom Attributes for UserGroup
                //UAT 1438: Enhancement to allow students to select a User Group.
                if (applicantOrderDataContract.IsUserGroupCustomAttributeExist)
                {
                    SaveUpdateApplicantUserGroupCustomAttribute(applicantOrderDataContract.TenantId, applicantOrderDataContract.lstAttributeValuesForUserGroup, applicantOrderDataContract.OrganizationUserProfile.OrganizationUserID, orgUserID);
                }
                try
                {
                    // Update External Service and Vendor for LineItems generated
                    if (!applicantOrderDataContract.lstBackgroundPackages.IsNullOrEmpty())
                        StoredProcedureManagers.UpdateExtServiceVendorforLineItems(orderId, applicantOrderDataContract.TenantId);
                }
                catch (Exception ex)
                {
                    BALUtils.LogError("Exception in calling stored procedure ams.usp_UpdateBkgOrderPackageSvcLineItem for Order number : " + orderId, ex);
                    BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                }

                //UAT 264
                String _prevStatus = ApplicantOrderStatus.Paid.GetStringValue();
                Int32 orderStatusId = ComplianceDataManager.GetOrderStatusList(applicantOrderDataContract.TenantId)
                                                           .Where(orderSts => orderSts.Code.ToLower() == _prevStatus.ToLower() && !orderSts.IsDeleted)
                                                           .FirstOrDefault().OrderStatusID;

                var _lstOPDs = userOrder.OrderPaymentDetails.Where(opd => opd.OPD_IsDeleted == false).ToList();

                if (userOrder.OrderGroupOrderNavProp.IsNotNull() && userOrder.OrderGroupOrderNavProp.Count > 0)
                {
                    foreach (Order o in userOrder.OrderGroupOrderNavProp)
                        _lstOPDs.AddRange(o.OrderPaymentDetails.Where(opd => opd.OPD_IsDeleted == false).ToList());
                }

                foreach (var opd in _lstOPDs)
                {
                    var _paymentTypeCode = opd.lkpPaymentOption.Code;
                    var _orderStatusId = opd.OPD_OrderStatusID;
                    var _orderPaymentDetailId = opd.OPD_ID;
                    var _packageId = AppConsts.NONE;


                    #region UAT-1697: Add new client setting to make it where all subscription renewals nees to be approved, even if payment method is invoice without approval
                    Boolean ifRenewalOrderApprovalRequired = false;
                    String orderRequestTypeCode = userOrder.lkpOrderRequestType.ORT_Code;
                    if (orderRequestTypeCode == OrderRequestType.RenewalOrder.GetStringValue())
                    {
                        //Check for client settings
                        String rnwlOrderAprvlRqdCode = Setting.SUBSCRIPTION_RENEWAL_NEED_APPROVAL.GetStringValue();
                        ClientSetting rnwlOrderAprvlRqdSetting = GetClientSetting(applicantOrderDataContract.TenantId).Where(cond => cond.lkpSetting.Code
                                                                                                   == rnwlOrderAprvlRqdCode && !cond.CS_IsDeleted).FirstOrDefault();
                        if (!rnwlOrderAprvlRqdSetting.IsNullOrEmpty() &&
                            !rnwlOrderAprvlRqdSetting.CS_SettingValue.IsNullOrEmpty())
                        {
                            ifRenewalOrderApprovalRequired = Convert.ToBoolean(Convert.ToInt32(rnwlOrderAprvlRqdSetting.CS_SettingValue));
                        }
                    }
                    #endregion

                    // Case when Order gets Paid with Grand Total = 0 or it is case of Invoice to Institution
                    if (_orderStatusId == orderStatusId || (_paymentTypeCode == PaymentOptions.Credit_Card.GetStringValue() && opd.OPD_Amount == 0) || (_paymentTypeCode == PaymentOptions.InvoiceWithOutApproval.GetStringValue()
                                                                && !ifRenewalOrderApprovalRequired))
                    {
                        DateTime expirydate = DateTime.Now;
                        if (opd.Order.SubscriptionYear.HasValue)
                        {
                            expirydate = expirydate.AddYears(opd.Order.SubscriptionYear.Value);
                        }
                        if (opd.Order.SubscriptionMonth.HasValue)
                        {
                            expirydate = expirydate.AddMonths(opd.Order.SubscriptionMonth.Value);
                        }

                        // If the Order contained any Compliance Package and it belongs to Current OPDs' OrderPkgPaymentDetails 
                        if (!opd.Order.DeptProgramPackage.IsNullOrEmpty() && opd.OrderPkgPaymentDetails.Any(oppd => oppd.OPPD_BkgOrderPackageID.IsNull()
                            && oppd.lkpOrderPackageType.OPT_Code == OrderPackageTypes.COMPLIANCE_PACKAGE.GetStringValue()))
                            _packageId = opd.Order.DeptProgramPackage.DPP_CompliancePackageID;

                        //Changes done for UAT-357
                        String referenceNumber = String.Empty;
                        if (_orderStatusId == orderStatusId) // Change Subscription with 0 Payment 
                            referenceNumber = String.Format("Change Subscriptions: Previous Order Id: {0}",
                                               opd.Order.PreviousOrderID);
                        else
                            referenceNumber = "N/A";

                        //UpdateOrderStatus(applicantOrderDataContract.TenantId, opd.Order.OrderID, ApplicantOrderStatus.Paid.GetStringValue(), _packageId,
                        //                   opd.Order.CreatedByID, applicantOrderDataContract.OrganizationUserProfile.OrganizationUserID, referenceNumber,
                        //                   expirydate, _orderPaymentDetailId);
                        UpdateOrderStatus(applicantOrderDataContract.TenantId, opd.Order.OrderID, ApplicantOrderStatus.Paid.GetStringValue(), _packageId,
                                           orgUserID, applicantOrderDataContract.OrganizationUserProfile.OrganizationUserID, referenceNumber,
                                           expirydate, _orderPaymentDetailId);

                        SendOrderNotification(applicantOrderDataContract.TenantId, opd.Order.CreatedByID, opd.Order.OrderID, _orderPaymentDetailId);
                    }
                }

                return _dicInvoiceNumbers;

                #endregion

            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }


        //public static String UpdateFailedOrder(Int32 tenantId, Order userOrder, Boolean isRushOrder, out String paymentModeCode, Boolean isOrderFailed = true,
        //    String refrenceNumber = null)
        public static Dictionary<String, String> UpdateFailedOrder(Int32 tenantId, Order userOrder, Boolean isRushOrder, List<OrderStatusDataContract> lstOrderStsDC, Int32 rushOrdstatusId
                                               , Boolean isOrderFailed = true, String refrenceNumber = null, Boolean isBalancePayment = false, Int32 currentLoggedInUserId = 0)
        {
            try
            {
                var _dicInvoiceNumber = new Dictionary<String, String>();
                var _invoiceNumber = String.Empty;

                Order orderToUpdate = BALUtils.GetComplianceDataRepoInstance(tenantId).GetOrderById(userOrder.OrderID);

                if (orderToUpdate.IsNotNull())
                {
                    DateTime creationDateTime = DateTime.Now;
                    orderToUpdate.PaymentOptionID = userOrder.PaymentOptionID;
                    orderToUpdate.ModifiedByID = userOrder.ModifiedByID;
                    orderToUpdate.ModifiedOn = creationDateTime;
                    orderToUpdate.GrandTotal = userOrder.GrandTotal;
                    orderToUpdate.OrderStatusID = 1; // TO BE Removed
                    orderToUpdate.ApprovedBy = currentLoggedInUserId;

                    if (isRushOrder)
                    {
                        orderToUpdate.RushOrderPrice = userOrder.RushOrderPrice;
                        orderToUpdate.IsRushOrderForExistingOrder = userOrder.IsRushOrderForExistingOrder;
                        orderToUpdate.RushOrderMachineIP = userOrder.OrderMachineIP;
                        orderToUpdate.RushOrderStatusID = rushOrdstatusId;
                    }
                    else
                    {
                        orderToUpdate.OrderMachineIP = userOrder.OrderMachineIP;
                        orderToUpdate.RushOrderPrice = null;
                        orderToUpdate.IsRushOrderForExistingOrder = null;
                        orderToUpdate.RushOrderMachineIP = null;
                        orderToUpdate.RushOrderStatusID = null;
                    }

                    //Check Order Id in OrderPaymentDetail table, Increment the count to make Invoice Number unique
                    //for Failed Order.                    

                    var _opd = orderToUpdate.OrderPaymentDetails.Where(cond => !cond.OPD_IsDeleted).ToList();


                    if (!isBalancePayment && (!orderToUpdate.OrderPaymentDetails.Any(cond => !cond.OPD_IsDeleted) || isOrderFailed))
                    {
                        var _repoInstance = BALUtils.GetComplianceDataRepoInstance(tenantId);
                        //BALUtils.GetComplianceDataRepoInstance(tenantId).AddOnlinePaymentTransaction(orderToUpdate, Convert.ToDecimal(userOrder.GrandTotal), creationDateTime, invoiceNumber);
                        var _clientPaymentOptions = GetClientPaymentOptions(tenantId);

                        // Change to handle call from ApplicantBalancePayment, Submit Order Failed and UpdatePaymentDueOrders
                        foreach (var ordStsDC in lstOrderStsDC)
                        {
                            var _paymentModeCode = _clientPaymentOptions.First(po => po.PaymentOptionID == ordStsDC.PaymentOptionId).Code;

                            _invoiceNumber = BALUtils.GetComplianceDataRepoInstance(tenantId).GenerateInvoiceNumber(userOrder.OrderID, tenantId, isRushOrder);
                            _dicInvoiceNumber.Add(_paymentModeCode, _invoiceNumber);

                            var _opdInserted = _repoInstance.AddOnlinePaymentTransaction(orderToUpdate, creationDateTime, _invoiceNumber,
                                                                       ordStsDC.Amount, ordStsDC.PaymentOptionId, ordStsDC.StatusId, Convert.ToInt32(userOrder.ModifiedByID));

                            ordStsDC.lstPackages.ForEach(pkg =>
                            {
                                pkg.OrderPaymentDetail = _opdInserted;
                            });
                            // Need the UIpdated InvoiceNumner generated on the basis of the No. of records of OrderPaymentDetails 
                            _repoInstance.SaveDbContext(orderToUpdate.OrderID);
                        }
                    }
                    else if (isBalancePayment)
                    {

                        var _repoInstance = BALUtils.GetComplianceDataRepoInstance(tenantId);
                        _invoiceNumber = _repoInstance.GenerateInvoiceNumber(userOrder.OrderID, tenantId, isRushOrder);
                        var _ordStsDC = lstOrderStsDC.First();
                        var _complianceOPD = GetComplianceOrdPayDetail(orderToUpdate);
                        _complianceOPD.OPD_OrderStatusID = _ordStsDC.StatusId;
                        _complianceOPD.OPD_PaymentOptionID = _ordStsDC.PaymentOptionId;
                        _complianceOPD.OnlinePaymentTransaction.ModifiedByID = _complianceOPD.OPD_ModifiedByID = userOrder.ModifiedByID;
                        _complianceOPD.OnlinePaymentTransaction.ModifiedOn = _complianceOPD.OPD_ModifiedOn = creationDateTime;
                        _complianceOPD.OnlinePaymentTransaction.Invoice_num = _invoiceNumber;
                        var _lkpPaymetTypeModeCode = LookupManager.GetLookUpData<Entity.ClientEntity.lkpPaymentOption>(tenantId);
                        var _payTypeCode = _lkpPaymetTypeModeCode.Where(po => po.PaymentOptionID == _ordStsDC.PaymentOptionId).First().Code;
                        _dicInvoiceNumber.Add(_payTypeCode, _invoiceNumber);

                        _repoInstance.SaveDbContext(orderToUpdate.OrderID);
                    }
                    //In case of admin approve order of type payment due.
                    else
                    {
                        _dicInvoiceNumber.Add("status", "");
                    }

                    var _lstOPDs = orderToUpdate.OrderPaymentDetails.Where(opd => opd.OPD_IsDeleted == false).ToList();

                    foreach (var opd in _lstOPDs)
                    {
                        var _paymentTypeCode = opd.lkpPaymentOption.Code;
                        var _orderStatusId = opd.OPD_OrderStatusID;
                        var _orderPaymentDetailId = opd.OPD_ID;
                        var _packageId = AppConsts.NONE;

                        // Case when Order gets Paid with Grand Total = 0 or it is case of Invoice to Institution
                        if (_paymentTypeCode == PaymentOptions.InvoiceWithOutApproval.GetStringValue() || _paymentTypeCode == PaymentOptions.OfflineSettlement.GetStringValue())
                        {
                            DateTime expirydate = DateTime.Now;
                            if (orderToUpdate.SubscriptionYear.HasValue)
                            {
                                expirydate = expirydate.AddYears(orderToUpdate.SubscriptionYear.Value);
                            }
                            if (orderToUpdate.SubscriptionMonth.HasValue)
                            {
                                expirydate = expirydate.AddMonths(orderToUpdate.SubscriptionMonth.Value);
                            }

                            // If the Order contained any Compliance Package and it belongs to Current OPDs' OrderPkgPaymentDetails 
                            if (!orderToUpdate.DeptProgramPackage.IsNullOrEmpty() && opd.OrderPkgPaymentDetails.Any(oppd => oppd.OPPD_BkgOrderPackageID.IsNull()
                                && oppd.lkpOrderPackageType.OPT_Code == OrderPackageTypes.COMPLIANCE_PACKAGE.GetStringValue()))
                                _packageId = orderToUpdate.DeptProgramPackage.DPP_CompliancePackageID;

                            //Changes done for UAT-357 , 385
                            if (refrenceNumber.IsNullOrEmpty())
                            {
                                refrenceNumber = "N/A";
                            }

                            //if (UpdateOrderStatus(tenantId, orderToUpdate.OrderID, ApplicantOrderStatus.Paid.GetStringValue(), _packageId,
                            //                   orderToUpdate.CreatedByID, orderToUpdate.OrganizationUserProfile.OrganizationUserID,
                            //                   refrenceNumber, expirydate, opd.OPD_ID))
                            if (UpdateOrderStatus(tenantId, orderToUpdate.OrderID, ApplicantOrderStatus.Paid.GetStringValue(), _packageId,
                                               Convert.ToInt32(orderToUpdate.ApprovedBy), orderToUpdate.OrganizationUserProfile.OrganizationUserID,
                                               refrenceNumber, expirydate, opd.OPD_ID))
                            {
                                //In case of admin approve order of type payment due.
                                if (_dicInvoiceNumber.ContainsKey("status"))
                                {
                                    _dicInvoiceNumber["status"] = "true";
                                }
                            }


                            //OrderPaymentDetail orderPaymentDetail = GetOrderDetailById(tenantId, orderToUpdate.OrderID);
                            OrderPaymentDetail orderPaymentDetail = GetAllPaymentDetailsOfOrderByOrderID(tenantId, orderToUpdate.OrderID).Where(x => x.OPD_ID == _orderPaymentDetailId).FirstOrDefault();
                            //Send E-mail to user: 
                            if (orderPaymentDetail != null)
                            {
                                //START UAT-4250
                                String backgroundPackageCodeTypeCode = OrderPackageTypes.BACKGROUND_PACKAGE.GetStringValue();
                                String compliancePackageCodeTypeCode = OrderPackageTypes.COMPLIANCE_PACKAGE.GetStringValue();
                                List<String> lstPkgPaymentTypeCode = ComplianceDataManager.GetOrderPkgPaymentDetailByOPDID(tenantId, orderPaymentDetail.OPD_ID).Select(x => x.lkpOrderPackageType.OPT_Code).ToList();
                                String orderPackageTypeCode = String.Empty;
                                if (lstPkgPaymentTypeCode.Contains(backgroundPackageCodeTypeCode) && lstPkgPaymentTypeCode.Contains(compliancePackageCodeTypeCode))
                                {
                                    orderPackageTypeCode = OrderPackageTypes.COMPLIANCE_AND_BACKGROUMD_PACKAGE.GetStringValue();
                                }

                                else if (lstPkgPaymentTypeCode.Contains(compliancePackageCodeTypeCode))
                                {
                                    orderPackageTypeCode = OrderPackageTypes.COMPLIANCE_PACKAGE.GetStringValue();
                                }
                                else
                                    orderPackageTypeCode = OrderPackageTypes.BACKGROUND_PACKAGE.GetStringValue();

                                //END UAT
                                //String orderPackageType = orderPaymentDetail.Order.lkpOrderPackageType.OPT_Code;
                                Int32? systemCommunicationID = null;
                                Guid? messageID = null;

                                Boolean IslocationServiceTenant = SecurityManager.IsLocationServiceTenant(tenantId);
                                //Send mail
                                if (!IslocationServiceTenant)
                                    systemCommunicationID = CommunicationManager.SendOrderApprovalMail(orderPaymentDetail, orderToUpdate.CreatedByID, tenantId);
                                #region UAT-3389: Add attachment of "Requirement Explanation" to order approval emails which include tracking packages.

                                Dictionary<String, object> dicMessageParam = new Dictionary<String, object>();
                                //if (opd.Order.lkpOrderPackageType.OPT_Code.Equals(OrderPackageTypes.COMPLIANCE_PACKAGE.GetStringValue()) && systemCommunicationID.HasValue && systemCommunicationID > AppConsts.NONE)
                                if (
                    (
                           orderPackageTypeCode.Equals(OrderPackageTypes.COMPLIANCE_PACKAGE.GetStringValue())
                           ||
                           orderPackageTypeCode.Equals(OrderPackageTypes.COMPLIANCE_AND_BACKGROUMD_PACKAGE.GetStringValue())
                           )
                           &&
                           systemCommunicationID.HasValue && systemCommunicationID > AppConsts.NONE
                          )
                                {
                                    var res = AttachOrderApprovalDocuments(tenantId, orderPaymentDetail.Order.OrderID, orderPaymentDetail.Order.OrganizationUserProfile.OrganizationUserID, systemCommunicationID.Value);
                                    if (res.Item1)
                                    {
                                        dicMessageParam = res.Item2;
                                    }
                                }

                                #endregion
                                if (!IslocationServiceTenant)
                                    messageID = CommunicationManager.SendOrderApprovalMessage(orderPaymentDetail, orderToUpdate.CreatedByID, tenantId, dicMessageParam);
                            }
                        }
                    }
                }
                return _dicInvoiceNumber;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="organizationUserProfile"></param>
        /// <param name="typeOfEntity">1 for Master Entity edmx & 2 for Client Entity edmx</param>
        /// <returns></returns>
        private static object MapOrganizationUserProfileToOrganizationUser(OrganizationUserProfile organizationUserProfile, Int32 typeOfEntity, Int32 orgUserID)
        {
            if (typeOfEntity == 1)
            {
                var organizationUser = new Entity.OrganizationUser();
                organizationUser.FirstName = organizationUserProfile.FirstName;
                organizationUser.LastName = organizationUserProfile.LastName;
                organizationUser.MiddleName = organizationUserProfile.MiddleName;
                //organizationUser.ModifiedByID = organizationUserProfile.OrganizationUserID;
                organizationUser.ModifiedByID = orgUserID;
                organizationUser.ModifiedOn = DateTime.Now;
                organizationUser.Alias1 = organizationUserProfile.Alias1;
                organizationUser.Alias2 = organizationUserProfile.Alias2;
                organizationUser.Alias3 = organizationUserProfile.Alias3;
                organizationUser.DOB = organizationUserProfile.DOB;
                organizationUser.Gender = organizationUserProfile.Gender;
                organizationUser.PhoneNumber = organizationUserProfile.PhoneNumber;
                organizationUser.SecondaryPhone = organizationUserProfile.SecondaryPhone;
                organizationUser.SecondaryEmailAddress = organizationUserProfile.SecondaryEmailAddress;
                organizationUser.SSN = organizationUserProfile.SSN;
                organizationUser.OrganizationUserID = organizationUserProfile.OrganizationUserID;
                organizationUser.PrimaryEmailAddress = organizationUserProfile.PrimaryEmailAddress;
                organizationUser.IsInternationalPhoneNumber = organizationUserProfile.IsInternationalPhoneNumber;
                organizationUser.IsInternationalSecondaryPhone = organizationUserProfile.IsInternationalSecondaryPhone;
                organizationUser.UserTypeID = organizationUserProfile.UserTypeID; //CBI|| CABS

                return organizationUser;
            }
            else
            {
                var organizationUser = new Entity.ClientEntity.OrganizationUser();
                organizationUser.FirstName = organizationUserProfile.FirstName;
                organizationUser.LastName = organizationUserProfile.LastName;
                organizationUser.MiddleName = organizationUserProfile.MiddleName;
                //organizationUser.ModifiedByID = organizationUserProfile.OrganizationUserID;
                organizationUser.ModifiedByID = orgUserID;
                organizationUser.ModifiedOn = DateTime.Now;
                organizationUser.Alias1 = organizationUserProfile.Alias1;
                organizationUser.Alias2 = organizationUserProfile.Alias2;
                organizationUser.Alias3 = organizationUserProfile.Alias3;
                organizationUser.DOB = organizationUserProfile.DOB;
                organizationUser.Gender = organizationUserProfile.Gender;
                organizationUser.PhoneNumber = organizationUserProfile.PhoneNumber;
                organizationUser.SecondaryPhone = organizationUserProfile.SecondaryPhone;
                organizationUser.SecondaryEmailAddress = organizationUserProfile.SecondaryEmailAddress;
                organizationUser.SSN = organizationUserProfile.SSN;
                organizationUser.OrganizationUserID = organizationUserProfile.OrganizationUserID;
                organizationUser.PrimaryEmailAddress = organizationUserProfile.PrimaryEmailAddress;
                organizationUser.IsInternationalPhoneNumber = organizationUserProfile.IsInternationalPhoneNumber;
                organizationUser.IsInternationalSecondaryPhone = organizationUserProfile.IsInternationalSecondaryPhone;
                organizationUser.UserTypeID = !organizationUserProfile.UserTypeID.IsNullOrEmpty() ? organizationUserProfile.UserTypeID : (Int32?)null; //CBI|| CABS
                return organizationUser;
            }
        }

        private static Entity.OrganizationUserProfile MapUserProfileClientToUserProfileMaster(OrganizationUserProfile orgUserProfile, Int32 orgUserID)
        {
            return new Entity.OrganizationUserProfile
            {
                FirstName = orgUserProfile.FirstName,
                LastName = orgUserProfile.LastName,
                MiddleName = orgUserProfile.MiddleName,
                Alias1 = orgUserProfile.Alias1,
                Alias2 = orgUserProfile.Alias2,
                Alias3 = orgUserProfile.Alias3,
                SSN = orgUserProfile.SSN,
                DOB = orgUserProfile.DOB,
                Gender = orgUserProfile.Gender,
                PhoneNumber = orgUserProfile.PhoneNumber,
                SecondaryPhone = orgUserProfile.SecondaryPhone,
                PrimaryEmailAddress = orgUserProfile.PrimaryEmailAddress,
                SecondaryEmailAddress = orgUserProfile.SecondaryEmailAddress,
                OrganizationUserID = orgUserProfile.OrganizationUserID,
                CreatedByID = orgUserID,
                IsActive = orgUserProfile.IsActive,
                IsInternationalPhoneNumber = orgUserProfile.IsInternationalPhoneNumber,
                IsInternationalSecondaryPhone = orgUserProfile.IsInternationalSecondaryPhone,
                UserTypeID = orgUserProfile.UserTypeID
            };
        }

        public static Dictionary<String, List<Int32>> GetOrderAndTenantID(String invoiceNumber)
        {
            try
            {
                Dictionary<String, List<Int32>> data = new Dictionary<String, List<Int32>>();

                Int32 indexOfTInInvoiceNum = invoiceNumber.IndexOf('-') + 1;
                invoiceNumber = invoiceNumber.Substring(indexOfTInInvoiceNum);
                Int32 indexofOInInvoiceNum = invoiceNumber.IndexOf('-');
                List<Int32> tenantID = new List<int>();
                tenantID.Add(Convert.ToInt32(invoiceNumber.Substring(0, indexofOInInvoiceNum)));
                Int32 lastIndexOfHyphen = invoiceNumber.LastIndexOf('-');
                string strOrderID;
                if (indexofOInInvoiceNum == lastIndexOfHyphen)
                    strOrderID = invoiceNumber.Substring(indexofOInInvoiceNum + 1);
                else
                {
                    Int32 startIndex = indexofOInInvoiceNum + 1;
                    Int32 endIndex = lastIndexOfHyphen;
                    Int32 length = endIndex - startIndex;
                    strOrderID = invoiceNumber.Substring(startIndex, length);
                }

                List<Int32> orderIds = new List<int>();
                string[] arOrderId = strOrderID.Split(',');
                if (arOrderId.IsNotNull() && arOrderId.Length > 0)
                {
                    foreach (string orderId in arOrderId)
                    {
                        orderIds.Add(Convert.ToInt32(orderId.Trim()));
                    }
                }
                else
                    orderIds.Add(Convert.ToInt32(strOrderID));



                data.Add("OrderID", orderIds);
                data.Add("TenantID", tenantID);
                return data;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static OnlinePaymentTransaction GetPaymentTransactionDetails(String invoiceNumber, Int32 tenantId, Boolean requiredOrderDetails = false)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetPaymentTransactionDetails(invoiceNumber, requiredOrderDetails);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static OnlinePaymentTransaction UpdateOnlineTransactionResults(String invoiceNumber, NameValueCollection transactionDetailsCollection, Int32 tenantId,
            Int32 modifiedUserID)
        {
            try
            {
                if (transactionDetailsCollection.IsNotNull() && transactionDetailsCollection.Count > 0)
                {
                    return BALUtils.GetComplianceDataRepoInstance(tenantId).UpdateOnlineTransactionResults(invoiceNumber, transactionDetailsCollection, modifiedUserID);
                }
                return null;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static Order UpdateOrderForOnlinePayment(String amountPaid, Int32 modifiedUserID, Int32 orderID, Int32 tenantID, OnlinePaymentTransaction onlinePaymentTransaction)
        {
            try
            {
                if (onlinePaymentTransaction.IsNotNull())
                {
                    Int32 ItemPayementID = LookupManager.GetLookUpData<Entity.ClientEntity.lkpOrderRequestType>(tenantID).Where(x => x.ORT_Active == true && x.ORT_Code == "AAF").FirstOrDefault().ORT_ID;
                    String amount = Convert.ToString(decimal.Round(onlinePaymentTransaction.Amount ?? 0, 2));

                    List<lkpOrderStatu> lkpOrderStatu = LookupManager.GetLookUpData<Entity.ClientEntity.lkpOrderStatu>(tenantID).Where(x => x.IsDeleted == false).ToList();
                    Order order = onlinePaymentTransaction.OrderPaymentDetails.Where(x => !x.OPD_IsDeleted && !x.Order.IsDeleted && x.OPD_OrderID == orderID).
                                                                               Select(x => x.Order).FirstOrDefault();

                    // There will be only one to one mapping betweenOnlinePaymentTransaction & OrderPaymentDetails
                    var _orderPaymentDetails = onlinePaymentTransaction.OrderPaymentDetails.FirstOrDefault(opd => opd.OPD_OrderID == orderID);

                    ///Get the Previous OPD for rush Order
                    var _previousOPD = GetComplianceOrdPayDetail(order);


                    if (order.IsNotNull() && amount == amountPaid && lkpOrderStatu.IsNotNull() && _orderPaymentDetails.IsNotNull())
                    {
                        String paidOrderStatusCode = ApplicantOrderStatus.Paid.GetStringValue();
                        Int32 paidStatusID = lkpOrderStatu.FirstOrDefault(x => x.Code == paidOrderStatusCode).OrderStatusID;
                        Int32 sentToOnlinePaymentStatusID = lkpOrderStatu.FirstOrDefault(x => x.Code == ApplicantOrderStatus.Send_For_Online_Payment.GetStringValue()).
                                                                           OrderStatusID;

                        Int32 onlinePaymentNotCompletedStatusID = lkpOrderStatu.FirstOrDefault(x => x.Code == ApplicantOrderStatus.Online_Payment_Not_Completed.GetStringValue()).
                                                                          OrderStatusID;

                        //Int32 modifyShippingSentToOnlinePaymentStatusID = lkpOrderStatu.FirstOrDefault(x => x.Code == ApplicantOrderStatus.Modify_Shipping_Send_For_Online_Payment.GetStringValue()).
                        //                                                  OrderStatusID;

                        Int32 modifyShippingSentToOnlinePaymentStatusID = lkpOrderStatu.Any(x => x.Code == ApplicantOrderStatus.Modify_Shipping_Send_For_Online_Payment.GetStringValue()) ?
                                                                          lkpOrderStatu.FirstOrDefault(x => x.Code == ApplicantOrderStatus.Modify_Shipping_Send_For_Online_Payment.GetStringValue()).OrderStatusID : 0;

                        Int32 pendingOrderStatusID = lkpOrderStatu.FirstOrDefault(x => x.Code == ApplicantOrderStatus.Pending_Payment_Approval.GetStringValue()).OrderStatusID;

                        Order orderToUpdate = new Order();
                        orderToUpdate.OrderID = order.OrderID;
                        orderToUpdate.ModifiedByID = modifiedUserID;
                        orderToUpdate.ModifiedOn = DateTime.Now;
                        //Rush Order For New Order
                        //if (order.IsRushOrderForExistingOrder == false && order.RushOrderStatusID == sentToOnlinePaymentStatusID &&
                        //    order.OrderStatusID == sentToOnlinePaymentStatusID)
                        if (order.IsRushOrderForExistingOrder == false && order.RushOrderStatusID == sentToOnlinePaymentStatusID
                            &&
                           (_orderPaymentDetails.OPD_OrderStatusID == sentToOnlinePaymentStatusID
                             ||
                            _orderPaymentDetails.OPD_OrderStatusID == onlinePaymentNotCompletedStatusID
                            ||
                            _orderPaymentDetails.OPD_OrderStatusID == modifyShippingSentToOnlinePaymentStatusID)
                           )
                        {
                            // UAT 916 TO DO
                            orderToUpdate.ApprovalDate = DateTime.Now;
                            orderToUpdate.RushOrderStatusID = paidStatusID;

                            if (UpdateOrderAddPurchasedSubscription(tenantID, orderToUpdate, paidOrderStatusCode, _orderPaymentDetails.OPD_ID, isNewOrder: true))
                            {
                                SendOrderCrationNotification(tenantID, orderID, order.OrganizationUserProfile.OrganizationUserID, modifiedUserID, _orderPaymentDetails);
                            }
                        }
                        //Rush Order For Existing Order - Check if the PreviousOPD had Paid or Pending Payment Approval Status 
                        else if (order.IsRushOrderForExistingOrder == true && order.RushOrderStatusID == sentToOnlinePaymentStatusID
                             && (_previousOPD.OPD_OrderStatusID == paidStatusID || _previousOPD.OPD_OrderStatusID == pendingOrderStatusID))
                        {
                            orderToUpdate.RushOrderStatusID = paidStatusID;
                            //Boolean value if placed a rush order for package whose status is pending order status. 
                            Boolean isRequiredPackageSubscriptionEntry = _previousOPD.OPD_OrderStatusID == paidStatusID ? true : false;
                            //Boolean isRequiredPackageSubscriptionEntry = order.OrderStatusID == paidStatusID ? true : false;
                            if (UpdateOrderAddPurchasedSubscription(tenantID, orderToUpdate, paidOrderStatusCode, _orderPaymentDetails.OPD_ID, isRequiredPackageSubscriptionEntry, isRushOrderForExistingOrder: true) || isRequiredPackageSubscriptionEntry == false)
                            {
                                SendRushOrderConfirmation(orderID, tenantID,
                                    onlinePaymentTransaction.OrderPaymentDetails.FirstOrDefault(x => !x.OPD_IsDeleted).OPD_ID);
                            }
                        }
                        //New Order
                        //else if (order.OrderStatusID == sentToOnlinePaymentStatusID)
                        else if (_orderPaymentDetails.OPD_OrderStatusID == sentToOnlinePaymentStatusID
                              || _orderPaymentDetails.OPD_OrderStatusID == onlinePaymentNotCompletedStatusID
                              || _orderPaymentDetails.OPD_OrderStatusID == modifyShippingSentToOnlinePaymentStatusID)
                        {
                            orderToUpdate.ApprovalDate = DateTime.Now;

                            if (UpdateOrderAddPurchasedSubscription(tenantID, orderToUpdate, paidOrderStatusCode, _orderPaymentDetails.OPD_ID, isNewOrder: true))
                            {
                                if (order.OrderRequestTypeID != ItemPayementID)
                                    SendOrderCrationNotification(tenantID, orderID, order.OrganizationUserProfile.OrganizationUserID, modifiedUserID, _orderPaymentDetails);
                            }
                        }
                        return orderToUpdate;
                    }
                }
                return new Order();

            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="tenantId"></param>
        /// <param name="orderToUpdate"></param>
        /// <param name="orderStatusCode"></param>
        /// <param name="isRequiredPackageSubscriptionEntry"></param>
        /// <param name="isNewOrder">Identifies, whether to Add the Event history for background package or not, based on whether its new order/new rush order not</param>
        /// <returns></returns>
        private static Boolean UpdateOrderAddPurchasedSubscription(Int32 tenantId, Order orderToUpdate, String orderStatusCode
                                                                   , Int32 orderPaymentDetailId, Boolean isRequiredPackageSubscriptionEntry = true
                                                                   , Boolean isNewOrder = false, Boolean isRushOrderForExistingOrder = false)
        {
            try
            {
                if (isNewOrder)
                {
                    List<lkpEventHistory> _lstBkgOrderEvents = LookupManager.GetLookUpData<lkpEventHistory>(tenantId)
                                                                                .Where(eh => !eh.EH_IsDeleted).ToList();

                    List<lkpOrderStatusType> _lstOrderStatusTypes = LookupManager.GetLookUpData<lkpOrderStatusType>(tenantId).ToList();
                    orderToUpdate = BALUtils.GetComplianceDataRepoInstance(tenantId).UpdateOrderByOrderID(orderToUpdate, orderStatusCode, true, _lstBkgOrderEvents
                                                                                                        , _lstOrderStatusTypes, orderPaymentDetailId
                                                                                                        , isRushOrderForExistingOrder);
                }
                else
                {
                    orderToUpdate = BALUtils.GetComplianceDataRepoInstance(tenantId).UpdateOrderByOrderID(orderToUpdate, orderStatusCode
                                                                                                          , orderPaymentDetailId: orderPaymentDetailId
                                                                                                          , isRushOrderForExistingOrder: isRushOrderForExistingOrder);
                }
                //Added a check of new Order to enter the repurchase order in if condition, because we have treated repurchase order as new order for archived and expired subscriptions but previousOrderId is not null in this scenario.[UAT-977:Additional work towards archive ability]
                if (orderToUpdate.IsNotNull() && (orderToUpdate.PreviousOrderID == null || orderToUpdate.lkpOrderRequestType.IsNotNull() &&
                    orderToUpdate.lkpOrderRequestType.ORT_Code == OrderRequestType.ChangeSubscriptionByAdmin.GetStringValue() || orderToUpdate.lkpOrderRequestType.ORT_Code == OrderRequestType.NewOrder.GetStringValue()) && isRequiredPackageSubscriptionEntry)
                {
                    // Handle the crash in case only Background package was purchased

                    //[BS]: UAT-916: Added check where system checks if compliance Package is PAID via Credit Card or not, if Compliance Pkg is not PAID via 
                    // Credit Card then system will not create PS entry into Database.
                    List<OrderPkgPaymentDetail> orderPkgPaymentDetails = BALUtils.GetComplianceDataRepoInstance(tenantId).GetOrderPkgPaymentDetailByOPDID(orderPaymentDetailId);

                    //Get OrderPkgPaymentDetails based on orderPaymentDetailId and Check whether Compliance Package->OrderPackageType 
                    //AND BkgOrderPackageID -> NULL(For Complaiance Package BkgOrderPackageID would be NULL) exists
                    // in OrderPkgPaymentDetails. If this exists, it means our Compliance Package is paid via Credit Card and system should PAID this Package and create PS.  
                    if (!orderToUpdate.DeptProgramPackage.IsNullOrEmpty()
                         && (orderPkgPaymentDetails.Any(cond => cond.OPPD_BkgOrderPackageID.IsNull()
                                                            && cond.lkpOrderPackageType.OPT_Code == OrderPackageTypes.COMPLIANCE_PACKAGE.GetStringValue()))
                        )
                    {
                        DateTime expirydate = DateTime.Now;

                        if (orderToUpdate.SubscriptionYear.HasValue)
                        {
                            expirydate = expirydate.AddYears(orderToUpdate.SubscriptionYear.Value);
                        }
                        if (orderToUpdate.SubscriptionMonth.HasValue)
                        {
                            expirydate = expirydate.AddMonths(orderToUpdate.SubscriptionMonth.Value);
                        }

                        ComplianceDataManager.SubscribePurchasedPackage(tenantId, orderToUpdate.OrderID, orderToUpdate.OrganizationUserProfile.OrganizationUserID,
                            orderToUpdate.DeptProgramPackage.DPP_CompliancePackageID, expirydate, orderToUpdate.ModifiedByID.Value, orderToUpdate);
                    }
                    return true;
                }
                else if (orderToUpdate.IsNotNull() && isRequiredPackageSubscriptionEntry)
                {
                    PackageSubscription tempPackageSubscription = BALUtils.GetComplianceDataRepoInstance(tenantId)
                                                                           .GetPackageSubscriptionByOrderId(orderToUpdate.PreviousOrderID.Value);
                    if (tempPackageSubscription != null)
                    {
                        tempPackageSubscription.ModifiedByID = orderToUpdate.ModifiedByID;
                        tempPackageSubscription.ModifiedOn = DateTime.Now;

                        //In-active old order in case of change subscription
                        if (orderToUpdate.lkpOrderRequestType.ORT_Code == OrderRequestType.ChangeSubscription.GetStringValue())
                        {
                            if (tempPackageSubscription.CompliancePackageID != orderToUpdate.DeptProgramPackage.DPP_CompliancePackageID)
                            {
                                tempPackageSubscription.IsDeleted = true;
                            }
                            DateTime expirydate = DateTime.Now;
                            if (orderToUpdate.SubscriptionYear.HasValue)
                            {
                                expirydate = expirydate.AddYears(orderToUpdate.SubscriptionYear.Value);
                            }
                            if (orderToUpdate.SubscriptionMonth.HasValue)
                            {
                                expirydate = expirydate.AddMonths(orderToUpdate.SubscriptionMonth.Value);
                            }
                            Order objOrder = BALUtils.GetComplianceDataRepoInstance(tenantId).GetOrderById(orderToUpdate.PreviousOrderID ?? 0);
                            if (objOrder != null)
                            {
                                var _compliancePackageOPD = ComplianceDataManager.GetComplianceOrdPayDetail(objOrder);
                                //UAT-1245:If payment method is the same, both tracking and screening are getting cancelled when the applicant attempts to cancel 
                                //the tracking order.

                                if (IsOrdPayDetailContainsBkgPackage(_compliancePackageOPD))
                                {
                                    objOrder.PartialOrderCancellationTypeID = GetPartialOrderCancelTypeForChangeSubs(objOrder, tenantId);
                                    objOrder.ModifiedByID = orderToUpdate.ModifiedByID;
                                    objOrder.ModifiedOn = DateTime.Now;
                                }
                                else
                                {
                                    _compliancePackageOPD.OPD_OrderStatusID = ComplianceDataManager.GetOrderStatusList(tenantId)
                                                                                                .Where(t => t.Code == ApplicantOrderStatus.Cancelled.GetStringValue())
                                                                                                .Select(t => t.OrderStatusID).FirstOrDefault();
                                }
                                // objOrder.OrderStatusID = ComplianceDataManager.GetOrderStatusList(tenantId).Where(t => t.Code == ApplicantOrderStatus.Cancelled.GetStringValue()).Select(t => t.OrderStatusID).FirstOrDefault();
                            }
                            if (!orderToUpdate.DeptProgramPackage.IsNullOrEmpty()) // Case when only Background package is purchased
                                ComplianceDataManager.SubscribePurchasedPackage(tenantId, orderToUpdate.OrderID, orderToUpdate.OrganizationUserProfile.OrganizationUserID,
                                    orderToUpdate.DeptProgramPackage.DPP_CompliancePackageID, expirydate, orderToUpdate.ModifiedByID.Value, orderToUpdate);
                        }
                        else
                        {
                            tempPackageSubscription.OrderID = orderToUpdate.OrderID;
                            //UAT-1462:where students renew their subscription it should extend from the date of renewal and not the expiration date.
                            //if (orderToUpdate.SubscriptionMonth != null)
                            //    tempPackageSubscription.ExpiryDate = tempPackageSubscription.ExpiryDate.Value.AddMonths(orderToUpdate.SubscriptionMonth.Value);

                            if (orderToUpdate.SubscriptionMonth != null)
                            {
                                DateTime currentdate = DateTime.Now;
                                //Added below condition to set expiry date of subscription after expiry.
                                if (tempPackageSubscription.ExpiryDate.IsNotNull() && tempPackageSubscription.ExpiryDate.Value.Date <= currentdate.Date)
                                {

                                    currentdate = currentdate.AddMonths(orderToUpdate.SubscriptionMonth.Value);
                                    tempPackageSubscription.ExpiryDate = currentdate.Date.AddHours(23).AddMinutes(59).AddSeconds(59);
                                }
                                else
                                {
                                    tempPackageSubscription.ExpiryDate = tempPackageSubscription.ExpiryDate.Value.AddMonths(orderToUpdate.SubscriptionMonth.Value);
                                }
                            }

                            BALUtils.GetComplianceDataRepoInstance(tenantId).UpdatePackageSubscription();
                        }
                    }
                    return true;
                }
                return false;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static void SendOrderCrationNotification(Int32 tenantId, Int32 orderId, Int32 organizationUserID, Int32 currentLoggedInUserId, OrderPaymentDetail orderPaymentDetail)
        {
            //PackageSubscription packageSubscription = ComplianceDataManager.GetPackageSubscriptionDetailByOrderId(tenantId, orderId);
            //if (packageSubscription != null)
            //{
            //OrderPaymentDetail orderPaymentDetail = GetOrderDetailById(tenantId, orderId);

            if (!SecurityManager.IsLocationServiceTenant(tenantId))//// send notification only to the non Location Service Tenants (Non CBI Tenants)
            {
                if (orderPaymentDetail.IsNotNull())
                {
                    String backgroundPackageCodeTypeCode = OrderPackageTypes.BACKGROUND_PACKAGE.GetStringValue();

                    //START UAT-4250
                    String compliancePackageCodeTypeCode = OrderPackageTypes.COMPLIANCE_PACKAGE.GetStringValue();
                    List<String> lstPkgPaymentTypeCode = ComplianceDataManager.GetOrderPkgPaymentDetailByOPDID(tenantId, orderPaymentDetail.OPD_ID).Select(x => x.lkpOrderPackageType.OPT_Code).ToList();
                    String orderPackageTypeCode = String.Empty;
                    if (lstPkgPaymentTypeCode.Contains(backgroundPackageCodeTypeCode) && lstPkgPaymentTypeCode.Contains(compliancePackageCodeTypeCode))
                    {
                        orderPackageTypeCode = OrderPackageTypes.COMPLIANCE_AND_BACKGROUMD_PACKAGE.GetStringValue();
                    }

                    else if (lstPkgPaymentTypeCode.Contains(compliancePackageCodeTypeCode))
                    {
                        orderPackageTypeCode = OrderPackageTypes.COMPLIANCE_PACKAGE.GetStringValue();
                    }
                    else
                        orderPackageTypeCode = OrderPackageTypes.BACKGROUND_PACKAGE.GetStringValue();

                    //END UAT
                    Int32? systemCommunicationID = null;
                    Guid? messageID = null;

                    systemCommunicationID = CommunicationManager.SendOrderApprovalMail(orderPaymentDetail, organizationUserID, tenantId);
                    #region UAT-3389: Add attachment of "Requirement Explanation" to order approval emails which include tracking packages.
                    Dictionary<String, object> dicMessageParam = new Dictionary<String, object>();
                    //  if (orderPackageType.Equals(OrderPackageTypes.COMPLIANCE_PACKAGE.GetStringValue()) && systemCommunicationID.HasValue && systemCommunicationID > AppConsts.NONE)
                    if (
                       (
                       orderPackageTypeCode.Equals(OrderPackageTypes.COMPLIANCE_PACKAGE.GetStringValue())
                       ||
                       orderPackageTypeCode.Equals(OrderPackageTypes.COMPLIANCE_AND_BACKGROUMD_PACKAGE.GetStringValue())
                       )
                       &&
                       systemCommunicationID.HasValue && systemCommunicationID > AppConsts.NONE
                      )
                    {
                        var res = AttachOrderApprovalDocuments(tenantId, orderId, organizationUserID, systemCommunicationID.Value);
                        if (res.Item1)
                        {
                            dicMessageParam = res.Item2;
                        }
                    }
                    #endregion
                    messageID = CommunicationManager.SendOrderApprovalMessage(orderPaymentDetail, organizationUserID, tenantId, dicMessageParam);
                    if (orderPackageTypeCode.Equals(OrderPackageTypes.BACKGROUND_PACKAGE.GetStringValue()) || orderPackageTypeCode.Equals(OrderPackageTypes.COMPLIANCE_AND_BACKGROUMD_PACKAGE.GetStringValue()))
                    {
                        if (systemCommunicationID != null && messageID != null)
                        {
                            List<Entity.ClientEntity.lkpBusinessChannelType> businessChannelType = BackgroundProcessOrderManager.GetBusinessChannelType(tenantId);
                            List<Entity.ClientEntity.lkpOrderNotificationType> orderNotificationType = BackgroundProcessOrderManager.GetOrderNotificationType(tenantId);

                            String amsBusinessChannelCode = BusinessChannelType.AMS.GetStringValue();
                            Int16 businessChannelTypeID = businessChannelType.IsNotNull() && businessChannelType.Count > 0 ?
                                                          Convert.ToInt16(businessChannelType.FirstOrDefault(cond => cond.Code == amsBusinessChannelCode).BusinessChannelTypeID)
                                                          : Convert.ToInt16(0);

                            String ordPaidNotificationTypeCode = OrderNotificationType.ORDER_PAID_NOTIFICATION.GetStringValue();
                            Int32 ordPaidNotificationTypeID = orderNotificationType.IsNotNull() && orderNotificationType.Count > 0 ?
                                Convert.ToInt32(orderNotificationType.FirstOrDefault(cond => cond.ONT_Code == ordPaidNotificationTypeCode).ONT_ID) : Convert.ToInt32(0);

                            OrderNotification ordNotification = new OrderNotification();
                            ordNotification.ONTF_OrderID = orderId;
                            ordNotification.ONTF_MSG_SystemCommunicationID = systemCommunicationID;
                            ordNotification.ONTF_MSG_MessageID = messageID;
                            ordNotification.ONTF_BusinessChannelTypeID = businessChannelTypeID;
                            ordNotification.ONTF_IsPostal = false;
                            ordNotification.ONTF_CreatedByID = currentLoggedInUserId;
                            ordNotification.ONTF_CreatedOn = DateTime.Now;
                            ordNotification.ONTF_ModifiedByID = null;
                            ordNotification.ONTF_ModifiedDate = null;
                            ordNotification.ONTF_ParentNotificationID = null;
                            ordNotification.ONTF_OrderNotificationTypeID = ordPaidNotificationTypeID;
                            Int32 ordNotificationID = BackgroundProcessOrderManager.CreateOrderNotification(tenantId, ordNotification);
                        }
                    }
                }
            }
        }

        public static Boolean SaveIPNResponse(Int32 tenantId, String ipnTransactionStatus, String ipnPostData, Dictionary<String, String> ipnPostDataKeyValue)
        {
            try
            {
                String invoiceNumber = ipnPostDataKeyValue["invoice"];
                String transactionID = ipnPostDataKeyValue["txn_id"];
                return BALUtils.GetComplianceDataRepoInstance(tenantId).SaveIPNResponse(invoiceNumber, transactionID, ipnTransactionStatus, ipnPostData);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static DeptProgramPackageSubscription GetDeptProgramPackageSubscriptionDetail(Int32 tenantId, Int32 programPackageSubscriptionId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetDeptProgramPackageSubscriptionDetail(programPackageSubscriptionId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// To update order By order ID
        /// </summary>
        /// <param name="order"></param>
        /// <param name="orderStatusCode"></param>
        /// <param name="tenantId"></param>
        ///  <param name="insertedOrdPayDetailId">ID of the newly generated orderPaymentDetail record.</param>
        /// <returns></returns>
        public static String UpdateOrderByID(Order order, String orderStatusCode, Int32 ordPayDetailId, Int32 paymentModeId, out Int32 insertedOrdPayDetailId, Int32 tenantId, Boolean IsRevertToMoneyOrder = false)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).UpdateOrderByID(order, orderStatusCode, ordPayDetailId, paymentModeId, out insertedOrdPayDetailId, tenantId, IsRevertToMoneyOrder);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Update the Status of the OPD for the Credit Card, to the status specified and payment profile Id
        /// </summary>
        /// <param name="tenantId"></param>
        /// <param name="statusCode"></param>
        /// <param name="currentUserId"></param>
        /// <param name="opdId"></param>
        /// <param name="paymentProfileId"></param>
        public static void UpdateOPDStatus(Int32 tenantId, String statusCode, Int32 currentUserId, Int32 opdId, long paymentProfileId = 0)
        {
            try
            {
                var _statusId = LookupManager.GetLookUpData<lkpOrderStatu>(tenantId).Where(os => os.Code == statusCode).First().OrderStatusID;
                BALUtils.GetComplianceDataRepoInstance(tenantId).UpdateOPDStatus(_statusId, currentUserId, opdId, paymentProfileId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Send mail and message for Rush Order For Existing Order.
        /// </summary>
        /// <param name="orderID"></param>
        /// <param name="tenantID"></param>
        private static void SendRushOrderConfirmation(Int32 orderID, Int32 tenantID, Int32 onlinePaymentDetailID)
        {
            //Send mail and message for Rush Order For Existing Order.
            Entity.ClientEntity.PackageSubscription packageSubscription = ComplianceDataManager.GetPackageSubscriptionDetailByOrderId(tenantID, orderID);
            if (packageSubscription == null)
            {
                packageSubscription = new Entity.ClientEntity.PackageSubscription();
                packageSubscription.Order = ComplianceDataManager.GetOrderById(tenantID, orderID);
            }
            CommunicationManager.SendRushOrderConfirmationMail(packageSubscription, tenantID, onlinePaymentDetailID);
            CommunicationManager.SendRushOrderConfirmationMessage(packageSubscription, tenantID, onlinePaymentDetailID);

        }

        #region UAT-2073: New Payment setting: School approval for MO and CC Kaplan would like a way to keep students from paying for orders of a specific package without their approval.

        /// <summary>
        /// To get Payment Approval Required setting for credit card
        /// </summary>
        /// <param name="tenantId"></param>
        /// <param name="orderIDs"></param>
        /// <returns>Payment Approval Status ID</returns>
        public static Int32 GetPaymentApprovalRequiredSetting(Int32 tenantId, String orderIDs)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetPaymentApprovalRequiredSetting(orderIDs);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Get List of Orders for Order IDs
        /// </summary>
        /// <param name="tenantId"></param>
        /// <param name="strOrderIDs"></param>
        /// <returns></returns>
        public static List<Order> GetListofOrdersForOrderID(Int32 tenantId, String strOrderIDs)
        {
            try
            {
                List<Int32> orderIds = new List<Int32>();
                if (!strOrderIDs.IsNullOrEmpty())
                {
                    orderIds = strOrderIDs.Split(',').Select(int.Parse).ToList();
                }
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetListofOrdersForOrderID(orderIds);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Update the Status of the OPD for the Credit Card, to the status specified and payment profile Id
        /// </summary>
        /// <param name="tenantId"></param>
        /// <param name="statusCode"></param>
        /// <param name="currentUserId"></param>
        /// <param name="ccOPDList"></param>
        /// <param name="paymentProfileId"></param>
        public static void UpdateOPDStatusAndPaymentProfileId(Int32 tenantId, String statusCode, Int32 currentUserId, List<Int32> ccOPDList, long paymentProfileId)
        {
            try
            {
                var _statusId = LookupManager.GetLookUpData<lkpOrderStatu>(tenantId).Where(os => os.Code == statusCode).First().OrderStatusID;
                BALUtils.GetComplianceDataRepoInstance(tenantId).UpdateOPDStatusAndPaymentProfileId(_statusId, currentUserId, ccOPDList, paymentProfileId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        #endregion

        #endregion

        #region Rush Order Review

        /// <summary>
        /// To get Rush Order Payment Options
        /// </summary>
        /// <param name="tenantId"></param>
        /// <returns></returns>
        public static List<lkpPaymentOption> GetRushOrderPaymentOptions(Int32 tenantId)
        {
            try
            {
                List<String> paymentOptns = new List<String>
                {
                    PaymentOptions.Credit_Card.GetStringValue(),
                    PaymentOptions.Paypal.GetStringValue()
                };
                return LookupManager.GetLookUpData<Entity.ClientEntity.lkpPaymentOption>(tenantId).Where(x => paymentOptns.Contains(x.Code) && x.IsDeleted == false).ToList();
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// To get DeptProgramPackageSubscription object
        /// </summary>
        /// <param name="orderId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="tenantId"></param>
        /// <returns></returns>
        public static DeptProgramPackageSubscription GetDeptProgramPackageSubscription(Int32 orderId, Int32 subscriptionId, Int32 tenantId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetDeptProgramPackageSubscription(orderId, subscriptionId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// To update rush order detail
        /// </summary>
        /// <param name="order"></param>
        /// <param name="orderStatusCode"></param>
        /// <param name="paymentModeId"></param>
        /// <param name="tenantId"></param>
        /// <returns></returns>
        public static String UpdateRushOrderByOrderID(Order order, String orderStatusCode, Int32 paymentModeId, Int32 tenantId, out OrderPaymentDetail ordPayDetail)
        {
            try
            {
                var _orderPkgType = LookupManager.GetLookUpData<lkpOrderPackageType>(tenantId).ToList();
                var _optTypeId = _orderPkgType.Where(opt => opt.OPT_Code == OrderPackageTypes.COMPLIANCE_RUSHORDER_PACKAGE.GetStringValue() && opt.OPT_IsDeleted == false).First().OPT_ID;
                return BALUtils.GetComplianceDataRepoInstance(tenantId).UpdateRushOrderByOrderID(order, orderStatusCode, paymentModeId, tenantId, out ordPayDetail, _optTypeId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// To update rush order detail
        /// </summary>
        /// <param name="tenantId"></param>
        /// <param name="order"></param>
        /// <param name="orderStatusCode"></param>
        /// <returns></returns>
        public static Boolean UpdateRushOrderExistByID(Order order, String orderStatusCode, Int32 tenantId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).UpdateRushOrderExistByID(order, orderStatusCode);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        #endregion

        #region Create Order

        public static String GetGenderById(Int32 genderId, Int32 tenantId)
        {
            try
            {
                return LookupManager.GetLookUpData<Entity.ClientEntity.lkpGender>(tenantId).Where(gen => gen.GenderID == genderId && !gen.IsDeleted).FirstOrDefault().GenderName;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// A copy of this method is - GetCompliancePackages
        /// ANY CHANGES TO THIS SHOULD ALSO BE DONE IN GetCompliancePackages METHOD
        /// </summary>
        /// <param name="organizationUserId"></param>
        /// <param name="deptProgramMappingIds"></param>
        /// <param name="NoUserMode"></param>
        /// <returns></returns>
        public static List<DeptProgramPackage> GetDeptProgramPackage(Int32 organizationUserId, Int32 tenantID, List<Int32> depProgramMappingIds, Boolean NoUserMode = false)
        {
            try
            {
                //return BALUtils.GetComplianceDataRepoInstance(tenantID).GetDeptProgramPackage(organizationUserId, depProgramMappingIds, out lstMobilityNodePackages);
                return BALUtils.GetComplianceDataRepoInstance(tenantID).GetDeptProgramPackage(organizationUserId, depProgramMappingIds, NoUserMode);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Gets the list of Compliance Packages available for purchase, for applicant, in Pending order screen 
        /// </summary>
        /// <param name="organizationUserId"></param>
        /// <param name="tenantID"></param>
        /// <param name="depProgramMappingIds"></param>
        /// <param name="NoUserMode"></param>
        /// <returns></returns>
        public static Dictionary<String, List<DeptProgramPackage>> GetCompliancePackages(Int32 organizationUserId, Int32 tenantID, Dictionary<Int32, Int32> depProgramMappingIds
                                                                                        , Int32? previousPkgId, Int32? previousNodeId, Boolean NoUserMode = false)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).GetCompliancePackages(organizationUserId, depProgramMappingIds, previousPkgId, previousNodeId, NoUserMode);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// UAT-3259 
        /// Get the CompliancePackageIDs who are expired w.r.t. OrganizationUser
        /// </summary>
        /// <param name="?"></param>
        /// <param name="?"></param>
        /// <returns></returns>
        public static List<Int32> GetAlreadyExpiredComplPackageIds(Int32 organizationUserId, Int32 tenantID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).GetAlreadyExpiredComplPackageIds(organizationUserId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }

        }



        //public static DeptProgramPackage GetDeptProgramPackageById(Int32 deptProgramPackageId, Int32 tenantID, out List<MobilityNodePackages> _lstMobilityNodePackages)
        public static DeptProgramPackage GetDeptProgramPackageById(Int32 deptProgramPackageId, Int32 tenantID)
        {
            try
            {
                //return BALUtils.GetComplianceDataRepoInstance(tenantID).GetDeptProgramPackageById(deptProgramPackageId, out _lstMobilityNodePackages);
                return BALUtils.GetComplianceDataRepoInstance(tenantID).GetDeptProgramPackageById(deptProgramPackageId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static List<MobilityNodePackages> GetMobilityNodePackages(Int32 selectedNodeId, Int32 selectedNodeDPPId, Int32 tenantId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetMobilityNodePackages(selectedNodeId, selectedNodeDPPId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static List<DeptProgramMapping> GetHierarchyNode(Int32 nodeId, Int32 tenantId, Boolean isParent, out Int32 possibleNodeId, Int32 changeSubscriptionSourceNodeId = 0, Int32 changeSubscriptionSourceNodeDPPId = 0, String _languageCode = default(String))
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetHierarchyNode(nodeId, isParent, out possibleNodeId, changeSubscriptionSourceNodeId, changeSubscriptionSourceNodeDPPId, _languageCode);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static List<DeptProgramPackageSubscription> GetDeptProgramPackageSubscription(Int32 deptProgramPackageId, Int32 tenantID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).GetDeptProgramPackageSubscription(deptProgramPackageId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static String GetPaymentOptionCodeById(Int32 paymentOptionId, Int32 tenantId)
        {
            try
            {
                return LookupManager.GetLookUpData<Entity.ClientEntity.lkpPaymentOption>(tenantId).Where(payOptns => payOptns.PaymentOptionID == paymentOptionId && !payOptns.IsDeleted).FirstOrDefault().Code;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static Int32 GetPaymentOptionIdByCode(String paymentOptionCode, Int32 tenantId)
        {
            try
            {
                return LookupManager.GetLookUpData<Entity.ClientEntity.lkpPaymentOption>(tenantId).Where(payOptns => payOptns.Code == paymentOptionCode && !payOptns.IsDeleted).FirstOrDefault().PaymentOptionID;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Gets the List of All the Payment Option Codes
        /// </summary>
        /// <param name="tenantId"></param>
        /// <returns></returns>
        public static List<Entity.ClientEntity.lkpPaymentOption> GetClientPaymentOptions(Int32 tenantId)
        {
            try
            {
                return LookupManager.GetLookUpData<Entity.ClientEntity.lkpPaymentOption>(tenantId).Where(payOptns => !payOptns.IsDeleted).ToList();
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static Boolean SaveOrganizationUserDepartment(Int32 tenantId, OrganizationUserDepartment organizationUserDepartment)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).SaveOrganizationUserDepartment(organizationUserDepartment);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static OrganizationUserDepartment GetOrganizationUserDepartment(Int32 tenantId, Int32 organizationUserId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetOrganizationUserDepartment(organizationUserId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        //public static Boolean CopyOrganizationUserProgram(Int32 tenantId, List<OrganizationUserProgram> organizationUserProgram)
        //{
        //    try
        //    {
        //        return BALUtils.GetComplianceDataRepoInstance(tenantId).CopyOrganizationUserProgram(organizationUserProgram);
        //    }
        //    catch (SysXException ex)
        //    {
        //        BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
        //        throw ex;
        //    }
        //    catch (Exception ex)
        //    {
        //        BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
        //        throw (new SysXException(ex.Message, ex));
        //    }
        //}

        public static Boolean UpdateChanges(Int32 tenantId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).UpdateChanges();
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        //public static List<OrganizationUserProgram> GetAllUserProgram(Int32 tenantId, Int32 organizationUserId)
        //{
        //    try
        //    {
        //        return BALUtils.GetComplianceDataRepoInstance(tenantId).GetAllUserProgram(organizationUserId);
        //    }
        //    catch (SysXException ex)
        //    {
        //        BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
        //        throw ex;
        //    }
        //    catch (Exception ex)
        //    {
        //        BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
        //        throw (new SysXException(ex.Message, ex));
        //    }
        //}

        //public static Boolean UpdateUserProgram(Int32 tenantId, List<OrganizationUserProgram> lstOtganizationUserProgram, Int32 organizationUserId)
        //{
        //    try
        //    {
        //        return BALUtils.GetComplianceDataRepoInstance(tenantId).UpdateUserProgram(lstOtganizationUserProgram, organizationUserId);
        //    }
        //    catch (SysXException ex)
        //    {
        //        BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
        //        throw ex;
        //    }
        //    catch (Exception ex)
        //    {
        //        BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
        //        throw (new SysXException(ex.Message, ex));
        //    }
        //}


        public static Int32 GetDefaultNodeId(Int32 tenantId)
        {

            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetDefaultNodeId();
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static Int32 GetInstitutionDPMID(Int32 tenantId)
        {

            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetInstitutionDPMID();
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static Int32 GetLastNodeInstitutionId(Int32 lastNodeDPMId, Int32 tenantId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetLastNodeInstitutionId(lastNodeDPMId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Get the DPMId of the change subscription 
        /// </summary>
        /// <param name="orderId"></param>
        /// <returns></returns>
        public static DeptProgramPackage GetChangeSubscriptionSourceNode(Int32 orderId, Int32 tenantId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetChangeSubscriptionSourceNode(orderId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static String GetPaymentInstruction(Int32 selectedPaymentModeId, Int32 tenantId)
        {
            try
            {
                String paymentModeCode = GetPaymentOptionCodeById(selectedPaymentModeId, tenantId);
                return GetPaymentInstructionByCode(paymentModeCode);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Gets the Master Payment Options along with the Client payment Options.
        /// </summary>
        /// <param name="tenantId"></param>
        /// <param name="payOptnsCode"></param>
        /// <param name="clientOptionsRequired"></param>
        /// <returns></returns>
        public static List<Entity.lkpPaymentOption> GetMasterPaymentOptions(Int32 tenantId, out List<Entity.ClientEntity.lkpPaymentOption> payOptnsCode, Boolean clientOptionsRequired = true)
        {
            try
            {
                payOptnsCode = new List<lkpPaymentOption>();
                if (clientOptionsRequired)
                    payOptnsCode = GetClientPaymentOptions(tenantId);

                return BALUtils.GetSecurityRepoInstance().GetMasterPaymentOptions();
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static String GetPaymentInstructionByCode(String paymentModeCode)
        {
            try
            {
                return BALUtils.GetSecurityRepoInstance().GetPaymentInstruction(paymentModeCode);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        #endregion

        #region Subscription

        public static IQueryable<vwSubscription> GetSubscriptionList(Int32 tenantId, Int32 currentUserId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetSubscriptionList(currentUserId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }




        #endregion

        #region Client Setings

        /// <summary>
        /// Retrieve a list of Client Settings.
        /// </summary>
        /// <returns>list of Client Settings</returns>
        public static List<ClientSetting> GetClientSetting(Int32 tenantId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetClientSetting(tenantId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Retrieve a list of Client Settings.
        /// </summary>
        /// <returns>list of Client Settings</returns>
        public static List<lkpSetting> GetSettings(Int32 tenantId)
        {
            try
            {
                return LookupManager.GetLookUpData<Entity.ClientEntity.lkpSetting>(tenantId).Where(cond => cond.IsDeleted == false).ToList();
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static Boolean AddClientSetting(Int32 tenantId, ClientSetting clientSetting)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).AddClientSetting(clientSetting);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static Boolean UpdateClientSetting(Int32 tenantId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).UpdateClientSetting();
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static Boolean GetReviewPackageMappingEveryTransitionValue(Int32 tenantId, String code)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetReviewPackageMappingEveryTransitionValue(tenantId, code);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static Boolean GetAutoApprovalTransition(Int32 tenantId, String code)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetAutoApprovalTransition(tenantId, code);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static Int32 GetPendingPackageFrequencyDays(Int32 tenantId, String code)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetPendingPackageFrequencyDays(tenantId, code);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static Int32 GetSubscriptionNotificationBeforeExpiryDays(Int32 tenantId, String code)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetSubscriptionNotificationBeforeExpiryDays(tenantId, code);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static Int32 GetSubscriptionNotificationAfterExpiryDays(Int32 tenantId, String code)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetSubscriptionNotificationAfterExpiryDays(tenantId, code);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static List<SubscriptionFrequency> GetSubscriptionNotificationFrequencyDays(Int32 tenantId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetSubscriptionNotificationFrequencyDays();
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static Int32 GetComplianceNotificationBeforeExpiryDays(Int32 tenantId, String code)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetComplianceNotificationBeforeExpiryDays(tenantId, code);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static Int32 GetComplianceNotificationFrequencyDays(Int32 tenantId, String code)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetComplianceNotificationFrequencyDays(tenantId, code);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static Boolean GetRushOrderValue(Int32 tenantId, String code)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetRushOrderValue(tenantId, code);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static Boolean GetRushOrderForInvoiceValue(Int32 tenantId, String code)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetRushOrderForInvoiceValue(tenantId, code);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static Int32 GetMobilityInstanceLeadDays(Int32 tenantId, String code)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetMobilityInstanceLeadDays(tenantId, code);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static Int32 GetMobilityTansitionLeadDays(Int32 tenantId, String code)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetMobilityTansitionLeadDays(tenantId, code);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        #region UAT-646

        public static List<GetPaymentOptions> GetPaymentOptions(Int32 tenantId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetPaymentOptions();
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        public static Boolean UpdatePaymentOptions(List<GetPaymentOptions> newPaymentOption, Int32 tenantId, Int32 loggedInUser)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).UpdatePaymentOptions(newPaymentOption, loggedInUser);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        #endregion



        #endregion

        #region Package Subscription

        public static List<ReminderContract> GetExpiryPackageSubscriptions(Int32 tenantID, String entitySetName, Int32 chunkSize)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).GetExpiryPackageSubscriptions(entitySetName, chunkSize);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static List<ReminderContract> GetExpiredPackageSubscriptions(Int32 tenantID, Int32 afterExpiry, Int32 expiryFrequency, String entitySetName, Int32 chunkSize)
        {
            try
            {
                String archieveStateCode = ArchiveState.Active.GetStringValue();
                Int32 archieveStateId = LookupManager.GetLookUpData<lkpArchiveState>(tenantID).Where(cond => cond.AS_Code == archieveStateCode && !cond.AS_IsDeleted).FirstOrDefault().AS_ID;
                return BALUtils.GetComplianceDataRepoInstance(tenantID).GetExpiredPackageSubscriptions(entitySetName, chunkSize, archieveStateId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static List<ReminderContract> GetPendingPackageSubscriptions(Int32 tenantID, Int32 pendingFrequency, String entitySetName, DateTime today, Int32 chunkSize)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).GetPendingPackageSubscriptions(pendingFrequency, entitySetName, today, chunkSize, tenantID);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        #endregion


        #region Notification Delivery

        public static Boolean AddNotificationDelivery(Int32 tenantId, NotificationDelivery notificationDelivery)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).AddNotificationDelivery(notificationDelivery);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static Boolean AddNotificationDeliveryList(Int32 tenantId, List<NotificationDelivery> lstNotificationDelivery)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).AddNotificationDeliveryList(lstNotificationDelivery);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        #endregion


        #region Renewal Order
        /// <summary>
        /// Gets the order details for the given Order Id.
        /// </summary>
        /// <param name="tenantId">Tenant Id</param>
        /// <param name="orderId">Order Id</param>
        /// <returns></returns>
        public static Order GetOrderById(Int32 tenantId, Int32 orderId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetOrderById(orderId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static Order GetOrderDetailsByOrderId(Int32 tenantId, Int32 orderId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetOrderDetailsByOrderId(orderId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Get the list of Order of previous order
        /// </summary>
        /// <param name="orderDetail"> order</param>
        /// <returns>List of Order</returns>
        public static List<Order> GetOrderListOfPreviousOrder(Int32 tenantId, Order orderDetail)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetOrderListOfPreviousOrder(orderDetail);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static List<Order> GetChangeSubscriptionOrderList(Int32 tenantId, Int32 orderID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetChangeSubscriptionOrderList(orderID);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static Boolean GetRenewSubscriptionOrder(Int32 tenantId, Int32 orderID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetRenewSubscriptionOrder(orderID);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }


        #endregion

        #region Manage Institution Node
        /// <summary>
        /// Method to return all Nodes.
        /// </summary>
        /// <returns>IQueryable</returns>
        public static IQueryable<InstitutionNode> GetInstitutionNodeList(Int32 tenantId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetInstitutionNodeList();
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Get the Node by NodeId
        /// </summary>
        /// <param name="priceAdjustmentId">NodeId</param>
        /// <returns>InstitutionNode</returns>
        public static InstitutionNode GetNodeByNodeId(Int32 tenantId, Int32 nodeId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetNodeByNodeId(nodeId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Save Institution Node
        /// </summary>
        /// <param name="nodeDetail">nodeDetail</param>
        /// <param name="lstCustomAttributeMapping">lstCustomAttributeMapping</param>
        /// <returns></returns>
        public static Boolean SaveNodeDetail(Int32 tenantId, InstitutionNode nodeDetail, List<CustomAttributeMapping> lstCustomAttributeMapping)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).SaveNodeDetail(nodeDetail, lstCustomAttributeMapping);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Update Institution Node
        /// </summary>
        /// <param name="nodeId">nodeId</param>
        /// <param name="lstCustomAttributeMapping">lstCustomAttributeMapping</param>
        /// <param name="currentUserId">currentUserId</param>
        /// <returns></returns>
        public static Boolean UpdateNodeDetail(Int32 tenantId, Int32 nodeId, List<CustomAttributeMapping> lstCustomAttributeMapping, Int32 currentUserId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).UpdateNodeDetail(nodeId, lstCustomAttributeMapping, currentUserId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Method to return all Node Types.
        /// </summary>
        /// <returns>IQueryable</returns>
        public static IQueryable<InstitutionNodeType> GetInstitutionNodeTypeList(Int32 tenantId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetInstitutionNodeTypeList();
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Check institution Node Mapping
        /// </summary>
        /// <param name="priceAdjustmentId">NodeId</param>
        /// <returns>Boolean</returns>
        public static Boolean IsNodeMapped(Int32 tenantId, Int32 NodeId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).IsNodeMapped(NodeId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Check Get Last Code From Institution Node
        /// </summary>
        /// <returns>String</returns>
        public static String GetLastCodeFromInstitutionNode(Int32 tenantId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetLastCodeFromInstitutionNode();
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Method to return all Nodes of type program.
        /// </summary>
        /// <returns>IQueryable</returns>
        public static IQueryable<InstitutionNode> GetAllInstituteNodePrograms(Int32 tenantId, String code)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetAllInstituteNodePrograms(code);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        #region Custom Attribute
        /// <summary>
        /// Get mapping list of custom attribute with node 
        /// </summary>
        /// <param name="customAttributeNodeId">customAttributeNodeId</param>
        /// <returns>IQueryable</returns>
        public static IQueryable<CustomAttributeMapping> GetNodeMappedCustomAttributeList(Int32 tenantId, Int32 customAttributeNodeId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetNodeMappedCustomAttributeList(customAttributeNodeId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Get Custom Attribute on the basis of Use Type Code.
        /// </summary>
        /// <param name="useTypeCode">useTypeCode</param>
        /// <returns>IQueryable</returns>
        public static IQueryable<CustomAttribute> GetCustomAttributeListByType(Int32 tenantId, String useTypeCode)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetCustomAttributeListByType(useTypeCode);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        /// <summary>
        /// get list of ids mapped with custom attribute value table.
        /// </summary>
        /// <param name="customAttributeMappingIds">customAttributeMappingIds</param>
        /// <returns>List</returns>
        public static List<Int32> GetListOfIdMappedWithCustomAttrValue(Int32 tenantId, List<Int32> customAttributeMappingIds)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetListOfIdMappedWithCustomAttrValue(customAttributeMappingIds);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        #endregion

        #endregion

        #region Custom Attributes

        public static List<TypeCustomAttributes> GetCustomAttributes(Int32 mappingRecordId, Int32 valueRecordId, String useTypeCode, Int32 organizationUserId, Int32 tenantId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetCustomAttributes(mappingRecordId, valueRecordId, useTypeCode, organizationUserId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Gets the Custom Attributes for the Last selected node in the hierarchy
        /// </summary>
        /// <param name="useTypeCode"></param>
        /// <param name="selectedDPMId"></param>
        /// <param name="tenantId"></param>
        public static List<TypeCustomAttributes> GetCustomAttributesByNodes(String useTypeCode, Int32? selectedDPMId, Int32 organizationUserId, Int32 tenantId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetCustomAttributesByNodes(useTypeCode, selectedDPMId, organizationUserId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static List<TypeCustomAttributesSearch> GetCustomAttributesSearch(Int32 mappingRecordId, String useTypeCode, Int32 tenantId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetCustomAttributesSearch(mappingRecordId, useTypeCode);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Get the Custom Attributes for multiple Nodes selected - UAT 1055
        /// </summary>
        /// <param name="mappingRecordId"></param>
        /// <param name="useTypeCode"></param>
        /// <param name="tenantId"></param>
        /// <returns></returns>
        public static List<TypeCustomAttributesSearch> GetCustomAttributesNodeSearch(String mappingRecordId, String useTypeCode, Int32 tenantId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetCustomAttributesNodeSearch(mappingRecordId, useTypeCode);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static Boolean SaveCustomAttributeData(List<CustomAttributeValue> lstCAValues, Int32 currentLoggedInUserId, Int32 tenantId)
        {
            try
            {
                BALUtils.GetComplianceDataRepoInstance(tenantId).SaveCustomAttributeData(lstCAValues, currentLoggedInUserId);
                return true;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        #endregion

        #region Manage Custom Attribute

        /// <summary>
        /// Get All Client Custom Attributes Data Type
        /// </summary>
        /// <returns>List of Custom Attributes Data Type</returns>
        public static IQueryable<lkpCustomAttributeDataType> GetCustomAttrDataType(Int32 tenantId)
        {
            try
            {
                return LookupManager.GetLookUpData<Entity.ClientEntity.lkpCustomAttributeDataType>(tenantId).AsQueryable();
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Get All Client Custom Attributes Use Type
        /// </summary>
        /// <returns>List of Custom Attributes Use Type</returns>
        public static IQueryable<lkpCustomAttributeUseType> GetCustomAttrUseType(Int32 tenantId)
        {
            try
            {
                return LookupManager.GetLookUpData<Entity.ClientEntity.lkpCustomAttributeUseType>(tenantId).AsQueryable();
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Get All Client Custom Attributes
        /// </summary>
        /// <returns>List of Custom Attributes</returns>
        public static IQueryable<CustomAttribute> GetCustomAttributes(Int32 tenantId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetCustomAttributes();
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Add Custom Attribute
        /// </summary>
        /// <returns>Boolean</returns>
        public static Boolean AddCustomAttribute(Int32 tenantId, CustomAttribute customAttribute)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).AddCustomAttribute(customAttribute);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }

        /// <summary>
        /// Update Custom Attribute
        /// </summary>
        /// <returns>Boolean</returns>
        public static Boolean UpdateCustomAttribute(Int32 tenantId, CustomAttribute customAttribute)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).UpdateCustomAttribute(customAttribute);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Update Custom Attribute
        /// </summary>
        /// <returns>Boolean</returns>
        public static Boolean DeleteCustomAttribute(Int32 tenantId, Int32 customAttributeId, Int32 userId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).DeleteCustomAttribute(customAttributeId, userId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Checks Custom attribute is mapped or not.
        /// </summary>
        /// <returns>Boolean</returns>
        public static Boolean IsAttributeMapped(Int32 tenantId, Int32 customAttributeId, String useTypeCode)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).IsAttributeMapped(customAttributeId, useTypeCode);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        #endregion

        #region Reports

        public static DataSet Get(int tenantId, string name, Dictionary<string, string> parameters)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(SecurityManager.DefaultTenantID).Get(tenantId, name, parameters);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        #endregion

        #region Send Mail On Compliance Status Change

        public static void SendMailOnComplianceStatusChange(Int32 tenantId, String tenantName, String oldStatus, Int32 complianceStatusId, Int32 packageSubscriptionId, Int32 hierarchyNodeID)
        {
            try
            {
                PackageSubscription ps = GetPackageSubscriptionByID(tenantId, packageSubscriptionId);
                //UAT-3654
                if (!ps.IsNullOrEmpty() && ps.ExpiryDate > DateTime.Now)
                {
                    String subscriptionArchiveStatus = ps.lkpArchiveState.IsNotNull() ? ps.lkpArchiveState.AS_Code.ToLower() : String.Empty;
                    if (ps.ComplianceStatusID != complianceStatusId && subscriptionArchiveStatus != (ArchiveState.Archived.GetStringValue().ToLower()))
                    {
                        DateTime? expirationDate = null;
                        String compCategoryList = String.Empty;
                        String applicationUrl = WebSiteManager.GetInstitutionUrl(tenantId);
                        CommunicationSubEvents communicationSubEvent = new CommunicationSubEvents();
                        if (ps.lkpPackageComplianceStatu.Code == ApplicantPackageComplianceStatus.Compliant.GetStringValue())
                        {
                            communicationSubEvent = CommunicationSubEvents.NOTIFICATION_PACKAGE_SUBSCRIPTION_COMPLIANT_STATUS_CHANGE;
                            expirationDate = ps.ApplicantComplianceCategoryDatas.Where(con => con.CategoryComplianceExpiryDate.HasValue)
                                                                            .Select(s => s.CategoryComplianceExpiryDate)
                                                                            .OrderBy(o => o.Value)
                                                                            .FirstOrDefault();
                        }
                        else if (ps.lkpPackageComplianceStatu.Code == ApplicantPackageComplianceStatus.Not_Compliant.GetStringValue())
                        {
                            communicationSubEvent = CommunicationSubEvents.NOTIFICATION_PACKAGE_SUBSCRIPTION_NON_COMPLIANT_STATUS_CHANGE;
                            //UAT 1434 Add variable from UAT-1025 to "Notification Change of Status: Compliant to Not Compliant" email template
                            compCategoryList = GetCategoryDetailForComplianceStatusChange(tenantId, hierarchyNodeID, ps);
                        }

                        //Create Dictionary
                        Dictionary<String, object> dictMailData = new Dictionary<string, object>();
                        dictMailData.Add(EmailFieldConstants.USER_FULL_NAME, string.Concat(ps.OrganizationUser.FirstName, " ", ps.OrganizationUser.LastName));
                        //dictMailData.Add(EmailFieldConstants.PACKAGE_NAME, ps.CompliancePackage.PackageName);
                        dictMailData.Add(EmailFieldConstants.PACKAGE_NAME, ps.CompliancePackage.PackageLabel.IsNullOrEmpty() ? ps.CompliancePackage.PackageName : ps.CompliancePackage.PackageLabel);
                        //dictMailData.Add(EmailFieldConstants.NODE_HIERARCHY, ps.Order.DeptProgramPackage.DeptProgramMapping.DPM_Label);
                        //UAT - 1067 : Hierarchy for orders (background and screening) should display as the full hierarchy sleected during the order, not the node the package lives on. 
                        dictMailData.Add(EmailFieldConstants.NODE_HIERARCHY, ps.Order.DeptProgramMapping1.IsNull() ? String.Empty : ps.Order.DeptProgramMapping1.DPM_Label);
                        dictMailData.Add(EmailFieldConstants.OLD_COMPLIANCE_STATUS, oldStatus);
                        dictMailData.Add(EmailFieldConstants.NEW_COMPLIANCE_STATUS, ps.lkpPackageComplianceStatu.Name);
                        dictMailData.Add(EmailFieldConstants.APPLICATION_URL, applicationUrl);
                        dictMailData.Add(EmailFieldConstants.INSTITUTE_NAME, tenantName);
                        dictMailData.Add(EmailFieldConstants.TENANT_ID, tenantId);
                        dictMailData.Add(EmailFieldConstants.EXPIRY_DATE, expirationDate.HasValue ? expirationDate.Value.ToString("MM/dd/yyyy") : string.Empty);

                        //UAT 1434 Add variable from UAT-1025 to "Notification Change of Status: Compliant to Not Compliant" email template
                        if (!compCategoryList.IsNullOrEmpty())
                        {
                            dictMailData.Add(EmailFieldConstants.COMPLIANCE_CATEGORY_NAME, compCategoryList);
                        }

                        Entity.CommunicationMockUpData mockData = new Entity.CommunicationMockUpData();
                        mockData.UserName = string.Concat(ps.OrganizationUser.FirstName, " ", ps.OrganizationUser.LastName);
                        mockData.EmailID = ps.OrganizationUser.PrimaryEmailAddress;
                        mockData.ReceiverOrganizationUserID = ps.OrganizationUser.OrganizationUserID;

                        //Send mail
                        //CommunicationManager.SendPackageNotificationMail(communicationSubEvent, dictMailData, mockData, tenantId, ps.Order.DeptProgramPackage.DeptProgramMapping.DPM_ID);
                        //UAT - 1067 : Hierarchy for orders (background and screening) should display as the full hierarchy sleected during the order, not the node the package lives on. 
                        CommunicationManager.SendPackageNotificationMail(communicationSubEvent, dictMailData, mockData, tenantId, ps.Order.DeptProgramMapping1.IsNull() ? 0 : ps.Order.DeptProgramMapping1.DPM_ID);


                        //Send Message
                        CommunicationManager.SaveMessageContent(communicationSubEvent, dictMailData, ps.OrganizationUser.OrganizationUserID, tenantId);

                        //UAT-2977
                        if (ps.lkpPackageComplianceStatu.Code == ApplicantPackageComplianceStatus.Not_Compliant.GetStringValue())
                            SendFallOutOfComplianceNotificationToAU(tenantId, ps.CompliancePackage.PackageLabel.IsNullOrEmpty() ? ps.CompliancePackage.PackageName : ps.CompliancePackage.PackageLabel, null, packageSubscriptionId, ps.Order.DeptProgramMapping1.IsNull() ? 0 : ps.Order.DeptProgramMapping1.DPM_ID, null);
                    }
                }
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        #endregion

        #region Applicant Portfolio Search && Applicant User Group Mapping

        public static List<ApplicantDataList> GetApplicantPortfolioSearch(Int32 tenantId, SearchItemDataContract searchDataContract, CustomPagingArgsContract gridCustomPaging)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetApplicantPortfolioSearch(searchDataContract, gridCustomPaging);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        #endregion

        #region ApplicantPortfolioCustomAttribute
        public static List<Int32> GetDepartmentProgramMappingId(Int32 tenantId, Int32 organizationUserId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetDepartmentProgramMappingId(organizationUserId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static List<DeptProgramMapping> GetDepartmentProgramMappingRecord(Int32 tenantId, List<Int32> departmentProgramMappingIds)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetDepartmentProgramMappingRecord(departmentProgramMappingIds);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        #endregion

        #region User Group Mapping

        public static List<Int32> GetUsersMappedUserGroup(Int32 tenantId, Int32 userGroupId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetUsersMappedUserGroup(userGroupId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static Boolean AssignUserGroupToUsers(Int32 tenantId, Dictionary<Int32, Boolean> selectedItems, Int32 userGroupId, Int32 currentUserId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).AssignUserGroupToUsers(selectedItems, userGroupId, currentUserId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Get User Groups by Applicant Org User IDs
        /// </summary>
        /// <param name="tenantId"></param>
        /// <param name="OrgUserIDs"></param>
        /// <returns></returns>
        public static List<UserGroup> GetUserGroupsByOrgUserIDs(Int32 tenantId, List<Int32> OrgUserIDs)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetUserGroupsByOrgUserIDs(OrgUserIDs);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Assign User Groups to Applicant users
        /// </summary>
        /// <param name="tenantId"></param>
        /// <param name="userGroupIds"></param>
        /// <param name="applicantUserIds"></param>
        /// <param name="currentUserId"></param>
        /// <returns></returns>
        public static Boolean AssignUserGroupsToUsers(Int32 tenantId, List<Int32> userGroupIds, List<Int32> applicantUserIds, Int32 currentUserId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).AssignUserGroupsToUsers(userGroupIds, applicantUserIds, currentUserId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Unassign User Groups of applicants
        /// </summary>
        /// <param name="tenantId"></param>
        /// <param name="userGroupIds"></param>
        /// <param name="applicantUserIds"></param>
        /// <param name="currentUserId"></param>
        /// <returns></returns>
        public static Boolean UnassignUserGroups(Int32 tenantId, List<Int32> userGroupIds, List<Int32> applicantUserIds, Int32 currentUserId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).UnassignUserGroups(userGroupIds, applicantUserIds, currentUserId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        #endregion

        public static List<ExpiringItemList> GetItemsAboutToExpire(Int32 tenantID, Int32 packageSubscriptionId)
        {
            try
            {
                Entity.lkpCommunicationSubEvent subEvent = CommunicationManager.GetCommunicationTypeSubEvents(CommunicationSubEvents.COMPLIANCE_ITEM_ABOUT_TO_EXPIRE.GetStringValue());
                Int32 subEventId = subEvent.IsNotNull() ? subEvent.CommunicationSubEventID : 0;
                return BALUtils.GetComplianceDataRepoInstance(tenantID).GetItemsAboutToExpire(tenantID, subEventId, packageSubscriptionId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static List<CompliancePackageCategory> GetCompliancePackageCategoryByDisplayOrder(Int32 packageId, Int32 tenantID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).getCompliancePackageCategoryByDisplayOrder(packageId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static List<ComplianceCategoryItem> getComplianceCategoryItemByDisplayOrder(Int32 categoryId, Int32 tenantID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).getComplianceCategoryItemByDisplayOrder(categoryId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static List<ComplianceItemAttribute> getComplianceItemAttributeByDisplayOrder(Int32 itemId, Int32 tenantID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).getComplianceItemAttributeByDisplayOrder(itemId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static Boolean UpdateCategoryDisplayOrder(Int32 packageId, Int32 categoryId, Int32 displayOrder, Int32 userId, Int32 tenantID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).UpdateCategoryDisplayOrder(packageId, categoryId, displayOrder, userId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static Boolean UpdateItemDisplayOrder(Int32 categoryId, Int32 itemId, Int32 displayOrder, Int32 userId, Int32 tenantID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).UpdateItemDisplayOrder(categoryId, itemId, displayOrder, userId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static Boolean UpdateAttributeDisplayOrder(Int32 itemId, Int32 attributeId, Int32 displayOrder, Int32 userId, Int32 tenantID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).UpdateAttributeDisplayOrder(itemId, attributeId, displayOrder, userId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static Boolean IsAnySubscriptionExist(Int32 packageId, Int32 tenantID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).IsAnySubscriptionExist(packageId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static void UpdateItemVerificationSummary(Int32 tenantId, Int32 backgroundProcessUserId)
        {
            try
            {
                BALUtils.GetComplianceDataRepoInstance(tenantId).UpdateItemVerificationSummary(tenantId, backgroundProcessUserId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static void UpdateOrderSummary(Int32 tenantId, Int32 backgroundProcessUserId)
        {
            try
            {
                BALUtils.GetComplianceDataRepoInstance(tenantId).UpdateOrderSummary(tenantId, backgroundProcessUserId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static List<AssignmentUsers> GetUsersForAssignment(Int32 tenantId, Int32? currentLoggedInUserId, Int32 currentLoggedInUserTenantId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetUsersForAssignment(currentLoggedInUserId, currentLoggedInUserTenantId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static List<UserNodePermissions> GetUserNodePermissions(Int32 tenantId, Int32 currentLoggedInUserId, Int32 currentLoggedInUserTenantId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetUserNodePermissions(currentLoggedInUserId, currentLoggedInUserTenantId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static List<UserNodePermissions> GetUserNodePermissionBasedOnHierarchyPermissionType(Int32 tenantId, Int32 currentLoggedInUserId, Int32 currentLoggedInUserTenantId, String hierarchyPermissionType)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetUserNodePermissionBasedOnHierarchyPermissionType(currentLoggedInUserId, currentLoggedInUserTenantId, hierarchyPermissionType);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static List<UserNodeOrderPermission> GetUserNodeOrderPermissions(Int32 tenantId, Int32 currentLoggedInUserId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetUserNodeOrderPermissions(currentLoggedInUserId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static Boolean SaveUpdateUtilityFeatureUsage(Int32 orgUserId, Boolean resetCount, String utilityFeatureCode)
        {
            try
            {
                Int16 utilityFeatureId = LookupManager.GetLookUpData<Entity.lkpUtilityFeature>().FirstOrDefault(obj => obj.UF_Code.Equals(utilityFeatureCode) && obj.UF_IsDeleted == false).UF_ID;
                Entity.UtilityFeatureUsage utilityFeatureUsage = BALUtils.GetComplianceDataRepoInstance(SecurityManager.DefaultTenantID).GetUtilityFeatureUsageByUserID(orgUserId, utilityFeatureId);
                if (utilityFeatureUsage.IsNotNull())
                {
                    if (resetCount)
                    {
                        utilityFeatureUsage.UFU_Count = AppConsts.NONE;
                    }
                    else
                    {
                        utilityFeatureUsage.UFU_Count = utilityFeatureUsage.UFU_Count + 1;
                    }
                }
                else if (utilityFeatureUsage.IsNull() && !resetCount)
                {
                    utilityFeatureUsage = new Entity.UtilityFeatureUsage();
                    utilityFeatureUsage.UFU_OrgUserID = orgUserId;
                    utilityFeatureUsage.UFU_Count = AppConsts.ONE;
                    utilityFeatureUsage.UFU_IgnoreAlert = false;
                    utilityFeatureUsage.UFU_IsDeleted = false;
                    utilityFeatureUsage.UFU_UtilityFeatureID = utilityFeatureId;
                }
                if (utilityFeatureUsage.IsNotNull())
                    return BALUtils.GetComplianceDataRepoInstance(SecurityManager.DefaultTenantID).SaveUpdateUtilityFeatureUsage(utilityFeatureUsage, orgUserId);
                return true;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static Boolean UpdateUtilityFeatureUsage(Int32 orgUserId, String utilityFeatureCode, Boolean ignoreAlert)
        {
            try
            {
                Int16 utilityFeatureId = LookupManager.GetLookUpData<Entity.lkpUtilityFeature>().FirstOrDefault(obj => obj.UF_Code.Equals(utilityFeatureCode) && obj.UF_IsDeleted == false).UF_ID;
                Entity.UtilityFeatureUsage utilityFeatureUsage = BALUtils.GetComplianceDataRepoInstance(SecurityManager.DefaultTenantID).GetUtilityFeatureUsageByUserID(orgUserId, utilityFeatureId);
                if (utilityFeatureUsage.IsNotNull())
                {
                    utilityFeatureUsage.UFU_IgnoreAlert = ignoreAlert;
                    utilityFeatureUsage.UFU_ModifiedBy = orgUserId;
                    utilityFeatureUsage.UFU_ModifiedOn = DateTime.Now;
                }
                if (utilityFeatureUsage.IsNotNull())
                    return BALUtils.GetComplianceDataRepoInstance(SecurityManager.DefaultTenantID).UpdateUtilityFeatureUsage();
                return true;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static Entity.UtilityFeatureUsage GetIgnoreAlertStatus(Int32 orgUserId, String utilityFeatureCode)
        {
            try
            {
                Int16 utilityFeatureId = LookupManager.GetLookUpData<Entity.lkpUtilityFeature>().FirstOrDefault(obj => obj.UF_Code.Equals(utilityFeatureCode) && obj.UF_IsDeleted == false).UF_ID;
                return BALUtils.GetComplianceDataRepoInstance(SecurityManager.DefaultTenantID).GetUtilityFeatureUsageByUserID(orgUserId, utilityFeatureId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }

        }

        public static ApplicantDocumentMerging GetDataRelatedToUnifiedDocument(Int32 documentId, Int32 tenanatyId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenanatyId).GetDataRelatedToUnifiedDocument(documentId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static Boolean SaveApplicantEsignatureDocument(Int32 tenantId, Int32 applicantDisclaimerDocumentId, List<Int32?> applicantDisclosureDocumentIds, Int32 orderId, Int32 orgUserProfileId, Int32 currentLoggedInUserId, String orderNumber)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).SaveApplicantEsignatureDocument(applicantDisclaimerDocumentId, applicantDisclosureDocumentIds, orderId, orgUserProfileId, currentLoggedInUserId, orderNumber);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        #region NagEmails

        public static List<NagEmailData> GetNagMailData(Int32 tenantId, Int32 subEventId, Int32 chunkSize = 50)
        {
            try
            {
                DataTable userData = BALUtils.GetComplianceDataRepoInstance(tenantId).GetNagMailData(subEventId, chunkSize);
                return AssignValuesToNagDataModel(userData);

            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
            }
            return new List<NagEmailData>();
        }

        private static List<NagEmailData> AssignValuesToNagDataModel(DataTable table)
        {
            try
            {
                IEnumerable<DataRow> rows = table.AsEnumerable();
                return rows.Select(x => new NagEmailData
                {
                    Packagename = x["PackageName"].ToString(),
                    Userfullname = x["FullName"].ToString(),
                    NodeHierarchy = x["InstitutionalHerarchy"].ToString(),
                    Email = x["EmailId"].ToString(),
                    OrganizationUserID = Convert.ToInt32(x["UserId"]),
                    CategoryList = x["CategoryList"].ToString().IsNullOrEmpty() ? "N/A" : x["CategoryList"].ToString(),
                    PackageSubscriptionId = Convert.ToInt32(x["PackageSubscriptionId"]),
                    MainNodeId = Convert.ToInt32(x["MainNodeId"]),
                    HierarchyNodeID = Convert.ToInt32(x["HierarchyNodeID"]),
                }).ToList();
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
            return new List<NagEmailData>();
        }

        #endregion

        public static List<GetUserBeforeExpiringDeadline> GetAllUserBeforeExpiringDeadline(Int32 tenantId, Int32 chunkSize)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetAllUserBeforeExpiringDeadline(chunkSize);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        #region Background Packages

        public static List<BackgroundPackagesContract> GetBackgroundPackages(String xmlDPMIds, Int32 orgainizatuionUserId, Int32 tenantId, Boolean IsLocationServiceTenant = false)
        {
            try
            {
                DataTable table = BALUtils.GetComplianceDataRepoInstance(tenantId).GetBackgroundPackages(xmlDPMIds, orgainizatuionUserId, IsLocationServiceTenant);
                IEnumerable<DataRow> rows = table.AsEnumerable();
                return rows.Select(x => new BackgroundPackagesContract
                {
                    BPAId = Convert.ToInt32(x["BPAId"]),
                    BPAName = Convert.ToString(x["BPAName"]),
                    BPAViewDetails = Convert.ToBoolean(x["BPAViewDetails"]),
                    BPHMId = Convert.ToInt32(x["BPHMId"]),
                    IsExclusive = Convert.ToBoolean(x["IsExclusive"]),
                    BasePrice = Convert.ToDecimal(x["PackagePrice"]),
                    CustomPriceText = x["CustomPriceText"] != DBNull.Value ? Convert.ToString(x["CustomPriceText"]) : String.Empty,
                    NodeLevel = Convert.ToInt32(x["NodeLevel"]),
                    MaxNumberOfYearforResidence = Convert.ToInt32(x["MaxNumberOfYearforResidence"]),
                    DisplayOrder = x["BPHM_Sequence"].IsNullOrEmpty() ? 0 : Convert.ToInt32(x["BPHM_Sequence"]),
                    PackageDetail = Convert.ToString(x["PackageDetail"]),//UAT-947:WB: Add ability to show custom details below each package name on package selection screen
                    IsInvoiceOnlyAtPackageLevel = x["IsInvoiceOnlyAtPackageLevel"] == DBNull.Value ? (Boolean?)null : Convert.ToBoolean(x["IsInvoiceOnlyAtPackageLevel"]),
                    DisplayNotesAbove = Convert.ToBoolean(x["DisplayNotesAbove"]),
                    DisplayNotesBelow = Convert.ToBoolean(x["DisplayNotesBelow"]),
                    //UAt-3268
                    IsReqToQualifyInRotation = Convert.ToBoolean(x["IsReqToQualifyInRotation"]),
                    AdditionalPrice = Convert.ToDecimal(x["AdditionalPrice"]),
                    //UAT 3525
                    PackageTypeCode = x["PackageTypeCode"] != DBNull.Value ? Convert.ToString(x["PackageTypeCode"]) : String.Empty,
                    PackagePasscode = x["PackagePasscode"] != DBNull.Value ? Convert.ToString(x["PackagePasscode"]) : String.Empty, //UAT-3771
                    ServiceCode = x["ServiceCode"] != DBNull.Value ? Convert.ToString(x["ServiceCode"]) : String.Empty,
                    ServiceDescription = x["ServiceDescription"] != DBNull.Value ? Convert.ToString(x["ServiceDescription"]) : String.Empty
                }).ToList();

            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static BackroundOrderContract GetPreviousOrderHistory(Int32 orgainizatuionUserId, Int32 tenantId)
        {
            try
            {
                DataTable table = BALUtils.GetComplianceDataRepoInstance(tenantId).GetPreviousOrderHistory(tenantId, orgainizatuionUserId);
                IEnumerable<DataRow> rows = table.AsEnumerable();
                return rows.Select(x => new BackroundOrderContract
                {
                    OrderID = x["OrderID"] is DBNull ? 0 : Convert.ToInt32(x["OrderID"]),
                    OrderNumber = x["OrderNumber"] is DBNull ? "" : Convert.ToString(x["OrderNumber"]),
                    OrderCreatedDate = x["OrderDate"] is DBNull ? DateTime.Now : Convert.ToDateTime(x["OrderDate"]),
                    ApplicantFPImgId = x["ApplicantFPImgId"] is DBNull ? 0 : Convert.ToInt32(x["ApplicantFPImgId"]),
                    ApplicantFPImgPath = x["ApplicantFPImgPath"] is DBNull ? "" : Convert.ToString(x["ApplicantFPImgPath"]),
                    ApplicantFPImgName = x["ApplicantFPImgName"] is DBNull ? "" : Convert.ToString(x["ApplicantFPImgName"])
                }).FirstOrDefault();

            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        #endregion


        public static DataTable GetBkgOrderById(Int32 tenantId, Int32 bkgOrderId, Int32 masterOrderId = 0)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetBkgOrders(bkgOrderId, masterOrderId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Get HierarchyNodeID for Order By Department Program Package ID or Bkg Package Hierarchy Mapping ID
        /// </summary>
        /// <param name="dppID"></param>
        /// <param name="bphmID"></param>
        /// <returns></returns>
        public static Int32 GetHierarchyNodeID(Int32? dppID, Int32? bphmID, Int32 tenantId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetHierarchyNodeID(dppID, bphmID);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Get PackageSubscriptionID by OrderID
        /// </summary>
        /// <param name="orderID"></param>
        /// <param name="tenantId"></param>
        /// <returns>PackageSubscriptionID</returns>
        public static Int32 GetPackageSubscriptionID(Int32 orderID, Int32 tenantId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetPackageSubscriptionID(orderID);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static Boolean CopyPackageData(Int32 tenantID, Int32 chunkSize, Int32 backgroundProcessUserId)
        {

            try
            {
                List<BkgCopyPackageDataContract> lstBkgCopyPackageDataContract = BALUtils.GetComplianceDataRepoInstance(tenantID).GetBkgCopyPackageData(chunkSize, backgroundProcessUserId);
                Int32 packageSubscriptionID = 0;
                if (lstBkgCopyPackageDataContract.IsNotNull() && lstBkgCopyPackageDataContract.Count > 0)
                {
                    foreach (BkgCopyPackageDataContract bkgCopyPackageDataContract in lstBkgCopyPackageDataContract)
                    {
                        try
                        {

                            Int32? bkgOrderID = null;
                            packageSubscriptionID = bkgCopyPackageDataContract.PackageSubscriptionID;
                            List<Int32> psIDS = new List<Int32>();
                            psIDS.Add(bkgCopyPackageDataContract.PackageSubscriptionID);
                            List<PackageSubscriptionNotificationDataContract> lstOldPackageSubscription = GetPackageSubscriptionDataForNotification(tenantID, psIDS);
                            List<Int32> lstAffectedCatDataIds = new List<Int32>();

                            //UAT-3805
                            PackageSubscription pkgSubscription = ComplianceDataManager.GetPackageSubscriptionByID(tenantID, packageSubscriptionID);
                            List<Int32> approvedCategoryIDs = ProfileSharingManager.GetApprovedCategorIDs(tenantID, packageSubscriptionID
                                                                                      , new List<Int32>(), lkpUseTypeEnum.COMPLIANCE.GetStringValue());
                            try
                            {
                                lstAffectedCatDataIds = PackageDataCopy(tenantID, bkgCopyPackageDataContract.PackageSubscriptionID, backgroundProcessUserId, bkgCopyPackageDataContract.DocXml);
                                UpdateSubscriptionIDInBkgCopyPackageData(tenantID, bkgCopyPackageDataContract.PackageSubscriptionID, true, false, String.Empty, backgroundProcessUserId);
                            }
                            catch (Exception ex)
                            {
                                UpdateSubscriptionIDInBkgCopyPackageData(tenantID, packageSubscriptionID, false, true, ex.Message, backgroundProcessUserId);
                            }

                            ComplianceDataManager.UpdateIsDocAssociated(tenantID, bkgCopyPackageDataContract.PackageSubscriptionID, true, backgroundProcessUserId);

                            RuleManager.ExecuteBusinessRules(psIDS, tenantID, backgroundProcessUserId, lstAffectedCatDataIds);

                            //UAT-1597:New ComCopy Settin/notification: client to be notified when a student submitted a requirement that needs their review
                            SendNotifOfItemStatusChangedAfterDataSync(lstOldPackageSubscription, psIDS, tenantID, backgroundProcessUserId);

                            //Method to save Service group result document and order result document in data entry queue.
                            SaveResultDocumentInAdminDataEntryQueue(tenantID, backgroundProcessUserId, bkgCopyPackageDataContract.PackageSubscriptionID, bkgOrderID);

                            //UAT-3805

                            List<Int32> affectedCategoryIds = pkgSubscription.ApplicantComplianceCategoryDatas.Where(cnd =>
                                                                                                        lstAffectedCatDataIds.Contains(cnd.ApplicantComplianceCategoryID)
                                                                                                         && !cnd.IsDeleted).Select(x => x.ComplianceCategoryID).ToList();
                            if (!affectedCategoryIds.IsNullOrEmpty())
                            {
                                String categoryIds = String.Join(",", affectedCategoryIds);
                                String approvedCategoryIds = approvedCategoryIDs.IsNullOrEmpty() ? String.Empty : String.Join(",", approvedCategoryIDs);
                                ProfileSharingManager.SendItemDocNotificationOnCategoryApproval(tenantID, categoryIds, pkgSubscription.OrganizationUserID.Value
                                                                                                , approvedCategoryIds, lkpUseTypeEnum.COMPLIANCE.GetStringValue()
                                                                                                , packageSubscriptionID, null, backgroundProcessUserId);
                            }
                        }
                        catch (Exception ex)
                        {
                            UpdateSubscriptionIDInBkgCopyPackageData(tenantID, packageSubscriptionID, false, false, ex.Message, backgroundProcessUserId);
                        }
                    }
                    return true;
                }

                return false;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        /// <summary>
        /// Copy AMS/Background Package Data in Compliance Package
        /// </summary>
        /// <param name="packageSubscriptionID"></param>
        /// <param name="tenantId"></param>
        public static void CopyData(Int32 packageSubscriptionID, Int32 tenantId, Int32 currentLoggedInUserId, Int32? bkgOrderID)
        {
            try
            {
                List<PackageDocumentDataPointContract> _lstPkgDocDataPoints = AssignPackageDocumentDataPointContractToDataModel(BALUtils.GetComplianceDataRepoInstance(tenantId).GetPackageDocumentDataPoints(packageSubscriptionID, bkgOrderID));
                if (_lstPkgDocDataPoints.IsNotNull() && _lstPkgDocDataPoints.Count > 0)
                {
                    String fileName = String.Empty, orgFileName = String.Empty;
                    Dictionary<String, String> dataPointDocs = new Dictionary<String, String>();
                    Boolean IsRecordInBkgCopyPackageData = false;
                    List<Int32> psIDS = _lstPkgDocDataPoints.Select(col => col.PackageSubscriptionID).Distinct().ToList();
                    //UAT-1597
                    //Commented code in UAT 3224
                    // List<PackageSubscriptionNotificationDataContract> lstOldPackageSubscription = GetPackageSubscriptionDataForNotification(tenantId, psIDS);

                    //UAT-1738:Create new attribute type for data-synced documents and update data sync procedure
                    List<lkpDocumentType> lstDocumentType = GetlkpDocumentType(tenantId);
                    // Get Document type id for 'Screening Document' type .
                    Int32 DocumentTypeId_ScreeningDocument = lstDocumentType.FirstOrDefault(cond =>
                                                                             cond.DMT_Code == DocumentType.SCREENING_DOCUMENT_ATTRIBUTE_TYPE_DOCUMENT.GetStringValue()
                                                                             && !cond.DMT_IsDeleted).DMT_ID;

                    List<lkpDataEntryDocumentStatu> dataEntryDocStatus = LookupManager.GetLookUpData<lkpDataEntryDocumentStatu>(tenantId);
                    Int16 dataEntryDocCompletedStatusId = dataEntryDocStatus.FirstOrDefault(cnd => cnd.LDEDS_Code == DataEntryDocumentStatus.COMPLETE.GetStringValue()
                                                          && !cnd.LDEDS_IsDeleted).LDEDS_ID;


                    short archieveStatusId = LookupManager.GetLookUpData<lkpArchiveState>(tenantId).FirstOrDefault(cond => cond.AS_Code == ArchiveState.Archived.GetStringValue()).AS_ID;
                    Int32 archiveStateIdOfCurrentSubscription = 0;
                    foreach (Int32 psID in psIDS)
                    {
                        archiveStateIdOfCurrentSubscription = _lstPkgDocDataPoints.Where(cond => cond.PackageSubscriptionID == psID).Select(x => x.ArchiveStateID).FirstOrDefault();

                        //prevent data to not copy from background to compliance if subscription archived.
                        if (archiveStateIdOfCurrentSubscription != archieveStatusId)
                        {
                            List<PackageDocumentDataPointContract> lstPkgDocDataPoints = _lstPkgDocDataPoints.Where(x => x.PackageSubscriptionID == psID).ToList();
                            if (bkgOrderID != null)
                            {
                                packageSubscriptionID = lstPkgDocDataPoints[0].PackageSubscriptionID;
                            }
                            Int32 organizationUserId = lstPkgDocDataPoints[0].OrganizationUserID;

                            List<ApplicantDocument> lstAppDocuments = new List<ApplicantDocument>();
                            String docXml = null;

                            String svcGrpResDocCode = BkgDataPointType.SERVICE_GROUP_RESULT_DOCUMENT.GetStringValue();
                            String ordResDocCode = BkgDataPointType.ORDER_RESULT_DOCUMENT.GetStringValue();
                            List<String> docTypes = new List<string>();
                            docTypes.Add(svcGrpResDocCode);
                            docTypes.Add(ordResDocCode);

                            List<PackageDocumentDataPointContract> lstpkgDocumentDataPoint = lstPkgDocDataPoints.Where(x => docTypes.Contains(x.BkgDataPointTypeCode)).ToList();
                            if (lstpkgDocumentDataPoint != null && lstpkgDocumentDataPoint.Count > 0)
                            {
                                List<OrderResultDocMap> lstOrdResDocMap = new List<OrderResultDocMap>();
                                List<OrderResultDocMap> lstOrdResDocMapToBeUpdated = new List<OrderResultDocMap>();

                                docXml = "<documents>";
                                foreach (PackageDocumentDataPointContract pkgDocDataPoint in lstpkgDocumentDataPoint)
                                {
                                    //Code For UAT-1395 Changes
                                    String dataPointsDocsKey = String.Empty;
                                    if (pkgDocDataPoint.BkgDataPointTypeCode == BkgDataPointType.SERVICE_GROUP_RESULT_DOCUMENT.GetStringValue())
                                    {
                                        orgFileName = "BkgSvcGroupCompletionReport_" + pkgDocDataPoint.ServiceGroupName.ToString() + ".pdf";
                                        dataPointsDocsKey = Convert.ToString(pkgDocDataPoint.MasterOrderID) + "_" + Convert.ToString(pkgDocDataPoint.SGID);
                                    }
                                    else if (pkgDocDataPoint.BkgDataPointTypeCode == BkgDataPointType.ORDER_RESULT_DOCUMENT.GetStringValue())
                                    {
                                        orgFileName = "BkgOrderCompletionReport_" + pkgDocDataPoint.MasterOrderID.ToString() + ".pdf";
                                        dataPointsDocsKey = Convert.ToString(pkgDocDataPoint.MasterOrderID);
                                    }

                                    List<OrderResultDocMap> orderResultDocMap = BALUtils.GetComplianceDataRepoInstance(tenantId).GetOrderResultDocMapping(organizationUserId,
                                        pkgDocDataPoint.MasterOrderID, pkgDocDataPoint.SGID, pkgDocDataPoint.BkgDataPointTypeID);
                                    if (orderResultDocMap.IsNotNull() && orderResultDocMap.Count > 0)
                                    {
                                        //Commented below code for UAT-1395
                                        //if (!dataPointDocs.Contains(orgFileName))
                                        if (!dataPointDocs.ContainsKey(dataPointsDocsKey)
                                             || (dataPointDocs.ContainsKey(dataPointsDocsKey) && !dataPointDocs.ContainsValue(orgFileName))
                                            )
                                        {
                                            orderResultDocMap.ForEach(x =>
                                            {
                                                lstOrdResDocMapToBeUpdated.Add(x);
                                            });
                                        }
                                    }

                                    String sgid = pkgDocDataPoint.SGID.IsNotNull() ? pkgDocDataPoint.SGID.Value.ToString() : String.Empty;


                                    docXml = docXml + "<document>";
                                    docXml = docXml + "<BkgDataPointTypeID>" + pkgDocDataPoint.BkgDataPointTypeID.ToString() + "</BkgDataPointTypeID>";
                                    docXml = docXml + "<SGID>" + sgid + "</SGID>";
                                    //Implementation for UAT-1395:Data Sync Issues
                                    docXml = docXml + "<MasterOrderID>" + pkgDocDataPoint.MasterOrderID + "</MasterOrderID>";
                                    //UAT-1738
                                    //Set 'IsScreeningDocument' tag in document xml for further used in CopyData SP to map with 'Screening Document' attribute.
                                    docXml = docXml + "<IsScreeningDocument>" + pkgDocDataPoint.IsScreeningDocAttributeMapped + "</IsScreeningDocument>";
                                    //if ((orderResultDocMap.IsNull() || orderResultDocMap.Count == 0) || (orderResultDocMap.IsNotNull() && orderResultDocMap.Count > 0 && (prevOrganizationUserId != organizationUserId)))

                                    //Commented below code for UAT-1395
                                    //if (!dataPointDocs.Contains(orgFileName))
                                    if (!dataPointDocs.ContainsKey(dataPointsDocsKey)
                                        || (dataPointDocs.ContainsKey(dataPointsDocsKey) && !dataPointDocs.ContainsValue(orgFileName))
                                       )
                                    {
                                        dataPointDocs.Add(dataPointsDocsKey, orgFileName);
                                        Boolean aWSUseS3 = false;
                                        String filePath = WebConfigurationManager.AppSettings[AppConsts.APPLICANT_FILE_LOCATION];
                                        if (!WebConfigurationManager.AppSettings["AWSUseS3"].IsNullOrEmpty())
                                        {
                                            aWSUseS3 = Convert.ToBoolean(WebConfigurationManager.AppSettings["AWSUseS3"]);
                                        }
                                        //Check whether use AWS S3, true if need to use
                                        if (aWSUseS3 == false)
                                        {
                                            if (!filePath.EndsWith("\\"))
                                            {
                                                filePath += "\\";
                                            }

                                            filePath += "Tenant(" + tenantId.ToString() + @")\";

                                            if (!Directory.Exists(filePath))
                                                Directory.CreateDirectory(filePath);
                                        }
                                        else
                                        {
                                            if (!filePath.EndsWith("//"))
                                            {
                                                filePath += "//";
                                            }

                                            filePath = filePath + "Tenant(" + tenantId.ToString() + @")/";
                                        }

                                        //Get Background Order Report
                                        ParameterValue[] parameters = new ParameterValue[2];
                                        if (pkgDocDataPoint.BkgDataPointTypeCode == BkgDataPointType.SERVICE_GROUP_RESULT_DOCUMENT.GetStringValue())
                                        {
                                            parameters = new ParameterValue[3];
                                            parameters[2] = new ParameterValue();
                                            parameters[2].Name = "PackageGroupID";
                                            parameters[2].Value = pkgDocDataPoint.SGID.ToString();
                                        }
                                        else if (pkgDocDataPoint.BkgDataPointTypeCode == BkgDataPointType.ORDER_RESULT_DOCUMENT.GetStringValue())
                                        {
                                            parameters = new ParameterValue[2];
                                        }
                                        parameters[0] = new ParameterValue();
                                        parameters[0].Name = "OrderID";
                                        parameters[0].Value = pkgDocDataPoint.MasterOrderID.ToString();
                                        parameters[1] = new ParameterValue();
                                        parameters[1].Name = "TenantID";
                                        parameters[1].Value = tenantId.ToString();



                                        //Get Report Content
                                        String reportName = "OrderCompletion";
                                        byte[] reportContent = ReportManager.GetReportByteArray(reportName, parameters);

                                        //Create Applicant Document
                                        ApplicantDocument applicantDocument = new ApplicantDocument();

                                        //Save Report in temporary Location
                                        String destFilePath = "Tenant(" + tenantId.ToString() + @")\";
                                        fileName = orgFileName;
                                        fileName = destFilePath + fileName;
                                        String returnFilePath = CommonFileManager.SaveDocument(reportContent, fileName, FileType.ApplicantFileLocation.GetStringValue());
                                        applicantDocument.DocumentPath = returnFilePath;
                                        applicantDocument.OrganizationUserID = pkgDocDataPoint.OrganizationUserID;
                                        applicantDocument.FileName = orgFileName;
                                        applicantDocument.Size = reportContent.Length;
                                        applicantDocument.Description = String.Empty;
                                        applicantDocument.CreatedByID = currentLoggedInUserId;
                                        applicantDocument.CreatedOn = DateTime.Now;
                                        applicantDocument.IsDeleted = false;
                                        //UAT-1738:Create new attribute type for data-synced documents and update data sync procedure
                                        if (pkgDocDataPoint.IsScreeningDocAttributeMapped)
                                        {
                                            applicantDocument.DocumentType = DocumentTypeId_ScreeningDocument;
                                            applicantDocument.DataEntryDocumentStatusID = dataEntryDocCompletedStatusId;
                                        }

                                        Int32 applicantDocumentId = ComplianceDataManager.AddApplicantDocument(applicantDocument, tenantId);
                                        String date = DateTime.Now.ToString("MMddyyyy") + "_" + DateTime.Now.ToString("mmss") + DateTime.Now.Millisecond.ToString();
                                        String newfileName = filePath + "UD_" + tenantId.ToString() + "_" + applicantDocumentId + "_" + date + ".pdf";
                                        ComplianceDataManager.UpdateDocumentPath(newfileName, returnFilePath, applicantDocumentId, tenantId, pkgDocDataPoint.OrganizationUserID);

                                        docXml = docXml + "<DocID>" + applicantDocumentId + "</DocID>";

                                        applicantDocument.DocumentPath = newfileName;
                                        applicantDocument.ApplicantDocumentID = applicantDocumentId;
                                        lstAppDocuments.Add(applicantDocument);

                                        OrderResultDocMap ordResDocMap = new OrderResultDocMap();
                                        ordResDocMap.ORDM_DocumentID = applicantDocumentId;
                                        ordResDocMap.ORDM_OrganizationUserID = organizationUserId;
                                        ordResDocMap.ORDM_MasterOrderID = pkgDocDataPoint.MasterOrderID;
                                        ordResDocMap.ORDM_ServiceGroupID = pkgDocDataPoint.SGID;
                                        ordResDocMap.ORDM_BkgDataPointTypeID = pkgDocDataPoint.BkgDataPointTypeID;
                                        ordResDocMap.ORDM_IsDeleted = false;
                                        ordResDocMap.ORDM_CreatedByID = currentLoggedInUserId;
                                        ordResDocMap.ORDM_CreatedOn = DateTime.Now;

                                        lstOrdResDocMap.Add(ordResDocMap);
                                    }
                                    else
                                    {
                                        docXml = docXml + "<DocID>" + orderResultDocMap[0].ORDM_DocumentID + "</DocID>";
                                    }
                                    docXml = docXml + "</document>";
                                }
                                docXml = docXml + "</documents>";

                                if (lstOrdResDocMap.IsNotNull() && lstOrdResDocMap.Count > 0)
                                    BALUtils.GetComplianceDataRepoInstance(tenantId).SaveOrderResultDocMap(lstOrdResDocMap);
                                if (lstOrdResDocMapToBeUpdated != null && lstOrdResDocMapToBeUpdated.Count > 0)
                                    BALUtils.GetComplianceDataRepoInstance(tenantId).UpdateOrderResultDocMap(lstOrdResDocMapToBeUpdated, currentLoggedInUserId);
                            }

                            //#region UAT-977  Archive Ability
                            //short archieveStatusId = LookupManager.GetLookUpData<lkpArchiveState>(tenantId).FirstOrDefault(cond => cond.AS_Code == ArchiveState.Archived.GetStringValue()).AS_ID;
                            //PackageSubscription packageSubscription = new PackageSubscription();
                            //packageSubscription = BALUtils.GetComplianceDataRepoInstance(tenantId).GetPackageSubscriptionByID(tenantId, psID);

                            ////Let the data do not copy from background to compliance if subscription archived.
                            //if (packageSubscription.IsNotNull() && packageSubscription.ArchiveStateID != archieveStatusId)
                            //{
                            //  commented code for UAT 3224 
                            //BALUtils.GetComplianceDataRepoInstance(tenantId).PackageDataCopy(packageSubscriptionID, currentLoggedInUserId, docXml, tenantId);

                            IsRecordInBkgCopyPackageData = ComplianceDataManager.InsertRecordInBkgCopyPackageData(tenantId, packageSubscriptionID, docXml, currentLoggedInUserId);
                            //UAT-2618:
                            //  commented code for UAT 3224 
                            //ComplianceDataManager.UpdateIsDocAssociated(tenantId, packageSubscriptionID, true, currentLoggedInUserId);
                            //}
                            //#endregion

                            if (lstAppDocuments != null && lstAppDocuments.Count > 0)
                            {
                                //Use Poco class so that Entity will not get updated while running parallel tasks
                                List<ApplicantDocumentPocoClass> lstApplicantDoc = new List<ApplicantDocumentPocoClass>();
                                foreach (var doc in lstAppDocuments)
                                {
                                    ApplicantDocumentPocoClass appDoc = new ApplicantDocumentPocoClass();
                                    appDoc.ApplicantDocumentID = doc.ApplicantDocumentID;
                                    appDoc.FileName = doc.FileName;
                                    appDoc.DocumentPath = doc.DocumentPath;
                                    appDoc.PdfDocPath = doc.PdfDocPath;
                                    appDoc.IsCompressed = doc.IsCompressed;
                                    appDoc.Size = doc.Size;
                                    lstApplicantDoc.Add(appDoc);
                                }

                                DocumentManager.ConvertApplicantDocumentToPDF(lstApplicantDoc, tenantId, currentLoggedInUserId);
                                MergeDocIntoUnifiedPdf(organizationUserId, tenantId, currentLoggedInUserId);
                            }
                            //  commented code for UAT 3224 
                            //RuleManager.ExecuteBusinessRules(psIDS, tenantId, currentLoggedInUserId);
                        }

                    }
                    if (IsRecordInBkgCopyPackageData)
                    {
                        InsertSystemSeriveTrigger(currentLoggedInUserId, tenantId, LkpSystemService.BACKGROUND_COPY_PACKAGE_DATA);
                    }
                    //UAT-1597:New ComCopy Settin/notification: client to be notified when a student submitted a requirement that needs their review
                    //  commented code for UAT 3224 
                    // SendNotifOfItemStatusChangedAfterDataSync(lstOldPackageSubscription, psIDS, tenantId, currentLoggedInUserId);
                }

                //if (bkgOrderID.IsNull() || (bkgOrderID.IsNotNull() && _lstPkgDocDataPoints.IsNotNull() && _lstPkgDocDataPoints.Count == AppConsts.NONE))
                if (bkgOrderID.IsNull() || (bkgOrderID.IsNotNull() && _lstPkgDocDataPoints.IsNotNull()))
                {
                    //Method to save Service group result document and order result document in data entry queue.
                    SaveResultDocumentInAdminDataEntryQueue(tenantId, currentLoggedInUserId, packageSubscriptionID, bkgOrderID);
                }
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        public static void InsertSystemSeriveTrigger(Int32 currentUserId, Int32 tenantId, String systemServiceCode)
        {
            try
            {
                Entity.lkpSystemService reOccurRuleService = SecurityManager.GetSystemServiceByCode(systemServiceCode);
                Entity.SystemServiceTrigger systemServiceTrigger = new Entity.SystemServiceTrigger();
                if (reOccurRuleService != null)
                    systemServiceTrigger.SST_SystemServiceID = reOccurRuleService.SS_ID;
                systemServiceTrigger.SST_TenantID = tenantId;
                systemServiceTrigger.SST_IsActive = true;
                systemServiceTrigger.SST_CreatedByID = currentUserId;
                systemServiceTrigger.SST_CreatedOn = DateTime.Now;
                SecurityManager.AddSystemServiceTrigger(systemServiceTrigger);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        /// <summary>
        /// Assign the datatable record in PackageDocumentDataPointContract 
        /// </summary>
        /// <param name="table">table</param>
        /// <returns>List of PackageDocumentDataPointContract</returns>
        private static List<PackageDocumentDataPointContract> AssignPackageDocumentDataPointContractToDataModel(DataTable table)
        {
            try
            {
                List<PackageDocumentDataPointContract> lstPkgDocDataPoints = new List<PackageDocumentDataPointContract>();
                IEnumerable<DataRow> rows = table.AsEnumerable();
                if (rows != null && rows.Count() > 0)
                {
                    foreach (var row in rows)
                    {
                        PackageDocumentDataPointContract pkgDocDataPoint = new PackageDocumentDataPointContract();

                        pkgDocDataPoint.BkgDataPointTypeID = Convert.ToInt32(row["BkgDataPointTypeID"]);
                        pkgDocDataPoint.BkgDataPointTypeCode = Convert.ToString(row["BkgDataPointTypeCode"]);
                        if (row["SGID"].GetType().Name != "DBNull")
                            pkgDocDataPoint.SGID = Convert.ToInt32(row["SGID"]);
                        pkgDocDataPoint.MasterOrderID = Convert.ToInt32(row["MasterOrderID"]);
                        pkgDocDataPoint.OrganizationUserID = Convert.ToInt32(row["OrganizationUserID"]);
                        pkgDocDataPoint.ServiceGroupName = Convert.ToString(row["ServiceGroupName"]);
                        pkgDocDataPoint.PackageSubscriptionID = Convert.ToInt32(row["PackageSubscriptionID"]);
                        if (row["ArchiveStateID"].GetType().Name != "DBNull")
                            pkgDocDataPoint.ArchiveStateID = Convert.ToInt32(row["ArchiveStateID"]);
                        pkgDocDataPoint.IsScreeningDocAttributeMapped = row["IsScrDocumentAttMapped"].GetType().Name != "DBNull" ? Convert.ToBoolean(row["IsScrDocumentAttMapped"]) : false;
                        lstPkgDocDataPoints.Add(pkgDocDataPoint);
                    }
                }
                return lstPkgDocDataPoints;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Check whether Order is fresh and has Compliance Package
        /// </summary>
        /// <param name="orderID"></param>
        /// <param name="tenantId"></param>
        /// <returns>Boolean</returns>
        public static Boolean IsComplianceAndFreshOrder(Int32 orderID, Int32 tenantId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).IsComplianceAndFreshOrder(orderID);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static void MergeDocIntoUnifiedPdf(Int32 organizationUserId, Int32 tenantId, Int32 currentLoggedUserID)
        {
            Boolean isParallelTaskRunning = true;
            Double totalTimeDiffernce = 0.0;

            List<lkpDocumentStatu> lkpDocumentStatus = Business.RepoManagers.DocumentManager.GetDocumentStatus(tenantId);
            //Get the document status id based on the Merging in progress statusc code
            Int32 documentStatusId = lkpDocumentStatus.Where(obj => obj.DMS_Code == DocumentStatus.MERGING_IN_PROGRESS.GetStringValue()).FirstOrDefault().DMS_ID;

            //Check status of the document for user who uploaded the document.Method return true if document status is Merging in progress  else false 
            isParallelTaskRunning = Business.RepoManagers.DocumentManager.IsMergingInProgress(organizationUserId, tenantId, documentStatusId);
            UnifiedPdfDocument unifiedPdfDocument = Business.RepoManagers.DocumentManager.GetAllMergingInProgressUnifiedDoc(organizationUserId, tenantId, documentStatusId);

            if (isParallelTaskRunning)
            {
                for (int i = 0; i <= AppConsts.TEN; i++)
                {
                    if (isParallelTaskRunning)
                    {
                        if (unifiedPdfDocument.IsNotNull())
                        {
                            totalTimeDiffernce = (DateTime.Now - unifiedPdfDocument.UPD_CreatedOn).TotalMinutes;
                        }
                        if (totalTimeDiffernce >= 10.0)
                        {
                            Business.RepoManagers.DocumentManager.AppendApplicantDocument(organizationUserId, tenantId, currentLoggedUserID);
                            break;
                        }
                        else
                        {
                            //Wait for 3 seconds if document status is Merging in Progress
                            System.Threading.Thread.Sleep(3000);
                            isParallelTaskRunning = Business.RepoManagers.DocumentManager.IsMergingInProgress(organizationUserId, tenantId, documentStatusId);
                        }
                    }
                    else
                    {
                        Business.RepoManagers.DocumentManager.AppendApplicantDocument(organizationUserId, tenantId, currentLoggedUserID);
                        break;
                    }
                }
            }
            else
            {
                Business.RepoManagers.DocumentManager.AppendApplicantDocument(organizationUserId, tenantId, currentLoggedUserID);
            }
        }

        /// <summary>
        /// Returns the list of the child institute node ids for corresponding hierarchynode id
        /// </summary>
        /// <returns></returns>
        public static List<Int32> GetChildInstituteNodeIDs(String selectedhierarchyMappingNodeIds, Int32 tenantId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetChildInstituteNodeIDs(selectedhierarchyMappingNodeIds);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        #region GET INSTRUCTION TEXT
        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public static String GetInstructionTextByID(Int32 tenantId, Int32 packageId, Int32 categoryId, Int32 itemId, Int32 attributeId, Int32 CIA_Id)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetInstructionTextByID(packageId, categoryId, itemId, attributeId, CIA_Id);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        #endregion
        //UAT-738
        #region GET ASSIGNED ITEM LIST BY CATEGORY
        public static List<Int32> GetCategoryListForAssignedItem(Int32 tenantId, Int32 packagesubscriptionId, Int32 currentLoggedInUserId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetCategoryListForAssignedItem(packagesubscriptionId, currentLoggedInUserId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        #endregion

        public static List<CustomComplianceContract> FetchSelectedSubscriptionIDs(Int32 ClientId, Dictionary<Int32, String> OrganisationUser)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(ClientId).FetchSelectedSubscriptionIDs(OrganisationUser);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static List<PackageSubscription> GetPackageSubscription(int tenantID, string subscriptionIDs)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).GetPackageSubscription(subscriptionIDs);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        //UAT-613 Explanatory Tab state
        #region UAT-613
        public static Boolean SaveUpdateExplanatoryState(Guid userId, String explanationTabState)
        {
            try
            {
                Entity.aspnet_PersonalizationPerUser explanationObjToSave = null;
                Entity.aspnet_PersonalizationPerUser explanationObjToUpdate = BALUtils.GetComplianceDataRepoInstance(SecurityManager.DefaultTenantID).GetExplanatoryState(userId);
                if (explanationObjToUpdate.IsNotNull())
                {
                    explanationObjToUpdate.ExplanationTabState = explanationTabState;
                    explanationObjToUpdate.LastUpdatedDate = DateTime.Now;

                }
                else
                {
                    explanationObjToSave = new Entity.aspnet_PersonalizationPerUser();
                    explanationObjToSave.Id = Guid.NewGuid();
                    explanationObjToSave.UserId = userId;
                    explanationObjToSave.LastUpdatedDate = DateTime.Now;
                    explanationObjToSave.ExplanationTabState = explanationTabState;
                }
                return BALUtils.GetComplianceDataRepoInstance(SecurityManager.DefaultTenantID).SaveUpdateExplanatoryState(explanationObjToSave);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static Entity.aspnet_PersonalizationPerUser GetExplanatoryState(Guid userId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(SecurityManager.DefaultTenantID).GetExplanatoryState(userId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        #endregion

        public static List<ApplicantDocumentDetails> GetApplicantDocumentDetails(Int32 organizationUserID, Int32 tenantID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).GetApplicantDocumentDetails(organizationUserID);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        #region UAT:536 Save and Update Applicant Custom Attribute
        /// <summary>
        /// This method used to save and update custom attribute for an applicant. 
        /// </summary>
        /// <param name="tenantID">tenantID</param>
        /// <param name="applicantCustomAttributeContract">applicantCustomAttributeContract</param>
        /// <param name="loggedInUserId">loggedInUserId</param>
        /// <returns>Boolean</returns>
        public static Boolean SaveUpdateApplicantCustomAttribute(Int32 tenantID, List<ApplicantCustomAttributeContract> applicantCustomAttributeContract, Int32 loggedInUserId, Int32 orgUsrID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).SaveUpdateApplicantCustomAttribute(applicantCustomAttributeContract, loggedInUserId, orgUsrID);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        #endregion

        #region UAT-523 WB: Change "Category Exception" behavior to be an overall approval of the category, not just all Items filled in.

        /// <summary>
        /// To Get Whole Category Item ID
        /// </summary>
        /// <param name="tenantID"></param>
        /// <param name="currentLoggedInUserId"></param>
        /// <param name="wholeCatGUID"></param>
        /// <param name="complianceCategoryId"></param>
        /// <returns></returns>
        public static ComplianceItem GetWholeCategoryItemID(Int32 tenantID, Int32 currentLoggedInUserId, Guid wholeCatGUID, Int32 complianceCategoryId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).GetWholeCategoryItemID(tenantID, currentLoggedInUserId, wholeCatGUID, complianceCategoryId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        #endregion

        #region UAT:719 Check Exceptions turned off for a Category/Item
        /// <summary>
        /// To check wheather exception is allowed turned off for a Category/item
        /// </summary>
        /// <param name="tenantID">tenantID</param>
        /// <param name="packageId">packageId</param>
        /// <param name="categoryId">categoryId</param>
        /// <returns></returns>
        public static Boolean IsAllowExceptionOnCategory(Int32 tenantID, Int32 packageId, Int32 categoryId)
        {
            try
            {
                List<lkpObjectType> lstlkpObjectType = GetlkpObjectType(tenantID);
                return BALUtils.GetComplianceDataRepoInstance(tenantID).IsAllowExceptionOnCategory(packageId, categoryId, lstlkpObjectType);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        #endregion

        #region UAT-523 Category Level Exception
        /// <summary>
        /// To update Item and category Data Status
        /// </summary>
        /// <param name="ItemDataId"></param>
        /// <param name="currentStatusId"></param>
        /// <param name="currentLoggedInUserId"></param>
        /// <returns></returns>
        public static Boolean UpdateCategoryLevelExceptionData(Int32 selectedTenantId, Int32 categoryDataId, DateTime? expirationDate, Int32 catStatusId, Int16? catExceptionStatusId, Int32 itemDataId, Int32 itemId, String comments, Int32 statusId, Int32 currentLoggedInUserId, String currentLoggedInUserName, List<Int32> lstDocumentsToRemove,
                                                                   List<ListItemAssignmentProperties> lstAssignmentProperties, String recordActionType, String currentLoggedInUserInitials)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(selectedTenantId).UpdateCategoryLevelExceptionData(categoryDataId, expirationDate, catStatusId, catExceptionStatusId, itemDataId, itemId, comments, statusId, currentLoggedInUserId, currentLoggedInUserName, lstDocumentsToRemove, lstAssignmentProperties, recordActionType, currentLoggedInUserInitials);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }

        }
        #endregion

        /// <summary>
        /// UPDATE Applicant Compliance Category data. Set [CategoryExceptionStatusID] and [ExpirationDate] to null.
        /// </summary>
        /// <param name="tenantID"></param>
        /// <param name="currentLoggedInUserID"></param>
        /// <param name="complianceCategoryID"></param>
        /// <param name="packageSubscriptionID"></param>
        /// <returns></returns>
        public static ApplicantComplianceItemData UpdateApplicantCmpCatData(Int32 tenantID, Int32 currentLoggedInUserID, Int32 complianceCategoryID, Int32 packageSubscriptionID, String catStatusApprovedCode)
        {
            try
            {
                //UAT-911: Category whose Compliance Required status is set to “No” changes from Approved to Incomplete at applicant data entry screen 
                //         when applicant applies category exception and then deletes the category exception.
                var categoryComplianceStatus = LookupManager.GetLookUpData<Entity.ClientEntity.lkpCategoryComplianceStatu>(tenantID).FirstOrDefault(cnd => cnd.Code.ToLower().Trim() == catStatusApprovedCode.ToLower().Trim() && cnd.IsDeleted == false);
                Int32 catStatusApprovedId = categoryComplianceStatus.IsNotNull() ? categoryComplianceStatus.CategoryComplianceStatusID : AppConsts.NONE;
                return BALUtils.GetComplianceDataRepoInstance(tenantID).UpdateApplicantCmpCatData(currentLoggedInUserID, complianceCategoryID, packageSubscriptionID, catStatusApprovedId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static List<ApplicantComplianceItemData> DeleteOverideRuleStatus(Int32 tenantID, Int32 currentLoggedInUserID, Int32 complianceCategoryID, Int32 packageSubscriptionID, String catStatusApprovedCode)
        {
            try
            {
                //UAT-911: Category whose Compliance Required status is set to “No” changes from Approved to Incomplete at applicant data entry screen 
                //         when applicant applies category exception and then deletes the category exception.
                List<lkpCategoryComplianceStatu> categoryComplianceStatus = LookupManager.GetLookUpData<Entity.ClientEntity.lkpCategoryComplianceStatu>(tenantID).Where(cnd => cnd.IsDeleted == false).ToList();
                //var IncompleteCategpryComplianceStatus=LookupManager.GetLookUpData<Entity.ClientEntity.lkpCategoryComplianceStatu>(tenantID).FirstOrDefault(cnd => cnd.Code.ToLower().Trim() == ApplicantCategoryComplianceStatus.Incomplete.GetStringValue().ToLower().Trim() && cnd.IsDeleted == false);
                // Int32 catStatusApprovedId = categoryComplianceStatus.IsNotNull() ? categoryComplianceStatus.CategoryComplianceStatusID : AppConsts.NONE;
                //Int32 catStatusIncompleteId = IncompleteCategpryComplianceStatus.IsNotNull() ? IncompleteCategpryComplianceStatus.CategoryComplianceStatusID : AppConsts.NONE;
                return BALUtils.GetComplianceDataRepoInstance(tenantID).DeleteOverideRuleStatus(currentLoggedInUserID, complianceCategoryID, packageSubscriptionID, categoryComplianceStatus);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        #region UAT - 685 : Approving Multiple Orders

        public static Boolean ProcessInvoiceOrderApproval(Int32 tenantId, ScheduledTaskContract parameters, IClearStarCCF objClearstarCCf)
        {
            try
            {
                String orderStatusCode = ApplicantOrderStatus.Paid.GetStringValue();
                //get OrderPaymentDetail to get the payment information.[UAT-916]
                OrderPaymentDetail orderPaymentDetail = GetOrdrPaymentDetailByID(tenantId, parameters.OrderPaymentDetailId);
                if (orderPaymentDetail.IsNotNull())
                {
                    Boolean _isEDSServiceIncluded = ComplianceDataManager.IsOrderPaymentIncludeEDSService(tenantId, parameters.OrderPaymentDetailId);
                    Boolean _isCompPkgIncluded = orderPaymentDetail.OrderPkgPaymentDetails.Any(x => x.lkpOrderPackageType.OPT_Code == OrderPackageTypes.COMPLIANCE_PACKAGE.GetStringValue());

                    #region UAT-1358:Complio Notification to applicant for PrintScan
                    String bkgServiceTypeCode = BkgServiceType.PRINT_SCAN.GetStringValue();
                    Boolean _isPrintScanServiceIncluded = BackgroundProcessOrderManager.IsBkgServiceExistInOrder(tenantId, parameters.OrderPaymentDetailId, bkgServiceTypeCode);
                    #endregion

                    Boolean isOrderUpdated = UpdateOrderStatus(tenantId, parameters.OrderId, orderStatusCode, parameters.PackageId, parameters.ApprovedBy, parameters.OrganisationUserId, parameters.ReferenceNumber, parameters.ExpiryDate, parameters.OrderPaymentDetailId);
                    if (isOrderUpdated)
                    {
                        // code to Copy BkgData To CompliancePackage

                        #region Copy BkgData To CompliancePackage

                        //added check of compliance package included or not in current order payment approval.
                        if (IsComplianceAndFreshOrder(parameters.OrderId, tenantId) && _isCompPkgIncluded)
                        {
                            Int32 packageSubscriptionID = GetPackageSubscriptionID(parameters.OrderId, tenantId);
                            if (packageSubscriptionID > 0)
                            {
                                /*UAT-1476:WB: When a tracking package is ordered and there was already a previous package with entered data,
                                 then there would be data movement as if there were a subscription change.*/
                                MobilityManager.CopyCompPackageDataForNewOrder(tenantId, parameters.OrderId, parameters.ApprovedBy);

                                CopyData(packageSubscriptionID, tenantId, parameters.ApprovedBy, null);
                            }

                        }

                        #endregion


                        #region UAT-4364:- Since approval notification is the step after EDS pulls from ClearStar, notification is not sent when that fails
                        if (!parameters.IsApprovalEmailSent)
                        {
                            //send print scan notification
                            #region UAT-1358:Complio Notification to applicant for PrintScan
                            if (_isPrintScanServiceIncluded)
                            {
                                CommunicationManager.SendNotificationForPrintScan(orderPaymentDetail, tenantId);
                            }
                            #endregion

                            //------------to be called only after EDS data is saved

                            #region Send Order Approval Notification

                            SendOrderNotification(tenantId, parameters.ApprovedBy, parameters.OrderId, parameters.OrderPaymentDetailId);
                            ComplianceDataManager.UpdateScheduleTask(tenantId, parameters.ScheduleTaskId);
                            #endregion

                            #region UAT-2388
                            ComplianceDataManager.InsertAutomaticInvitationLog(tenantId, parameters.OrderId, parameters.ApprovedBy); //UAT-2388
                            #endregion
                            #endregion
                        }
                        #region E-DRUG SCREENING
                        //check :if order contains package with EDS service.
                        if (_isEDSServiceIncluded)
                        {

                            BkgOrder bkgOrderObj = BackgroundProcessOrderManager.GetBkgOrderByOrderID(tenantId, parameters.OrderId);
                            if (!bkgOrderObj.IsNullOrEmpty())
                            {
                                List<BkgOrderPackage> lstBkgOrderPackage = BackgroundProcessOrderManager.GetBackgroundPackageIdListByBkgOrderId(tenantId, bkgOrderObj.BOR_ID);
                                if (!lstBkgOrderPackage.IsNullOrEmpty() && (lstBkgOrderPackage.Count() > 0))
                                {
                                    List<Int32> lstBackgroundPackageId = lstBkgOrderPackage.Select(slct => slct.BkgPackageHierarchyMapping.BackgroundPackage.BPA_ID).ToList();
                                    List<Int32> lstBPHM_Id = lstBkgOrderPackage.Select(slt => slt.BOP_BkgPackageHierarchyMappingID.Value).ToList();
                                    String extVendorId = String.Empty;
                                    //ClearStarCCF objClearstarCCf = new ClearStarCCF();

                                    ClearStarWebCCFContract clearStarWebCCFContract = new ClearStarWebCCFContract();
                                    String result = BackgroundProcessOrderManager.GetClearStarServiceId(tenantId, lstBackgroundPackageId, BkgServiceType.ELECTRONICDRUGSCREEN.GetStringValue());
                                    if (!result.IsNullOrEmpty())
                                    {
                                        String[] separator = { "," };
                                        String[] splitIds = result.Split(separator, StringSplitOptions.RemoveEmptyEntries);
                                        extVendorId = splitIds[1];
                                        //Create dictionary for parallel task parameter.
                                        Dictionary<String, Object> dicParam = new Dictionary<String, Object>();
                                        dicParam.Add("BkgOrderId", bkgOrderObj.BOR_ID);
                                        dicParam.Add("TenantId", tenantId);
                                        dicParam.Add("ExtVendorId", Convert.ToInt32(extVendorId));
                                        dicParam.Add("BPHMId_List", lstBPHM_Id);
                                        dicParam.Add("RegistrationId", String.Empty);
                                        dicParam.Add("CurrentLoggedInUserId", parameters.ApprovedBy);
                                        dicParam.Add("OrganizationUserId", bkgOrderObj.OrganizationUserProfile.OrganizationUserID);
                                        dicParam.Add("OrganizationUserProfileId", bkgOrderObj.BOR_OrganizationUserProfileID);
                                        dicParam.Add("ApplicantName", string.Concat(bkgOrderObj.OrganizationUserProfile.FirstName, " ", bkgOrderObj.OrganizationUserProfile.LastName));
                                        dicParam.Add("PrimaryEmailAddress", bkgOrderObj.OrganizationUserProfile.PrimaryEmailAddress);
                                        //Pass selectedNodeId in place of HierarchyId [UAT-1067]
                                        //dicParam.Add("HierarchyNodeId", bkgOrderObj.Order.HierarchyNodeID.Value);
                                        dicParam.Add("HierarchyNodeId", bkgOrderObj.Order.SelectedNodeID.Value);

                                        //BackgroundProcessOrderManager.RunParallelTaskSaveCCFDataAndPDF(objClearstarCCf.SaveCCFDataAndPDF, dicParam, LoggerService, ExceptiomService, View.SelectedTenantId);
                                        objClearstarCCf.SaveCCFDataAndPDF(dicParam);
                                    }
                                }
                            }
                        }

                        #endregion

                        return true;
                    }
                }
                return false;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static void SendOrderNotification(Int32 tenantId, Int32 currentLoggedInUserId, Int32 orderId, Int32 orderPaymenDetailID)
        {
            if (!SecurityManager.IsLocationServiceTenant(tenantId))//// Send Notification only to the non Location service tenants
            {
                //OrderPaymentDetail orderPaymentDetail = ComplianceDataManager.GetOrderDetailById(tenantId, orderId);
                OrderPaymentDetail orderPaymentDetail = ComplianceDataManager.GetAllPaymentDetailsOfOrderByOrderID(tenantId, orderId).Where(x => x.OPD_ID == orderPaymenDetailID).FirstOrDefault();

                if (orderPaymentDetail.IsNotNull())
                {
                    //Check is order paymentDetail contains Background Package.[UAT-916]
                    String backgroundPackageCodeTypeCode = OrderPackageTypes.BACKGROUND_PACKAGE.GetStringValue();

                    //START UAT-4250
                    String compliancePackageCodeTypeCode = OrderPackageTypes.COMPLIANCE_PACKAGE.GetStringValue();
                    List<String> lstPkgPaymentTypeCode = ComplianceDataManager.GetOrderPkgPaymentDetailByOPDID(tenantId, orderPaymenDetailID).Select(x => x.lkpOrderPackageType.OPT_Code).ToList();
                    String orderPackageTypeCode = String.Empty;
                    if (lstPkgPaymentTypeCode.Contains(backgroundPackageCodeTypeCode) && lstPkgPaymentTypeCode.Contains(compliancePackageCodeTypeCode))
                    {
                        orderPackageTypeCode = OrderPackageTypes.COMPLIANCE_AND_BACKGROUMD_PACKAGE.GetStringValue();
                    }

                    else if (lstPkgPaymentTypeCode.Contains(compliancePackageCodeTypeCode))
                    {
                        orderPackageTypeCode = OrderPackageTypes.COMPLIANCE_PACKAGE.GetStringValue();
                    }
                    else
                        orderPackageTypeCode = OrderPackageTypes.BACKGROUND_PACKAGE.GetStringValue();

                    //END UAT
                    Int32? systemCommunicationID = null;
                    Guid? messageID = null;
                    //Set orderpackageTypeCode on the basis of OrderPayment packages [UAT-916]
                    /*UAT-916
                     //String orderPackageTypeCode = orderPaymentDetail.Order.lkpOrderPackageType.OPT_Code;*/
                    //systemCommunicationID = CommunicationManager.SendOrderApprovalMail(packageSubscription, View.CurrentLoggedInUserId, View.SelectedTenantId);
                    //messageID = CommunicationManager.SendOrderApprovalMessage(packageSubscription, View.CurrentLoggedInUserId, View.SelectedTenantId);
                    systemCommunicationID = CommunicationManager.SendOrderApprovalMail(orderPaymentDetail, currentLoggedInUserId, tenantId);

                    #region UAT-3389: Add attachment of "Requirement Explanation" to order approval emails which include tracking packages.
                    Dictionary<String, object> dicMessageParam = new Dictionary<String, object>();
                    //if (orderPackageTypeCode.Equals(OrderPackageTypes.COMPLIANCE_PACKAGE.GetStringValue()) && systemCommunicationID.HasValue && systemCommunicationID > AppConsts.NONE)
                    if (
                           (
                           orderPackageTypeCode.Equals(OrderPackageTypes.COMPLIANCE_PACKAGE.GetStringValue())
                           ||
                           orderPackageTypeCode.Equals(OrderPackageTypes.COMPLIANCE_AND_BACKGROUMD_PACKAGE.GetStringValue())
                           )
                           &&
                           systemCommunicationID.HasValue && systemCommunicationID > AppConsts.NONE
                          )
                    {
                        var res = AttachOrderApprovalDocuments(tenantId, orderId, orderPaymentDetail.Order.OrganizationUserProfile.OrganizationUserID, systemCommunicationID.Value);
                        if (res.Item1)
                        {
                            dicMessageParam = res.Item2;
                        }
                    }

                    #endregion

                    messageID = CommunicationManager.SendOrderApprovalMessage(orderPaymentDetail, currentLoggedInUserId, tenantId, dicMessageParam);

                    //enter data in order notification table
                    if (orderPackageTypeCode.Equals(OrderPackageTypes.BACKGROUND_PACKAGE.GetStringValue()) || orderPackageTypeCode.Equals(OrderPackageTypes.COMPLIANCE_AND_BACKGROUMD_PACKAGE.GetStringValue()))
                    {
                        if (systemCommunicationID != null && messageID != null)
                        {
                            List<Entity.ClientEntity.lkpBusinessChannelType> businessChannelType = BackgroundProcessOrderManager.GetBusinessChannelType(tenantId);
                            List<Entity.ClientEntity.lkpOrderNotificationType> orderNotificationType = BackgroundProcessOrderManager.GetOrderNotificationType(tenantId);

                            String amsBusinessChannelCode = BusinessChannelType.AMS.GetStringValue();
                            Int16 businessChannelTypeID = businessChannelType.IsNotNull() && businessChannelType.Count > 0 ?
                                                          Convert.ToInt16(businessChannelType.FirstOrDefault(cond => cond.Code == amsBusinessChannelCode).BusinessChannelTypeID)
                                                          : Convert.ToInt16(0);

                            String ordPaidNotificationTypeCode = OrderNotificationType.ORDER_PAID_NOTIFICATION.GetStringValue();
                            Int32 ordPaidNotificationTypeID = orderNotificationType.IsNotNull() && orderNotificationType.Count > 0 ?
                                Convert.ToInt32(orderNotificationType.FirstOrDefault(cond => cond.ONT_Code == ordPaidNotificationTypeCode).ONT_ID) : Convert.ToInt32(0);

                            OrderNotification ordNotification = new OrderNotification();
                            ordNotification.ONTF_OrderID = orderId;
                            ordNotification.ONTF_MSG_SystemCommunicationID = systemCommunicationID;
                            ordNotification.ONTF_MSG_MessageID = messageID;
                            ordNotification.ONTF_BusinessChannelTypeID = businessChannelTypeID;
                            ordNotification.ONTF_IsPostal = false;
                            ordNotification.ONTF_CreatedByID = currentLoggedInUserId;
                            ordNotification.ONTF_CreatedOn = DateTime.Now;
                            ordNotification.ONTF_ModifiedByID = null;
                            ordNotification.ONTF_ModifiedDate = null;
                            ordNotification.ONTF_ParentNotificationID = null;
                            ordNotification.ONTF_OrderNotificationTypeID = ordPaidNotificationTypeID;
                            Int32 ordNotificationID = BackgroundProcessOrderManager.CreateOrderNotification(tenantId, ordNotification);
                        }
                    }
                }
            }

        }

        public static List<ScheduledTask> GetScheduledTasks(Int32 tenantID, String scheduleTaskTypeCode, String taskStatusTypeCode)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).GetScheduledTasks(scheduleTaskTypeCode, taskStatusTypeCode);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static Boolean UpdateScheduleTaskStatus(Int32 tenantId, Dictionary<Int32, String> dictUpdatedTaskStatus, Int32 modifiedById)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).UpdateScheduleTaskStatus(dictUpdatedTaskStatus, modifiedById);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }

        }

        public static List<ScheduledTask> GetScheduledTasksForInvoiceOrder(Int32 tenantID, Int32 chunkSize = 0)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).GetScheduledTasksForInvoiceOrder(chunkSize);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }


        public static List<ApplicantDataList> GetApplicantComprehensivePortfolioSearch(SearchItemDataContract searchDataContract, CustomPagingArgsContract gridCustomPaging, String tenantIdList, Boolean IsAllTenantSelected)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(SecurityManager.DefaultTenantID).GetApplicantComprehensivePortfolioSearch(searchDataContract, gridCustomPaging, tenantIdList, IsAllTenantSelected);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        #endregion



        /// <summary>
        /// Check wheteher exception rejected is for category
        /// </summary>
        /// <param name="tenantID"></param>
        /// <param name="itemID"></param>
        /// <returns></returns>
        public static Boolean IsCategoryException(Int32 tenantID, Int32 itemID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).IsCategoryException(itemID);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        #region UAT-718 WB: As an admin, I should be able to assign items across multiple institutions.

        /// <summary>
        /// This Parallel Task method is used to call the AssignItemsToUserForMultipleTenant method of queue Engine
        /// </summary>
        /// <param name="handleAssignmentData">dicMultipleTenantData</param>
        /// <param name="loggerService">LoggerService (HttpContext.Current.ApplicationInstance of ISysXLoggerService )</param>
        /// <param name="exceptionService">ExceptionService (HttpContext.Current.ApplicationInstance of ISysXExceptionService)</param>
        public static Boolean AsignItemToUserForMultipleTenant(Dictionary<String, Object> dicMultipleTenantData, List<Int32> itemGlobalids, Int32 currentLoggedInUserId, Int32 assignToUserId)
        {

            try
            {
                var LoggerService = (HttpContext.Current.ApplicationInstance as IWebApplication).LoggerService;
                var ExceptiomService = (HttpContext.Current.ApplicationInstance as IWebApplication).ExceptionService;

                if (BALUtils.GetComplianceDataRepoInstance(SecurityManager.DefaultTenantID).UpdateAssignToUserForMultipleTenant(itemGlobalids, currentLoggedInUserId, assignToUserId))
                {
                    ParallelTaskContext.PerformParallelTask(ParalleAssignItemsToUserForMultipleTenant, dicMultipleTenantData, LoggerService, ExceptiomService);
                    // ParalleAssignItemsToUserForMultipleTenant(dicMultipleTenantData);
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Method to Assign Items to user for multiple tenants.
        /// </summary>
        /// <param name="dicMultipleTenantData"></param>
        public static void ParalleAssignItemsToUserForMultipleTenant(Dictionary<String, Object> dicMultipleTenantData)
        {
            try
            {
                if (dicMultipleTenantData.IsNotNull() && dicMultipleTenantData.Count > 0)
                {
                    foreach (KeyValuePair<String, Object> dicMultipleTenantObj in dicMultipleTenantData)
                    {
                        AssignQueueRecordsForMultipleTenant objAssignToUser = dicMultipleTenantObj.Value as AssignQueueRecordsForMultipleTenant;
                        if (objAssignToUser.IsNotNull())
                        {
                            BALUtils.GetComplianceDataRepoInstance(objAssignToUser.TenantID).AssignItemsToUserNew(objAssignToUser.TenantID, objAssignToUser.QueueXML, objAssignToUser.CurrentLoggedInUserID, objAssignToUser.AssignToUserID, true);
                            BALUtils.GetQueueImagingRepoInstance().UpdateInsertQueueImagingDue(objAssignToUser.TenantID);
                        }
                    }
                }
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Method to Assign Items to user for multiple tenants.
        /// </summary>
        /// <param name="dicMultipleTenantData"></param>
        public static String CheckIfUserAlreadyAssigned(String tenantXML, Int32 AssignToUserID)
        {
            try
            {
                return BALUtils.GetSecurityRepoInstance().CheckIfUserAlreadyAssigned(tenantXML, AssignToUserID);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        #endregion


        public static Boolean UpdatePaymentDueOrders(Int32 orderId, Int32 tenantId, String refrenceNumber, Decimal Amount, String orderStatusCode, Int32 OPD_ID, Int32 currentLoggedInUserID)
        {
            try
            {
                String paymentModeCode = String.Empty;
                String status = String.Empty;
                Int32 orderStatusID = LookupManager.GetLookUpData<Entity.ClientEntity.lkpOrderStatu>(tenantId).FirstOrDefault(cond => cond.Code == orderStatusCode && cond.IsDeleted == false).OrderStatusID;
                Order userOrder = BALUtils.GetComplianceDataRepoInstance(tenantId).GetOrderById(orderId);
                Int32 paymentTypeId = LookupManager.GetLookUpData<Entity.ClientEntity.lkpPaymentOption>(tenantId).Where(payOptns => payOptns.Code == PaymentOptions.OfflineSettlement.GetStringValue() && !payOptns.IsDeleted).FirstOrDefault().PaymentOptionID;

                Boolean isRushOrder = userOrder.IsRushOrderForExistingOrder.HasValue ? userOrder.IsRushOrderForExistingOrder.Value : false;
                #region UAT-916
                List<OrderStatusDataContract> lstOrderStsDC = new List<OrderStatusDataContract>();
                OrderStatusDataContract ordrStsDataContract = new OrderStatusDataContract();
                List<OrderPkgPaymentDetail> listOrderPkgPackages = new List<OrderPkgPaymentDetail>();
                listOrderPkgPackages = GetOrderPkgPaymentDetailByOPDID(tenantId, OPD_ID);
                paymentModeCode = LookupManager.GetLookUpData<Entity.ClientEntity.lkpPaymentOption>(tenantId).Where(payOptns => payOptns.PaymentOptionID == paymentTypeId && !payOptns.IsDeleted).FirstOrDefault().Code;
                if (paymentModeCode.ToLower() == PaymentOptions.Credit_Card.GetStringValue().ToLower() || paymentModeCode.ToLower() == PaymentOptions.Paypal.GetStringValue().ToLower())
                {
                    status = ApplicantOrderStatus.Send_For_Online_Payment.GetStringValue();
                }
                else
                {
                    status = ApplicantOrderStatus.Pending_Payment_Approval.GetStringValue();
                }
                Int32 orderStatusId = ComplianceDataManager.GetOrderStatusList(tenantId).Where(orderSts => orderSts.Code.ToLower() == status.ToLower() && !orderSts.IsDeleted).FirstOrDefault().OrderStatusID;
                ordrStsDataContract.Amount = Amount;
                ordrStsDataContract.PaymentOptionId = paymentTypeId;
                ordrStsDataContract.StatusId = orderStatusId;
                ordrStsDataContract.lstPackages = listOrderPkgPackages;
                lstOrderStsDC.Add(ordrStsDataContract);

                //Set OrderPaymentDetail in userOrder
                OrderPaymentDetail orderPaymentDetail = new OrderPaymentDetail();
                orderPaymentDetail = userOrder.OrderPaymentDetails.FirstOrDefault(cnd => !cnd.OPD_IsDeleted && cnd.OPD_ID == OPD_ID);

                //Set offline paymentOption in case of Payment due.
                if (orderPaymentDetail.IsNotNull())
                {
                    orderPaymentDetail.OPD_PaymentOptionID = paymentTypeId;
                    orderPaymentDetail.OPD_OrderStatusID = orderStatusID;
                    orderPaymentDetail.OPD_Amount = Amount;
                    orderPaymentDetail.OPD_ApprovedBy = currentLoggedInUserID;//UAT-3817
                }

                #endregion

                var _dicInvoiceNumbers = UpdateFailedOrder(tenantId, userOrder, isRushOrder, lstOrderStsDC, orderStatusID, false, refrenceNumber, false, currentLoggedInUserID); //UAT-3817

                if (!_dicInvoiceNumbers.IsNullOrEmpty())
                {
                    if (_dicInvoiceNumbers.ContainsKey("status"))
                    {
                        if (_dicInvoiceNumbers.GetValue("status").IsNotNull() && _dicInvoiceNumbers.GetValue("status") == "true")
                            return true;
                        else
                            return false;
                    }

                    return true;
                }
                return false;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Search the data in vwComplianceItemDataQueue and returns the matched result.
        /// </summary>
        /// <param name="searchItemDataContract">List of fields and their data to be searched.</param>
        /// <returns>ApplicantComplianceItemData</returns>
        public static List<ApplicantSearchDataContract> GetApplicantListDataValues(SearchItemDataContract searchItemDataContract, CustomPagingArgsContract customPagingArgsContract)
        {
            try
            {
                //Dictionary<String, String> searchOptions = GetSearchOptions(searchItemDataContract);
                DataTable result = BALUtils.GetComplianceDataRepoInstance(searchItemDataContract.ClientID).GetApplicantListDataValues(searchItemDataContract, customPagingArgsContract);
                return AssignValuesToDataModel(result);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Search the data in vwComplianceItemDataQueue and returns the matched result.
        /// </summary>
        /// <param name="searchItemDataContract">List of fields and their data to be searched.</param>
        /// <returns>ApplicantComplianceItemData</returns>
        public static List<ItemDataSearchContract> GetItemDataSearchData(SearchItemDataContract searchItemDataContract, CustomPagingArgsContract customPagingArgsContract, String DPMids)//UAT-1055 //Int32? DPMid)
        {
            try
            {
                //Dictionary<String, String> searchOptions = GetSearchOptions(searchItemDataContract);
                DataTable result = BALUtils.GetComplianceDataRepoInstance(searchItemDataContract.ClientID).GetItemDataSearchData(searchItemDataContract, customPagingArgsContract, DPMids);
                return AssignValuesToItemDataModel(result);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        private static List<ApplicantSearchDataContract> AssignValuesToDataModel(DataTable table)
        {
            try
            {
                IEnumerable<DataRow> rows = table.AsEnumerable();
                return rows.Select(x => new ApplicantSearchDataContract
                {
                    ApplicantFirstName = Convert.ToString(x["ApplicantFirstName"]),
                    TenantName = Convert.ToString(x["TenantName"]),
                    OrganizationUserId = Convert.ToInt32(x["OrganizationUserId"]),
                    ApplicantLastName = Convert.ToString(x["ApplicantLastName"]),
                    ApplicantSSN = Convert.ToString(x["ApplicantSSN"]),
                    EmailAddress = Convert.ToString(x["EmailAddress"]),
                    DateOfBirth = Convert.ToDateTime(x["DateOfBirth"]).Date,
                    //ClientID = x["ClientID"].GetType().Name == "DBNull" ? null : (Int32?)x["ClientID"],

                }).ToList();
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        private static List<ItemDataSearchContract> AssignValuesToItemDataModel(DataTable table)
        {
            try
            {
                IEnumerable<DataRow> rows = table.AsEnumerable();
                return rows.Select(x => new ItemDataSearchContract
                {
                    ApplicantName = Convert.ToString(x["ApplicantName"]),
                    FirstName = x["FirstName"] == DBNull.Value ? String.Empty : Convert.ToString(x["FirstName"]), //UAT-3796
                    LastName = x["LastName"] == DBNull.Value ? String.Empty : Convert.ToString(x["LastName"]), //UAT-3796
                    AssignedUserName = Convert.ToString(x["AssignedUserName"]).Trim(),
                    ItemName = Convert.ToString(x["ItemName"]),
                    CategoryName = Convert.ToString(x["CategoryName"]),
                    PackageName = Convert.ToString(x["PackageName"]),
                    CustomAttributes = Convert.ToString(x["CustomAttributes"]),
                    CategoryID = Convert.ToInt32(x["CategoryID"]),
                    PackageID = Convert.ToInt32(x["PackageID"]), //UAT-4136
                    SubmissionDate = x["SubmissionDate"].GetType().Name == "DBNull" ? null : ((DateTime?)(x["SubmissionDate"])),
                    SystemStatus = Convert.ToString(x["SystemStatus"]),
                    PackageSubscriptionID = Convert.ToInt32(x["PackageSubscriptionID"]),
                    VerificationStatus = x["VerificationStatus"].GetType().Name == "DBNull" ? "Incomplete" : Convert.ToString(x["VerificationStatus"]),
                    ApplicantComplianceItemID = x["ApplicantComplianceItemID"].GetType().Name == "DBNull" ? 0 : Convert.ToInt32(x["ApplicantComplianceItemID"]),
                    ApplicantId = Convert.ToInt32(x["ApplicantId"]),
                    UserGroups = x["UserGroups"] == DBNull.Value ? String.Empty : Convert.ToString(x["UserGroups"])
                    //ClientID = x["ClientID"].GetType().Name == "DBNull" ? null : (Int32?)x["ClientID"],

                }).ToList();
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        #region UAT-775: Creation of Service Form reminder and notification emails.

        /// <summary>
        /// To Get Is Service Form Diaptched Noification Enabled.
        /// </summary>
        /// <param name="tenantId"></param>
        /// <param name="code"></param>
        /// <returns>True/False</returns>
        public static Boolean GetIsSvcFrmDisNotification(Int32 tenantId, String code)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetSvcFrmDisNotification(tenantId, code);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// To Get Service Form Dispatched Notification Data 
        /// </summary>
        /// <param name="tenantID"></param>
        /// <param name="chunkSize"></param>
        /// <returns>List of SvcFrmDisNotificationContract</returns>
        public static List<SvcFrmDisNotificationContract> GetServiceFormDispatchedNotificationData(Int32 tenantID, Int32 chunkSize)
        {
            try
            {
                return AssignValuesToSvcFrmDisNotification(BALUtils.GetComplianceDataRepoInstance(tenantID).GetServiceFormDispatchedNotificationData(chunkSize));
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Assign the datatable record in SvcFrmDisNotificationContract 
        /// </summary>
        /// <param name="table">table</param>
        /// <returns>List of SvcFrmDisNotificationContract</returns>
        private static List<SvcFrmDisNotificationContract> AssignValuesToSvcFrmDisNotification(DataTable table)
        {
            try
            {
                List<SvcFrmDisNotificationContract> lstSvcFrmDisNotification = new List<SvcFrmDisNotificationContract>();
                IEnumerable<DataRow> rows = table.AsEnumerable();
                if (rows.Count() > 0)
                {
                    lstSvcFrmDisNotification = rows.Select(x => new SvcFrmDisNotificationContract
                    {
                        OrderID = x["OrderID"].GetType().Name != "DBNull" ? Convert.ToInt32(x["OrderID"]) : 0,
                        HierarchyNodeID = x["HierarchyNodeID"].GetType().Name != "DBNull" ? Convert.ToInt32(x["HierarchyNodeID"]) : 0,
                        BkgOrderID = x["BkgOrderID"].GetType().Name != "DBNull" ? Convert.ToInt32(x["BkgOrderID"]) : 0,
                        OrganizationUserID = x["OrganizationUserID"].GetType().Name != "DBNull" ? Convert.ToInt32(x["OrganizationUserID"]) : 0,
                        FirstName = x["FirstName"].GetType().Name != "DBNull" ? Convert.ToString(x["FirstName"]) : String.Empty,
                        LastName = x["LastName"].GetType().Name != "DBNull" ? Convert.ToString(x["LastName"]) : String.Empty,
                        PrimaryEmailAddress = x["PrimaryEmailAddress"].GetType().Name != "DBNull" ? Convert.ToString(x["PrimaryEmailAddress"]) : String.Empty,
                        OrderDate = x["OrderDate"].GetType().Name != "DBNull" ? Convert.ToDateTime(x["OrderDate"]) : DateTime.MinValue,
                        BackgroundServiceName = x["BackgroundServiceName"].GetType().Name != "DBNull" ? Convert.ToString(x["BackgroundServiceName"]) : String.Empty,
                        ServiceFormName = x["ServiceFormName"].GetType().Name != "DBNull" ? Convert.ToString(x["ServiceFormName"]) : String.Empty,
                        DispatchedDate = x["DispatchedDate"].GetType().Name != "DBNull" ? Convert.ToDateTime(x["DispatchedDate"]) : DateTime.MinValue,
                        PackageName = x["PackageName"].GetType().Name != "DBNull" ? Convert.ToString(x["PackageName"]) : String.Empty,
                        NodeHierarchy = x["NodeHierarchy"].GetType().Name != "DBNull" ? Convert.ToString(x["NodeHierarchy"]) : String.Empty,
                        OrderServiceFormID = x["OrderServiceFormID"].GetType().Name != "DBNull" ? Convert.ToInt32(x["OrderServiceFormID"]) : 0,
                        ServiceFormID = x["ServiceFormID"].GetType().Name != "DBNull" ? Convert.ToInt32(x["ServiceFormID"]) : 0,
                        ServiceGroupName = x["ServiceGroupName"].GetType().Name != "DBNull" ? Convert.ToString(x["ServiceGroupName"]) : String.Empty,
                        OrderStatus = x["OrderStatus"].GetType().Name != "DBNull" ? Convert.ToString(x["OrderStatus"]) : String.Empty,
                        IsManual = x["IsManual"].GetType().Name != "DBNull" ? Convert.ToBoolean(x["IsManual"]) : false,
                        OrderNumber = x["OrderNumber"].GetType().Name != "DBNull" ? Convert.ToString(x["OrderNumber"]) : String.Empty,

                        //UAT-2446:Include service form attachment on service form reminder emails
                        SystemDocumentID = x["SystemDocumentID"].GetType().Name != "DBNull" ? Convert.ToInt32(x["SystemDocumentID"]) : 0,
                        DocumentName = x["DocumentName"].GetType().Name != "DBNull" ? Convert.ToString(x["DocumentName"]) : String.Empty,
                        DocumentPath = x["DocumentPath"].GetType().Name != "DBNull" ? Convert.ToString(x["DocumentPath"]) : String.Empty,
                        RefrenceID = x["RefrenceID"].GetType().Name != "DBNull" ? (Guid)(x["RefrenceID"]) : Guid.Empty,
                        DocumentSize = x["DocumentSize"].GetType().Name != "DBNull" ? Convert.ToInt32(x["DocumentSize"]) : 0,

                    }).ToList();
                }
                return lstSvcFrmDisNotification;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        #endregion

        public static Entity.AuthNetCustomerProfile GetCustomerProfile(Guid userId, int tenantID)
        {
            try
            {
                return BALUtils.GetSecurityRepoInstance().GetCustomerProfile(userId, SecurityManager.DefaultTenantID, tenantID);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static long CreateNewAuthNetCustomerProfile(Entity.AuthNetCustomerProfile authNetCustomerProfile, int tenantID)
        {
            try
            {
                var paymentIntgSettingClientMappingList = SecurityManager.GetPaymentIntegrationSettingsClientMappings().ToList();
                Int32 _paymentIntegrationSettingID = 0;
                if (paymentIntgSettingClientMappingList.Any(cond => cond.IsDeleted == false && cond.TenantID == tenantID))
                {
                    _paymentIntegrationSettingID = paymentIntgSettingClientMappingList.Where(cond => cond.IsDeleted == false && cond.TenantID == tenantID).FirstOrDefault().PaymentIntegrationSettingID;
                }
                else
                {
                    _paymentIntegrationSettingID = paymentIntgSettingClientMappingList.Where(cond => cond.IsDeleted == false && cond.TenantID == SecurityManager.DefaultTenantID)
                                                                                      .FirstOrDefault().PaymentIntegrationSettingID;
                }

                authNetCustomerProfile.PaymentIntegrationSettingID = _paymentIntegrationSettingID;
                return BALUtils.GetSecurityRepoInstance().CreateNewAuthNetCustomerProfile(authNetCustomerProfile);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        #region UAT-573 WB: Automatic renewal for Invoice clients

        public static List<Order> GetInvoiceOrdersForAutoRenew(Int32 tenantId)
        {
            try
            {
                short archieveStateID = LookupManager.GetLookUpData<lkpArchiveState>(tenantId).FirstOrDefault(cond => cond.AS_Code == ArchiveState.Archived.GetStringValue()).AS_ID;
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetInvoiceOrdersForAutoRenew(archieveStateID);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }

        }

        public static List<ScheduledTask> GetScheduledTasksForAutoRenewExpiredInvoiceSubscription(Int32 tenantID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).GetScheduledTasksForAutoRenewExpiredInvoiceSubscription();
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static Dictionary<String, String> AutoSubmitOrder(Int32 tenantId, Int32 orderId, Boolean isBillingInfoSameAsAccountInfo = false)
        {
            #region Variables

            var generatedInvoiceNumber = new Dictionary<String, String>();
            String _paymentModeCode = String.Empty;
            Boolean _isUpdateMainProfile = false;
            Int32 _prgPackageSubscriptionId = 0;
            Int32 _tenantId = tenantId;
            String _errorMessage = String.Empty;
            String _redirectUrlType = String.Empty;

            #endregion

            //ApplicantOrderCart applicantOrderCart = SysXWebSiteUtils.SessionService.GetCustomData(ResourceConst.APPLICANT_ORDER_CART) as ApplicantOrderCart;
            Int32 parentOrderId = BALUtils.GetComplianceDataRepoInstance(tenantId).GetParentOrderByOrderId(orderId);
            Order parentOrder = BALUtils.GetComplianceDataRepoInstance(tenantId).GetOrderById(parentOrderId);
            Order prevOrder = BALUtils.GetComplianceDataRepoInstance(tenantId).GetOrderById(orderId);
            if (prevOrder.IsNullOrEmpty())
                return null;

            try
            {
                //Entity.ClientEntity.OrganizationUserProfile _orgUserProfile = prevOrder.OrganizationUserProfile;
                Entity.ClientEntity.OrganizationUserProfile _orgUserProfile = new Entity.ClientEntity.OrganizationUserProfile();
                _orgUserProfile.FirstName = prevOrder.OrganizationUserProfile.FirstName;
                _orgUserProfile.LastName = prevOrder.OrganizationUserProfile.LastName;
                _orgUserProfile.MiddleName = prevOrder.OrganizationUserProfile.MiddleName;
                _orgUserProfile.Gender = prevOrder.OrganizationUserProfile.Gender;
                _orgUserProfile.DOB = prevOrder.OrganizationUserProfile.DOB;
                //
                _orgUserProfile.PrimaryEmailAddress = prevOrder.OrganizationUserProfile.PrimaryEmailAddress;
                _orgUserProfile.SecondaryEmailAddress = prevOrder.OrganizationUserProfile.SecondaryEmailAddress;
                _orgUserProfile.SecondaryPhone = prevOrder.OrganizationUserProfile.SecondaryPhone;
                //_orgUserProfile.SSN = prevOrder.OrganizationUserProfile.SSN;
                _orgUserProfile.SSN = (prevOrder.OrganizationUserProfile.SSN.IsNullOrEmpty() ? String.Empty
                                                             : (prevOrder.OrganizationUserProfile.SSN.All(Char.IsDigit)
                                                             ? prevOrder.OrganizationUserProfile.SSN
                                                             : ComplianceSetupManager.GetFormattedString(prevOrder.OrganizationUserProfile.OrganizationUserProfileID, true
                                                                                                          , _tenantId)));
                _orgUserProfile.PhoneNumber = prevOrder.OrganizationUserProfile.PhoneNumber;
                _orgUserProfile.OrganizationUserID = prevOrder.OrganizationUserProfile.OrganizationUserID;
                Guid AddressHandleId = Guid.NewGuid();
                _orgUserProfile.AddressHandleID = AddressHandleId;
                _orgUserProfile.IsActive = true;

                _orgUserProfile.AddressHandle = new AddressHandle
                {
                    AddressHandleID = (AddressHandleId == null ? Guid.NewGuid() : AddressHandleId)
                };


                _orgUserProfile.AddressHandle.Addresses = new System.Data.Entity.Core.Objects.DataClasses.EntityCollection<Address>();
                _orgUserProfile.AddressHandle.Addresses.Add(new Address
                {
                    AddressHandleID = AddressHandleId,
                    Address1 = prevOrder.OrganizationUserProfile.AddressHandle.Addresses.FirstOrDefault().Address1,
                    Address2 = prevOrder.OrganizationUserProfile.AddressHandle.Addresses.FirstOrDefault().Address2,
                    ZipCodeID = prevOrder.OrganizationUserProfile.AddressHandle.Addresses.FirstOrDefault().ZipCodeID
                });


                _prgPackageSubscriptionId = prevOrder.DeptProgramPackage.DeptProgramPackageSubscriptions.FirstOrDefault().DPPS_ID;



                #region Set Order object, based on OrderRequestType

                Order _order = new Order();

                //Create new Order PaymentDetail.
                _order.OrderPaymentDetails = new System.Data.Entity.Core.Objects.DataClasses.EntityCollection<OrderPaymentDetail>();
                String _CompPkgTypeCode = OrderPackageTypes.COMPLIANCE_PACKAGE.GetStringValue();
                List<OrderPaymentDetail> _lstPrevOrderPaymentDetail = new List<OrderPaymentDetail>();
                _lstPrevOrderPaymentDetail = prevOrder.OrderPaymentDetails.Where(cnd => cnd.OrderPkgPaymentDetails.Any(x => x.OPPD_IsDeleted == false && x.lkpOrderPackageType.OPT_Code == _CompPkgTypeCode)).ToList();

                //_order.PaymentOptionID = prevOrder.PaymentOptionID;
                _order.OrderMachineIP = prevOrder.OrderMachineIP;
                //_order.TotalPrice = Convert.ToDecimal(prevOrder.TotalPrice);
                _order.ProgramDuration = prevOrder.ProgramDuration;
                _order.OrderRequestTypeID = ComplianceDataManager.GetLKPOrderRequestType(OrderRequestType.RenewalOrder.GetStringValue(), _tenantId).ORT_ID;
                _order.PreviousOrderID = prevOrder.OrderID;
                _order.SubscriptionLabel = parentOrder.SubscriptionLabel;
                Int32 subscriptionDuration = (parentOrder.SubscriptionYear.HasValue ? (parentOrder.SubscriptionYear.Value * 12) : 0)
                    + (parentOrder.SubscriptionMonth.HasValue ? parentOrder.SubscriptionMonth.Value : 0);

                //_order.SubscriptionYear = prevOrder.SubscriptionYear;
                _order.SubscriptionMonth = subscriptionDuration;
                _order.OriginalSettlementPrice = prevOrder.OriginalSettlementPrice;
                _order.HierarchyNodeID = prevOrder.HierarchyNodeID;
                // DeptProgramPackage currentDPP = GetDeptProgramPackageById(parentOrder.DeptProgramPackage.DPP_ID, tenantId);

                Guid subscriptionOptionCode = new Guid(SubscriptionOptions.CustomMonthly.GetStringValue());
                //List<DeptProgramPackageSubscription> deptProgramPackageSubscriptions = currentDPP.DeptProgramPackageSubscriptions.
                //    Where(cond => cond.SubscriptionOption.IsSystem == false && cond.SubscriptionOption.Code != subscriptionOptionCode &&
                //        cond.DPPS_TotalPrice != null && !cond.DPPS_IsDeleted && cond.DPPS_TotalPrice > 0).ToList();
                DeptProgramPackageSubscription deptProgramPackageSubscription = null;
                //deptProgramPackageSubscription =parentOrder.DeptProgramPackage.DeptProgramPackageSubscriptions.FirstOrDefault(cond => cond.DPPS_IsDeleted == false 
                //   &&  cond.SubscriptionOption.Label==parentOrder.SubscriptionLabel);
                //in case label is changed we will compare duration.

                deptProgramPackageSubscription = parentOrder.DeptProgramPackage.DeptProgramPackageSubscriptions.FirstOrDefault(x =>
                {
                    //if ((x.SubscriptionOption.Year.IsNullOrEmpty() ? x.SubscriptionOption.Month : (x.SubscriptionOption.Year * 12)) == subscriptionDuration)
                    if (((x.SubscriptionOption.Year.HasValue ? (x.SubscriptionOption.Year.Value * 12) : 0)
                    + (x.SubscriptionOption.Month.HasValue ? x.SubscriptionOption.Month.Value : 0)) == subscriptionDuration)
                        return true;
                    else
                        return false;
                });
                Decimal? TotalPrice = null, RushOrderPrice = null;
                if (deptProgramPackageSubscription == null)
                {
                    Exception ex = new Exception();
                    String errMsg = "No matching suscription option found for renewal of Order:{0}" + orderId;
                    BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + errMsg + Environment.NewLine + ex.StackTrace, ex);
                    return generatedInvoiceNumber;
                }

                if (deptProgramPackageSubscription != null)
                {
                    //Decimal? TotalPrice=orderDetail.DeptProgramPackage.DeptProgramPackageSubscriptions.Where(cond => cond.SubscriptionOption.Code == subscriptionOptionCode && cond.SubscriptionOption.IsSystem && !cond.DPPS_IsDeleted).Select(x => x.DPPS_TotalPrice).FirstOrDefault();
                    TotalPrice = deptProgramPackageSubscription.DPPS_TotalPrice == null ? 0 : deptProgramPackageSubscription.DPPS_TotalPrice.Value;
                    RushOrderPrice = deptProgramPackageSubscription.DPPS_RushOrderAdditionalPrice == null ? 0 : deptProgramPackageSubscription.DPPS_RushOrderAdditionalPrice.Value;

                }

                //if (prevOrder.RushOrderStatusID.HasValue && prevOrder.RushOrderPrice.HasValue)
                //{
                //    _order.RushOrderPrice = RushOrderPrice.HasValue ? RushOrderPrice.Value : Convert.ToDecimal(prevOrder.RushOrderPrice.Value);
                //    _order.TotalPrice = TotalPrice.HasValue ? TotalPrice.Value : Convert.ToDecimal(prevOrder.TotalPrice.Value);
                //    _order.IsRushOrderForExistingOrder = true;

                //    //UAT 264
                //    Decimal _netPrice = (TotalPrice.HasValue ? TotalPrice.Value : Convert.ToDecimal(prevOrder.TotalPrice.Value) - Convert.ToDecimal(prevOrder.OriginalSettlementPrice.Value))
                //                    + (RushOrderPrice.HasValue ? RushOrderPrice.Value : Convert.ToDecimal(prevOrder.RushOrderPrice.Value));
                //    _order.GrandTotal = _netPrice <= 0 ? 0 : _netPrice;  // +GetBackgroundPackagesPrice(applicantOrderCart);
                //}
                //else
                //{

                _order.TotalPrice = TotalPrice.HasValue ? TotalPrice.Value : Convert.ToDecimal(prevOrder.TotalPrice.Value);
                Decimal _netPrice = (TotalPrice.HasValue ? TotalPrice.Value : Convert.ToDecimal(prevOrder.TotalPrice.Value) - Convert.ToDecimal(prevOrder.OriginalSettlementPrice.Value));
                _order.GrandTotal = _netPrice <= 0 ? 0 : _netPrice; //+ GetBackgroundPackagesPrice(applicantOrderCart);
                //}

                #endregion

                //if (applicantOrderCart.lstApplicantOrder.IsNotNull() && applicantOrderCart.lstApplicantOrder[0].OrderId == AppConsts.NONE)
                //{
                Int32 _orderId = 0;

                #region Set OrderPackageType, based on the Packages selected

                List<lkpOrderPackageType> _lstOrderPackageType = LookupManager.GetLookUpData<lkpOrderPackageType>(tenantId);

                _order.OrderPackageType = _lstOrderPackageType.Where(opt => opt.OPT_Code == OrderPackageTypes.COMPLIANCE_PACKAGE.GetStringValue()).FirstOrDefault().OPT_ID;

                #endregion

                #region Set Data in Contract class & Save in database

                //Get list of grouped data of orderpayment detail and packages
                List<PkgPaymentGrouping> _lstGroupedData = new List<PkgPaymentGrouping>();

                _lstGroupedData = GetPkgPaymentGroupingData(_lstPrevOrderPaymentDetail, prevOrder, tenantId);

                _orgUserProfile.OrganizationUserID = prevOrder.OrganizationUserProfile.OrganizationUserID;

                ApplicantOrderDataContract _applicantOrderDataContract = new ApplicantOrderDataContract
                {
                    OrganizationUserProfile = _orgUserProfile,
                    ProgramPackageSubscriptionId = _prgPackageSubscriptionId,
                    ////SelectedPaymentModeId = prevOrder.PaymentOptionID.Value, --uat 916
                    TenantId = _tenantId,
                    lstAttributeValues = null,
                    //Set last node DPMId with previous order selected node id if selected node id is not null [UAT-1067]
                    LastNodeDPMId = prevOrder.SelectedNodeID.HasValue ? prevOrder.SelectedNodeID.Value : Convert.ToInt32(prevOrder.DeptProgramMapping.DPM_ID),
                    lstBackgroundPackages = null,//applicantOrderCart.lstApplicantOrder[0].lstPackages,
                    lstPricingData = null,//_lstPricingData,
                    IsSendBackgroundReport = false,//applicantOrderCart.lstApplicantOrder[0].IsSendBackgroundReport,
                    //Set Is Complance Package Selected
                    IsCompliancePackageSelected = true,//applicantOrderCart.IsCompliancePackageSelected
                    //set orderpackagetype list to the applicantOrderDataCard
                    lstOrderPackageTypes = _lstOrderPackageType,
                    //Set order payment detail and package detail 
                    lstGroupedData = _lstGroupedData
                };

                List<Entity.ResidentialHistory> tempResidentialAddress = SecurityManager.GetUserResidentialHistories(prevOrder.OrganizationUserProfile.OrganizationUserID).Where(cond => cond.RHI_IsCurrentAddress != true).ToList();
                List<PreviousAddressContract> tempList = tempResidentialAddress.Where(cond => cond.Address.ZipCodeID > 0).Select(x => new PreviousAddressContract
                {
                    ID = x.RHI_ID,
                    Address1 = x.Address.Address1,
                    Address2 = x.Address.Address2,
                    ZipCodeID = x.Address.ZipCodeID,
                    ResidenceStartDate = x.RHI_ResidenceStartDate,
                    ResidenceEndDate = x.RHI_ResidenceEndDate,
                    isNew = false,
                    isDeleted = false,
                    isUpdated = false,
                    CityName = x.Address.ZipCode.City.CityName,

                    StateName = x.Address.ZipCode.County.State.StateName,
                    Country = x.Address.ZipCode.County.State.Country.FullName,
                    CountryId = x.Address.ZipCode.County.State.CountryID.Value,
                    Zipcode = x.Address.ZipCode.ZipCode1,
                    CountyName = x.Address.ZipCode.County.CountyName,
                    ResHistorySeqOrdID = x.RHI_SequenceOrder.IsNotNull() ? x.RHI_SequenceOrder.Value : AppConsts.NONE
                }).ToList();

                tempList.AddRange(tempResidentialAddress.Where(cond => cond.Address.ZipCodeID == 0).Select(x => new PreviousAddressContract
                {
                    ID = x.RHI_ID,
                    Address1 = x.Address.Address1,
                    Address2 = x.Address.Address2,
                    ZipCodeID = x.Address.ZipCodeID,
                    ResidenceStartDate = x.RHI_ResidenceStartDate,
                    ResidenceEndDate = x.RHI_ResidenceEndDate,
                    isNew = false,
                    isDeleted = false,
                    isUpdated = false,
                    CityName = x.Address.AddressExts.FirstOrDefault().AE_CityName,
                    StateName = x.Address.AddressExts.FirstOrDefault().AE_StateName,
                    Country = x.Address.AddressExts.FirstOrDefault().Country.FullName,
                    Zipcode = x.Address.AddressExts.FirstOrDefault().AE_ZipCode,
                    CountryId = x.Address.AddressExts.FirstOrDefault().Country.CountryID,
                    ResHistorySeqOrdID = x.RHI_SequenceOrder.IsNotNull() ? x.RHI_SequenceOrder.Value : AppConsts.NONE
                }).ToList());

                //if (!applicantOrderCart.lstApplicantOrder[0].lstBackgroundOrderData.IsNullOrEmpty())
                //    _applicantOrderDataContract.lstBkgOrderData = applicantOrderCart.lstApplicantOrder[0].lstBackgroundOrderData;

                generatedInvoiceNumber = ComplianceDataManager.SubmitApplicantOrder(_order, _applicantOrderDataContract, _isUpdateMainProfile,
                      tempList, new List<PersonAliasContract>(), out _paymentModeCode, out _orderId, prevOrder.CreatedByID);

                #endregion


                //Will have to change if multiple orders at a time
                //applicantOrderCart.lstApplicantOrder[0].OrderId = _orderId;
                //}

                //applicantOrderCart.InvoiceNumber = generatedInvoiceNumber;

                #region Notification Logic for Email & Message
                // SendNotifications(_paymentModeCode, _tenantId, _errorMessage, _orgUserProfile, _order);
                /*UAt-916
                 * if (_errorMessage.IsNullOrEmpty() && _paymentModeCode.Equals(PaymentOptions.InvoiceWithApproval.GetStringValue(), StringComparison.OrdinalIgnoreCase))*/
                //remove check of _paymentModeCode with generateInvoiceNumber dictionary data key.[UAT-916]
                foreach (var paymentMode in generatedInvoiceNumber)
                {
                    if (_errorMessage.IsNullOrEmpty() && paymentMode.Key.Equals(PaymentOptions.InvoiceWithApproval.GetStringValue(), StringComparison.OrdinalIgnoreCase))
                    {
                        CommunicationManager.SendOrderCreationMailInvoice(_order, _orgUserProfile, _tenantId, paymentMode.Key);
                        CommunicationManager.SendOrderCreationMessageInvoice(_order, _orgUserProfile, _tenantId, paymentMode.Key);
                    }
                }
                #endregion
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);

            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
            }
            return generatedInvoiceNumber;
        }


        #endregion

        public static Boolean GetSSNSetting(Int32 tenantId, String code)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetSSNSetting(tenantId, code);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        #region UAT-845 Creation of admin override function (verification details).
        /// <summary>
        /// To Override category status.
        /// </summary>
        /// <param name="ItemDataId"></param>
        /// <param name="currentStatusId"></param>
        /// <param name="currentLoggedInUserId"></param>
        /// <returns></returns>
        public static Boolean UpdateCategoryOverrideData(Int32 selectedTenantId, Int32 categoryDataId, DateTime? expirationDate, Int32 catStatusId, Int16? catExceptionStatusId, Int32 currentLoggedInUserId, Int32 complianceCatId, Int32 packageSubscriptionId, String CategoryOverrideNotes)
        {
            try
            {
                Boolean UpdatedRecordResult = BALUtils.GetComplianceDataRepoInstance(selectedTenantId).UpdateCategoryOverrideData(categoryDataId, expirationDate, catStatusId, catExceptionStatusId, currentLoggedInUserId, complianceCatId, packageSubscriptionId, CategoryOverrideNotes);
                BALUtils.GetComplianceDataRepoInstance(selectedTenantId).RemvPndgItmExpRequestAftrCatApproval(categoryDataId, currentLoggedInUserId);
                return UpdatedRecordResult;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }

        }
        #endregion



        #region UAT-796
        public static String ResetAutoRenewalStatus(Int32 tenantID, Int32 orderID, Int32 currentUserID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).ResetAutoRenewalStatus(orderID, currentUserID);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        #endregion



        #region UAT 697 DASHBOARD REDISIGN
        public static List<PackageSubscription> GetSubscribedPackagesForUser(int tenantID, int userID)
        {
            try
            {
                String OrderCancelledCode = ApplicantOrderStatus.Cancelled.GetStringValue();
                String PartialCancelBkgPkgCode = PartialOrderCancellationType.BACKGROUND_PACKAGE.GetStringValue();

                int OrderCancelled = LookupManager.GetLookUpData<Entity.ClientEntity.lkpOrderStatu>(tenantID).FirstOrDefault(cond => cond.Code == OrderCancelledCode).OrderStatusID;
                int PartialOrderCancelStatus = LookupManager.GetLookUpData<Entity.ClientEntity.lkpPartialOrderCancellationType>(tenantID).FirstOrDefault(cond => cond.Code == PartialCancelBkgPkgCode).PartialOrderCancellationTypeID;

                return BALUtils.GetComplianceDataRepoInstance(tenantID).GetSubscribedPackagesForUser(tenantID, userID, OrderCancelled, PartialOrderCancelStatus);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        #endregion

        //UAT-4067
        public static List<PackageSubscription> GetSelectedNodeIDByOrderID(int tenantID, int userID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).GetSelectedNodeIDByOrderID(tenantID, userID);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        //UAT-4067
        public static List<PackageSubscription> GetSelectedNodeIDBySubscriptionID(Int32 selectedtenantID, Int32 packageSubscriptionID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(selectedtenantID).GetSelectedNodeIDBySubscriptionID(selectedtenantID, packageSubscriptionID);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }


        public static NotificationDelivery GetExistingNotificationDeliveryForToday(Int32 tenantId, Int32 orgUserId, Int32 entityId, Int32 subEventId, String entitySetName)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetExistingNotificationDeliveryForToday(orgUserId, entityId, subEventId, entitySetName);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static List<ScheduleTaskContract> GetScheduleTasksToProcess(Int32 tenantID, String taskTypeCode, Int32 chunkSize = 0)
        {
            try
            {
                IEnumerable<DataRow> rows = BALUtils.GetComplianceDataRepoInstance(tenantID).GetScheduleTasksToProcess(taskTypeCode, chunkSize).AsEnumerable();
                return rows.Select(col => new ScheduleTaskContract
                {
                    ScheduleTaskID = col["ScheduleTaskID"] == DBNull.Value ? -1 : Convert.ToInt32(col["ScheduleTaskID"]),
                    TaskStatusID = col["TaskStatusID"] == DBNull.Value ? -1 : Convert.ToInt32(col["TaskStatusID"]),
                    TaskTypeID = col["TaskTypeID"] == DBNull.Value ? -1 : Convert.ToInt32(col["TaskTypeID"]),
                    RecordID = col["RecordID"] == DBNull.Value ? -1 : Convert.ToInt32(col["RecordID"]),
                    TaskXMLParameters = col["TaskXMLParameters"] == DBNull.Value ? String.Empty : Convert.ToString(col["TaskXMLParameters"]),
                    TaskTypeCode = col["TaskTypeCode"] == DBNull.Value ? String.Empty : Convert.ToString(col["TaskTypeCode"]),
                    IsRecurring = col["IsRecurring"] == DBNull.Value ? false : Convert.ToBoolean(col["IsRecurring"]),
                    TaskGroup = col["TaskGroup"] == DBNull.Value ? String.Empty : Convert.ToString(col["TaskGroup"]),
                    StatusTypeCode = col["StatusTypeCode"] == DBNull.Value ? String.Empty : Convert.ToString(col["StatusTypeCode"]),
                    IsApprovalEmailSent = col["IsApprovalEmailSent"] == DBNull.Value ? false : Convert.ToBoolean(col["IsApprovalEmailSent"])
                }).ToList();
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static Boolean UpdateBackgroundServiceExecutionHistory(Int32 tenantId, BackgroundServiceExecutionHistory backgroundServiceExecutionHistory, Int32 serviceExecutionHistoryId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).UpdateBackgroundServiceExecutionHistory(backgroundServiceExecutionHistory, serviceExecutionHistoryId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        #region UAT-749:WB: Addition of "User Groups" to left panel of Verification Details screen
        public static List<Entity.ClientEntity.UserGroup> GetUserGroupsForUser(Int32 tenantId, Int32 organizationUserId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetUserGroupsForUser(organizationUserId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        #endregion

        #region Sales Force

        /// <summary>
        /// Retrieves App Configuration on basis of Key
        /// </summary>
        /// <returns>
        /// </returns>
        public static Entity.ClientEntity.AppConfiguration GetAppConfiguration(String key, Int32 tenantId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetAppConfiguration(key);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        #endregion

        #region Compliance Document Search [UAT-846:WB: As a client admin, I should be able to pull specific compliance documents for a group of students.]
        public static List<ComplianceDocumentSearchContract> GetComplianceDocumentSearch(Int32 tenantId, SearchItemDataContract searchDataContract, CustomPagingArgsContract gridCustomPaging)
        {
            try
            {
                DataTable tempDataTable = BALUtils.GetComplianceDataRepoInstance(tenantId).GetComplianceDocumentSearch(searchDataContract, gridCustomPaging);
                return GetComplianceDocumentSearchData(tempDataTable);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static List<ComplianceDocumentSearchContract> GetComplianceDocumentSearchData(DataTable dataTable)
        {
            try
            {
                List<ComplianceDocumentSearchContract> lstComplianceDocument = new List<ComplianceDocumentSearchContract>();
                IEnumerable<DataRow> rows = dataTable.AsEnumerable();
                lstComplianceDocument = rows.Select(col =>
                      new ComplianceDocumentSearchContract
                      {
                          ApplicantDocumentID = Convert.ToInt32(col["ApplicantDocumentID"]),
                          ApplicantName = col["ApplicantName"] == DBNull.Value ? String.Empty : Convert.ToString(col["ApplicantName"]),
                          ItemName = col["ItemName"] == DBNull.Value ? String.Empty : Convert.ToString(col["ItemName"]),
                          FileName = col["DocumentName"] == DBNull.Value ? String.Empty : Convert.ToString(col["DocumentName"]),
                          ApplicantID = Convert.ToInt32(col["ApplicantId"]),
                          ID = Convert.ToInt32(col["ID"]),
                          DocumentPath = col["DocumentPath"] == DBNull.Value ? String.Empty : Convert.ToString(col["DocumentPath"]),
                          TotalCount = col["TotalCount"] == DBNull.Value ? 0 : Convert.ToInt32(col["TotalCount"]),
                          //UAT-3725
                          SubmissionDate = col["SubmissionDate"].GetType().Name == "DBNull" ? null : (DateTime?)col["SubmissionDate"]
                      }).ToList();
                return lstComplianceDocument;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        #endregion

        #region UAT-968:As an ADB admin, I should be able to create/view/edit "notes" in a student's profile search details.
        public static List<ApplicantProfileNotesContract> GetApplicantProfileNotesList(Int32 tenantId, Int32 organizationUserID, Boolean IsClientAdmin) //IsClientAdmin- UAT-5052
        {
            try
            {
                DataTable tempDataTable = BALUtils.GetComplianceDataRepoInstance(tenantId).GetApplicantProfileNotesList(organizationUserID, IsClientAdmin); //IsClientAdmin- UAT-5052
                IEnumerable<DataRow> rows = tempDataTable.AsEnumerable();
                return rows.Select(x => new ApplicantProfileNotesContract
                {
                    APN_ID = x["APN_ID"].GetType().Name == "DBNull" ? 0 : Convert.ToInt32(x["APN_ID"]),
                    APN_CreatedBy = x["APN_CreatedBy"].GetType().Name == "DBNull" ? 0 : Convert.ToInt32(x["APN_CreatedBy"]),
                    APN_CreatedOn = x["APN_CreatedOn"].GetType().Name == "DBNull" ? DateTime.MinValue : Convert.ToDateTime(x["APN_CreatedOn"]),
                    APN_ModifiedOn = x["APN_ModifiedOn"].GetType().Name == "DBNull" ? null : (DateTime?)x["APN_ModifiedOn"],
                    APN_ModifiedBy = x["APN_ModifiedBy"].GetType().Name == "DBNull" ? null : (Int32?)x["APN_ModifiedBy"],
                    APN_ProfileNote = x["APN_ProfileNotes"].GetType().Name == "DBNull" ? String.Empty : Convert.ToString(x["APN_ProfileNotes"]),
                    CreatedBy = x["CreatedBy"].GetType().Name == "DBNull" ? String.Empty : Convert.ToString(x["CreatedBy"]),
                    APN_OrganizationUserID = x["APN_OrganizationUserID"].GetType().Name == "DBNull" ? 0 : Convert.ToInt32(x["APN_OrganizationUserID"]),
                    APN_IsDeleted = x["APN_IsDeleted"].GetType().Name == "DBNull" ? false : Convert.ToBoolean(x["APN_IsDeleted"]),
                    //Start UAT-5052
                    APN_IsVisibleToClientAdmin = x["APN_IsVisibleToClientAdmin"].GetType().Name == "DBNull" ? false : Convert.ToBoolean(x["APN_IsVisibleToClientAdmin"])
                    //End UAT-5052
                }).ToList();
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }


        //UAT-4067
        public static List<lkpFileExtension> GetAllowedFileExtensionsByNodeIDs(Int32 tenantId, String selectedNodeIDs)
        {
            try
            {
                DataTable tempDataTable = BALUtils.GetComplianceDataRepoInstance(tenantId).GetAllowedFileExtensionsByNodeIDs(selectedNodeIDs);
                IEnumerable<DataRow> rows = tempDataTable.AsEnumerable();
                //return rows.Select(x => new lkpFileExtension
                //{
                //    FileExtensionID = x["FileExtensionID"].GetType().Name == "DBNull" ? 0 : Convert.ToInt32(x["FileExtensionID"]),
                //    Name = x["Name"].GetType().Name == "DBNull" ? String.Empty : Convert.ToString(x["Name"]),
                //    Code = x["Code"].GetType().Name == "DBNull" ? String.Empty : Convert.ToString(x["Code"]),
                //}).ToList();

                List<lkpFileExtension> lkpFileExtensions = new List<lkpFileExtension>();
                lkpFileExtensions =
                rows.Select(x => new lkpFileExtension
                {
                    FileExtensionID = x["FileExtensionID"].GetType().Name == "DBNull" ? 0 : Convert.ToInt32(x["FileExtensionID"]),
                    Name = x["Name"].GetType().Name == "DBNull" ? String.Empty : Convert.ToString(x["Name"]),
                    Code = x["Code"].GetType().Name == "DBNull" ? String.Empty : Convert.ToString(x["Code"]),
                }).ToList();

                lkpFileExtensions.AddRange(lkpFileExtensions.Select(x =>
                   new lkpFileExtension
                   {
                       FileExtensionID = x.FileExtensionID,
                       Name = x.Name.ToLower(),
                       Code = x.Code,
                   }).ToList());

                //END 
                return lkpFileExtensions;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static Boolean SaveApplicantProfileNotes(Int32 tenantId, ApplicantProfileNote applicantProfileNoteToSave)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).SaveApplicantProfileNotes(applicantProfileNoteToSave);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static ApplicantProfileNote GetApplicantProfileNotesByNoteID(Int32 tenantId, Int32 applicantProfileNoteID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetApplicantProfileNotesByNoteID(applicantProfileNoteID);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static Boolean UpdateApplicantProfileNote(Int32 tenantId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).UpdateApplicantProfileNote();
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static Boolean SaveUpdateApplicantProfileNotes(Int32 tenantId, List<ApplicantProfileNotesContract> applicantProfileNoteList)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).SaveUpdateApplicantProfileNotes(applicantProfileNoteList);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        #endregion

        #region UAT-966:As an admin, I should be able to cancel individual parts of an order

        public static DataTable GetCancelledBkgOrderData(int tenantId, int orderId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetCancelledBkgOrderData(orderId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static Boolean SavePartialOrderCancellation(Int32 tenantId, String partialOrderCancellationXML, Int32 orderID,
                                                            String partialOrderCancellationTypeCode, Int32 currentUserID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).SavePartialOrderCancellation(partialOrderCancellationXML, orderID, partialOrderCancellationTypeCode, currentUserID);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        #endregion

        #region UAT-916 :WB: As an application admin, I should be able to define payment options at the package level in addition to the node level

        public static List<OrderPaymentDetail> GetAllPaymentDetailsOfOrderByOrderID(Int32 tenantId, Int32 orderId, Boolean IncludeDeletedRecords = false)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetAllPaymentDetailsOfOrderByOrderID(orderId, IncludeDeletedRecords);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static List<PaymentDetailContract> GetOrderPaymentContactList(Int32 tenantId, Int32 orderId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetOrderPaymentInvoiceItemByOrderID(orderId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }


        public static List<OrderPaymentDetail> GetOrdrPaymentDetailOfOrderByPaymentOpt(Int32 tenantId, Int32 orderId, String paymentOptionCode)
        {
            try
            {
                String invoiceWdoutAprvlPaymentOption = PaymentOptions.InvoiceWithOutApproval.GetStringValue();
                Int32 paymentOptionId = LookupManager.GetLookUpData<Entity.ClientEntity.lkpPaymentOption>(tenantId).FirstOrDefault(ps => ps.Code == paymentOptionCode && !ps.IsDeleted).PaymentOptionID;
                Int32 invoiceWdoutAprvlPaymentOptionId = LookupManager.GetLookUpData<Entity.ClientEntity.lkpPaymentOption>(tenantId).FirstOrDefault(ps => ps.Code == invoiceWdoutAprvlPaymentOption && !ps.IsDeleted).PaymentOptionID;
                //For UAT 2379,include "payment due" status in bulk approve
                string paymentDueOrderStatus = ApplicantOrderStatus.Payment_Due.GetStringValue();
                Int32 paymentDueOrderStatusId = LookupManager.GetLookUpData<Entity.ClientEntity.lkpOrderStatu>(tenantId).FirstOrDefault(pds => pds.Code == paymentDueOrderStatus).OrderStatusID;
                //UAT-3216, include credit card with approval payment option.
                String creditCardWithApproval = PaymentOptions.Credit_Card.GetStringValue();
                Int32 creditCardWithApprovalId = LookupManager.GetLookUpData<Entity.ClientEntity.lkpPaymentOption>(tenantId).FirstOrDefault(cc => cc.Code == creditCardWithApproval && !cc.IsDeleted).PaymentOptionID;
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetOrdrPaymentDetailOfOrderByPaymentOpt(orderId, paymentOptionId, invoiceWdoutAprvlPaymentOptionId, paymentDueOrderStatusId, creditCardWithApprovalId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static List<OrderPkgPaymentDetail> GetOrderPkgPaymentDetailsByOrderID(Int32 tenantId, Int32 orderId, String orderPackageTypeCode = null)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetOrderPkgPaymentDetailsByOrderID(orderId, orderPackageTypeCode);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static Boolean CheckIsInvoiceOnlyOrderPayment(Int32 tenantId, Int32 orderId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).CheckIsInvoiceOnlyOrderPayment(orderId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static List<BkgOrderPackage> GetBkgOrderPackageListByBphmIds(Int32 tenantId, List<Int32> listBPHM_ID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetBkgOrderPackageListByBphmIds(listBPHM_ID);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static List<OrderPkgPaymentDetail> GetOrderPkgPaymentDetailByOPDID(Int32 tenantId, Int32 OPD_Id)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetOrderPkgPaymentDetailByOPDID(OPD_Id);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static Boolean GetIsInvoiceApproval(Int32 tenantId, Int32 orderID)
        {
            try
            {
                Boolean isInvoiceApproval = false;
                List<OrderPaymentDetail> tempOrderPaymentDetailList = GetAllPaymentDetailsOfOrderByOrderID(tenantId, orderID);
                if (tempOrderPaymentDetailList.Count > AppConsts.NONE)
                {
                    isInvoiceApproval = tempOrderPaymentDetailList.Any(x => x.lkpOrderStatu.IsNotNull() && x.lkpPaymentOption.IsNotNull()
                                        && x.lkpPaymentOption.Code.Equals("PTIN") && x.lkpOrderStatu.Code.Equals("OSPPA"));
                }
                return isInvoiceApproval;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static Boolean IsOrderPaymentIncludeEDSService(Int32 tenantId, Int32 orderPaymentDetailID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).IsOrderPaymentIncludeEDSService(orderPaymentDetailID);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static OrderPaymentDetail GetOrdrPaymentDetailByID(Int32 tenantId, Int32 orderPaymentDetailId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetOrdrPaymentDetailByID(orderPaymentDetailId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        #endregion

        //public static List<Order> GetOrdersToBeArchived(Int32 tenantId)
        //{
        //    try
        //    {
        //        return BALUtils.GetComplianceDataRepoInstance(tenantId).GetOrdersToBeArchived();
        //    }
        //    catch (SysXException ex)
        //    {
        //        BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
        //        throw ex;
        //    }
        //    catch (Exception ex)
        //    {
        //        BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
        //        throw (new SysXException(ex.Message, ex));
        //    }

        //}

        public static void AutomaticallyArchiveExpiredSubscriptions(Int32 tenantId, Int32 currentUserId)
        {
            try
            {
                BALUtils.GetComplianceDataRepoInstance(tenantId).AutomaticallyArchiveExpiredSubscriptions(currentUserId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Get Comma Separated list of Applicant with their orders on the basis of passed Hierarchy Node ids
        /// </summary>
        public static String GetApplicantAndTheirOrdersFromHierarchyIds(String hierarchyIDs, String dateFrom, String dateTo, Int32 tenantID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).GetApplicantAndTheirOrdersFromHierarchyIds(hierarchyIDs, dateFrom, dateTo);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }


        #region Manage UnArchival Requests

        public static List<UnArchivalRequestDetails> GetUnArchivalRequestData(Int32 tenantID, String SelectedSubscriptionType, String SelectedpackageType)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).GetUnArchivalRequestData(SelectedSubscriptionType, SelectedpackageType);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static Boolean ApproveUnArchivalRequests(Int32 tenantID, List<Int32> lstSelectedunArchivalRequestIds, Int32 currentLoggedInUserId, String selectedSubscriptionType, String selectedPackageType)
        {
            try
            {
                short changeTypeID = 0;
                if (selectedPackageType == ArchivePackageType.Tracking.GetStringValue())
                {

                    if (selectedSubscriptionType.Equals(SubscriptionType.ARCHIVED_SUBSCRIPTIONS.GetStringValue()))
                    {
                        changeTypeID = GetComplianceSubsArchiveChangeTypeIdByCode(tenantID, ComplianceSubscriptionArchiveChangeType.UN_ARCHIVE_BY_ADMIN.GetStringValue());
                    }
                    else if (selectedSubscriptionType.Equals(SubscriptionType.UNARCHIVAL_REQUESTED_SUBSCRIPTIONS.GetStringValue()))
                    {
                        changeTypeID = GetComplianceSubsArchiveChangeTypeIdByCode(tenantID, ComplianceSubscriptionArchiveChangeType.UN_ARCHIVE_APPROVED.GetStringValue());
                    }

                    //UAT-2687: Archive actions to show up on admin data audit history
                    short dataAuditChangeTypeID = LookupManager.GetLookUpData<lkpApplicantDataAuditChangeType>(tenantID).FirstOrDefault(cond => cond.Code == "AAAS" && !cond.IsDeleted).ApplicantDataAuditChangeTypeID;

                    List<CompliancePackageSubscriptionArchiveHistory> lstPackageSubscriptionArchiveHistory = BALUtils.GetComplianceDataRepoInstance(tenantID).ApproveUnArchivalRequests(lstSelectedunArchivalRequestIds, currentLoggedInUserId, changeTypeID, dataAuditChangeTypeID);
                    if (lstPackageSubscriptionArchiveHistory.Count > AppConsts.NONE)
                    {
                        EvaluateBuisnessRulesForMultipleUnarchieveRequests(lstPackageSubscriptionArchiveHistory, currentLoggedInUserId, tenantID);
                    }
                }
                //UAT-1683:Add the Archive button and Manage Un-Archive to the Screening(Background) side.
                else if (selectedPackageType == ArchivePackageType.Screening.GetStringValue())
                {
                    if (selectedSubscriptionType.Equals(SubscriptionType.ARCHIVED_SUBSCRIPTIONS.GetStringValue()))
                    {
                        changeTypeID = GetComplianceSubsArchiveChangeTypeIdByCode(tenantID, ComplianceSubscriptionArchiveChangeType.UN_ARCHIVE_BY_ADMIN.GetStringValue());
                    }
                    else if (selectedSubscriptionType.Equals(SubscriptionType.UNARCHIVAL_REQUESTED_SUBSCRIPTIONS.GetStringValue()))
                    {
                        changeTypeID = GetComplianceSubsArchiveChangeTypeIdByCode(tenantID, ComplianceSubscriptionArchiveChangeType.UN_ARCHIVE_APPROVED.GetStringValue());
                    }
                    List<BkgOrderArchiveHistory> lstBkgOrderArchiveHistory = BALUtils.GetComplianceDataRepoInstance(tenantID).ApproveBkgUnArchivalRequests(lstSelectedunArchivalRequestIds, currentLoggedInUserId, changeTypeID);
                }
                return true;

            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Method for generating object mapping Xml
        /// </summary>
        /// <param name="ruleObjectMappingList">object list of RuleObjectMapping </param>
        /// <returns></returns>
        private static void EvaluateBuisnessRulesForMultipleUnarchieveRequests(List<CompliancePackageSubscriptionArchiveHistory> lstPackageSubscriptionArchiveHistory, Int32 currentLoggedInUserId, Int32 tenantId)
        {
            XmlDocument doc = new XmlDocument();
            XmlElement el = (XmlElement)doc.AppendChild(doc.CreateElement("RuleGroups"));
            foreach (CompliancePackageSubscriptionArchiveHistory archiveHistory in lstPackageSubscriptionArchiveHistory)
            {
                if (!archiveHistory.PackageSubscription.IsNullOrEmpty())
                {
                    List<RuleObjectMapping> ruleObjectMappingList = new List<RuleObjectMapping>();
                    RuleObjectMapping ruleObjectMappingForPackage = new RuleObjectMapping
                    {
                        RuleObjectTypeId = Convert.ToString(RuleManager.GetObjectType(ObjectType.Compliance_Package.GetStringValue(), tenantId).OT_ID),
                        RuleObjectId = Convert.ToString(archiveHistory.PackageSubscription.CompliancePackageID),
                        RuleObjectParentId = Convert.ToString(AppConsts.NONE)
                    };
                    ruleObjectMappingList.Add(ruleObjectMappingForPackage);

                    foreach (ApplicantComplianceCategoryData categoryData in archiveHistory.PackageSubscription.ApplicantComplianceCategoryDatas.Where(x => x.IsDeleted == false))
                    {
                        if (categoryData != null)
                        {
                            RuleObjectMapping ruleObjectMappingForCategory = new RuleObjectMapping
                            {
                                RuleObjectTypeId = Convert.ToString(RuleManager.GetObjectType(ObjectType.Compliance_Category.GetStringValue(), tenantId).OT_ID),
                                RuleObjectId = Convert.ToString(categoryData.ComplianceCategoryID),
                                RuleObjectParentId = Convert.ToString(archiveHistory.PackageSubscription.CompliancePackageID)
                            };
                            ruleObjectMappingList.Add(ruleObjectMappingForCategory);
                            foreach (ApplicantComplianceItemData itemData in categoryData.ApplicantComplianceItemDatas.Where(x => x.IsDeleted == false))
                            {
                                if (itemData != null)
                                {
                                    RuleObjectMapping ruleObjectMappingForItem = new RuleObjectMapping();
                                    ruleObjectMappingForItem.RuleObjectTypeId = Convert.ToString(RuleManager.GetObjectType(ObjectType.Compliance_Item.GetStringValue(), tenantId).OT_ID);
                                    ruleObjectMappingForItem.RuleObjectId = Convert.ToString(itemData.ComplianceItemID);
                                    ruleObjectMappingForItem.RuleObjectParentId = Convert.ToString(categoryData.ComplianceCategoryID);
                                    ruleObjectMappingList.Add(ruleObjectMappingForItem);
                                }

                                foreach (ApplicantComplianceAttributeData attributeData in itemData.ApplicantComplianceAttributeDatas.Where(x => x.IsDeleted == false))
                                {
                                    if (attributeData != null)
                                    {
                                        RuleObjectMapping ruleObjectMappingForAttribte = new RuleObjectMapping();
                                        ruleObjectMappingForAttribte.RuleObjectTypeId = Convert.ToString(RuleManager.GetObjectType(ObjectType.Compliance_ATR.GetStringValue(), tenantId).OT_ID);
                                        ruleObjectMappingForAttribte.RuleObjectId = Convert.ToString(attributeData.ApplicantComplianceAttributeID);
                                        ruleObjectMappingForAttribte.RuleObjectParentId = Convert.ToString(itemData.ComplianceItemID);
                                        ruleObjectMappingList.Add(ruleObjectMappingForAttribte);
                                    }
                                }
                            }
                        }
                    }
                    XmlNode nodeRuleObjects = el.AppendChild(doc.CreateElement("RuleObjects"));
                    XmlNode nodeSubscriptionId = nodeRuleObjects.AppendChild(doc.CreateElement("PackageSubscriptionId"));
                    nodeSubscriptionId.InnerText = archiveHistory.PackageSubscription.PackageSubscriptionID.ToString();
                    foreach (RuleObjectMapping ruleObjectMapping in ruleObjectMappingList)
                    {
                        XmlNode childNode = nodeRuleObjects.AppendChild(doc.CreateElement("RuleObject"));
                        childNode.AppendChild(doc.CreateElement("TypeId")).InnerText = ruleObjectMapping.RuleObjectTypeId;
                        childNode.AppendChild(doc.CreateElement("Id")).InnerText = ruleObjectMapping.RuleObjectId;
                        childNode.AppendChild(doc.CreateElement("ParentId")).InnerText = ruleObjectMapping.RuleObjectParentId;
                    }
                }
            }

            String ruleXml = doc.OuterXml.ToString();
            ComplianceSetupManager.RunParallelTaskForPostSubmitRuleMulti(ruleXml, tenantId, currentLoggedInUserId);
        }

        public static Boolean RejectUnArchivalRequests(Int32 tenantID, List<Int32> lstSelectedunArchivalRequestIds, Int32 currentLoggedInUserId, String selectedPackageType)
        {
            try
            {
                if (selectedPackageType == ArchivePackageType.Tracking.GetStringValue())
                {
                    return BALUtils.GetComplianceDataRepoInstance(tenantID).RejectUnArchivalRequests(lstSelectedunArchivalRequestIds, currentLoggedInUserId);
                }
                //UAT-1683: Add the Archive button and Manage Un-Archive to the Screening(Background) side.
                else if (selectedPackageType == ArchivePackageType.Screening.GetStringValue())
                {
                    return BALUtils.GetComplianceDataRepoInstance(tenantID).RejectBkgUnArchivalRequests(lstSelectedunArchivalRequestIds, currentLoggedInUserId);
                }
                else
                {
                    return false;
                }
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }



        #endregion
        #region Maintain PackageSubscription Archive History [UAT-977: Additional Works for Archive access]
        public static Boolean SaveCompSubscriptionArchiveHistoryData(Int32 tenantId, CompliancePackageSubscriptionArchiveHistory objectToSave)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).SaveCompSubscriptionArchiveHistoryData(objectToSave);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static Boolean IsActiveUnArchiveRequestForPkgSubscriptionId(Int32 tenantId, Int32 packageSubscriptionId, String changeTypeCode)
        {
            try
            {
                Int16 changeTypeId = GetComplianceSubsArchiveChangeTypeIdByCode(tenantId, changeTypeCode);

                return BALUtils.GetComplianceDataRepoInstance(tenantId).IsActiveUnArchiveRequestForPkgSubscriptionId(packageSubscriptionId, changeTypeId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        /// <summary>
        /// UAT-1683 Add the Archive button and Manage Un-Archive to the Screening side
        /// </summary>
        /// <param name="tenantId"></param>
        /// <param name="packageSubscriptionId"></param>
        /// <param name="changeTypeCode"></param>
        /// <returns></returns>
        public static Boolean IsActiveUnArchiveRequestForBkgOrderSubscriptionId(Int32 tenantId, Int32 bkgOrderId, String changeTypeCode)
        {
            try
            {
                Int16 changeTypeId = GetComplianceSubsArchiveChangeTypeIdByCode(tenantId, changeTypeCode);
                BkgOrder order = BALUtils.GetComplianceDataRepoInstance(tenantId).GetBkgOrderDetailByID(bkgOrderId);
                return BALUtils.GetComplianceDataRepoInstance(tenantId).IsActiveUnArchiveRequestForBkgOrderId(order.BOR_ID, changeTypeId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static BkgOrder GetBkgOrderDetailByID(Int32 tenantId, Int32 orderId)
        {
            return BALUtils.GetComplianceDataRepoInstance(tenantId).GetBkgOrderDetailByID(orderId);
        }
        /// <summary>
        /// UAT-1683 Add the Archive button and Manage Un-Archive to the Screening side
        /// </summary>
        /// <param name="tenantId"></param>
        /// <param name="objectToSave"></param>
        /// <returns></returns>
        public static Boolean SaveBkgOrderArchiveHistoryData(Int32 tenantId, BkgOrderArchiveHistory objectToSave, Int32 orderID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).SaveBkgOrderArchiveHistoryData(objectToSave, orderID);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        public static Int16 GetComplianceSubsArchiveChangeTypeIdByCode(Int32 tenantId, String changeTypeCode)
        {
            try
            {
                return LookupManager.GetLookUpData<Entity.ClientEntity.lkpComplianceSubscriptionArchiveChangeType>(tenantId).FirstOrDefault(slct => slct.CSACT_Code == changeTypeCode && slct.CSACT_IsDeleted == false).CSACT_ID;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }


        /// <summary>
        /// Method to return the object with set values of ComplinacePackageSubscriptionArchiveHistory.
        /// </summary>
        /// <param name="archiveChangeTypeID">ChangeTypeID</param>
        /// <param name="packageSubscriptionID">packageSubscriptionID</param>
        /// <param name="subscriptionChangeDetailXML">subscriptionChangeDetailXML</param>
        /// <param name="currentLoggedInUserId">currentLoggedInUserId</param>
        /// <returns></returns>
        public static CompliancePackageSubscriptionArchiveHistory GetCompliancePkgSubscriptionArchHistoryObject(Int16 archiveChangeTypeID, Int32 packageSubscriptionID, String subscriptionChangeDetailXML, Int32 currentLoggedInUserId)
        {
            try
            {
                CompliancePackageSubscriptionArchiveHistory subscriptionArchiveHistoryData = new CompliancePackageSubscriptionArchiveHistory();
                subscriptionArchiveHistoryData.CPSAH_ChangeTypeID = archiveChangeTypeID;
                subscriptionArchiveHistoryData.CPSAH_IsActive = true;
                subscriptionArchiveHistoryData.CPSAH_IsDeleted = false;
                subscriptionArchiveHistoryData.CPSAH_PackageSubscriptionID = packageSubscriptionID;
                subscriptionArchiveHistoryData.CPSAH_SubscriptionChangeDetail = subscriptionChangeDetailXML;
                subscriptionArchiveHistoryData.CPSAH_CreatedBy = currentLoggedInUserId;
                subscriptionArchiveHistoryData.CPSAH_CreatedOn = DateTime.Now;
                return subscriptionArchiveHistoryData;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        #endregion

        #region [UAT-977:Additional work towards archive ability]
        /// <summary>
        /// Method to return the repurchased order by previous order id.
        /// </summary>
        /// <param name="prevOrderId">previous order id</param>
        /// <param name="orderRequestId">order request id</param>
        /// <returns></returns>
        public static Order GetRepuchasedOrderByPreviousOrderID(Int32 tenantId, Int32 prevOrderId, String orderRequestTypeCode)
        {
            try
            {
                Int32 orderRequestTypeID = LookupManager.GetLookUpData<Entity.ClientEntity.lkpOrderRequestType>(tenantId).FirstOrDefault(cnd => cnd.ORT_Code == orderRequestTypeCode && cnd.ORT_Active == true).ORT_ID;

                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetRepuchasedOrderByPreviousOrderID(prevOrderId, orderRequestTypeID);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        #endregion

        #region UAT-977 CHECK IF MULTIPLE SUBSCRIPTIONS EXISTS OD SELECTED APPLICANTS
        public static Dictionary<String, List<Int32>> GetSubscriptionsListForArchival(Int32 tenantID, Dictionary<Int32, String> AssignOrganizationUserIds)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).GetSubscriptionsListForArchival(AssignOrganizationUserIds);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        #endregion

        #region UAT-977 MANUAL ARCHIVE SUBSCRIPTIONS
        public static String ArchieveSubscriptionsManually(List<Int32> subscriptionIds, Int32 tenantID, Int32 currentUserId)
        {
            try
            {
                short archieveStatusId = LookupManager.GetLookUpData<lkpArchiveState>(tenantID).FirstOrDefault(cond => cond.AS_Code == ArchiveState.Archived.GetStringValue()).AS_ID;
                Int16 archiveChangeTypeID = GetComplianceSubsArchiveChangeTypeIdByCode(tenantID, ComplianceSubscriptionArchiveChangeType.SET_TO_ARCHIVE.GetStringValue());

                List<CompliancePackageSubscriptionArchiveHistory> lstsubscriptionArchiveHistoryData = new List<CompliancePackageSubscriptionArchiveHistory>();
                List<PackageSubscription> lstSubscriptionsToBeArchieved = BALUtils.GetComplianceDataRepoInstance(tenantID).GetSubscriptionsToBeArchived(subscriptionIds, archieveStatusId);
                List<Int32> requiredSubscriptionIDs = lstSubscriptionsToBeArchieved.Select(x => x.PackageSubscriptionID).ToList();

                //UAT-2687: Archive actions to show up on admin data audit history
                List<ApplicantDataAudit> lstApplicantDataAudit = new List<ApplicantDataAudit>();
                short dataAuditChangeTypeID = LookupManager.GetLookUpData<lkpApplicantDataAuditChangeType>(tenantID).FirstOrDefault(cond => cond.Code == "AAAS" && !cond.IsDeleted).ApplicantDataAuditChangeTypeID;

                #region Create Xml for subscriptionChangeDetail due to archive state change.

                foreach (Int32 subscriptionID in requiredSubscriptionIDs)
                {
                    PackageSubscription currentPackageSubscription = new PackageSubscription();
                    currentPackageSubscription = BALUtils.GetComplianceDataRepoInstance(tenantID).GetPackageSubscriptionByID(tenantID, subscriptionID);

                    String subscriptionChangeDetailXML = "";
                    subscriptionChangeDetailXML = "<SubscriptionChangeDetails>";
                    subscriptionChangeDetailXML += "<OldArchiveStateID>" + (currentPackageSubscription.ArchiveStateID.IsNull() ? null : currentPackageSubscription.ArchiveStateID.ToString()) + "</OldArchiveStateID>";
                    subscriptionChangeDetailXML += "<NewArchiveStateID>" + archieveStatusId.ToString() + "</NewArchiveStateID>";
                    subscriptionChangeDetailXML += "<OldArchiveDate>" + (currentPackageSubscription.ArchiveDate.IsNull() ? null : currentPackageSubscription.ArchiveDate.ToString()) + "</OldArchiveDate>";
                    subscriptionChangeDetailXML += "<NewArchiveDate>" + DateTime.Now.ToString() + "</NewArchiveDate>";
                    subscriptionChangeDetailXML += "</SubscriptionChangeDetails>";

                    CompliancePackageSubscriptionArchiveHistory subscriptionArchiveHistoryData = new CompliancePackageSubscriptionArchiveHistory();
                    subscriptionArchiveHistoryData = GetCompliancePkgSubscriptionArchHistoryObject(archiveChangeTypeID, subscriptionID, subscriptionChangeDetailXML, currentUserId);

                    lstsubscriptionArchiveHistoryData.Add(subscriptionArchiveHistoryData);

                    //UAT-2687: Archive actions to show up on admin data audit history
                    Boolean IsExpired = currentPackageSubscription.ExpiryDate < DateTime.Now ? true : false;
                    ApplicantDataAudit applicantDataAuditHistory = new ApplicantDataAudit();
                    applicantDataAuditHistory.ADA_PackageSubscriptionID = subscriptionID;

                    if (IsExpired)
                    {
                        applicantDataAuditHistory.ADA_OldValue = "Expired";
                    }
                    else
                    {
                        applicantDataAuditHistory.ADA_OldValue = currentPackageSubscription.ArchiveStateID.IsNull() ? String.Empty : "Active";
                    }

                    if (IsExpired)
                    {
                        applicantDataAuditHistory.ADA_NewValue = "Archived and Expired";
                    }
                    else
                    {
                        applicantDataAuditHistory.ADA_NewValue = "Archived";
                    }

                    applicantDataAuditHistory.ADA_ChangeTypeID = dataAuditChangeTypeID;
                    applicantDataAuditHistory.ADA_IsDeleted = false;
                    applicantDataAuditHistory.ADA_ModifiedBy = currentUserId;
                    applicantDataAuditHistory.ADA_ModifiedOn = DateTime.Now;
                    lstApplicantDataAudit.Add(applicantDataAuditHistory);
                }
                #endregion
                if (lstSubscriptionsToBeArchieved.IsNotNull() && lstSubscriptionsToBeArchieved.Count > 0)
                {
                    return BALUtils.GetComplianceDataRepoInstance(tenantID).ArchieveSubscriptionsManually(archieveStatusId, currentUserId, lstsubscriptionArchiveHistoryData, requiredSubscriptionIDs, lstApplicantDataAudit);
                }
                else
                {
                    return "The selected user(s) does not have any active subscription.";
                }
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }


        #endregion

        #region UAT-977 GET DATA FOR MULTIPLE SUBSCRIPTION POPUP
        public static List<ManageMultipleSubscriptionContract> GetMultipleSubscriptionDataForPopup(Int32 tenantID, String packageSubscriptionIDs, Int32 currentLoggedInUserID)
        {
            try
            {
                DataTable dt = BALUtils.GetComplianceDataRepoInstance(tenantID).GetMultipleSubscriptionDataForPopup(packageSubscriptionIDs, currentLoggedInUserID);
                IEnumerable<DataRow> rows = dt.AsEnumerable();
                return rows.Select(x => new ManageMultipleSubscriptionContract
                {
                    PackageSubscriptionID = Convert.ToInt32(x["PackageSubscriptionID"]),
                    OrganizationUserID = Convert.ToInt32(x["OrganizationUserID"]),//GetType().Name == "DBNull" ? 0 : Convert.ToInt32(x["ApplicantComplianceItemID"]),
                    FirstName = Convert.ToString(x["FirstName"]),
                    LastName = Convert.ToString(x["LastName"]),
                    UserName = Convert.ToString(x["UserName"]),
                    UserGroup = x["UserGroup"].GetType().Name == "DBNull" ? "" : Convert.ToString(x["UserGroup"]),
                    PackageName = Convert.ToString(x["PackageName"]),
                    InstitutionHierarchy = Convert.ToString(x["InstitutionHierarchy"]),
                    TotalCount = Convert.ToInt32(x["TotalCount"])
                }).ToList();
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        #endregion

        #region Get Package Subscription For Data Entry [UAT-1049:Admin Data Entry]

        public static List<PackageSubscriptionForDataEntry> GetPackageSubscriptionForDataEntry(Int32 organizationUserID, Int32 tenantID)
        {
            try
            {
                DataTable dt = BALUtils.GetComplianceDataRepoInstance(tenantID).GetPackageSubscriptionForDataEntry(organizationUserID);
                IEnumerable<DataRow> rows = dt.AsEnumerable();
                return rows.Select(slct => new PackageSubscriptionForDataEntry
                {
                    PackageName = Convert.ToString(slct["PackageName"]),
                    PackageSubscriptionID = Convert.ToInt32(slct["PackageSubscriptionID"]),
                    OrderID = Convert.ToInt32(slct["OrderId"]),
                    InstitutionHierarchy = Convert.ToString(slct["HierarchyLabel"])

                }).ToList();

            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        #endregion



        #region UAT-1033 Add link to download E Drug authorization form (Electronic Service Form) to screening tab.
        public static Dictionary<Int32, Boolean> GetEDSStatusForOrders(Int32 TenantId, String commaDelemittedOrderIDs)
        {
            try
            {
                DataTable dt = BALUtils.GetComplianceDataRepoInstance(TenantId).GetEDSStatusForOrders(commaDelemittedOrderIDs);
                //Convert dt to Dictionary
                Dictionary<int, bool> dictEdsOrder = new Dictionary<int, bool>();
                foreach (DataRow d1 in dt.AsEnumerable())
                {
                    if (!dictEdsOrder.ContainsKey(Convert.ToInt32(d1["OrderID"])))
                    {
                        dictEdsOrder.Add(Convert.ToInt32(d1["OrderID"]), Convert.ToBoolean(d1["IsEDSExist"]));
                    }
                }
                return dictEdsOrder;

            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        #endregion
        #region UAT-1049 :Admin Data Entry

        public static Boolean SubmitAdminDataEntry(AdminDataEntrySaveContract dataEntryContract, Int32 applicantDoccumentId, String documentStatusCode, Int32 currentUserId, Int32 tenantId)
        {
            try
            {
                List<lkpItemComplianceStatu> itemComplianceStatusList = LookupManager.GetLookUpData<lkpItemComplianceStatu>(tenantId).Where(cmpStatus => !cmpStatus.IsDeleted).ToList();
                List<lkpReviewerType> reviewerTypeList = LookupManager.GetLookUpData<lkpReviewerType>(tenantId).Where(rvwerType => !rvwerType.IsDeleted).ToList();

                // This method call not in use.
                ////Boolean isDataSavedRequired = BALUtils.GetComplianceDataRepoInstance(tenantId).SubmitAdminDataEntry(dataEntryContract, currentUserId
                ////                                                                                                     , itemComplianceStatusList, reviewerTypeList, tenantId);

                Boolean isDataSavedRequired = BALUtils.GetComplianceDataRepoInstance(tenantId).SaveAdminDataEntry(dataEntryContract, currentUserId
                                                                                                                  , itemComplianceStatusList, reviewerTypeList, tenantId);

                #region Check if the Current Tenant is Default Tenant - Used to assign the Exception items in Queue

                Entity.Tenant _tenant = SecurityManager.GetOrganizationUser(currentUserId).Organization.Tenant;
                Boolean _isDefaultTenant = _tenant.TenantID.Equals(SecurityManager.DefaultTenantID);

                #endregion

                if (isDataSavedRequired)
                {
                    PackageSubscription currentSubscription = ComplianceDataManager.GetPackageSubscriptionByID(tenantId, dataEntryContract.PackageSubscriptionId);
                    List<ApplicantComplianceCategoryData> categoryDataListFromDb = currentSubscription.ApplicantComplianceCategoryDatas.Where(cond => !cond.IsDeleted).ToList();

                    String _sbInputXML = GenerateInputXmlClearReconcillationAssignment(categoryDataListFromDb, dataEntryContract, tenantId, _isDefaultTenant);
                    QueueManagementManager.ClearReconciliationQueueRecords(currentUserId, _sbInputXML, tenantId);

                    StringBuilder xmlForHandleAssignment = new StringBuilder();
                    xmlForHandleAssignment.Append("<Queues>");
                    xmlForHandleAssignment.Append(GenerateInputXmlHandleAssignment(categoryDataListFromDb, dataEntryContract, tenantId, _isDefaultTenant));
                    xmlForHandleAssignment.Append("</Queues>");
                    Dictionary<String, Object> dicHandleAssignmentData = new Dictionary<String, Object>();
                    dicHandleAssignmentData.Add("CurrentLoggedInUserId", currentUserId);
                    dicHandleAssignmentData.Add("TenantId", tenantId);
                    dicHandleAssignmentData.Add("QueueRecordXML", Convert.ToString(xmlForHandleAssignment));
                    dicHandleAssignmentData.Add("ResetReviewLevel", false);

                    StringBuilder xmlForHandleReconcillationAssignment = new StringBuilder();
                    xmlForHandleReconcillationAssignment.Append("<Queues>");
                    xmlForHandleReconcillationAssignment.Append(GenerateInputXmlHandleReconcillationAssignment(categoryDataListFromDb, dataEntryContract, tenantId, _isDefaultTenant));
                    xmlForHandleReconcillationAssignment.Append("</Queues>");
                    Dictionary<String, Object> dicReconcillationHandleAssignmentData = new Dictionary<String, Object>();
                    dicReconcillationHandleAssignmentData.Add("CurrentLoggedInUserId", currentUserId);
                    dicReconcillationHandleAssignmentData.Add("TenantId", tenantId);
                    dicReconcillationHandleAssignmentData.Add("QueueRecordXML", Convert.ToString(xmlForHandleReconcillationAssignment));
                    dicReconcillationHandleAssignmentData.Add("ResetReviewLevel", false);


                    String ruleXml = GenerateInputXmlForRuleExecution(tenantId, currentSubscription, dataEntryContract.ApplicantCmplncCategoryData);
                    Int32 applicantId = currentSubscription.OrganizationUserID.Value;
                    RunParalleleTaskForHanleAssignmentAndRuleExecution(dicHandleAssignmentData, ruleXml, applicantId, currentUserId, tenantId, dataEntryContract, dicReconcillationHandleAssignmentData);
                }
                //UpdateDoccumentStatusAfterDataEntry(applicantDoccumentId, documentStatusCode, currentUserId, tenantId);
                return true;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Generate the Input XML, to be sent as input to the HandleAssignments task.
        /// </summary>
        /// <param name="categoryDataListWhichIsSaved"></param>
        /// <param name="tenantId"></param>
        /// <param name="categoryDataListFromDb"></param>
        /// <param name="dataEntryContract"></param>
        /// <returns></returns>
        private static String GenerateInputXmlHandleAssignment(List<ApplicantComplianceCategoryData> categoryDataListFromDb, AdminDataEntrySaveContract dataEntryContract,
            Int32 tenantId, Boolean isDefaultTenant)
        {
            StringBuilder sbXML = new StringBuilder();
            String queueTypeCode = String.Empty;
            List<QueueMetaData> _lstQueueMetaData = LookupManager.GetLookUpData<QueueMetaData>(tenantId);
            List<QueueFieldsMetaData> _lstQueueFieldsMetaData = LookupManager.GetLookUpData<QueueFieldsMetaData>(tenantId);
            List<lkpItemComplianceStatu> _lstItemComplianceStatus = LookupManager.GetLookUpData<lkpItemComplianceStatu>(tenantId);

            foreach (ApplicantCmplncCategoryData categoryData in dataEntryContract.ApplicantCmplncCategoryData)
            {
                ApplicantComplianceCategoryData categoryDataFromDb = categoryDataListFromDb.FirstOrDefault(cond => cond.ComplianceCategoryID
                                                                        == categoryData.CatId);

                if (!categoryData.ApplicantCmplncItemData.IsNullOrEmpty())
                {
                    foreach (var itemData in categoryData.ApplicantCmplncItemData)
                    {
                        ApplicantComplianceItemData itemDataInDb = null;
                        var complianceStatus = new lkpItemComplianceStatu();
                        if (categoryDataFromDb.IsNotNull() && categoryDataFromDb.ApplicantComplianceItemDatas.Where(con => !con.IsDeleted).IsNotNull())
                        {
                            itemDataInDb = categoryDataFromDb.ApplicantComplianceItemDatas.FirstOrDefault(cond => !cond.IsDeleted && cond.ComplianceItemID == itemData.ItmId
                                                                                                            && cond.ReconciliationReviewCount == null);
                            if (itemDataInDb.IsNotNull())
                                complianceStatus = _lstItemComplianceStatus.Where(x => x.IsDeleted == false && x.ItemComplianceStatusID == itemDataInDb.StatusID).FirstOrDefault();
                        }
                        // Use current item for Handle assignment, only if it was Swapped, or data was changed
                        if ((itemData.IsItemSwapped || itemData.IsDataChanged)
                            && complianceStatus.IsNotNull()
                            && complianceStatus.Code != ApplicantItemComplianceStatus.Approved.GetStringValue()
                            && complianceStatus.Code != ApplicantItemComplianceStatus.Approved_With_Exception.GetStringValue())
                        {
                            if (itemDataInDb.IsNotNull() && itemDataInDb.ApplicantComplianceItemID > AppConsts.NONE)
                            {
                                String itemComplianceStatusText = String.Empty;
                                if (complianceStatus.IsNotNull())
                                {
                                    itemComplianceStatusText = complianceStatus.Name;
                                    queueTypeCode = GetQueueTypeCodeByStatus(complianceStatus.Code, isDefaultTenant);
                                }
                                if (!String.IsNullOrEmpty(queueTypeCode) && itemDataInDb.IsNotNull())
                                {
                                    QueueMetaData _queueMetaData = _lstQueueMetaData.Where(qmd => qmd.QMD_Code == queueTypeCode && qmd.QMD_IsDeleted == false).FirstOrDefault();
                                    Int32 queueId = _queueMetaData.QMD_QueueID;

                                    //Added to get data related to XML of 'HandleAssignment' SP in 'Queue Framework'
                                    Dictionary<String, Object> dicQueueFields = new Dictionary<String, Object>();

                                    dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.ApplicantName, itemDataInDb.ApplicantName);
                                    dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.ComplianceItemId, itemDataInDb.ComplianceItemID);
                                    dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.CategoryId, categoryData.CatId);
                                    dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.PackageID, dataEntryContract.PackageId);
                                    dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.SubmissionDate, itemDataInDb.SubmissionDate);
                                    dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.System_Status, itemDataInDb.SystemStatusText);
                                    dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.Rush_Order_Status_Code, itemDataInDb.RushOrderStatusCode);
                                    dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.ApplicantComplianceItemID, itemDataInDb.ApplicantComplianceItemID);
                                    dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.HierarchyNodeID, itemDataInDb.HierarchyNodeId);
                                    dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.ApplicantId, itemDataInDb.ApplicantId);
                                    dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.Item_Name, itemDataInDb.ComplianceItemName);
                                    dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.Category_Name, itemDataInDb.ComplianceCategoryName);
                                    dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.Package_Name, itemDataInDb.CompliancePackageName);
                                    dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.Verification_Status_Text, itemComplianceStatusText);
                                    dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.Rush_Order_Status_Text, itemDataInDb.RushOrderStatusText);
                                    dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.Verification_Status, itemDataInDb.StatusID);
                                    dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.Assigned_To_User, itemDataInDb.AssignedToUser.IsNull() ? 0 : itemDataInDb.AssignedToUser);

                                    foreach (KeyValuePair<String, Object> dicQueueField in dicQueueFields)
                                    {
                                        sbXML.Append("<QueueDetail>");
                                        sbXML.Append("<QueueID>" + queueId + "</QueueID>"); // Need to change when Moved to next Queue and NOT Same level
                                        sbXML.Append("<RecordID>" + itemDataInDb.ApplicantComplianceItemID + "</RecordID>");
                                        sbXML.Append("<QueueFieldName>" + dicQueueField.Key + "</QueueFieldName>");
                                        sbXML.Append("<QueueFieldValue>" + dicQueueField.Value + "</QueueFieldValue>");
                                        // sbXML.Append("<Attempted_LifeCycleFieldValue>" + itemData.AttemptedItemStatusId + "</Attempted_LifeCycleFieldValue>");
                                        sbXML.Append("<ByPassInitialReview>" + 0 + "</ByPassInitialReview>");
                                        sbXML.Append("<ResetReviewProcess>" + 1 + "</ResetReviewProcess>");
                                        sbXML.Append("</QueueDetail>");
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return Convert.ToString(sbXML);
        }

        private static String GenerateInputXmlHandleReconcillationAssignment(List<ApplicantComplianceCategoryData> categoryDataListFromDb, AdminDataEntrySaveContract dataEntryContract,
           Int32 tenantId, Boolean isDefaultTenant)
        {
            StringBuilder sbXML = new StringBuilder();
            String queueTypeCode = String.Empty;
            List<QueueMetaData> _lstQueueMetaData = LookupManager.GetLookUpData<QueueMetaData>(tenantId);
            List<QueueFieldsMetaData> _lstQueueFieldsMetaData = LookupManager.GetLookUpData<QueueFieldsMetaData>(tenantId);
            List<lkpItemComplianceStatu> _lstItemComplianceStatus = LookupManager.GetLookUpData<lkpItemComplianceStatu>(tenantId);

            foreach (ApplicantCmplncCategoryData categoryData in dataEntryContract.ApplicantCmplncCategoryData)
            {
                ApplicantComplianceCategoryData categoryDataFromDb = categoryDataListFromDb.FirstOrDefault(cond => cond.ComplianceCategoryID
                                                                        == categoryData.CatId);

                if (!categoryData.ApplicantCmplncItemData.IsNullOrEmpty())
                {
                    foreach (var itemData in categoryData.ApplicantCmplncItemData)
                    {
                        ApplicantComplianceItemData itemDataInDb = null;
                        var complianceStatus = new lkpItemComplianceStatu();
                        if (categoryDataFromDb.IsNotNull() && categoryDataFromDb.ApplicantComplianceItemDatas.Where(cond => !cond.IsDeleted).IsNotNull())
                        {
                            itemDataInDb = categoryDataFromDb.ApplicantComplianceItemDatas.FirstOrDefault(cond => !cond.IsDeleted && cond.ComplianceItemID == itemData.ItmId
                                                                                                                    && cond.ReconciliationReviewCount != null
                                                                                                                    && cond.ReconciliationReviewCount > AppConsts.NONE);
                            if (itemDataInDb.IsNotNull())
                                complianceStatus = _lstItemComplianceStatus.Where(x => x.IsDeleted == false && x.ItemComplianceStatusID == itemDataInDb.StatusID).FirstOrDefault();
                        }
                        // Use current item for Handle assignment, only if it was Swapped, or data was changed
                        if ((itemData.IsItemSwapped || itemData.IsDataChanged || itemData.IsDocAssociationReq)
                            && complianceStatus.IsNotNull()
                            && complianceStatus.Code == ApplicantItemComplianceStatus.Pending_Review.GetStringValue())
                        {
                            if (itemDataInDb.IsNotNull() && itemDataInDb.ApplicantComplianceItemID > AppConsts.NONE)
                            {
                                String itemComplianceStatusText = String.Empty;
                                if (complianceStatus.IsNotNull())
                                {
                                    itemComplianceStatusText = complianceStatus.Name;
                                    queueTypeCode = GetQueueTypeCodeByStatus(complianceStatus.Code, isDefaultTenant);
                                }
                                if (!String.IsNullOrEmpty(queueTypeCode) && itemDataInDb.IsNotNull())
                                {
                                    QueueMetaData _queueMetaData = _lstQueueMetaData.Where(qmd => qmd.QMD_Code == queueTypeCode && qmd.QMD_IsDeleted == false).FirstOrDefault();
                                    Int32 queueId = _queueMetaData.QMD_QueueID;

                                    //Added to get data related to XML of 'HandleAssignment' SP in 'Queue Framework'
                                    Dictionary<String, Object> dicQueueFields = new Dictionary<String, Object>();

                                    dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.ApplicantName, itemDataInDb.ApplicantName);
                                    dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.ComplianceItemId, itemDataInDb.ComplianceItemID);
                                    dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.CategoryId, categoryData.CatId);
                                    dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.PackageID, dataEntryContract.PackageId);
                                    dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.SubmissionDate, itemDataInDb.SubmissionDate);
                                    dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.System_Status, itemDataInDb.SystemStatusText);
                                    dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.Rush_Order_Status_Code, itemDataInDb.RushOrderStatusCode);
                                    dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.ApplicantComplianceItemID, itemDataInDb.ApplicantComplianceItemID);
                                    dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.HierarchyNodeID, itemDataInDb.HierarchyNodeId);
                                    dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.ApplicantId, itemDataInDb.ApplicantId);
                                    dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.Item_Name, itemDataInDb.ComplianceItemName);
                                    dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.Category_Name, itemDataInDb.ComplianceCategoryName);
                                    dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.Package_Name, itemDataInDb.CompliancePackageName);
                                    dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.Verification_Status_Text, itemComplianceStatusText);
                                    dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.Rush_Order_Status_Text, itemDataInDb.RushOrderStatusText);
                                    dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.Verification_Status, itemDataInDb.StatusID);
                                    dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.Assigned_To_User, itemDataInDb.AssignedToUser.IsNull() ? 0 : itemDataInDb.AssignedToUser);

                                    foreach (KeyValuePair<String, Object> dicQueueField in dicQueueFields)
                                    {
                                        sbXML.Append("<QueueDetail>");
                                        sbXML.Append("<QueueID>" + queueId + "</QueueID>"); // Need to change when Moved to next Queue and NOT Same level
                                        sbXML.Append("<RecordID>" + itemDataInDb.ApplicantComplianceItemID + "</RecordID>");
                                        sbXML.Append("<QueueFieldName>" + dicQueueField.Key + "</QueueFieldName>");
                                        sbXML.Append("<QueueFieldValue>" + dicQueueField.Value + "</QueueFieldValue>");
                                        sbXML.Append("<ByPassInitialReview>" + 0 + "</ByPassInitialReview>");
                                        sbXML.Append("<ResetReviewProcess>" + 1 + "</ResetReviewProcess>");
                                        sbXML.Append("</QueueDetail>");
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return Convert.ToString(sbXML);
        }

        private static String GenerateInputXmlClearReconcillationAssignment(List<ApplicantComplianceCategoryData> categoryDataListFromDb, AdminDataEntrySaveContract dataEntryContract,
         Int32 tenantId, Boolean isDefaultTenant)
        {
            StringBuilder sbXML = new StringBuilder();
            sbXML.Append("<Queues>");

            String queueTypeCode = String.Empty;
            List<QueueMetaData> _lstQueueMetaData = LookupManager.GetLookUpData<QueueMetaData>(tenantId);
            List<QueueFieldsMetaData> _lstQueueFieldsMetaData = LookupManager.GetLookUpData<QueueFieldsMetaData>(tenantId);
            List<lkpItemComplianceStatu> _lstItemComplianceStatus = LookupManager.GetLookUpData<lkpItemComplianceStatu>(tenantId);

            foreach (ApplicantCmplncCategoryData categoryData in dataEntryContract.ApplicantCmplncCategoryData)
            {
                ApplicantComplianceCategoryData categoryDataFromDb = categoryDataListFromDb.FirstOrDefault(cond => cond.ComplianceCategoryID
                                                                       == categoryData.CatId);

                if (!categoryData.ApplicantCmplncItemData.IsNullOrEmpty())
                {
                    foreach (var itemData in categoryData.ApplicantCmplncItemData)
                    {
                        ApplicantComplianceItemData itemDataInDb = null;

                        itemDataInDb = categoryDataFromDb.ApplicantComplianceItemDatas.FirstOrDefault(cond => cond.ComplianceItemID == itemData.ItmId && !cond.IsDeleted);
                        var complianceStatus = new lkpItemComplianceStatu();
                        if (itemDataInDb.IsNotNull())
                            complianceStatus = _lstItemComplianceStatus.Where(x => x.IsDeleted == false
                                                                && x.ItemComplianceStatusID == itemDataInDb.StatusID).FirstOrDefault();
                        //For handling those records which were deleted.
                        if (itemData.NewStatuscode == ApplicantItemComplianceStatus.Incomplete.GetStringValue()
                           && itemDataInDb.IsNull()
                           //Added this check as there is no need to clear records for approved items.
                           && itemData.OldStatusCode != ApplicantItemComplianceStatus.Approved.GetStringValue())
                        {
                            Int32 _oldQueueId = AppConsts.NONE;
                            Int32? _newQueueId = AppConsts.NONE;
                            String oldQueueTypeCode = GetQueueTypeCodeByStatus(itemData.OldStatusCode, isDefaultTenant);
                            if (!oldQueueTypeCode.IsNullOrEmpty())
                            {
                                _oldQueueId = _lstQueueMetaData.Where(qmd => qmd.QMD_Code == oldQueueTypeCode && qmd.QMD_IsDeleted == false).FirstOrDefault().QMD_QueueID;
                            }
                            _newQueueId = null;
                            sbXML.Append("<QueueDetail>");

                            sbXML.Append("<OldQueueID>" + _oldQueueId + "</OldQueueID>");
                            if (_newQueueId.IsNotNull())
                                sbXML.Append("<NewQueueID>" + _newQueueId + "</NewQueueID>");
                            sbXML.Append("<RecordID>" + itemData.AcidId + "</RecordID>");
                            sbXML.Append("<IsResetReviewRequired>" + true + "</IsResetReviewRequired>");
                            sbXML.Append("</QueueDetail>");
                        }
                        // Use current item for Handle assignment, only if it was Swapped, or data was changed
                        if (itemDataInDb.IsNotNull()
                           && itemData.ReconciliationReviewCount.IsNotNull()
                        && (itemData.IsItemSwapped || itemData.IsDataChanged || itemData.IsDocAssociationReq))
                        {

                            Int32 _oldQueueId = AppConsts.NONE;
                            Int32? _newQueueId = AppConsts.NONE;
                            String oldQueueTypeCode = GetQueueTypeCodeByStatus(itemData.OldStatusCode, isDefaultTenant);
                            if (!oldQueueTypeCode.IsNullOrEmpty())
                            {
                                _oldQueueId = _lstQueueMetaData.Where(qmd => qmd.QMD_Code == oldQueueTypeCode && qmd.QMD_IsDeleted == false).FirstOrDefault().QMD_QueueID;
                            }
                            String newStatusCode = itemDataInDb.lkpItemComplianceStatu.Code;
                            String newQueueTypeCode = GetQueueTypeCodeByStatus(newStatusCode, isDefaultTenant);
                            if (newStatusCode == ApplicantItemComplianceStatus.Incomplete.GetStringValue()
                                || newStatusCode == ApplicantItemComplianceStatus.Approved.GetStringValue()
                                || newStatusCode == ApplicantItemComplianceStatus.Not_Approved.GetStringValue())
                            {
                                _newQueueId = null;
                            }
                            else if (!newQueueTypeCode.IsNullOrEmpty())
                            {
                                _newQueueId = _lstQueueMetaData.Where(qmd => qmd.QMD_Code == newQueueTypeCode && qmd.QMD_IsDeleted == false).FirstOrDefault().QMD_QueueID;
                            }
                            sbXML.Append("<QueueDetail>");

                            sbXML.Append("<OldQueueID>" + _oldQueueId + "</OldQueueID>");
                            if (_newQueueId.IsNotNull())
                                sbXML.Append("<NewQueueID>" + _newQueueId + "</NewQueueID>");
                            sbXML.Append("<RecordID>" + itemDataInDb.ApplicantComplianceItemID + "</RecordID>");
                            sbXML.Append("<IsResetReviewRequired>" + true + "</IsResetReviewRequired>");
                            sbXML.Append("</QueueDetail>");

                        }
                    }
                }
            }

            sbXML.Append("</Queues>");
            return sbXML.ToString();
        }

        private static String GetQueueTypeCodeByStatus(String itemStatusCode, Boolean isDefaultTenant)
        {
            //Boolean isDefaultTenant = tenantID.Equals(SecurityManager.DefaultTenantID);
            if (itemStatusCode == ApplicantItemComplianceStatus.Pending_Review.GetStringValue()) // Admin
                return QueueMetaDataType.Verification_Queue_For_Admin.GetStringValue();
            else if (itemStatusCode == ApplicantItemComplianceStatus.Pending_Review_For_Client.GetStringValue()) // Client Admin
                return QueueMetaDataType.Verification_Queue_For_ClientAdmin.GetStringValue();
            else if (itemStatusCode == ApplicantItemComplianceStatus.Pending_Review_For_Third_Party.GetStringValue()) // Third Party
                return QueueMetaDataType.Verification_Queue_For_Third_Party.GetStringValue();
            else if (itemStatusCode == ApplicantItemComplianceStatus.Applied_For_Exception.GetStringValue() && isDefaultTenant)
                return QueueMetaDataType.Exception_Queue_For_Admin.GetStringValue();
            else if (itemStatusCode == ApplicantItemComplianceStatus.Applied_For_Exception.GetStringValue() && !isDefaultTenant)
                return QueueMetaDataType.Exception_Queue_For_ClientAdmin.GetStringValue();
            else
                return String.Empty;
        }

        private static String GenerateInputXmlForRuleExecution(Int32 tenantId, PackageSubscription currentSubscription,
                                                               List<ApplicantCmplncCategoryData> categoryDataListWichIsUpdated)
        {
            Int32 categoryObjectTypeId = RuleManager.GetObjectType(ObjectType.Compliance_Category.GetStringValue(), tenantId).OT_ID;
            Int32 packageObjectTypeId = RuleManager.GetObjectType(ObjectType.Compliance_Package.GetStringValue(), tenantId).OT_ID;
            Int32 itemObjectTypeId = RuleManager.GetObjectType(ObjectType.Compliance_Item.GetStringValue(), tenantId).OT_ID;
            Int32 attrObjectTypeId = RuleManager.GetObjectType(ObjectType.Compliance_ATR.GetStringValue(), tenantId).OT_ID;

            List<RuleObjectMapping> ruleObjectMappingList = new List<RuleObjectMapping>();
            RuleObjectMapping ruleObjectMappingForPackage = new RuleObjectMapping
            {
                RuleObjectTypeId = Convert.ToString(packageObjectTypeId),
                RuleObjectId = Convert.ToString(currentSubscription.CompliancePackageID),
                RuleObjectParentId = Convert.ToString(AppConsts.NONE)
            };
            ruleObjectMappingList.Add(ruleObjectMappingForPackage);


            List<ApplicantComplianceCategoryData> categoryDataListFromDb = currentSubscription.ApplicantComplianceCategoryDatas.Where(x => x.IsDeleted == false).ToList();

            foreach (ApplicantCmplncCategoryData categoryDataWichIsUpdated in categoryDataListWichIsUpdated)
            {
                ApplicantComplianceCategoryData categoryDataFromDb = categoryDataListFromDb.FirstOrDefault(cond => cond.ComplianceCategoryID == categoryDataWichIsUpdated.CatId);
                if (categoryDataFromDb.IsNotNull())
                {
                    RuleObjectMapping ruleObjectMappingForCategory = new RuleObjectMapping
                    {
                        RuleObjectTypeId = Convert.ToString(categoryObjectTypeId),
                        RuleObjectId = Convert.ToString(categoryDataWichIsUpdated.CatId),
                        RuleObjectParentId = Convert.ToString(currentSubscription.CompliancePackageID)
                    };

                    List<ApplicantComplianceItemData> itemDataListFromDb = categoryDataFromDb.ApplicantComplianceItemDatas.Where(cond => !cond.IsDeleted).ToList();
                    Boolean itemDataIsAdded = false;
                    if (!categoryDataWichIsUpdated.ApplicantCmplncItemData.IsNullOrEmpty())
                    {
                        foreach (ApplicantCmplncItemData itemData in categoryDataWichIsUpdated.ApplicantCmplncItemData)
                        {
                            if (itemData.IsItemSwapped || itemData.IsDataChanged)
                            {
                                ApplicantComplianceItemData itemDataFromDb = itemDataListFromDb.Where(cond => cond.ComplianceItemID == itemData.ItmId).FirstOrDefault();
                                if (itemDataFromDb.IsNotNull())
                                {
                                    itemDataIsAdded = true;
                                    RuleObjectMapping ruleObjectMappingForItem = new RuleObjectMapping();
                                    ruleObjectMappingForItem.RuleObjectTypeId = Convert.ToString(itemObjectTypeId);
                                    ruleObjectMappingForItem.RuleObjectId = Convert.ToString(itemData.ItmId);
                                    ruleObjectMappingForItem.RuleObjectParentId = Convert.ToString(categoryDataWichIsUpdated.CatId);
                                    ruleObjectMappingList.Add(ruleObjectMappingForItem);
                                    List<ApplicantComplianceAttributeData> attrDataFromDb = itemDataFromDb.ApplicantComplianceAttributeDatas.Where(cond => !cond.IsDeleted).ToList();
                                    foreach (ApplicantComplianceAttributeData attributeData in attrDataFromDb)
                                    {
                                        RuleObjectMapping ruleObjectMappingForAttribte = new RuleObjectMapping();
                                        ruleObjectMappingForAttribte.RuleObjectTypeId = Convert.ToString(attrObjectTypeId);
                                        //ruleObjectMappingForAttribte.RuleObjectId = Convert.ToString(attributeData.ApplicantComplianceAttributeID);
                                        ruleObjectMappingForAttribte.RuleObjectId = Convert.ToString(attributeData.ComplianceAttributeID);
                                        ruleObjectMappingForAttribte.RuleObjectParentId = Convert.ToString(itemData.ItmId);
                                        ruleObjectMappingList.Add(ruleObjectMappingForAttribte);
                                    }
                                }
                            }
                        }
                    }
                    if (itemDataIsAdded)
                    {
                        ruleObjectMappingList.Add(ruleObjectMappingForCategory);
                    }
                }
            }
            return RuleManager.genarateRuleObjectXml(ruleObjectMappingList);
        }

        public static Boolean UpdateDoccumentStatusAfterDataEntry(Int32 applicantDoccumentId, Int32 fdeqId, String documentStatusCode, Int32 currentUserId, Int32 tenantId)
        {
            try
            {
                short documentStatusId = LookupManager.GetLookUpData<lkpDataEntryDocumentStatu>(tenantId).FirstOrDefault(docStatus => !docStatus.LDEDS_IsDeleted && docStatus.LDEDS_Code == documentStatusCode).LDEDS_ID;
                if (BALUtils.GetComplianceDataRepoInstance(tenantId).UpdateDoccumentStatusAfterDataEntry(applicantDoccumentId, documentStatusId, currentUserId))
                {
                    return BALUtils.GetComplianceDataRepoInstance(tenantId).UpdateDoccumentStatusInFlatTableAfterDataEntry(fdeqId, documentStatusId, currentUserId);
                }
                return false;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }

        }

        public static Boolean RunParalleleTaskForHanleAssignmentAndRuleExecution(Dictionary<String, Object> handleAssignmentData, String ruleXml, Int32 applicantId,
                                                                                 Int32 currentloggedInUserId, Int32 tenantId, AdminDataEntrySaveContract dataEntryContract
                                                                                 , Dictionary<String, Object> dicReconcillationHandleAssignmentData)
        {
            try
            {
                Dictionary<String, Object> dataDict = new Dictionary<String, Object>();
                dataDict.Add("ruleXml", ruleXml);
                dataDict.Add("tenantId", tenantId);
                dataDict.Add("currentLoggedInUserId", currentloggedInUserId);
                dataDict.Add("applicantId", applicantId);
                dataDict.Add("handleAssignmentData", handleAssignmentData);
                dataDict.Add("dataEntryContractData", dataEntryContract);
                dataDict.Add("reconcillationHandleAssignmentData", dicReconcillationHandleAssignmentData);
                var loggerService = (HttpContext.Current.ApplicationInstance as IWebApplication).LoggerService;
                var exceptionService = (HttpContext.Current.ApplicationInstance as IWebApplication).ExceptionService;
                ParallelTaskContext.PerformParallelTask(HandleAssignmentAndRuleExecution, dataDict, loggerService, exceptionService);
                return false;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }

        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="dicHandleAssignmentData"></param>
        public static void HandleAssignmentAndRuleExecution(Dictionary<String, Object> dicData)
        {
            try
            {
                Int32 tenantId = 0;
                String rulexml = String.Empty;
                Int32 currentLoggedInUserId = 0;
                Int32 applicantId = 0;
                //UAT-1597
                /*------*/
                AdminDataEntrySaveContract dataEntryContract = null;
                dicData.TryGetValue("dataEntryContractData", out dataEntryContract);

                dicData.TryGetValue("tenantId", out tenantId);
                dicData.TryGetValue("ruleXml", out rulexml);
                dicData.TryGetValue("currentLoggedInUserId", out currentLoggedInUserId);
                dicData.TryGetValue("applicantId", out applicantId);
                Dictionary<String, Object> dicHandleAssignmentData;
                dicData.TryGetValue("handleAssignmentData", out dicHandleAssignmentData);

                Dictionary<String, Object> reconcillationHandleAssignmentData;
                dicData.TryGetValue("reconcillationHandleAssignmentData", out reconcillationHandleAssignmentData);
                BALUtils.GetQueueManagementRepoInstance(tenantId).HandleAssignment(dicHandleAssignmentData);

                BALUtils.GetQueueManagementRepoInstance(tenantId).HandleReconciliationAssignment(reconcillationHandleAssignmentData);

                BALUtils.GetRuleRepoInstance(tenantId).evaluatePostSubmitRules(applicantId, rulexml, currentLoggedInUserId);

                if (!dataEntryContract.IsNullOrEmpty())
                {
                    SendNotificationFromAdminDataEntryforItemStatusChanged(tenantId, dataEntryContract.PackageSubscriptionId,
                                                                           currentLoggedInUserId, applicantId, dataEntryContract);

                    #region UAT-3805
                    List<Int32> categoryIds = dataEntryContract.ApplicantCmplncCategoryData.Where(cnd => cnd.OldCategoryStatusCode
                                                                                                        != ApplicantCategoryComplianceStatus.Approved.GetStringValue()
                                                                                                        && cnd.OldCategoryStatusCode
                                                                                                        != ApplicantCategoryComplianceStatus.Approved_With_Exception.GetStringValue()
                                                                                                  ).DistinctBy(dst => dst.CatId).Select(slct => slct.CatId).ToList();

                    if (!categoryIds.IsNullOrEmpty())
                    {
                        String categoryIDs = String.Join(",", categoryIds);
                        ProfileSharingManager.SendItemDocNotificationOnCategoryApproval(tenantId, categoryIDs, applicantId, String.Empty, lkpUseTypeEnum.COMPLIANCE.GetStringValue()
                                                                                        , dataEntryContract.PackageSubscriptionId, null, currentLoggedInUserId);
                    }
                    #endregion
                }
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
            }
        }
        #endregion


        #region UAT-1039 : Add contextual video popups on applicant side of complio.
        public static String ShowDocumentVideo(Int32 tenantId, Int32 currentUserId, List<Int32> lstCompliancePkgIds)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).ShowDocumentVideo(currentUserId, lstCompliancePkgIds);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }

        public static String ShowDataEnteredVideo(int tenantId, int currentUserId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).ShowDataEnteredVideo(currentUserId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }
        #endregion

        public static List<Tuple<Int32, Boolean>> GetReciptDocumentStatus(int tenantId, List<int> orderIds)
        {
            try
            {
                List<Order> lstOrders = BALUtils.GetComplianceDataRepoInstance(tenantId).GetListofOrdersForOrderID(orderIds);
                List<Tuple<Int32, Boolean>> lstRecieptStatus = new List<Tuple<Int32, Boolean>>();
                if (lstOrders.IsNotNull())
                {
                    foreach (Order order in lstOrders)
                    {
                        if (order.ApplicantDocumentID.IsNotNull())
                        {
                            lstRecieptStatus.Add(new Tuple<Int32, Boolean>(order.OrderID, true));
                        }
                        else
                        {
                            lstRecieptStatus.Add(new Tuple<Int32, Boolean>(order.OrderID, false));
                        }
                    }
                }
                return lstRecieptStatus;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }


        #region Data Entry Tracking

        public static void DataEntryTimeTracking(DataEntryTrackingContract dataEntryTrackingContract, Int32 tenantId)
        {
            try
            {
                BALUtils.GetComplianceDataRepoInstance(tenantId).DataEntryTimeTracking(dataEntryTrackingContract);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static short GetDocumentStatusIdByCode(String documentStatusCode)
        {
            try
            {
                return LookupManager.GetLookUpData<Entity.lkpDataEntryDocumentStatu>().FirstOrDefault(docStatus => !docStatus.LDEDS_IsDeleted && docStatus.LDEDS_Code == documentStatusCode).LDEDS_ID;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }


        #endregion

        #region UAT-1176 - Node Employment
        /// <summary>
        /// Method to check if client admin has any Employment Node Permission
        /// </summary>
        /// <param name="tenantID"></param>
        /// <param name="userID"></param>
        /// <returns></returns>
        public static Boolean CheckEmploymentNodePermission(Int32 tenantID, Int32 userID)
        {
            try
            {
                //String fullAcessCode = LkpPermission.FullAccess.GetStringValue();
                //String readOnlyCode = LkpPermission.ReadOnly.GetStringValue();
                //List<short> lstPermissionID = LookupManager.GetLookUpData<Entity.ClientEntity.lkpPermission>(tenantID).Where(cond => cond.PER_IsDeleted == false
                //                                    && (cond.PER_Code == fullAcessCode
                //                                        || cond.PER_Code == readOnlyCode))
                //                                     .Select(col => col.PER_ID).ToList();

                return BALUtils.GetComplianceDataRepoInstance(tenantID).CheckEmploymentNodePermission(userID);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }
        #endregion

        public static Int32 GetCompliancePkgTypeId(String pkgTypeCode, Int32 tenantID)
        {
            try
            {
                return LookupManager.GetLookUpData<lkpCompliancePackageType>(tenantID).FirstOrDefault(ps => ps.CPT_Code == pkgTypeCode).CPT_ID;
            }
            catch (SysXException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }

        #region UAT-1025: Update Deadline Date email notification to include category list
        public static String GetCategoryDetailForDeadLineNotification(Int32 tenantId, Int32 selectedNodeId, Int32 organizationUserId)
        {
            try
            {
                StringBuilder packageDetails = new StringBuilder();
                String catApprvWithExceptionStatusCode = ApplicantCategoryComplianceStatus.Approved_With_Exception.GetStringValue();
                String catApprvedStatusCode = ApplicantCategoryComplianceStatus.Approved.GetStringValue();

                //Get package subscriptions list for deadline notifications
                List<PackageSubscription> lstPackageSubscription = BALUtils.GetComplianceDataRepoInstance(tenantId).GetPackagesDetailForDeadLineNotification
                                                                                    (selectedNodeId, organizationUserId);
                lstPackageSubscription.ForEach(pkgSub =>
                {

                    //Get all compliance package category mapping 
                    List<CompliancePackageCategory> lstCompliancePackageCategory = pkgSub.CompliancePackage.CompliancePackageCategories.ToList();
                    //Get Approved with exception categories.
                    List<ComplianceCategory> lstApproveWithExceptionCategories = pkgSub.ApplicantComplianceCategoryDatas.Where(cnd =>
                                                                                 cnd.lkpCategoryComplianceStatu.Code == catApprvWithExceptionStatusCode
                                                                                 && cnd.IsDeleted == false)
                                                                                 .Select(slct => slct.ComplianceCategory).ToList();

                    //Get Approved category ids.
                    List<Int32> lstApprovedCategoryIds = pkgSub.ApplicantComplianceCategoryDatas.Where(cnd => cnd.IsDeleted == false
                                                               && (cnd.lkpCategoryComplianceStatu.Code == catApprvWithExceptionStatusCode
                                                                   || cnd.lkpCategoryComplianceStatu.Code == catApprvedStatusCode))
                                                           .Select(slctCatId => slctCatId.ComplianceCategoryID).ToList();

                    //Get Not Approved and incomplete categories
                    List<ComplianceCategory> lstNotApprovedCategories = lstCompliancePackageCategory.Where(catAprd => !lstApprovedCategoryIds.Contains(catAprd.CPC_CategoryID)
                                                                                                         && catAprd.CPC_IsDeleted == false)
                                                                                                        .Select(slt => slt.ComplianceCategory).ToList();
                    if ((lstApproveWithExceptionCategories.IsNotNull() && lstApproveWithExceptionCategories.Count > AppConsts.NONE)
                        || (lstNotApprovedCategories.IsNotNull() && lstNotApprovedCategories.Count > AppConsts.NONE)
                        )
                    {
                        packageDetails.Append(pkgSub.CompliancePackage.PackageName + ": " + "<br/>");
                        packageDetails.Append("Categories: ");
                        if (lstNotApprovedCategories.IsNotNull() && lstNotApprovedCategories.Count > 0)
                        {
                            packageDetails.Append("<br/>");
                            packageDetails.Append("Categories Not Approved: ");
                        }

                        //Append not approved categories in string builder
                        lstNotApprovedCategories.ForEach(catNAp =>
                        {
                            packageDetails.Append(catNAp.CategoryName + ", ");
                        });

                        //Remove last ',' and last space from package detail string builder
                        if (lstNotApprovedCategories.Count > AppConsts.NONE && packageDetails.Length > AppConsts.ONE)
                        {
                            packageDetails.Remove(packageDetails.Length - 2, 1);
                        }

                        if (lstApproveWithExceptionCategories.IsNotNull() && lstApproveWithExceptionCategories.Count > 0)
                        {
                            packageDetails.Append("<br/>");
                            packageDetails.Append("Categories Exceptionally Approved: ");
                        }

                        //Append approved with excdeption categories in string builder
                        lstApproveWithExceptionCategories.ForEach(catApEx =>
                        {
                            packageDetails.Append(catApEx.CategoryName + ", ");
                        });

                        //Remove last ',' and last space from package detail string builder
                        if (lstApproveWithExceptionCategories.Count > AppConsts.NONE && packageDetails.Length > AppConsts.ONE)
                        {
                            packageDetails.Remove(packageDetails.Length - 2, 1);
                        }

                        packageDetails.Append("<br/><br/>");

                    }
                });

                return packageDetails.ToString();
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }
        #endregion

        #region UAT-1214:Changes to "Required" and "Optional" labels in order flow
        public static List<ClientSetting> GetBkgOrdFlowLabelSetting(Int32 tenantId, String requiredLabelCode, String optionalLabelCode)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetBkgOrdFlowLabelSetting(tenantId, requiredLabelCode, optionalLabelCode);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        #endregion

        /// <summary>
        /// Get the list of Client settings by Codes.
        /// </summary>
        /// <param name="tenantId"></param>
        /// <param name="lstCodes"></param>
        /// <returns></returns>
        public static List<ClientSetting> GetClientSettingsByCodes(Int32 tenantId, List<String> lstCodes, String _languageCode = default(String))
        {
            try
            {
                if (_languageCode.IsNullOrEmpty())
                {
                    _languageCode = Languages.ENGLISH.GetStringValue();
                }
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetClientSettingsByCodes(tenantId, lstCodes, _languageCode);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        #region UAT-1189:WB: Bulk Archive capability
        public static List<UploadedDocumentApplicantDataContract> GetApplicantSubscriptionDataBulkArchive(Int32 tenantId, String applicantXmlData, Int32? curentLoggedInUserID)
        {
            try
            {
                DataTable result = BALUtils.GetComplianceDataRepoInstance(tenantId).GetApplicantSubscriptionDataBulkArchive(applicantXmlData, curentLoggedInUserID);
                return AssignMatchedApplicantSubscriptionsDataToModel(result);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static List<ApplicantDetailContract> AssignUnMatchedApplicantDataToModel(DataTable table)
        {
            try
            {
                IEnumerable<DataRow> rows = table.AsEnumerable();
                return rows.Select(x => new ApplicantDetailContract
                {
                    FirstName = Convert.ToString(x["FirstName"]),
                    LastName = Convert.ToString(x["LastName"]),
                    DOB = Convert.ToDateTime(x["DOB"]).Date != DateTime.MinValue.Date ? Convert.ToDateTime(x["DOB"]).Date : (DateTime?)null,
                    //DOB = Convert.ToDateTime(x["DOB"]).Date,

                }).ToList();
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static List<UploadedDocumentApplicantDataContract> AssignMatchedApplicantSubscriptionsDataToModel(DataTable table)
        {
            try
            {
                IEnumerable<DataRow> rows = table.AsEnumerable();
                return rows.Select(x => new UploadedDocumentApplicantDataContract
                {
                    ApplicantFirstName = Convert.ToString(x["FirstName"]),
                    ApplicantLastName = Convert.ToString(x["LastName"]),
                    ApplicantDOB = Convert.ToDateTime(x["DOB"]).Date,
                    ApplicantID = x["OrganizationUserID"].GetType().Name == "DBNull" ? AppConsts.NONE : (Int32)x["OrganizationUserID"],
                    InstitutionHierarchy = Convert.ToString(x["InstitutionHierarchy"]),
                    PackageName = Convert.ToString(x["PackageName"]),
                    PackageSubscriptionID = x["PackageSubscriptionID"].GetType().Name == "DBNull" ? AppConsts.NONE : (Int32)x["PackageSubscriptionID"],

                }).ToList();
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static List<ApplicantDetailContract> GetUnMatchedApplicantDetails(Int32 tenantId, String applicantXmlData)
        {
            try
            {
                DataTable dataTable = BALUtils.GetComplianceDataRepoInstance(tenantId).GetUnMatchedApplicantDetails(applicantXmlData);
                return AssignUnMatchedApplicantDataToModel(dataTable);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        #endregion

        #region UAT-1234: WB: spreadsheet upload to see if applicants have created accounts or ordered
        public static List<UploadedDocumentApplicantDataContract> GetUploadedDocumentApplicantOrders(Int32 tenantId, String applicantXmlData, List<String> lstOrderPkgType, Int32? curentLoggedInUserID, CustomPagingArgsContract customPagingArgsContract)
        {
            try
            {
                String orderPkgTypes = String.Join(",", lstOrderPkgType.ToArray());
                DataTable result = BALUtils.GetComplianceDataRepoInstance(tenantId).GetUploadedDocumentApplicantOrders(applicantXmlData, orderPkgTypes, curentLoggedInUserID, customPagingArgsContract);
                return AssignMatchedApplicantOrdersDataToModel(result);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static List<UploadedDocumentApplicantDataContract> AssignMatchedApplicantOrdersDataToModel(DataTable table)
        {
            try
            {
                IEnumerable<DataRow> rows = table.AsEnumerable();
                return rows.Select(x => new UploadedDocumentApplicantDataContract
                {
                    ApplicantFirstName = Convert.ToString(x["FirstName"]),
                    ApplicantLastName = Convert.ToString(x["LastName"]),
                    ApplicantDOB = Convert.ToDateTime(x["DOB"]).Date,
                    OrderID = x["OrderID"].GetType().Name == "DBNull" ? AppConsts.NONE : (Int32)x["OrderID"],
                    InstitutionHierarchy = Convert.ToString(x["InstitutionHierarchy"]),
                    PackageName = Convert.ToString(x["PackageName"]),
                    OrderStatusName = Convert.ToString(x["OrderStatusName"]),
                    OrderNumber = x["OrderNumber"].GetType().Name == "DBNull" ? String.Empty : (String)x["OrderNumber"],
                }).ToList();
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        #endregion

        #region [UAT-1245:If payment method is the same, both tracking and screening are getting cancelled when the applicant attempts to cancel the tracking order.]
        /// <summary>
        /// Method to return the order by previous order id.
        /// </summary>
        /// <param name="prevOrderId">previous order id</param>
        /// <param name="orderRequestId">order request type code</param>
        /// <returns></returns>
        public static Order GetOrderByPreviousOrderID(Int32 tenantId, Int32 prevOrderId, List<String> orderRequestTypeList)
        {
            try
            {
                List<Int32> orderRequestTypeIDList = LookupManager.GetLookUpData<Entity.ClientEntity.lkpOrderRequestType>(tenantId).Where(cnd => orderRequestTypeList.Contains(cnd.ORT_Code) && cnd.ORT_Active == true).Select(slct => slct.ORT_ID).ToList();

                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetOrderByPreviousOrderID(prevOrderId, orderRequestTypeIDList);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        #endregion

        #region  UAT 1230:WB: As an admin, I should be able to invite a person (or group of people) to create an applicant account

        public static Boolean IsOrganisationUserExistByEmail(string email, int tenantId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).IsOrganisationUserExistByEmail(email);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Get Organisation Users by emails
        /// </summary>
        /// <param name="lstEmail"></param>
        /// <param name="tenantId"></param>
        /// <returns></returns>
        public static List<OrganizationUser> GetOrganisationUsersByEmail(List<String> lstEmail, Int32 tenantId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetOrganisationUsersByEmail(lstEmail);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        #endregion

        #region UAT 1304 Instructor/Preceptor screens and functionality
        public static ClientSystemDocument GetClientSystemDocument(Int32 clientSystemDocID, Int32 tenantId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetClientSystemDocument(clientSystemDocID);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        #endregion


        #region UAT 1434 Add variable from UAT-1025 to "Notification Change of Status: Compliant to Not Compliant" email template
        /// <summary>
        /// Add variable from UAT-1025 to "Notification Change of Status: Compliant to Not Compliant" email template
        /// </summary>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="selectedNodeId">Hierarchy Node ID</param>
        /// <param name="pkgSub">PackageSubscription</param>
        /// <returns> Formatted String for Catagories.</returns>
        public static String GetCategoryDetailForComplianceStatusChange(Int32 tenantId, Int32 selectedNodeId, PackageSubscription pkgSub)
        {
            try
            {
                StringBuilder packageDetails = new StringBuilder();
                String catApprvWithExceptionStatusCode = ApplicantCategoryComplianceStatus.Approved_With_Exception.GetStringValue();
                String catApprvedStatusCode = ApplicantCategoryComplianceStatus.Approved.GetStringValue();

                //Get all compliance package category mapping 
                List<CompliancePackageCategory> lstCompliancePackageCategory = pkgSub.CompliancePackage.CompliancePackageCategories.ToList();
                //Get Approved with exception categories.
                List<ComplianceCategory> lstApproveWithExceptionCategories = pkgSub.ApplicantComplianceCategoryDatas.Where(cnd =>
                                                                             cnd.lkpCategoryComplianceStatu.Code == catApprvWithExceptionStatusCode
                                                                             && cnd.IsDeleted == false)
                                                                             .Select(slct => slct.ComplianceCategory).ToList();

                //Get Approved category ids.
                List<Int32> lstApprovedCategoryIds = pkgSub.ApplicantComplianceCategoryDatas.Where(cnd => cnd.IsDeleted == false
                                                           && (cnd.lkpCategoryComplianceStatu.Code == catApprvWithExceptionStatusCode
                                                               || cnd.lkpCategoryComplianceStatu.Code == catApprvedStatusCode))
                                                       .Select(slctCatId => slctCatId.ComplianceCategoryID).ToList();

                //Get Not Approved and incomplete categories
                List<ComplianceCategory> lstNotApprovedCategories = lstCompliancePackageCategory.Where(catAprd => !lstApprovedCategoryIds.Contains(catAprd.CPC_CategoryID)
                                                                                                     && catAprd.CPC_IsDeleted == false)
                                                                                                    .Select(slt => slt.ComplianceCategory).ToList();
                if ((lstApproveWithExceptionCategories.IsNotNull() && lstApproveWithExceptionCategories.Count > AppConsts.NONE)
                    || (lstNotApprovedCategories.IsNotNull() && lstNotApprovedCategories.Count > AppConsts.NONE)
                    )
                {
                    packageDetails.Append(pkgSub.CompliancePackage.PackageName + ": " + "<br/>");
                    packageDetails.Append("Categories: ");
                    if (lstNotApprovedCategories.IsNotNull() && lstNotApprovedCategories.Count > 0)
                    {
                        packageDetails.Append("<br/>");
                        packageDetails.Append("Categories Not Approved: ");
                    }

                    //Append not approved categories in string builder
                    lstNotApprovedCategories.ForEach(catNAp =>
                    {
                        packageDetails.Append(catNAp.CategoryName + ", ");
                    });

                    //Remove last ',' and last space from package detail string builder
                    if (lstNotApprovedCategories.Count > AppConsts.NONE && packageDetails.Length > AppConsts.ONE)
                    {
                        packageDetails.Remove(packageDetails.Length - 2, 1);
                    }

                    if (lstApproveWithExceptionCategories.IsNotNull() && lstApproveWithExceptionCategories.Count > 0)
                    {
                        packageDetails.Append("<br/>");
                        packageDetails.Append("Categories Exceptionally Approved: ");
                    }

                    //Append approved with excdeption categories in string builder
                    lstApproveWithExceptionCategories.ForEach(catApEx =>
                    {
                        packageDetails.Append(catApEx.CategoryName + ", ");
                    });

                    //Remove last ',' and last space from package detail string builder
                    if (lstApproveWithExceptionCategories.Count > AppConsts.NONE && packageDetails.Length > AppConsts.ONE)
                    {
                        packageDetails.Remove(packageDetails.Length - 2, 1);
                    }

                    packageDetails.Append("<br/><br/>");

                }

                return packageDetails.ToString();
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }

        #endregion

        #region UAT 1465 WB: Add same from UAT-1434 to the Nag Email Template
        /// <summary>
        /// Add variable from UAT-1025 to "Notification Change of Status: Compliant to Not Compliant" email template
        /// </summary>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="selectedNodeId">Hierarchy Node ID</param>
        /// <param name="pkgSub">PackageSubscription</param>
        /// <returns> Formatted String for Catagories.</returns>
        public static String GetCatagoryDetailForNagEmail(Int32 tenantId, Int32 selectedNodeId, Int32 pkgSubscriptionID)
        {
            try
            {
                StringBuilder packageDetails = new StringBuilder();
                String catApprvWithExceptionStatusCode = ApplicantCategoryComplianceStatus.Approved_With_Exception.GetStringValue();
                String catApprvedStatusCode = ApplicantCategoryComplianceStatus.Approved.GetStringValue();

                PackageSubscription pkgSub = BALUtils.GetComplianceDataRepoInstance(tenantId).GetPackageSubscriptionByID(tenantId, pkgSubscriptionID);
                if (pkgSub.IsNotNull())
                {
                    //Get all compliance package category mapping 
                    List<CompliancePackageCategory> lstCompliancePackageCategory = pkgSub.CompliancePackage.CompliancePackageCategories.ToList();
                    //Get Approved with exception categories.
                    List<ComplianceCategory> lstApproveWithExceptionCategories = pkgSub.ApplicantComplianceCategoryDatas.Where(cnd =>
                                                                                 cnd.lkpCategoryComplianceStatu.Code == catApprvWithExceptionStatusCode
                                                                                 && cnd.IsDeleted == false)
                                                                                 .Select(slct => slct.ComplianceCategory).ToList();

                    //Get Approved category ids.
                    List<Int32> lstApprovedCategoryIds = pkgSub.ApplicantComplianceCategoryDatas.Where(cnd => cnd.IsDeleted == false
                                                               && (cnd.lkpCategoryComplianceStatu.Code == catApprvWithExceptionStatusCode
                                                                   || cnd.lkpCategoryComplianceStatu.Code == catApprvedStatusCode))
                                                           .Select(slctCatId => slctCatId.ComplianceCategoryID).ToList();

                    //Get Not Approved and incomplete categories
                    List<ComplianceCategory> lstNotApprovedCategories = lstCompliancePackageCategory.Where(catAprd => !lstApprovedCategoryIds.Contains(catAprd.CPC_CategoryID)
                                                                                                         && catAprd.CPC_IsDeleted == false)
                                                                                                        .Select(slt => slt.ComplianceCategory).ToList();
                    if ((lstApproveWithExceptionCategories.IsNotNull() && lstApproveWithExceptionCategories.Count > AppConsts.NONE)
                        || (lstNotApprovedCategories.IsNotNull() && lstNotApprovedCategories.Count > AppConsts.NONE)
                        )
                    {
                        packageDetails.Append(pkgSub.CompliancePackage.PackageName + ": " + "<br/>");
                        packageDetails.Append("Categories: ");
                        if (lstNotApprovedCategories.IsNotNull() && lstNotApprovedCategories.Count > 0)
                        {
                            packageDetails.Append("<br/>");
                            packageDetails.Append("Categories Not Approved: ");
                        }

                        //Append not approved categories in string builder
                        lstNotApprovedCategories.ForEach(catNAp =>
                        {
                            packageDetails.Append(catNAp.CategoryName + ", ");
                        });

                        //Remove last ',' and last space from package detail string builder
                        if (lstNotApprovedCategories.Count > AppConsts.NONE && packageDetails.Length > AppConsts.ONE)
                        {
                            packageDetails.Remove(packageDetails.Length - 2, 1);
                        }

                        if (lstApproveWithExceptionCategories.IsNotNull() && lstApproveWithExceptionCategories.Count > 0)
                        {
                            packageDetails.Append("<br/>");
                            packageDetails.Append("Categories Exceptionally Approved: ");
                        }

                        //Append approved with excdeption categories in string builder
                        lstApproveWithExceptionCategories.ForEach(catApEx =>
                        {
                            packageDetails.Append(catApEx.CategoryName + ", ");
                        });

                        //Remove last ',' and last space from package detail string builder
                        if (lstApproveWithExceptionCategories.Count > AppConsts.NONE && packageDetails.Length > AppConsts.ONE)
                        {
                            packageDetails.Remove(packageDetails.Length - 2, 1);
                        }

                        packageDetails.Append("<br/><br/>");

                    }
                }
                return packageDetails.ToString();
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }

        #endregion

        #region Private Methods

        /// <summary>
        /// Method to return the grouping list of Order payment detail and its compliance packages.
        /// </summary>
        /// <param name="lstOrderPaymentDetail">Order payment detail list</param>
        /// <param name="_PrevOrder">previous order </param>
        /// <param name="tenantId">TenantID</param>
        /// <returns></returns>
        private static List<PkgPaymentGrouping> GetPkgPaymentGroupingData(List<OrderPaymentDetail> lstOrderPaymentDetail, Order _PrevOrder, Int32 tenantId)
        {
            List<PkgPaymentGrouping> _lstGroupedData = new List<PkgPaymentGrouping>();
            String _CompPkgTypeCode = OrderPackageTypes.COMPLIANCE_PACKAGE.GetStringValue();

            #region UAT-1697: Add new client setting to make it where all subscription renewals nees to be approved, even if payment method is invoice without approval

            Boolean ifRenewalOrderApprovalRequired = false;
            //Check for client settings
            String rnwlOrderAprvlRqdCode = Setting.SUBSCRIPTION_RENEWAL_NEED_APPROVAL.GetStringValue();
            ClientSetting rnwlOrderAprvlRqdSetting = GetClientSetting(tenantId).Where(cond => cond.lkpSetting.Code
                                                                                       == rnwlOrderAprvlRqdCode && !cond.CS_IsDeleted).FirstOrDefault();
            if (!rnwlOrderAprvlRqdSetting.IsNullOrEmpty() &&
                !rnwlOrderAprvlRqdSetting.CS_SettingValue.IsNullOrEmpty())
            {
                ifRenewalOrderApprovalRequired = Convert.ToBoolean(Convert.ToInt32(rnwlOrderAprvlRqdSetting.CS_SettingValue));
            }

            #endregion

            foreach (OrderPaymentDetail orderPaymentDetail in lstOrderPaymentDetail)
            {
                PkgPaymentGrouping pkgPaymentGroupedData = new PkgPaymentGrouping();
                OrderPkgPaymentDetail OrderPkgPaymentForComp = new OrderPkgPaymentDetail();
                Dictionary<String, bool> lstPackages = new Dictionary<String, bool>();


                if (ifRenewalOrderApprovalRequired &&
                    orderPaymentDetail.lkpPaymentOption.Code == PaymentOptions.InvoiceWithOutApproval.GetStringValue())
                {
                    String invoiceWithApproval = PaymentOptions.InvoiceWithApproval.GetStringValue();
                    lkpPaymentOption invoiceWithAprvlPymntOptn = LookupManager.GetLookUpData<Entity.ClientEntity.lkpPaymentOption>(tenantId)
                                                                                   .FirstOrDefault(cnd => cnd.Code == invoiceWithApproval && cnd.IsDeleted == false);
                    pkgPaymentGroupedData.PaymentModeCode = invoiceWithAprvlPymntOptn.IsNotNull() ? invoiceWithAprvlPymntOptn.Code : String.Empty;
                    pkgPaymentGroupedData.PaymentModeId = invoiceWithAprvlPymntOptn.IsNotNull() ? invoiceWithAprvlPymntOptn.PaymentOptionID : AppConsts.NONE;
                }
                else
                {
                    pkgPaymentGroupedData.PaymentModeCode = orderPaymentDetail.lkpPaymentOption.IsNotNull() ? orderPaymentDetail.lkpPaymentOption.Code : String.Empty;
                    pkgPaymentGroupedData.PaymentModeId = orderPaymentDetail.OPD_PaymentOptionID.IsNotNull() ? orderPaymentDetail.OPD_PaymentOptionID.Value : AppConsts.NONE;
                }
                pkgPaymentGroupedData.TotalAmount = orderPaymentDetail.OPD_Amount.IsNotNull() ? orderPaymentDetail.OPD_Amount.Value : AppConsts.NONE;
                OrderPkgPaymentForComp = orderPaymentDetail.OrderPkgPaymentDetails.FirstOrDefault(cnd => cnd.OPPD_IsDeleted == false && cnd.lkpOrderPackageType.OPT_Code == _CompPkgTypeCode);

                if (OrderPkgPaymentForComp.IsNotNull() && _PrevOrder.DeptProgramPackage.IsNotNull())
                {
                    String key = _PrevOrder.DeptProgramPackage.DPP_CompliancePackageID + "_" + Guid.NewGuid().ToString();
                    lstPackages.Add(key, false);
                }
                pkgPaymentGroupedData.lstPackages = lstPackages;
                _lstGroupedData.Add(pkgPaymentGroupedData);
            }
            return _lstGroupedData;
        }

        private static OrganizationUserContract ConvertEntityToOrganizationUserContract(usp_GetUserDetails_Result organizationUser)
        {
            OrganizationUserContract organizationUserContract = new OrganizationUserContract();
            organizationUserContract.FirstName = organizationUser.FirstName;
            organizationUserContract.MiddleName = organizationUser.MiddleName;
            organizationUserContract.LastName = organizationUser.LastName;
            organizationUserContract.Email = organizationUser.PrimaryEmail;
            organizationUserContract.DateOfBirth = Convert.ToDateTime(organizationUser.DateOfBirth);
            organizationUserContract.UserName = organizationUser.UserName;
            organizationUserContract.Phone = organizationUser.PhoneNo;
            organizationUserContract.Address1 = organizationUser.Address1;
            organizationUserContract.Address2 = organizationUser.Address2;
            organizationUserContract.City = organizationUser.CityName;
            organizationUserContract.State = organizationUser.StateName;
            organizationUserContract.Country = organizationUser.CountryName;
            organizationUserContract.ZipCode = organizationUser.ZipCode;
            organizationUserContract.County = organizationUser.CountyName;

            return organizationUserContract;
        }

        #endregion

        #region UAT 1080 Addition of notification for orders that are sent for online payment
        public static List<usp_GetIncompleteOnlineOrders_Result> GetIncompleteOnlineOrders(Int32 tenantId, Int32 chunkSize, Int32 maxRetryCount, Int32 retryTimeLag)
        {
            return BALUtils.GetComplianceDataRepoInstance(tenantId).GetIncompleteOnlineOrders(chunkSize, maxRetryCount, retryTimeLag);
        }

        public static void SaveUpdateOrderNotifications(Int32 tenantId, Int32? orderNotificationID, Int32 backgroundProcessUserId, Int32 orderID, Int32? systemCommunicationId, Int16 businessChannelTypeId, Int32 orderNotificationTypeID, string notificationDetail)
        {
            BALUtils.GetComplianceDataRepoInstance(tenantId).SaveUpdateOrderNotifications(orderNotificationID, backgroundProcessUserId, orderID, systemCommunicationId, businessChannelTypeId, orderNotificationTypeID, notificationDetail);
        }

        #endregion

        #region UAT 1438: Enhancement to allow students to select a User Group.

        /// <summary>
        /// This method will save the UserGroup custom attribute in ApplicantUserGroupMapping Table.
        /// </summary>
        /// <param name="tenantID"></param>
        /// <param name="lstApplicantUserGroupMapping"></param>
        /// <param name="loggedInUserID"></param>
        /// <returns></returns>
        public static bool SaveUpdateApplicantUserGroupCustomAttribute(Int32 tenantID, List<ApplicantUserGroupMapping> lstApplicantUserGroupMapping, Int32 loggedInUserID, Int32 orgUsrID)
        {
            try
            {
                List<ApplicantUserGroupMapping> lstApplicantUserGroupMappingDistinct = lstApplicantUserGroupMapping.DistinctBy(x => x.AUGM_UserGroupID).ToList();
                List<ApplicantUserGroupMapping> lstPrevUserGroupMapping = BALUtils.GetComplianceDataRepoInstance(tenantID).GetApplicantUserGroupMappingForUser(loggedInUserID);

                List<Int32> lstCurrentUserGroupMappingIDs = lstApplicantUserGroupMappingDistinct.Select(x => x.AUGM_UserGroupID).ToList();
                List<Int32> lstPrevUserGroupMappingIDs = lstPrevUserGroupMapping.Select(x => x.AUGM_UserGroupID).ToList();

                List<Int32> usergroupIdsToAdd = lstCurrentUserGroupMappingIDs.Except(lstPrevUserGroupMappingIDs).ToList();
                List<Int32> usergroupIdsToRemove = lstPrevUserGroupMappingIDs.Except(lstCurrentUserGroupMappingIDs).ToList();

                List<ApplicantUserGroupMapping> lstApplicantUserGroupMappingToAdd = lstApplicantUserGroupMappingDistinct.Where(x => usergroupIdsToAdd.Contains(x.AUGM_UserGroupID)).ToList();
                List<ApplicantUserGroupMapping> lstApplicantUserGroupMappingToRemove = lstPrevUserGroupMapping.Where(x => usergroupIdsToRemove.Contains(x.AUGM_UserGroupID)).ToList();

                //Remove the deleted records
                if (!lstApplicantUserGroupMappingToRemove.IsNullOrEmpty())
                {
                    foreach (ApplicantUserGroupMapping applicantUserGroupMapping in lstApplicantUserGroupMappingToRemove)
                    {
                        applicantUserGroupMapping.AUGM_IsDeleted = true;
                        applicantUserGroupMapping.AUGM_ModifiedByID = orgUsrID;
                        applicantUserGroupMapping.AUGM_ModifiedOn = DateTime.Now;
                    }
                }

                if (lstApplicantUserGroupMappingToRemove.IsNullOrEmpty() && lstApplicantUserGroupMappingToAdd.IsNullOrEmpty())
                {
                    return true; //No need to call save.
                }
                else
                {
                    return BALUtils.GetComplianceDataRepoInstance(tenantID).SaveUpdateApplicantUserGroupCustomAttribute(lstApplicantUserGroupMappingToAdd, loggedInUserID);
                }
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }

        public static bool IsUserGroupCustomAttributeExist(Int32 tenantID, List<Int32> lstHierarchyNodeIds, Int32 loggedInUserID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).IsUserGroupCustomAttributeExist(lstHierarchyNodeIds, loggedInUserID);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }


        /// <summary>
        /// UAT 1438: Enhancement to allow students to select a User Group. 
        /// <param name="lstUserGroupIDs"></param>
        public static List<ApplicantUserGroupMapping> AddCustomAttributeValuesForUserGroup(List<Int32> lstUserGroupIDs, Int32 loggedInUserId, Int32 orgUserId)
        {
            try
            {
                List<ApplicantUserGroupMapping> lstUserGroupCustomAttributeMapping = new List<ApplicantUserGroupMapping>();
                if (lstUserGroupIDs.IsNotNull())
                {

                    foreach (Int32 userGroupID in lstUserGroupIDs)
                    {
                        ApplicantUserGroupMapping applicantUserGroupMapping = new ApplicantUserGroupMapping();
                        applicantUserGroupMapping.AUGM_UserGroupID = userGroupID;
                        applicantUserGroupMapping.AUGM_OrganizationUserID = loggedInUserId;
                        applicantUserGroupMapping.AUGM_IsDeleted = false;
                        applicantUserGroupMapping.AUGM_CreatedByID = orgUserId;
                        applicantUserGroupMapping.AUGM_CreatedOn = DateTime.Now;

                        lstUserGroupCustomAttributeMapping.Add(applicantUserGroupMapping);
                    }
                }
                return lstUserGroupCustomAttributeMapping;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }
        #endregion

        public static Dictionary<Int32, String> GetCategoryListFilterForReport(Int32 tenantID, String nodeIds)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).GetCategoryListFilterForReport(tenantID, nodeIds);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }

        public static Dictionary<Int32, String> GetItemListFilterForReport(Int32 tenantID, String selectedCategoryIds)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).GetItemListFilterForReport(tenantID, selectedCategoryIds);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }

        public static Dictionary<Int32, String> GetHierarchyListFilterForReport(Int32 tenantID, Int32 userID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).GetHierarchyListFilterForReport(tenantID, userID);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }

        public static Dictionary<Int32, String> GetUserGroupListFilterForReport(Int32 tenantID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).GetUserGroupListFilterForReport(tenantID);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }

        public static Boolean GetOptionalCategorySettingForNode(Int32 tenantID, Int32 hierarchyNodeID, Int32 subscriptionID, String subscriptionType)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).GetOptionalCategorySettingForCompliancePackage(hierarchyNodeID, subscriptionID);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }

        #region Bulletin
        public static List<BulletinContract> GetBulletin(Int32 tenantId, String selectedInstitutionIds, String selectedHieararchyIds)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetBulletin(selectedInstitutionIds, selectedHieararchyIds);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }

        public static void AddUpdateBulletinNodeMapping(Int32 bulletinId, Int32 currentUserId, List<Int32> lstDpmIds, Int32 tenantId)
        {
            try
            {
                BALUtils.GetComplianceDataRepoInstance(tenantId).AddUpdateBulletinNodeMapping(bulletinId, currentUserId, lstDpmIds);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }

        public static void DeleteBulletinNodeMapping(Int32 bulletinId, Int32 tenantId, Int32 currentUserId)
        {
            try
            {
                BALUtils.GetComplianceDataRepoInstance(tenantId).DeleteBulletinNodeMapping(bulletinId, currentUserId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }

        #endregion

        #region Bulletins Popup

        /// <summary>
        /// Get Bulletin IDs List
        /// </summary>
        /// <param name="tenantID"></param>
        /// <param name="currentUserId"></param>
        /// <returns></returns>
        public static List<Int32> GetBulletins(Int32 tenantId, Int32 currentUserId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetBulletins(tenantId, currentUserId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }

        #endregion

        #region UAT-1254:
        /// <summary>
        /// Assign the datatable record in PackageDocumentDataPointContract 
        /// </summary>
        /// <param name="table">table</param>
        /// <returns>List of PackageDocumentDataPointContract</returns>
        private static List<PackageDocumentDataPointContract> AssignBkgCompDataPointMappingToContractForMappingExist(DataTable table)
        {
            try
            {
                List<PackageDocumentDataPointContract> lstPkgDocDataPoints = new List<PackageDocumentDataPointContract>();
                IEnumerable<DataRow> rows = table.AsEnumerable();
                if (rows != null && rows.Count() > 0)
                {
                    foreach (var row in rows)
                    {
                        PackageDocumentDataPointContract pkgDocDataPoint = new PackageDocumentDataPointContract();
                        if (row["SGID"].GetType().Name != "DBNull")
                            pkgDocDataPoint.SGID = Convert.ToInt32(row["SGID"]);
                        pkgDocDataPoint.MasterOrderID = Convert.ToInt32(row["MasterOrderID"]);
                        pkgDocDataPoint.OrganizationUserID = Convert.ToInt32(row["OrganizationUserID"]);
                        if (row["ArchiveStateID"].GetType().Name != "DBNull")
                            pkgDocDataPoint.ArchiveStateID = Convert.ToInt32(row["ArchiveStateID"]);
                        pkgDocDataPoint.IsMappingExist = Convert.ToBoolean(row["IsMappingExist"]);
                        pkgDocDataPoint.IsOrderCompleted = Convert.ToBoolean(row["IsOrderCompleted"]);
                        pkgDocDataPoint.IsSvcGroupCompleted = Convert.ToBoolean(row["IsSvcGroupCompleted"]);
                        pkgDocDataPoint.ServiceGroupName = Convert.ToString(row["ServiceGroupName"]);
                        lstPkgDocDataPoints.Add(pkgDocDataPoint);
                    }
                }
                if (!lstPkgDocDataPoints.Any(x => x.IsMappingExist))
                {
                    return lstPkgDocDataPoints;
                }
                return new List<PackageDocumentDataPointContract>();

            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }


        /// <summary>
        /// Method to save bkg order result document to admin data entry screen if data point mapping is not exist.
        /// </summary>
        /// <param name="tenantId">tenantId</param>
        /// <param name="currentLoggedInUserId">currentLoggedInUserId</param>
        /// <param name="packageSubscriptionID">packageSubscriptionID</param>
        /// <param name="bkgOrderID">bkgOrderID</param>
        private static void SaveResultDocumentInAdminDataEntryQueue(Int32 tenantId, Int32 currentLoggedInUserId, Int32? packageSubscriptionID, Int32? bkgOrderID)
        {
            #region UAT-1581
            ClientSetting clientSetting = GetClientSetting(tenantId, Setting.ENABLED_NON_DATA_SYNC_DOCUMENT_UPLOAD_TO_DATA_ENTRY_QUEUE.GetStringValue());
            Boolean isNonDataSyncDocUploadSettingEnabled = false;
            if (!clientSetting.IsNullOrEmpty() && !clientSetting.CS_SettingValue.IsNullOrEmpty())
            {
                isNonDataSyncDocUploadSettingEnabled = Convert.ToBoolean(Convert.ToInt32(clientSetting.CS_SettingValue));
            }

            #endregion
            if (isNonDataSyncDocUploadSettingEnabled)
            {
                List<PackageDocumentDataPointContract> lstPkgCompDocDataPointsNotExist = AssignBkgCompDataPointMappingToContractForMappingExist(
                                                                                         BALUtils.GetComplianceDataRepoInstance(tenantId).GetBkgCompDataPointMappingExistOrNot
                                                                                         (packageSubscriptionID, bkgOrderID));

                if (lstPkgCompDocDataPointsNotExist != null && lstPkgCompDocDataPointsNotExist.Count > 0)
                {
                    String orgFileName = String.Empty;
                    String fileName = String.Empty;
                    String newDataEntryDocStatus = DataEntryDocumentStatus.NEW.GetStringValue();
                    Int16 newDataEntryDocStatusID = 0;
                    lkpDataEntryDocumentStatu tempDataEntryDocStatus = LookupManager.GetLookUpData<Entity.ClientEntity.lkpDataEntryDocumentStatu>(tenantId)
                                                                                   .FirstOrDefault(cnd => cnd.LDEDS_Code == newDataEntryDocStatus && cnd.LDEDS_IsDeleted == false);
                    if (!tempDataEntryDocStatus.IsNullOrEmpty())
                    {
                        newDataEntryDocStatusID = tempDataEntryDocStatus.LDEDS_ID;
                    }

                    String ordResultDataPointTypeCode = BkgDataPointType.ORDER_RESULT_DOCUMENT.GetStringValue();

                    String svcGroupResultDataPointTypeCode = BkgDataPointType.SERVICE_GROUP_RESULT_DOCUMENT.GetStringValue();

                    List<lkpBkgDataPointType> lstBkgDataPointType = LookupManager.GetLookUpData<Entity.ClientEntity.lkpBkgDataPointType>(tenantId).ToList();
                    List<PackageDocumentDataPointContract> lstDataPointsForResultDoc = null;
                    List<ApplicantDocument> lstAppDocuments = new List<ApplicantDocument>();
                    Int32 organizationUserId = lstPkgCompDocDataPointsNotExist[0].OrganizationUserID;
                    foreach (PackageDocumentDataPointContract pkgDocDataPoint in lstPkgCompDocDataPointsNotExist)
                    {
                        lstDataPointsForResultDoc = new List<PackageDocumentDataPointContract>();
                        List<OrderResultDocMap> lstOrdResDocMap = new List<OrderResultDocMap>();

                        //Insert data point(SvcGroupResultDataPoint) to insert SVC group result document in admin data entry screen.
                        //If Svc group completed then only send svc group result document to admin data entry.
                        if (pkgDocDataPoint.IsSvcGroupCompleted)
                        {
                            Int32 svcGroupResultDataPointTypeID = lstBkgDataPointType.FirstOrDefault(x => x.BDPT_Code == svcGroupResultDataPointTypeCode && !x.BDPT_IsDeleted).BDPT_ID;
                            lstDataPointsForResultDoc.Add(new PackageDocumentDataPointContract
                            {
                                BkgDataPointTypeCode = svcGroupResultDataPointTypeCode,
                                BkgDataPointTypeID = svcGroupResultDataPointTypeID
                            });
                        }

                        //Insert data point(OrderResultDataPointType) to insert order result document in admin data entry screen.
                        //If order is completed then only send order result document to admin data entry.
                        if (pkgDocDataPoint.IsOrderCompleted)
                        {
                            Int32 ordResultDataPointTypeId = lstBkgDataPointType.FirstOrDefault(x => x.BDPT_Code == svcGroupResultDataPointTypeCode && !x.BDPT_IsDeleted).BDPT_ID;
                            lstDataPointsForResultDoc.Add(new PackageDocumentDataPointContract
                            {
                                BkgDataPointTypeCode = ordResultDataPointTypeCode,
                                BkgDataPointTypeID = ordResultDataPointTypeId
                            });
                        }

                        lstDataPointsForResultDoc.ForEach(resultDocDataPoint =>
                        {
                            Int32? SGID = null;
                            if (resultDocDataPoint.BkgDataPointTypeCode == BkgDataPointType.SERVICE_GROUP_RESULT_DOCUMENT.GetStringValue())
                            {
                                SGID = pkgDocDataPoint.SGID;
                            }


                            List<OrderResultDocMap> orderResultDocMap = BALUtils.GetComplianceDataRepoInstance(tenantId).GetOrderResultDocMapping(pkgDocDataPoint.OrganizationUserID,
                                pkgDocDataPoint.MasterOrderID, SGID, resultDocDataPoint.BkgDataPointTypeID);
                            if (orderResultDocMap == null || (orderResultDocMap.IsNotNull() && orderResultDocMap.Count == AppConsts.NONE))
                            {
                                Boolean aWSUseS3 = false;
                                String filePath = WebConfigurationManager.AppSettings[AppConsts.APPLICANT_FILE_LOCATION];
                                if (!WebConfigurationManager.AppSettings["AWSUseS3"].IsNullOrEmpty())
                                {
                                    aWSUseS3 = Convert.ToBoolean(WebConfigurationManager.AppSettings["AWSUseS3"]);
                                }
                                //Check whether use AWS S3, true if need to use
                                if (aWSUseS3 == false)
                                {
                                    if (!filePath.EndsWith("\\"))
                                    {
                                        filePath += "\\";
                                    }

                                    filePath += "Tenant(" + tenantId.ToString() + @")\";

                                    if (!Directory.Exists(filePath))
                                        Directory.CreateDirectory(filePath);
                                }
                                else
                                {
                                    if (!filePath.EndsWith("//"))
                                    {
                                        filePath += "//";
                                    }

                                    filePath = filePath + "Tenant(" + tenantId.ToString() + @")/";
                                }

                                //Get Background Order Report
                                ParameterValue[] parameters = new ParameterValue[2];
                                if (resultDocDataPoint.BkgDataPointTypeCode == BkgDataPointType.SERVICE_GROUP_RESULT_DOCUMENT.GetStringValue())
                                {
                                    parameters = new ParameterValue[3];
                                    parameters[2] = new ParameterValue();
                                    parameters[2].Name = "PackageGroupID";
                                    parameters[2].Value = pkgDocDataPoint.SGID.ToString();
                                    orgFileName = "BkgSvcGroupCompletionReport_" + pkgDocDataPoint.ServiceGroupName.ToString() + ".pdf";
                                }
                                else if (resultDocDataPoint.BkgDataPointTypeCode == BkgDataPointType.ORDER_RESULT_DOCUMENT.GetStringValue())
                                {
                                    parameters = new ParameterValue[2];
                                    orgFileName = "BkgOrderCompletionReport_" + pkgDocDataPoint.MasterOrderID.ToString() + ".pdf";
                                }
                                parameters[0] = new ParameterValue();
                                parameters[0].Name = "OrderID";
                                parameters[0].Value = pkgDocDataPoint.MasterOrderID.ToString();
                                parameters[1] = new ParameterValue();
                                parameters[1].Name = "TenantID";
                                parameters[1].Value = tenantId.ToString();



                                //Get Report Content
                                String reportName = "OrderCompletion";
                                byte[] reportContent = ReportManager.GetReportByteArray(reportName, parameters);

                                //Create Applicant Document
                                ApplicantDocument applicantDocument = new ApplicantDocument();

                                //Save Report in temporary Location
                                String destFilePath = "Tenant(" + tenantId.ToString() + @")\";
                                fileName = orgFileName;
                                fileName = destFilePath + fileName;
                                String returnFilePath = CommonFileManager.SaveDocument(reportContent, fileName, FileType.ApplicantFileLocation.GetStringValue());
                                applicantDocument.DocumentPath = returnFilePath;
                                applicantDocument.OrganizationUserID = pkgDocDataPoint.OrganizationUserID;
                                applicantDocument.FileName = orgFileName;
                                applicantDocument.Size = reportContent.Length;
                                applicantDocument.Description = String.Empty;
                                applicantDocument.DataEntryDocumentStatusID = newDataEntryDocStatusID; //Set Data Entry Document Status of type new
                                applicantDocument.CreatedByID = currentLoggedInUserId;
                                applicantDocument.CreatedOn = DateTime.Now;
                                applicantDocument.IsDeleted = false;

                                Int32 applicantDocumentId = ComplianceDataManager.AddApplicantDocument(applicantDocument, tenantId);
                                String date = DateTime.Now.ToString("MMddyyyy") + "_" + DateTime.Now.ToString("mmss") + DateTime.Now.Millisecond.ToString();
                                String newfileName = filePath + "UD_" + tenantId.ToString() + "_" + applicantDocumentId + "_" + date + ".pdf";
                                ComplianceDataManager.UpdateDocumentPath(newfileName, returnFilePath, applicantDocumentId, tenantId, pkgDocDataPoint.OrganizationUserID);

                                applicantDocument.DocumentPath = newfileName;
                                applicantDocument.ApplicantDocumentID = applicantDocumentId;
                                lstAppDocuments.Add(applicantDocument);

                                OrderResultDocMap ordResDocMap = new OrderResultDocMap();
                                ordResDocMap.ORDM_DocumentID = applicantDocumentId;
                                ordResDocMap.ORDM_OrganizationUserID = pkgDocDataPoint.OrganizationUserID;
                                ordResDocMap.ORDM_MasterOrderID = pkgDocDataPoint.MasterOrderID;
                                ordResDocMap.ORDM_ServiceGroupID = SGID;
                                ordResDocMap.ORDM_BkgDataPointTypeID = resultDocDataPoint.BkgDataPointTypeID;
                                ordResDocMap.ORDM_IsDeleted = false;
                                ordResDocMap.ORDM_CreatedByID = currentLoggedInUserId;
                                ordResDocMap.ORDM_CreatedOn = DateTime.Now;

                                lstOrdResDocMap.Add(ordResDocMap);
                            }
                        });

                        if (lstOrdResDocMap.IsNotNull() && lstOrdResDocMap.Count > 0)
                            BALUtils.GetComplianceDataRepoInstance(tenantId).SaveOrderResultDocMap(lstOrdResDocMap);
                    }

                    //Convert and Merge applicant documents.
                    if (lstAppDocuments != null && lstAppDocuments.Count > 0)
                    {
                        //Use Poco class so that Entity will not get updated while running parallel tasks
                        List<ApplicantDocumentPocoClass> lstApplicantDoc = new List<ApplicantDocumentPocoClass>();
                        foreach (var doc in lstAppDocuments)
                        {
                            ApplicantDocumentPocoClass appDoc = new ApplicantDocumentPocoClass();
                            appDoc.ApplicantDocumentID = doc.ApplicantDocumentID;
                            appDoc.FileName = doc.FileName;
                            appDoc.DocumentPath = doc.DocumentPath;
                            appDoc.PdfDocPath = doc.PdfDocPath;
                            appDoc.IsCompressed = doc.IsCompressed;
                            appDoc.Size = doc.Size;
                            lstApplicantDoc.Add(appDoc);
                        }

                        DocumentManager.ConvertApplicantDocumentToPDF(lstApplicantDoc, tenantId, currentLoggedInUserId);
                        MergeDocIntoUnifiedPdf(organizationUserId, tenantId, currentLoggedInUserId);
                    }
                }
            }
        }
        #endregion

        #region UAT-1538:Unified Document/ single document option and updates to document exports
        public static Boolean SaveUpdateDocumentViewSetting(Int32 orgUserId, String utilityFeatureCode)
        {
            try
            {
                Int16 utilityFeatureId = LookupManager.GetLookUpData<Entity.lkpUtilityFeature>().FirstOrDefault(obj => obj.UF_Code.Equals(utilityFeatureCode)
                                                                                                                && obj.UF_IsDeleted == false).UF_ID;
                Entity.UtilityFeatureUsage utilityFeatureUsage = GetDocumentViewTypeSettingByUserID(orgUserId);
                if (utilityFeatureUsage.IsNotNull())
                {
                    utilityFeatureUsage.UFU_UtilityFeatureID = utilityFeatureId;
                }
                else
                {
                    utilityFeatureUsage = new Entity.UtilityFeatureUsage();
                    utilityFeatureUsage.UFU_OrgUserID = orgUserId;
                    utilityFeatureUsage.UFU_Count = AppConsts.ONE;
                    utilityFeatureUsage.UFU_IgnoreAlert = false;
                    utilityFeatureUsage.UFU_IsDeleted = false;
                    utilityFeatureUsage.UFU_UtilityFeatureID = utilityFeatureId;
                }
                if (utilityFeatureUsage.IsNotNull())
                    return BALUtils.GetComplianceDataRepoInstance(SecurityManager.DefaultTenantID).SaveUpdateUtilityFeatureUsage(utilityFeatureUsage, orgUserId);
                return true;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static Entity.UtilityFeatureUsage GetDocumentViewTypeSettingByUserID(Int32 orgUserId)
        {
            try
            {
                String unifiedDocUtilityFeatureCode = UtilityFeatures.Unified_Document.GetStringValue();
                String singleDocUtilityFeatureCode = UtilityFeatures.Single_Document.GetStringValue();
                List<Int16> utilityFeatureIds = LookupManager.GetLookUpData<Entity.lkpUtilityFeature>().Where(obj => (obj.UF_Code.Equals(unifiedDocUtilityFeatureCode)
                                                                                                                      || obj.UF_Code.Equals(singleDocUtilityFeatureCode))
                                                                                                                      && obj.UF_IsDeleted == false)
                                                                                                                      .Select(slct => slct.UF_ID).ToList();
                return BALUtils.GetComplianceDataRepoInstance(SecurityManager.DefaultTenantID).GetDocumentViewTypeSettingByUserID(orgUserId, utilityFeatureIds);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        #endregion

        #region UAT-1558
        public static Boolean UpdateCompPkgGraduationStatus(Int32 tenantId, Int32 orderId, String graduatedCode, Int32 currentUserId, Int32 orgUsrId)
        {
            try
            {
                Int16 graduatedId = LookupManager.GetLookUpData<Entity.ClientEntity.lkpArchiveState>(tenantId).FirstOrDefault(cnd => cnd.AS_Code == graduatedCode && cnd.AS_IsDeleted == false).AS_ID;

                //UAT-2687: Archive actions to show up on admin data audit history
                short dataAuditChangeTypeID = LookupManager.GetLookUpData<lkpApplicantDataAuditChangeType>(tenantId).FirstOrDefault(cond => cond.Code == "AAAS" && !cond.IsDeleted).ApplicantDataAuditChangeTypeID;

                //Int32 pkgSubId = BALUtils.GetComplianceDataRepoInstance(tenantId).UpdateCompPkgGraduationStatus(orderId, graduatedId, currentUserId);
                Int32 pkgSubId = BALUtils.GetComplianceDataRepoInstance(tenantId).UpdateCompPkgGraduationStatus(orderId, graduatedId, orgUsrId, dataAuditChangeTypeID, graduatedCode);

                if (pkgSubId > AppConsts.NONE)
                {
                    //if user undo graduated status then execute bisness rules.
                    if (graduatedCode == SubscriptionState.Active.GetStringValue())
                    {
                        List<Int32> lstSubIds = new List<Int32>();
                        lstSubIds.Add(pkgSubId);
                        //RuleManager.ExecuteBusinessRules(lstSubIds, tenantId, currentUserId);
                        RuleManager.ExecuteBusinessRules(lstSubIds, tenantId, orgUsrId);
                    }
                    if (graduatedCode == SubscriptionState.Graduated.GetStringValue())
                    {
                        List<PackageSubscription> lstPkgSub = BALUtils.GetComplianceDataRepoInstance(tenantId).GetActiveSubscriptionListForUser(currentUserId);
                        if (lstPkgSub.Count == AppConsts.NONE)
                        {
                            BALUtils.GetSecurityRepoInstance().DeleteDocsFromDataEntryQueueForGraduated(tenantId, currentUserId, orgUsrId);
                        }
                    }
                    return true;
                }
                return false;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }
        public static Boolean UpdateIsGraduatedBkgPkg(Int32 tenantId, Int32 BkgOrderId, String graduatedCode, Int32 currentUserId)
        {
            try
            {
                Int16 graduatedId = LookupManager.GetLookUpData<Entity.ClientEntity.lkpArchiveState>(tenantId).FirstOrDefault(cnd => cnd.AS_Code == graduatedCode && cnd.AS_IsDeleted == false).AS_ID;
                return BALUtils.GetComplianceDataRepoInstance(tenantId).UpdateIsGraduatedBkgPkg(BkgOrderId, graduatedId, currentUserId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }
        #endregion

        /// <summary>
        /// UAT 1559
        /// </summary>
        /// <param name="tenantID"></param>
        /// <param name="attributeData"></param>
        /// <returns></returns>
        public static ViewDocumentDetailsContract GetViewDocumentDetailContract(Int32 tenantID, ApplicantItemVerificationData attributeData)
        {
            ViewDocumentDetailsContract viewDocumentDetailsContract = new ViewDocumentDetailsContract();
            if (attributeData.ApplAttributeDataId.HasValue && attributeData.ApplAttributeDataId > AppConsts.NONE)
            {
                //Applicant Document
                ApplicantDocument applicantDocument = BALUtils.GetComplianceDataRepoInstance(tenantID).GetApplicantDocumentByApplAttrDataID(attributeData.ApplAttributeDataId.Value);
                viewDocumentDetailsContract.IsApplicantDoc = true;
                viewDocumentDetailsContract.DocumentPath = applicantDocument.DocumentPath;
                viewDocumentDetailsContract.DocumentName = applicantDocument.FileName;

            }
            else if (attributeData.ComplianceAttributeId.HasValue && attributeData.ComplianceAttributeId > AppConsts.NONE)
            {
                //Client System Document
                Entity.ClientEntity.ClientSystemDocument clientSystemDocument = BALUtils.GetComplianceDataRepoInstance(tenantID).GetClientSystemDocumentByComplianceAttributeID(attributeData.ComplianceAttributeId.Value);
                viewDocumentDetailsContract.IsApplicantDoc = false;
                viewDocumentDetailsContract.DocumentPath = clientSystemDocument.CSD_DocumentPath;
                viewDocumentDetailsContract.DocumentName = clientSystemDocument.CSD_FileName;
            }
            return viewDocumentDetailsContract;
        }

        public static ApplicantDocument GetApplicantDocumentByApplAttrDataID(Int32 tenantID, Int32 ApplAttributeDataId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).GetApplicantDocumentByApplAttrDataID(ApplAttributeDataId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }


        /// <summary>
        /// Returns whether the Current category is Optional or not, 
        /// based on the Compliance Required and Date Range for Compliance Required.
        /// </summary>
        /// <param name="packageId"></param>
        /// <param name="category"></param>
        /// <returns></returns>
        private static Boolean IsCatComplianceRequired(DateTime? startDate, DateTime? endDate, Boolean currentSetting)
        {
            try
            {
                Boolean _isRequired = currentSetting;
                DateTime _crntDateTime = DateTime.Now;

                if ((startDate.IsNull() && endDate.IsNull())
                    ||
                    ((_crntDateTime.Month > Convert.ToDateTime(startDate).Month
                       || (
                           _crntDateTime.Month == Convert.ToDateTime(startDate).Month
                          && _crntDateTime.Date >= Convert.ToDateTime(startDate).Date

                       ))
                       && (_crntDateTime.Month < Convert.ToDateTime(endDate).Month
                       || (
                            _crntDateTime.Month == Convert.ToDateTime(endDate).Month
                            && _crntDateTime.Date <= Convert.ToDateTime(endDate).Date
                            )
                       || (
                            _crntDateTime.Month > Convert.ToDateTime(endDate).Month
                            && Convert.ToDateTime(endDate).Month < Convert.ToDateTime(endDate).Month
                            )
                       ))
                     )
                {
                    return _isRequired;
                }
                else if (startDate.IsNotNull() && endDate.IsNotNull()
                     && (
                        (
                           _crntDateTime.Month < Convert.ToDateTime(startDate).Month
                            || (
                            _crntDateTime.Month == Convert.ToDateTime(startDate).Month
                            && _crntDateTime.Date < Convert.ToDateTime(startDate).Date
                            )
                    || (
                        _crntDateTime.Month > Convert.ToDateTime(endDate).Month
                        || (
                            _crntDateTime.Month == Convert.ToDateTime(endDate).Month
                            && _crntDateTime.Date > Convert.ToDateTime(endDate).Date
                            )
                        )
                        )
                    )
                    )
                {
                    _isRequired = !_isRequired;
                }
                return _isRequired;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }

        #region UAT-1607:Student Data Entry Screen changes
        /// <summary>
        /// Method return all item series for complience category.
        /// </summary>
        /// <param name="compCategoryId">Compliance Category ID </param>
        /// <returns>List of Item Series</returns>
        public static List<ItemSery> GetItemSeriesForCategory(Int32 tenantID, Int32 compCategoryId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).GetItemSeriesForCategory(compCategoryId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }

        public static ItemSery GetItemSeriesByID(Int32 tenantID, Int32 itemSeriesId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).GetItemSeriesByID(itemSeriesId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }

        public static ComplianceItem AssignItemSeriesDataToCompItemContract(ItemSery itemSeriesData)
        {
            try
            {
                ComplianceItem itemSeries = new ComplianceItem();
                if (!itemSeriesData.IsNullOrEmpty())
                {
                    Int32 displayOrder = 0;
                    var itemSeriesAttributesLst = !itemSeriesData.ItemSeriesAttributes.IsNullOrEmpty() ? itemSeriesData.ItemSeriesAttributes.Where(cnd => !cnd.ISA_IsDeleted)
                                                                                                       : null;

                    itemSeries.ItemLabel = itemSeriesData.IS_Label;
                    itemSeries.Name = itemSeriesData.IS_Name;
                    itemSeries.ComplianceItemID = itemSeriesData.IS_ID;
                    itemSeries.IsActive = itemSeriesData.IS_IsActive;
                    itemSeries.IsDeleted = itemSeriesData.IS_IsDeleted;
                    if (!itemSeriesAttributesLst.IsNullOrEmpty())
                    {
                        foreach (var item in itemSeriesAttributesLst)
                        {
                            var compAttribute = item.ComplianceAttribute;
                            ComplianceItemAttribute seriesItemAttribute = new ComplianceItemAttribute();
                            seriesItemAttribute.CIA_ID = item.ISA_ID;
                            seriesItemAttribute.CIA_AttributeID = item.ISA_AttributeID;
                            seriesItemAttribute.CIA_DisplayOrder = displayOrder = displayOrder + 1;
                            seriesItemAttribute.CIA_ItemID = itemSeriesData.IS_ID;
                            seriesItemAttribute.CIA_IsActive = itemSeriesData.IS_IsActive;
                            seriesItemAttribute.CIA_IsDeleted = itemSeriesData.IS_IsDeleted;
                            seriesItemAttribute.CIA_CreatedOn = itemSeriesData.IS_CreatedOn;
                            seriesItemAttribute.CIA_CreatedByID = itemSeriesData.IS_CreatedByID;

                            //seriesItemAttribute.ComplianceAttribute = compAttribute;
                            SetComplianceAttributeData(seriesItemAttribute, compAttribute);
                            itemSeries.ComplianceItemAttributes.Add(seriesItemAttribute);
                        }
                    }
                }
                return itemSeries;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }

        public static List<ItemSeriesItemContract> GetItemSeriesItemForCategories(Int32 tenantID, List<Int32> categoryIds)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).GetItemSeriesItemForCategories(categoryIds);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }

        public static String GetSeriesAttributeXML(List<ApplicantComplianceAttributeDataContract> attributeData)
        {
            try
            {
                String seriesAttributeXML = null;
                if (!attributeData.IsNullOrEmpty())
                {
                    seriesAttributeXML = "<Attributes>";
                    attributeData.ForEach(attData =>
                    {
                        seriesAttributeXML += "<Attribute>";
                        seriesAttributeXML += "<Id>" + attData.ComplianceItemAttributeId + "</Id>";
                        seriesAttributeXML += "<Value>" + attData.AttributeValue + "</Value>";
                        seriesAttributeXML += "</Attribute>";
                    });
                    seriesAttributeXML += "</Attributes>";
                }
                return seriesAttributeXML;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }

        public static String GetAttributeDocumentXMLForSeries(Dictionary<Int32, Int32> attributeDocuments, List<ApplicantComplianceAttributeDataContract> attributeData,
                                                              Dictionary<Int32, Int32> viewAttributeDocuments)
        {
            try
            {
                String attrDocumentXML = null;
                if (!attributeDocuments.IsNullOrEmpty())
                {
                    attrDocumentXML = "<Documents>";
                    List<Int32> fileUploadDocumentIds = new List<Int32>();
                    List<Int32> viewDocumentIds = new List<Int32>();
                    fileUploadDocumentIds = attributeDocuments.Select(x => x.Key).ToList();
                    if (!viewAttributeDocuments.IsNullOrEmpty())
                    {
                        viewDocumentIds = viewAttributeDocuments.Select(x => x.Key).ToList();
                    }
                    fileUploadDocumentIds = fileUploadDocumentIds.Where(cond => !viewDocumentIds.Contains(cond)).ToList();

                    List<ApplicantComplianceAttributeDataContract> attributesData = attributeData.Where(cond =>
                                                                                    cond.IsFileUploadTypeAttribute
                                                                                    || cond.AttributeTypeCode == ComplianceAttributeDatatypes.View_Document.GetStringValue()
                                                                                    ).ToList();


                    attributesData.ForEach(attData =>
                    {
                        attrDocumentXML += "<AttributeDocuments>";
                        attrDocumentXML += "<AttributeId>" + attData.ComplianceItemAttributeId + "</AttributeId>";
                        List<Int32> lstAttDocumentIds = new List<Int32>();
                        if (attData.IsFileUploadTypeAttribute)
                        {
                            lstAttDocumentIds = fileUploadDocumentIds;
                        }
                        else
                        {
                            lstAttDocumentIds = viewDocumentIds;
                        }
                        attrDocumentXML += "<Documents>";

                        lstAttDocumentIds.ForEach(docID =>
                        {
                            attrDocumentXML += "<Id>" + docID + "</Id>";
                        });
                        attrDocumentXML += "</Documents>";
                        attrDocumentXML += "</AttributeDocuments>";
                    });


                    attrDocumentXML += "</Documents>";
                }
                return attrDocumentXML;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }

        public static ShotSeriesSaveResponse SaveSeriesAttributeData(Int32 tenantID, Int32 packageSubscriptionID, Int32 itemSeriesID, Int32 currentLoggedInUserID, String seriesAttributeXML,
                                                     String documentsXML, String calledFrom, Int32 orgUserId, String notes = null)
        {
            try
            {
                String dtSaveResponse = String.Empty;
                dtSaveResponse = BALUtils.GetComplianceDataRepoInstance(tenantID).SaveSeriesAttributeData(packageSubscriptionID, itemSeriesID, currentLoggedInUserID,
                                                                                                              seriesAttributeXML, documentsXML, calledFrom, orgUserId, notes);
                return ConvertSaveResponseXMLToContract(dtSaveResponse);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }

        private static ShotSeriesSaveResponse ConvertSaveResponseXMLToContract(String dtSaveResponse)
        {
            ShotSeriesSaveResponse saveResponse = new ShotSeriesSaveResponse();
            if (!dtSaveResponse.IsNullOrEmpty())
            {
                XmlDocument xml = new XmlDocument();
                xml.LoadXml(dtSaveResponse);
                XmlNode nodeStatus = null;
                nodeStatus = xml.SelectSingleNode("Result/Status");
                XmlNodeList nodeMessages = xml.SelectNodes("Result/Messages/Message");
                String statusCode = String.Empty;
                String statusName = String.Empty;
                if (nodeStatus.IsNullOrEmpty())
                {
                    nodeStatus = xml.SelectSingleNode("Result");
                }
                statusCode = Convert.ToString(nodeStatus["Code"].InnerText);
                statusName = Convert.ToString(nodeStatus["Name"].InnerText);
                StringBuilder sbMessage = new StringBuilder();
                if (!nodeMessages.IsNullOrEmpty())
                {
                    foreach (XmlNode xmlNode in nodeMessages)
                    {
                        if (xmlNode.IsNotNull())
                        {
                            sbMessage.Append(xmlNode.InnerText + "<br/>");
                        }
                    }
                }

                XmlNodeList nodeItemData = xml.SelectNodes("Result/NewItemData");
                List<ItemData> lstItemData = new List<ItemData>();
                if (!nodeItemData.IsNullOrEmpty())
                {
                    foreach (XmlNode xmlItemNode in nodeItemData)
                    {
                        ItemData itemData = new ItemData();
                        itemData.ItemDataIdID = Convert.ToInt32(xmlItemNode["ID"].InnerText);
                        itemData.ItemID = Convert.ToInt32(xmlItemNode["ItemID"].InnerText);
                        itemData.StatusId = Convert.ToInt32(xmlItemNode["StatusId"].InnerText);
                        itemData.IsRandomReview = Convert.ToInt32(xmlItemNode["IsRandomReview"].InnerText);
                        lstItemData.Add(itemData);
                    }
                }
                saveResponse.lstItemData = lstItemData;
                saveResponse.StatusCode = Convert.ToInt32(statusCode);
                saveResponse.Message = Convert.ToString(sbMessage);
                saveResponse.StatusName = statusName;
            }
            return saveResponse;
        }

        public static Int32 GetItemSeriesIDForItem(Int32 compItemId, Int32 compCatId, Int32 tenantId)
        {
            try
            {
                List<ItemSery> lstItemSery = GetItemSeriesForCategory(tenantId, compCatId);
                Int32 itemSeriesId = AppConsts.NONE;
                if (!lstItemSery.IsNullOrEmpty())
                {
                    foreach (var itemSeries in lstItemSery)
                    {
                        if (!itemSeries.ItemSeriesItems.IsNullOrEmpty())
                        {
                            Boolean isItemExist = itemSeries.ItemSeriesItems.Any(cnd => cnd.ISI_ItemID == compItemId && !cnd.ISI_IsDeleted);
                            if (isItemExist)
                            {
                                itemSeriesId = itemSeries.IS_ID;
                                break;
                            }
                        }
                    }
                }
                return itemSeriesId;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }

        private static void SetComplianceAttributeData(ComplianceItemAttribute seriesItemAttribute, ComplianceAttribute compAttribute)
        {
            ComplianceAttribute compSeriesItemAttribute = new ComplianceAttribute();
            if (!compAttribute.IsNullOrEmpty())
            {
                compSeriesItemAttribute.ComplianceAttributeID = compAttribute.ComplianceAttributeID;
                compSeriesItemAttribute.Name = compAttribute.Name;
                compSeriesItemAttribute.AttributeLabel = compAttribute.AttributeLabel;
                compSeriesItemAttribute.ScreenLabel = compAttribute.ScreenLabel;
                compSeriesItemAttribute.ComplianceAttributeDatatypeID = compAttribute.ComplianceAttributeDatatypeID;
                compSeriesItemAttribute.ComplianceAttributeGroupID = compAttribute.ComplianceAttributeGroupID;
                compSeriesItemAttribute.IsDeleted = compAttribute.IsDeleted;
                compSeriesItemAttribute.IsCreatedByAdmin = compAttribute.IsCreatedByAdmin;
                compSeriesItemAttribute.IsDissociated = compAttribute.IsDissociated;
                compSeriesItemAttribute.IsActive = compAttribute.IsActive;
                compSeriesItemAttribute.Code = compAttribute.Code;
                compSeriesItemAttribute.CopiedFromCode = compAttribute.CopiedFromCode;
                compSeriesItemAttribute.Description = compAttribute.Description;
                compSeriesItemAttribute.MaximumCharacters = compAttribute.MaximumCharacters;
                compSeriesItemAttribute.ComplianceAttributeTypeID = compAttribute.ComplianceAttributeTypeID;
                compSeriesItemAttribute.DissociatedFrom = compAttribute.DissociatedFrom;

                lkpComplianceAttributeDatatype lkpCompAttrDatatype = new lkpComplianceAttributeDatatype();
                if (compAttribute.lkpComplianceAttributeDatatype.IsNotNull())
                {
                    lkpCompAttrDatatype.ComplianceAttributeDatatypeID = compAttribute.lkpComplianceAttributeDatatype.ComplianceAttributeDatatypeID;
                    lkpCompAttrDatatype.Code = compAttribute.lkpComplianceAttributeDatatype.Code;
                    lkpCompAttrDatatype.Name = compAttribute.lkpComplianceAttributeDatatype.Name;
                }
                compSeriesItemAttribute.lkpComplianceAttributeDatatype = lkpCompAttrDatatype;
                lkpComplianceAttributeType lkpCompAttributeType = new lkpComplianceAttributeType();
                if (compAttribute.lkpComplianceAttributeType.IsNotNull())
                {
                    lkpCompAttributeType.ComplianceAttributeTypeID = compAttribute.lkpComplianceAttributeType.ComplianceAttributeTypeID;
                    lkpCompAttributeType.Code = compAttribute.lkpComplianceAttributeType.Code;
                    lkpCompAttributeType.Name = compAttribute.lkpComplianceAttributeType.Name;
                }
                compSeriesItemAttribute.lkpComplianceAttributeType = lkpCompAttributeType;

                if (!compAttribute.ComplianceAttributeOptions.IsNullOrEmpty())
                {
                    compAttribute.ComplianceAttributeOptions.ForEach(attrOpt =>
                    {
                        ComplianceAttributeOption attrOption = new ComplianceAttributeOption();
                        attrOption.ComplianceAttributeOptionID = attrOpt.ComplianceAttributeOptionID;
                        attrOption.ComplianceItemAttributeID = attrOpt.ComplianceItemAttributeID;
                        attrOption.IsActive = attrOpt.IsActive;
                        attrOption.IsDeleted = attrOpt.IsDeleted;
                        attrOption.OptionText = attrOpt.OptionText;
                        attrOption.OptionValue = attrOpt.OptionValue;
                        compSeriesItemAttribute.ComplianceAttributeOptions.Add(attrOption);
                    });
                }

                if (!compAttribute.ComplianceAttributeDocuments.IsNullOrEmpty())
                {
                    compAttribute.ComplianceAttributeDocuments.ForEach(attrOpt =>
                    {
                        ComplianceAttributeDocument attrDocuments = new ComplianceAttributeDocument();
                        attrDocuments.CAD_ComplianceAttributeID = attrOpt.CAD_ComplianceAttributeID;
                        attrDocuments.CAD_ID = attrOpt.CAD_ID;
                        attrDocuments.CAD_IsDeleted = attrOpt.CAD_IsDeleted;
                        attrDocuments.CAD_DocumentID = attrOpt.CAD_DocumentID;
                        attrDocuments.CAD_CreatedBy = attrOpt.CAD_CreatedBy;
                        attrDocuments.CAD_CreatedOn = attrOpt.CAD_CreatedOn;

                        ClientSystemDocument clientSystemDoc = new ClientSystemDocument();
                        if (!attrOpt.ClientSystemDocument.IsNullOrEmpty())
                        {
                            clientSystemDoc.CSD_ID = attrOpt.ClientSystemDocument.CSD_ID;
                            clientSystemDoc.CSD_DocumentTypeID = attrOpt.ClientSystemDocument.CSD_DocumentTypeID;
                            clientSystemDoc.CSD_FileName = attrOpt.ClientSystemDocument.CSD_FileName;
                        }

                        attrDocuments.ClientSystemDocument = clientSystemDoc;
                        compSeriesItemAttribute.ComplianceAttributeDocuments.Add(attrDocuments);
                    });
                }
            }
            seriesItemAttribute.ComplianceAttribute = compSeriesItemAttribute;
        }
        #endregion

        public static void SendNotificationOnItemStatusChangedToReviewStatus(bool isRequirementPackage, int selectedTenantId, int packageSubscriptionId, int trackingPackageId, int categoryId, int itemId, int currentLoggedInUserId, int organizationUserId, string prevItemStatusCode)
        {
            bool needToSendNotification = false;
            string packageName = string.Empty;
            string itemName = string.Empty;
            string itemStatus = string.Empty;
            int selectedNodeId = -1;
            string applicantName = string.Empty;

            if (isRequirementPackage)
            {
                ApplicantRequirementParameterContract applicantRequirementParameterContract = new ApplicantRequirementParameterContract();
                applicantRequirementParameterContract.TenantId = selectedTenantId;
                applicantRequirementParameterContract.RequirementPkgSubscriptionId = packageSubscriptionId;
                applicantRequirementParameterContract.RequirementItemId = itemId;
                applicantRequirementParameterContract.RequirementCategoryId = categoryId;

                ApplicantRequirementItemDataContract applicantRequirementItemDataContract = ApplicantRequirementManager.GetApplicantRequirementItemData(applicantRequirementParameterContract, currentLoggedInUserId);
                if (!applicantRequirementItemDataContract.IsNullOrEmpty())
                {
                    //After data entry, Checking status of item
                    if (string.Compare(prevItemStatusCode, applicantRequirementItemDataContract.RequirementItemStatusCode) != 0 &&
                        string.Compare(applicantRequirementItemDataContract.RequirementItemStatusCode, RequirementItemStatus.PENDING_REVIEW.GetStringValue()) == 0)
                    {
                        //Need to check status of rotation package
                        RequirementPackageSubscriptionContract requirementPackageSubscriptionContract = ApplicantRequirementManager.GetRequirementPackageSubscription(packageSubscriptionId, selectedTenantId);
                        if (!requirementPackageSubscriptionContract.IsNullOrEmpty())
                        {
                            if (String.Compare(requirementPackageSubscriptionContract.RequirementPackageSubscriptionStatusCode, RequirementPackageStatus.REQUIREMENT_NOT_COMPLIANT.GetStringValue()) == 0)
                            {
                                packageName = requirementPackageSubscriptionContract.RequirementPackageName;
                                itemName = applicantRequirementItemDataContract.RequirementItemName;
                                itemStatus = applicantRequirementItemDataContract.RequirementItemStatus;
                                selectedNodeId = requirementPackageSubscriptionContract.HierarchyID;
                                applicantName = applicantRequirementItemDataContract.ApplicantName;
                                needToSendNotification = true;
                            }
                        }
                    }
                }
            }
            else
            {
                ApplicantComplianceItemData applicantComplianceItemData = GetApplicantData(trackingPackageId, categoryId, itemId, organizationUserId, selectedTenantId);
                //Need to do tracking package
                List<lkpItemComplianceStatu> itemComplianceStatus = GetItemComplianceStatus(selectedTenantId);

                if (applicantComplianceItemData.IsNotNull())
                {
                    var compItemStatus = itemComplianceStatus.Where(cond => cond.ItemComplianceStatusID == applicantComplianceItemData.StatusID).First();
                    string itemStatusCode = compItemStatus.Code;

                    if (string.Compare(prevItemStatusCode, itemStatusCode) != 0 &&
                        string.Compare(itemStatusCode, ApplicantItemComplianceStatus.Pending_Review_For_Client.GetStringValue()) == 0)
                    {
                        if (IsPackageStatusNonCompliant(applicantComplianceItemData))
                        {
                            itemStatus = compItemStatus.Description;
                            itemName = applicantComplianceItemData.ComplianceItem.Name;
                            packageName = applicantComplianceItemData.ApplicantComplianceCategoryData.PackageSubscription.CompliancePackage.PackageName;
                            selectedNodeId = applicantComplianceItemData.ApplicantComplianceCategoryData.PackageSubscription.Order.SelectedNodeID.HasValue ? applicantComplianceItemData.ApplicantComplianceCategoryData.PackageSubscription.Order.SelectedNodeID.Value : 0;
                            //UAT-4468
                            applicantName = string.Concat(applicantComplianceItemData.ApplicantComplianceCategoryData.PackageSubscription.OrganizationUser.FirstName, " ", applicantComplianceItemData.ApplicantComplianceCategoryData.PackageSubscription.OrganizationUser.LastName);
                            //End UAT-4468
                            needToSendNotification = true;
                        }
                    }
                }
            }

            if (needToSendNotification)
            {
                SaveNotificationForItemStatusChanged(selectedTenantId, packageName, itemName, itemStatus, selectedNodeId, applicantName);
            }
        }

        public static bool IsPackageStatusNonCompliant(ApplicantComplianceItemData applicantComplianceItemData)
        {
            if (applicantComplianceItemData.ApplicantComplianceCategoryData.PackageSubscription.lkpPackageComplianceStatu.IsNotNull()
                && applicantComplianceItemData.ApplicantComplianceCategoryData.PackageSubscription.lkpPackageComplianceStatu.Code
                   == ApplicantPackageComplianceStatus.Not_Compliant.GetStringValue())
            {
                return true;
            }
            return false;
        }

        public static void SendNotificationOnRotationPkgStatusChangedFromCompToNC(int selectedTenantId, int packageSubscriptionId, int currentLoggedInUserId, string previousPackageStatusCode)
        {
            bool needToSendNotification = false;
            string packageName = string.Empty;
            String categoryName = String.Empty; //UAT-3358
            Int32 rotationID = AppConsts.NONE;
            String complioId = String.Empty;//UAT-3536
            //UAT-3122
            RequirementPackageSubscriptionContract requirementPackageSubscriptionContract = null;

            if (String.Compare(previousPackageStatusCode, RequirementPackageStatus.REQUIREMENT_COMPLIANT.GetStringValue()) == 0)
            {
                requirementPackageSubscriptionContract = ApplicantRequirementManager.GetRequirementPackageSubscription(packageSubscriptionId, selectedTenantId);
                if (!requirementPackageSubscriptionContract.IsNullOrEmpty() && requirementPackageSubscriptionContract.RotationEndDate>=DateTime.Now.Date) //UAT-5040 Added Check of RotationEndDate
                {
                    if (String.Compare(requirementPackageSubscriptionContract.RequirementPackageSubscriptionStatusCode, RequirementPackageStatus.REQUIREMENT_NOT_COMPLIANT.GetStringValue()) == 0)
                    {
                        needToSendNotification = true;
                        packageName = requirementPackageSubscriptionContract.RequirementPackageName;

                        //UAT-3358                        
                        List<String> lstcategoryName = requirementPackageSubscriptionContract.ApplicantRequirementCategoryData.Where(cond => cond.RequirementCategoryStatusCode == null
                                     || cond.RequirementCategoryStatusCode.ToLower() != RequirementCategoryStatus.APPROVED.GetStringValue().ToLower()).Select(sel => sel.RequirementCategoryName).ToList();
                        categoryName = String.Join(",", lstcategoryName);
                    }
                    rotationID = requirementPackageSubscriptionContract.RotationID;
                    complioId = requirementPackageSubscriptionContract.ComplioID;//UAT-3536
                }
                //UAT-3097:Add SMS notification for Student out of compliance for rotation
                if (!requirementPackageSubscriptionContract.IsNullOrEmpty() && requirementPackageSubscriptionContract.ApplicantOrgUserID > AppConsts.NONE && needToSendNotification)
                {
                    OrganizationUser organizationUser = BALUtils.GetComplianceDataRepoInstance(selectedTenantId).GetOrganizationUserByOranizationID(requirementPackageSubscriptionContract.ApplicantOrgUserID);
                    if (!organizationUser.IsNullOrEmpty())
                    {
                        //Send SMS notification
                        Dictionary<String, object> dictSMSData = new Dictionary<String, object>();  //Create Dictionary for SMS Data
                        // dictSMSData.Add(EmailFieldConstants.PACKAGE_NAME, packageName);
                        //dictSMSData.Add(EmailFieldConstants.APPLICATION_URL, String.Concat(applicationUrl));
                        //dictSMSData.Add(EmailFieldConstants.SERVICE_GROUP_NAME, String.Concat(condition.ServiceGroupName));
                        //dictSMSData.Add(EmailFieldConstants.ORDER_NO, condition.OrderNumber);

                        Entity.CommunicationMockUpData mockSMSData = new Entity.CommunicationMockUpData();
                        mockSMSData.UserName = string.Concat(organizationUser.FirstName, " ", organizationUser.LastName);
                        mockSMSData.EmailID = organizationUser.PrimaryEmailAddress;
                        mockSMSData.ReceiverOrganizationUserID = requirementPackageSubscriptionContract.ApplicantOrgUserID;
                        CommunicationManager.SaveDataForSMSNotification(CommunicationSubEvents.NOTIFICATION_FOR_SUBSCRIPTION_CHANGED_FOR_COMPLIANT_TO_NON_COMPLIANT_SMS, mockSMSData,
                                                                        dictSMSData, selectedTenantId, AppConsts.NONE);
                    }
                }
            }

            if (needToSendNotification)
            {
                String rotationHierarchyIDList = BALUtils.GetRequirementPackageRepoInstance(selectedTenantId).GetRotationHierarchyIdsBasedOnSubscriptionID(packageSubscriptionId); //UAT 3120

                string applicationURL = WebSiteManager.GetInstitutionUrl(selectedTenantId);

                #region UAT-3122
                String RotationDetails = GenerateRotationDetailsHTML(requirementPackageSubscriptionContract);
                #endregion

                Dictionary<String, object> dictMailData = new Dictionary<String, object>();
                dictMailData.Add(EmailFieldConstants.USER_FULL_NAME, "Admin");
                dictMailData.Add(EmailFieldConstants.PACKAGE_NAME, packageName);
                dictMailData.Add(EmailFieldConstants.APPLICATION_URL, applicationURL);
                dictMailData.Add(EmailFieldConstants.ROTATION_DETAILS, RotationDetails); //UAT-3122
                dictMailData.Add(EmailFieldConstants.COMPLIANCE_CATEGORY_NAME, categoryName);//UAT-3358

                Entity.CommunicationMockUpData mockData = new Entity.CommunicationMockUpData();
                mockData.UserName = "Admin";
                mockData.EmailID = AppConsts.BACKGROUND_PROCESS_USER_EMAIL;
                mockData.ReceiverOrganizationUserID = AppConsts.BACKGROUND_PROCESS_USER_VALUE;

                int? systemCommunicationID = CommunicationManager.SendPackageNotificationMail(CommunicationSubEvents.NOTIFICATION_FOR_SUBSCRIPTION_CHANGED_FOR_COMPLIANT_TO_NON_COMPLIANT
                                                                                                            , dictMailData, mockData, selectedTenantId
                                                                                                            , -1
                                                                                                            , null
                                                                                                            , null
                                                                                                            , false
                                                                                                            , false
                                                                                                            , null
                                                                                                            , rotationHierarchyIDList, rotationID);
                SendFallOutOfComplianceNotificationToAU(selectedTenantId, packageName, packageSubscriptionId, null, -1, rotationHierarchyIDList, rotationID, complioId);
            }
        }

        #region UAT-3122
        public static string GenerateRotationDetailsHTML(RequirementPackageSubscriptionContract reqPackageSubscriptionContract)
        {
            if (reqPackageSubscriptionContract.IsNullOrEmpty())
            {
                return String.Empty;
            }
            StringBuilder _sbRotationDetails = new StringBuilder();
            List<String> lstCategoryNames = new List<String>();
            _sbRotationDetails.Append("<h4><i>Rotation Details:</i></h4>");
            _sbRotationDetails.Append("<div style='line-height:21px'>");
            _sbRotationDetails.Append("<ul style='list-style-type: disc'>");

            if (!reqPackageSubscriptionContract.ComplioID.IsNullOrEmpty())
            {
                _sbRotationDetails.Append("<li><b>" + "Complio ID: </b>" + reqPackageSubscriptionContract.ComplioID + "</li>");
            }
            //_sbRotationDetails.Append("</ul>");
            //_sbRotationDetails.Append("<ul style='list-style-type: disc'>");
            //_sbRotationDetails.Append("<b>Non Compliance Requirement Category:</b>");
            //foreach (var reqCategory in reqPackageSubscriptionContract.ApplicantRequirementCategoryData)
            //{
            //    if (reqCategory.RequirementCategoryStatusCode.IsNullOrEmpty()
            //        || reqCategory.RequirementCategoryStatusCode.ToLower() != RequirementCategoryStatus.APPROVED.GetStringValue().ToLower())
            //    {
            //        _sbRotationDetails.Append("<li>" + reqCategory.RequirementCategoryName + "</li>");
            //    }
            //}
            lstCategoryNames = reqPackageSubscriptionContract.ApplicantRequirementCategoryData.Where(cond => cond.RequirementCategoryStatusCode == null
                    || cond.RequirementCategoryStatusCode.ToLower() != RequirementCategoryStatus.APPROVED.GetStringValue().ToLower()).Select(sel => sel.RequirementCategoryName).ToList();
            if (lstCategoryNames.Count > AppConsts.NONE)
            {
                _sbRotationDetails.Append("<li><b>" + "Non Compliance Category: </b>" + String.Join(",", lstCategoryNames) + "</li>");
            }
            _sbRotationDetails.Append("</ul>");
            _sbRotationDetails.Append("</div>");
            return Convert.ToString(_sbRotationDetails);
        }
        #endregion

        public static void SendFallOutOfComplianceNotificationToAU(Int32 tenantID, String packageName, Int32? reqSubsID, Int32? compSubsID,
                                                                   Int32 hierarchyId, String rotationHierarchyIds = null, Int32? rotationID = AppConsts.NONE, String complioId = null)
        {
            try
            {
                //UAT-3466
                String CategoryNames = String.Empty;
                CommunicationSubEvents communicationSubEvents = new CommunicationSubEvents();
                CommunicationSubEvents communicationSubEventsToAgencyUser = new CommunicationSubEvents();

                //UAT-4400
                String heirarchyNames = String.Empty;
                List<Int32> lstDpmIds = new List<Int32>();

                if (!compSubsID.IsNullOrEmpty())
                {
                    //UAT-4400
                    lstDpmIds.Add(hierarchyId);
                    List<DeptProgramMapping> lstDeptProgramMappings = BALUtils.GetComplianceDataRepoInstance(tenantID).GetDepartmentProgramMappingRecord(lstDpmIds);
                    if (!lstDeptProgramMappings.IsNullOrEmpty() && lstDeptProgramMappings.Any())
                        heirarchyNames = String.Join(",", lstDeptProgramMappings.Select(sel => sel.DPM_Label).ToList());

                    CategoryNames = BALUtils.GetComplianceDataRepoInstance(tenantID).GetNotCompliantRequirementCategoryNames(compSubsID, true);
                    communicationSubEvents = CommunicationSubEvents.NOTIFICATION_TO_ADMIN_UPON_STUDENT_FALL_OUT_OF_COMPLIANCE_TRACKING_PACKAGE;
                    //UAT-4400
                    communicationSubEventsToAgencyUser = CommunicationSubEvents.NOTIFICATION_To_Agency_User_Upon_Student_Fall_Out_Of_Compliance_Tracking_Package;
                }
                else if (!reqSubsID.IsNullOrEmpty())
                {
                    //UAT-4400 
                    if (!rotationHierarchyIds.IsNullOrEmpty() && rotationHierarchyIds.Length > AppConsts.NONE)
                    {
                        String lastChar = rotationHierarchyIds.Substring(rotationHierarchyIds.Length - 1);
                        if (lastChar == ",")
                            rotationHierarchyIds = rotationHierarchyIds.Remove(rotationHierarchyIds.Length - 1);

                        lstDpmIds.AddRange(rotationHierarchyIds.Split(',').Select(Int32.Parse).ToList());
                        List<DeptProgramMapping> lstDeptProgramMappings = BALUtils.GetComplianceDataRepoInstance(tenantID).GetDepartmentProgramMappingRecord(lstDpmIds);
                        if (!lstDeptProgramMappings.IsNullOrEmpty() && lstDeptProgramMappings.Any())
                            heirarchyNames = String.Join(",", lstDeptProgramMappings.Select(sel => sel.DPM_Label).ToList());
                    }

                    CategoryNames = BALUtils.GetComplianceDataRepoInstance(tenantID).GetNotCompliantRequirementCategoryNames(reqSubsID, false);
                    communicationSubEvents = CommunicationSubEvents.NOTIFICATION_TO_APPLICANT_UPON_STUDENT_FALL_OUT_OF_COMPLIANCE;
                    //UAT-4400
                    communicationSubEventsToAgencyUser = CommunicationSubEvents.NOTIFICATION_To_Agency_User_Upon_Student_Fall_Out_Of_Compliance;
                }
                //Start UAT-3704//

                Int32? agencyHierarchyRootNodeID = null;

                if (!rotationID.IsNullOrEmpty() && rotationID > AppConsts.NONE)
                    agencyHierarchyRootNodeID = BALUtils.GetComplianceDataRepoInstance(tenantID).GetAgencyRootNodeUsingRotationID(rotationID);

                //End UAt-3704

                string applicationURL = WebSiteManager.GetInstitutionUrl(tenantID);

                DataSet dsData = BALUtils.GetComplianceDataRepoInstance(tenantID).GetApplicantAndAgencyUserListForFallOutOfCompNotification(reqSubsID, compSubsID);


                if (dsData.IsNotNull() && !dsData.Tables.IsNullOrEmpty() && dsData.Tables.Count > 0)
                {
                    DataTable dtApplicants = dsData.Tables[0];
                    DataTable dtAgencyUser = null;

                    //List<ExternalCopyUsersContract> lstAgencyUsers = new List<ExternalCopyUsersContract>();
                    List<CommunicationTemplateContract> lstAgencyUsers = new List<CommunicationTemplateContract>();



                    if (dsData.Tables.Count > 1 && !dsData.Tables[1].IsNullOrEmpty())
                    {
                        dtAgencyUser = dsData.Tables[1];

                        foreach (DataRow drAgencyUser in dtAgencyUser.Rows)
                        {
                            CommunicationTemplateContract communicationTemplateContract = new CommunicationTemplateContract();
                            communicationTemplateContract.RecieverEmailID = Convert.ToString(drAgencyUser["PrimaryEmailAddress"]);
                            communicationTemplateContract.Name = Convert.ToString(drAgencyUser["AgencyUserName"]);
                            communicationTemplateContract.IsToUser = true;
                            communicationTemplateContract.ReceiverOrganizationUserId = Convert.ToInt32(drAgencyUser["OrganizationUserID"]);
                            communicationTemplateContract.RecieverName = Convert.ToString(drAgencyUser["AgencyUserName"]);
                            lstAgencyUsers.Add(communicationTemplateContract);
                        }
                    }

                    foreach (DataRow drApplicant in dtApplicants.Rows)
                    {
                        string applicantName = drApplicant["ApplicantName"] == DBNull.Value ? string.Empty : Convert.ToString(drApplicant["ApplicantName"]);
                        Int32 applicantOrgID = drApplicant["ApplicantOrgID"] == DBNull.Value ? AppConsts.NONE : Convert.ToInt32(drApplicant["ApplicantOrgID"]);
                        String invitationInitiatedByName = drApplicant["InitiatedByName"] == DBNull.Value ? string.Empty : drApplicant["InitiatedByName"].ToString();
                        String invitationInitiatedByEmail = drApplicant["InitiatedByEmail"] == DBNull.Value ? string.Empty : drApplicant["InitiatedByEmail"].ToString();


                        Dictionary<String, object> dictMailData = new Dictionary<String, object>();
                        dictMailData.Add(EmailFieldConstants.PACKAGE_NAME, packageName);
                        dictMailData.Add(EmailFieldConstants.APPLICANT_NAME, applicantName);
                        dictMailData.Add(EmailFieldConstants.APPLICATION_URL, applicationURL);
                        //UAT-3466
                        dictMailData.Add(EmailFieldConstants.NON_COMPLIANT_CATEGORY, CategoryNames);
                        dictMailData.Add(EmailFieldConstants.COMPLIO_ID, complioId.IsNullOrEmpty() ? String.Empty : complioId);//UAT-3536

                        dictMailData.Add(EmailFieldConstants.AGENCY_HIERARCHY_ID, agencyHierarchyRootNodeID);//UAT-3704
                        dictMailData.Add(EmailFieldConstants.NODE_HIERARCHY, heirarchyNames);//UAT-4400

                        //UAT-4400
                        dictMailData.Add(EmailFieldConstants.Email_Address, Convert.ToString(drApplicant["ApplicantEmailID"]));
                        dictMailData.Add(EmailFieldConstants.School_Admin, invitationInitiatedByName);
                        dictMailData.Add(EmailFieldConstants.School_Admin_Email, invitationInitiatedByEmail);
                        dictMailData.Add(EmailFieldConstants.STUDENT_NAMES, applicantName);

                        Entity.CommunicationMockUpData mockData = new Entity.CommunicationMockUpData();
                        //UAT-4400
                        Entity.CommunicationMockUpData mockDataForNewNotification = new Entity.CommunicationMockUpData();


                        if (compSubsID.HasValue)
                        {
                            mockData.UserName = "Admin";
                            mockData.EmailID = AppConsts.BACKGROUND_PROCESS_USER_EMAIL;
                            mockData.ReceiverOrganizationUserID = AppConsts.BACKGROUND_PROCESS_USER_VALUE;
                        }
                        else if (reqSubsID.HasValue)
                        {
                            mockData.UserName = applicantName;
                            mockData.EmailID = Convert.ToString(drApplicant["ApplicantEmailID"]);
                            mockData.ReceiverOrganizationUserID = applicantOrgID;
                        }

                        if (!communicationSubEvents.IsNullOrEmpty())
                        {
                            CommunicationManager.SendPackageNotificationMail(communicationSubEvents, dictMailData, mockData, tenantID, hierarchyId, null, null, false, false, null, rotationHierarchyIds, rotationID);
                            //Send Message
                            CommunicationManager.SaveMessageContent(communicationSubEvents, dictMailData, applicantOrgID, tenantID);
                        }

                        //UAT - 4044
                        if (lstAgencyUsers.Count > 0 && !lstAgencyUsers.IsNullOrEmpty())
                        {
                            Entity.CommunicationMockUpData mockDataToAgencyUser = new Entity.CommunicationMockUpData();
                            CommunicationManager.SendStudentFallOutOfComplianceToAgencyUser(communicationSubEventsToAgencyUser, dictMailData, mockDataToAgencyUser, lstAgencyUsers);
                        }
                    }
                }
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }


        public static void SendNotificationFromAdminDataEntryforItemStatusChanged(int selectedTenantId, int packageSubscriptionId, int currentLoggedInUserId,
                                                                             int organizationUserId, AdminDataEntrySaveContract savedData)
        {
            try
            {
                string packageName = string.Empty;
                string itemName = string.Empty;
                string itemStatus = string.Empty;
                int selectedNodeId = -1;
                string applicantName = string.Empty;
                //Need to do tracking package
                PackageSubscription pkgSubscription = GetPackageSubscriptionByID(selectedTenantId, packageSubscriptionId);
                if (!pkgSubscription.IsNullOrEmpty() && !savedData.IsNullOrEmpty() && !savedData.ApplicantCmplncCategoryData.IsNullOrEmpty())
                {
                    foreach (ApplicantCmplncCategoryData applicantCmplncCategoryData in savedData.ApplicantCmplncCategoryData)
                    {
                        if (!applicantCmplncCategoryData.ApplicantCmplncItemData.IsNullOrEmpty())
                        {
                            ApplicantComplianceCategoryData appComplianceCategoryDataDB = new ApplicantComplianceCategoryData();
                            appComplianceCategoryDataDB = pkgSubscription.ApplicantComplianceCategoryDatas.Where(cnd => cnd.ComplianceCategoryID ==
                                                                                                         applicantCmplncCategoryData.CatId && !cnd.IsDeleted).FirstOrDefault();

                            foreach (ApplicantCmplncItemData applicantCmplncItemData in applicantCmplncCategoryData.ApplicantCmplncItemData)
                            {
                                //GetApplicantData(trackingPackageId, categoryId, itemId, organizationUserId, selectedTenantId);
                                ApplicantComplianceItemData applicantComplianceItemDataDB = appComplianceCategoryDataDB.ApplicantComplianceItemDatas
                                                                                         .Where(cnd => cnd.ComplianceItemID == applicantCmplncItemData.ItmId && !cnd.IsDeleted)
                                                                                          .FirstOrDefault();

                                List<lkpItemComplianceStatu> itemComplianceStatus = GetItemComplianceStatus(selectedTenantId);

                                if (applicantComplianceItemDataDB.IsNotNull())
                                {
                                    var compItemStatus = itemComplianceStatus.Where(cond => cond.ItemComplianceStatusID == applicantComplianceItemDataDB.StatusID).First();
                                    string itemStatusCode = compItemStatus.Code;

                                    if (string.Compare(applicantCmplncItemData.OldStatusCode, itemStatusCode) != 0 &&
                                        string.Compare(itemStatusCode, ApplicantItemComplianceStatus.Pending_Review_For_Client.GetStringValue()) == 0)
                                    {
                                        if (pkgSubscription.lkpPackageComplianceStatu.IsNotNull()
                                             && pkgSubscription.lkpPackageComplianceStatu.Code
                                             == ApplicantPackageComplianceStatus.Not_Compliant.GetStringValue())
                                        {
                                            itemStatus = compItemStatus.Description;
                                            itemName = applicantComplianceItemDataDB.ComplianceItem.Name;
                                            packageName = pkgSubscription.CompliancePackage.PackageName;
                                            selectedNodeId = pkgSubscription.Order.SelectedNodeID.HasValue ? pkgSubscription.Order.SelectedNodeID.Value : 0;
                                            //UAT-4468
                                            applicantName = string.Concat(pkgSubscription.OrganizationUser.FirstName, " ", pkgSubscription.OrganizationUser.LastName);
                                            //End UAT-4468
                                            SaveNotificationForItemStatusChanged(selectedTenantId, packageName, itemName, itemStatus, selectedNodeId, applicantName);
                                        }
                                    }

                                    //UAT-3112
                                    string itemStatusNewCode = String.Empty;
                                    var result = GetApplicantComplianceItemDataByID(selectedTenantId, applicantComplianceItemDataDB.ApplicantComplianceItemID);
                                    itemStatusNewCode = result.lkpItemComplianceStatu.Code;
                                    if (itemStatusNewCode == ApplicantItemComplianceStatus.Approved.GetStringValue()
                                        && applicantCmplncItemData.OldStatusCode != itemStatusNewCode && !String.IsNullOrEmpty(itemStatusNewCode))
                                    {
                                        string acid = Convert.ToString(applicantComplianceItemDataDB.ApplicantComplianceItemID);
                                        ComplianceDataManager.SaveBadgeFormNotificationData(selectedTenantId, acid, null, null, currentLoggedInUserId);
                                    }

                                }
                            }
                        }
                    }
                }
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }

        private static void SaveNotificationForItemStatusChanged(Int32 selectedTenantId, String packageName, String itemName, String itemStatus, Int32 selectedNodeId, String applicantName)
        {
            try
            {
                string applicationURL = WebSiteManager.GetInstitutionUrl(selectedTenantId);

                Dictionary<String, object> dictMailData = new Dictionary<String, object>();
                dictMailData.Add(EmailFieldConstants.USER_FULL_NAME, "Admin");
                dictMailData.Add(EmailFieldConstants.PACKAGE_NAME, packageName);
                dictMailData.Add(EmailFieldConstants.ITEM_NAME, itemName);
                dictMailData.Add(EmailFieldConstants.ITEM_STATUS, itemStatus);
                dictMailData.Add(EmailFieldConstants.APPLICATION_URL, applicationURL);
                //UAT-4468
                dictMailData.Add(EmailFieldConstants.APPLICANT_NAME, applicantName);
                //End UAT-4468
                Entity.CommunicationMockUpData mockData = new Entity.CommunicationMockUpData();
                mockData.UserName = "Admin";
                mockData.EmailID = AppConsts.BACKGROUND_PROCESS_USER_EMAIL;
                mockData.ReceiverOrganizationUserID = AppConsts.BACKGROUND_PROCESS_USER_VALUE;

                int? systemCommunicationID = CommunicationManager.SendPackageNotificationMail(CommunicationSubEvents.NOTIFICATION_FOR_ITEM_SUBMITTED_FOR_REVIEW
                                                                                                            , dictMailData, mockData, selectedTenantId
                                                                                                            , selectedNodeId
                                                                                                            , null);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }

        #region UAT-2905

        public static void SendNotificationToAdminForItemSubmitted(Boolean isRequirementPackage, Int32 selectedTenantId, String packageSubscriptionId, String itemId, DataTable prevData, Int32 currentLoggedInUserId = 0)
        {
            Boolean needToSendNotification = false;
            String packageName = String.Empty;
            String itemName = String.Empty;
            String itemStatus = String.Empty;
            String rotationName = String.Empty;
            String applicantName = String.Empty;
            String userName = String.Empty;
            String primaryEmailAddress = String.Empty;
            Int32 selectedNodeId = -1;
            Int32 rotationCreatedID = 0;
            Int32 rotationID = AppConsts.NONE;//UAT-3364
            String rotationHierarchyIDs = String.Empty;

            if (isRequirementPackage)
            {
                int count = 0;
                var mailDataForItemSubmitedNotification = ApplicantRequirementManager.GetMailDataForItemSubmitted(packageSubscriptionId, selectedTenantId);

                foreach (DataRow item in mailDataForItemSubmitedNotification.Rows)
                {
                    needToSendNotification = false;
                    if (mailDataForItemSubmitedNotification.Rows.Count > AppConsts.NONE)
                    {
                        Boolean IsStatusChanged = true;
                        if (prevData.Rows.Count > 0)
                        {
                            var results = (from myRow in prevData.AsEnumerable()
                                           where myRow.Field<int>("RequirementPackageSubscriptionID") == Convert.ToInt32(item["RequirementPackageSubscriptionID"])
                                           select myRow).CopyToDataTable();

                            if (results.Rows.Count > 0)
                            {
                                if (Convert.ToString(results.Rows[count]["ItemStatusCode"]).Equals(Convert.ToString(item["ItemStatusCode"])))
                                    IsStatusChanged = false;
                            }
                        }
                        //After data entry, Checking status of item
                        if (IsStatusChanged)
                        {
                            if (Convert.ToString(item["ItemStatusCode"]) == RequirementItemStatus.PENDING_REVIEW.GetStringValue())
                            {
                                packageName = Convert.ToString(item["packageName"]);
                                itemName = Convert.ToString(item["ItemName"]);
                                applicantName = Convert.ToString(item["ApplicantName"]);
                                rotationName = Convert.ToString(item["RotationName"]);
                                userName = Convert.ToString(item["UserName"]);
                                primaryEmailAddress = Convert.ToString(item["ReceiverEmailAddress"]);
                                rotationCreatedID = Convert.ToInt32(item["ReceiverOrganizationUserID"]);
                                needToSendNotification = true;
                            }

                            if (Convert.ToString(item["ItemStatusCode"]) == RequirementItemStatus.APPROVED.GetStringValue() && currentLoggedInUserId > AppConsts.NONE)
                            {

                                string ids = Convert.ToString(item["RequirementItemDataID"]);
                                //UAT-3112:-
                                ComplianceDataManager.SaveBadgeFormNotificationData(selectedTenantId, null, ids, null, currentLoggedInUserId);

                            }
                            //UAT-3160
                            Int32 requirementPackageSubscriptionID = Convert.ToInt32(item["RequirementPackageSubscriptionID"]).IsNullOrEmpty() ? AppConsts.NONE : Convert.ToInt32(item["RequirementPackageSubscriptionID"]);
                            if (requirementPackageSubscriptionID > AppConsts.NONE)
                            {
                                rotationHierarchyIDs = BALUtils.GetRequirementPackageRepoInstance(selectedTenantId).GetRotationHierarchyIdsBasedOnSubscriptionID(requirementPackageSubscriptionID);
                            }

                        }
                        //UAT-3364
                        rotationID = Convert.ToInt32(item["RotationID"]);
                    }
                    if (needToSendNotification)
                    {
                        SendNotificationToAdminForItemSubmitted(selectedTenantId, packageName, itemName, applicantName, rotationName, userName, primaryEmailAddress, rotationCreatedID, selectedNodeId, rotationHierarchyIDs, rotationID);
                    }
                    count++;
                }
            }

        }
        public static Boolean CheckRotationCreatorGranularPermissionsByOrgUserIdForSendNotificationToAdminForItemSubmitted(Int32 orgUserID)
        {
            try
            {
                var res = SecurityManager.GetRotationCreatorGranularPermissionsByOrgUserID(orgUserID);
                String NotificationForSubmittedItemIntoRequirementVerficationQueueCode = EnumSystemPermissionCode.NOTIFICATION_FOR_SUBMITTED_ITEM_INTO_REQUIREMENT_VERIFICATION_QUEUE.GetStringValue();
                String RotationNotificationCode = EnumSystemEntity.ROTATION_NOTIFICATION.GetStringValue();
                if (res.Where(d => d.SystemEntityPermission.LkpSystemEntity.SE_CODE == RotationNotificationCode).Count() > AppConsts.NONE)
                {
                    if (res.Where(d => d.SystemEntityPermission.SEP_PermissionCode == NotificationForSubmittedItemIntoRequirementVerficationQueueCode).Any())
                        return true;
                    else
                        return false;
                }

                return true;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static Boolean CheckRotationCreatorGranularPermissionsByOrgUserIdForSendNotificationForCategoryApproved(Int32 orgUserID)
        {
            try
            {
                var res = SecurityManager.GetRotationCreatorGranularPermissionsByOrgUserID(orgUserID);
                String NotificationForCategoryApprovedCode = EnumSystemPermissionCode.NOTIFICATION_FOR_ALL_ROTATION_CATEGORIES_APPROVED_OR_PENDING_REVIEW.GetStringValue();
                String RotationNotificationCode = EnumSystemEntity.ROTATION_NOTIFICATION.GetStringValue();
                if (res.Where(d => d.SystemEntityPermission.LkpSystemEntity.SE_CODE == RotationNotificationCode).Count() > AppConsts.NONE)
                {
                    if (res.Where(d => d.SystemEntityPermission.SEP_PermissionCode == NotificationForCategoryApprovedCode).Any())
                        return true;
                    else
                        return false;
                }

                return true;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        private static void SendNotificationToAdminForItemSubmitted(Int32 selectedTenantId, String packageName, String itemName, String applicantName, String rotationName, String userName, String primaryEmailAddress, Int32 rotationCreatedID, Int32 selectedNodeId, String rotationHierarchyIDs, Int32? rotationID = AppConsts.NONE)
        {
            try
            {
                CommunicationSubEvents subEventItemSubmitted = CommunicationSubEvents.NOTIFICATION_FOR_SUBMITTED_ITEM_INTO_REQUIREMENT_VERIFICATION_QUEUE;

                String institutionUrl = WebSiteManager.GetInstitutionUrl(selectedTenantId);

                Dictionary<String, object> dictMailData = new Dictionary<string, object>();
                dictMailData.Add(EmailFieldConstants.APPLICANT_NAME, applicantName);
                dictMailData.Add(EmailFieldConstants.ROTATION_NAME, rotationName);
                dictMailData.Add(EmailFieldConstants.REQUIREMENT_ITEM_NAME, itemName);
                dictMailData.Add(EmailFieldConstants.ROTATION_PACKAGE_NAME, packageName);
                dictMailData.Add(EmailFieldConstants.INSTITUTION_URL, institutionUrl);

                //Entity.OrganizationUser orgUser = new Entity.OrganizationUser();
                //if (!clinicalRotationDetails.IsNullOrEmpty())
                //{
                //    orgUser = SecurityManager.GetOrganizationUser(clinicalRotationDetails.CreatedByID);
                //}
                //String primaryEmailAddress = orgUser.aspnet_Users.aspnet_Membership.LoweredEmail;
                Entity.CommunicationMockUpData mockData = new Entity.CommunicationMockUpData();


                //Int32? systemCommunicationID = CommunicationManager.SendPackageNotificationMail(subEventItemSubmitted, dictMailData, mockData, selectedTenantId, AppConsts.MINUS_ONE);

                #region UAT-3364 - Granular permission for Rotation Creator
                Boolean IsAllowed = CheckRotationCreatorGranularPermissionsByOrgUserIdForSendNotificationToAdminForItemSubmitted(rotationCreatedID);
                #endregion
                if (IsAllowed)
                {
                    mockData.UserName = userName;
                    mockData.EmailID = primaryEmailAddress;
                    mockData.ReceiverOrganizationUserID = rotationCreatedID;
                }
                else
                {
                    mockData.UserName = AppConsts.BACKGROUND_PROCESS_USER_NAME;
                    mockData.EmailID = AppConsts.BACKGROUND_PROCESS_USER_EMAIL;
                    mockData.ReceiverOrganizationUserID = AppConsts.BACKGROUND_PROCESS_USER_VALUE;
                }
                Int32? systemCommunicationID = CommunicationManager.SendPackageNotificationMail(subEventItemSubmitted, dictMailData, mockData, selectedTenantId, selectedNodeId, null, null, false, false, null, rotationHierarchyIDs, rotationID);//UAT-3160
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }

        #endregion


        public static List<PackageSubscription> GetPackageSubscriptionListByIDs(int tenantID, List<int> subscriptionIds, Boolean isResetContext)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).GetPackageSubscriptionListByIDs(subscriptionIds, isResetContext);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static void SendNotifOfItemStatusChangedAfterDataSync(List<PackageSubscriptionNotificationDataContract> oldPakgSubscriptionLst, List<Int32> pkgSubIds, Int32 tenantId, Int32 currentOrgUserID)
        {
            try
            {
                List<PackageSubscription> pkgSubscriptionLstDB = new List<PackageSubscription>();
                List<lkpItemComplianceStatu> itemComplianceStatus = GetItemComplianceStatus(tenantId);
                //UAT-4468
                pkgSubscriptionLstDB = GetPackageSubscriptionListByIDs(tenantId, pkgSubIds, true);
                //End UAT-4468

                pkgSubscriptionLstDB.ForEach(DBPkgSub =>
                {
                    if (!DBPkgSub.ApplicantComplianceCategoryDatas.IsNullOrEmpty())
                    {
                        DBPkgSub.ApplicantComplianceCategoryDatas.Where(cat => !cat.IsDeleted).ForEach(appCatData =>
                        {
                            appCatData.ApplicantComplianceItemDatas.Where(itm => !itm.IsDeleted).ForEach(appItemData =>
                            {
                                PackageSubscriptionNotificationDataContract oldApCompitemData = new PackageSubscriptionNotificationDataContract();
                                if (!oldPakgSubscriptionLst.IsNullOrEmpty())
                                {
                                    oldApCompitemData = oldPakgSubscriptionLst.FirstOrDefault(cond => cond.ComplianceItemID == appItemData.ComplianceItemID
                                                                                              && cond.ComplianceCategoryID == appCatData.ComplianceCategoryID
                                                                                              && cond.PackageSubscriptionID == DBPkgSub.PackageSubscriptionID);
                                }
                                var compItemStatus = itemComplianceStatus.Where(cond => cond.ItemComplianceStatusID == appItemData.StatusID).First();
                                String itemStatusCode = compItemStatus.IsNullOrEmpty() ? String.Empty : compItemStatus.Code;

                                String oldItemStatusCode = oldApCompitemData.IsNullOrEmpty() ? String.Empty : oldApCompitemData.ItemStatusCode;

                                if (string.Compare(oldItemStatusCode, itemStatusCode) != 0
                                    && string.Compare(itemStatusCode, ApplicantItemComplianceStatus.Pending_Review_For_Client.GetStringValue()) == 0
                                    && DBPkgSub.lkpPackageComplianceStatu.IsNotNull()
                                    && DBPkgSub.lkpPackageComplianceStatu.Code == ApplicantPackageComplianceStatus.Not_Compliant.GetStringValue()
                                    )
                                {
                                    Int32 selectedNodeId = DBPkgSub.Order.SelectedNodeID.HasValue ? DBPkgSub.Order.SelectedNodeID.Value : 0;
                                    //UAT-4468
                                    string applicantName = string.Concat(DBPkgSub.OrganizationUser.FirstName, " ", DBPkgSub.OrganizationUser.LastName);
                                    //End UAT-4468
                                    SaveNotificationForItemStatusChanged(tenantId, DBPkgSub.CompliancePackage.PackageName, appItemData.ComplianceItem.Name,
                                                                         compItemStatus.Description, selectedNodeId, applicantName);
                                }

                                //UAT-3112:-
                                if (string.Compare(oldItemStatusCode, itemStatusCode) != 0
                                    && string.Compare(itemStatusCode, ApplicantItemComplianceStatus.Approved.GetStringValue()) == 0)
                                {
                                    string acid = Convert.ToString(appItemData.ApplicantComplianceItemID);
                                    ComplianceDataManager.SaveBadgeFormNotificationData(tenantId, acid, null, null, currentOrgUserID);
                                }
                            });

                        });
                    }
                });

            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static List<PackageSubscriptionNotificationDataContract> GetPackageSubscriptionDataForNotification(int tenantID, List<int> subscriptionIds)
        {
            try
            {
                String pkgSubscriptionIds = String.Join(",", subscriptionIds);
                return AssignPackagesubNotificationDataToModel(BALUtils.GetComplianceDataRepoInstance(tenantID).GetPackageSubscriptionDataForNotification(pkgSubscriptionIds));
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        private static List<PackageSubscriptionNotificationDataContract> AssignPackagesubNotificationDataToModel(DataTable table)
        {
            try
            {
                IEnumerable<DataRow> rows = table.AsEnumerable();
                return rows.Select(x => new PackageSubscriptionNotificationDataContract
                {
                    PackageSubscriptionID = x["PackageSubscriptionID"].GetType().Name == "DBNull" ? 0 : Convert.ToInt32(x["PackageSubscriptionID"]),
                    CompliancePackageID = x["CompliancePackageID"].GetType().Name == "DBNull" ? 0 : Convert.ToInt32(x["CompliancePackageID"]),
                    ComplianceCategoryID = x["ComplianceCategoryID"].GetType().Name == "DBNull" ? 0 : Convert.ToInt32(x["ComplianceCategoryID"]),
                    ComplianceItemID = x["ComplianceItemID"].GetType().Name == "DBNull" ? 0 : Convert.ToInt32(x["ComplianceItemID"]),
                    CatDataId = x["CatDataId"].GetType().Name == "DBNull" ? 0 : Convert.ToInt32(x["CatDataId"]),
                    ItemDataId = x["ItemDataId"].GetType().Name == "DBNull" ? 0 : Convert.ToInt32(x["ItemDataId"]),
                    PackageComplianceStatusID = x["PackageComplianceStatusID"].GetType().Name == "DBNull" ? 0 : Convert.ToInt32(x["PackageComplianceStatusID"]),
                    PackageComplianceStatusCode = Convert.ToString(x["PackageComplianceStatusCode"]),
                    ItemStatusCode = Convert.ToString(x["ItemStatusCode"])
                }).ToList();
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        #region UAT-1648: As an applicant, I should be able to complete payment for an order that is in "sent for online payment"
        /// <summary>
        /// Method to get Address lookup data on the basis of AddressHandleID
        /// </summary>
        /// <param name="addressHandleID">addressHandleID</param>
        /// <param name="tenantId">tenantId</param>
        /// <returns>vw_AddressLookUp</returns>
        public static vw_AddressLookUp GetAddressLookupByHandlerId(Guid addressHandleID, Int32 tenantId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetAddressLookupByHandlerId(addressHandleID);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }


        /// <summary>
        /// Method to update the already existing order for applicant Completing Order Process.
        /// </summary>
        /// <param name="applicantOrder">Existing Order</param>
        /// <param name="applicantOrderDataContract"> applicant Order Data Contract </param>
        /// <param name="orgUserID">Organization USER ID</param>
        /// <param name="compliancePackages">Compliance Package list</param>
        /// <returns></returns>
        public static Dictionary<String, String> UpdateApplicantCompletingOrderProcess(Order userOrder, ApplicantOrderDataContract applicantOrderDataContract,
                                                                                       out String paymentModeCode, Int32 orgUserID, out List<Int32> newlyAddedOPDIdList,
                                                                                       List<OrderCartCompliancePackage> compliancePackages = null)
        {
            try
            {
                newlyAddedOPDIdList = new List<Int32>();
                List<Int32> newlyAddedOPDIds = new List<Int32>();
                bool isLocationTenant = SecurityManager.IsLocationServiceTenant(applicantOrderDataContract.TenantId);
                var dicInvNumber = BALUtils.GetComplianceDataRepoInstance(applicantOrderDataContract.TenantId).
                                   UpdateApplicantCompletingOrderProcess(userOrder, applicantOrderDataContract, out paymentModeCode, orgUserID, out newlyAddedOPDIds,
                                                                         compliancePackages, isLocationTenant);

                //UAT 264
                String _prevStatus = ApplicantOrderStatus.Paid.GetStringValue();
                Int32 orderStatusId = ComplianceDataManager.GetOrderStatusList(applicantOrderDataContract.TenantId)
                                                           .Where(orderSts => orderSts.Code.ToLower() == _prevStatus.ToLower() && !orderSts.IsDeleted)
                                                           .FirstOrDefault().OrderStatusID;

                newlyAddedOPDIdList = newlyAddedOPDIds;

                var _lstOPDs = userOrder.OrderPaymentDetails.Where(opd => opd.OPD_IsDeleted == false && newlyAddedOPDIds.Contains(opd.OPD_ID)).ToList();

                if (userOrder.OrderGroupOrderNavProp.IsNotNull() && userOrder.OrderGroupOrderNavProp.Count > 0)
                {
                    foreach (Order o in userOrder.OrderGroupOrderNavProp)
                        _lstOPDs.AddRange(o.OrderPaymentDetails.Where(opd => opd.OPD_IsDeleted == false && newlyAddedOPDIds.Contains(opd.OPD_ID)).ToList());
                }

                foreach (var opd in _lstOPDs)
                {
                    var _paymentTypeCode = opd.lkpPaymentOption.Code;
                    var _orderStatusId = opd.OPD_OrderStatusID;
                    var _orderPaymentDetailId = opd.OPD_ID;
                    var _packageId = AppConsts.NONE;

                    // Case when Order gets Paid with Grand Total = 0 or it is case of Invoice to Institution
                    if (_orderStatusId == orderStatusId || _paymentTypeCode == PaymentOptions.InvoiceWithOutApproval.GetStringValue())
                    {
                        DateTime expirydate = DateTime.Now;
                        if (opd.Order.SubscriptionYear.HasValue)
                        {
                            expirydate = expirydate.AddYears(opd.Order.SubscriptionYear.Value);
                        }
                        if (opd.Order.SubscriptionMonth.HasValue)
                        {
                            expirydate = expirydate.AddMonths(opd.Order.SubscriptionMonth.Value);
                        }

                        // If the Order contained any Compliance Package and it belongs to Current OPDs' OrderPkgPaymentDetails 
                        if (!opd.Order.DeptProgramPackage.IsNullOrEmpty() && opd.OrderPkgPaymentDetails.Any(oppd => oppd.OPPD_BkgOrderPackageID.IsNull()
                            && oppd.lkpOrderPackageType.OPT_Code == OrderPackageTypes.COMPLIANCE_PACKAGE.GetStringValue()))
                            _packageId = opd.Order.DeptProgramPackage.DPP_CompliancePackageID;

                        //Changes done for UAT-357
                        String referenceNumber = String.Empty;
                        if (_orderStatusId == orderStatusId) // Change Subscription with 0 Payment 
                            referenceNumber = String.Format("Change Subscriptions: Previous Order Id: {0}",
                                               opd.Order.PreviousOrderID);
                        else
                            referenceNumber = "N/A";
                        UpdateOrderStatus(applicantOrderDataContract.TenantId, opd.Order.OrderID, ApplicantOrderStatus.Paid.GetStringValue(), _packageId,
                                           orgUserID, applicantOrderDataContract.OrganizationUserProfile.OrganizationUserID, referenceNumber,
                                           expirydate, _orderPaymentDetailId);

                        SendOrderNotification(applicantOrderDataContract.TenantId, opd.Order.CreatedByID, opd.Order.OrderID, _orderPaymentDetailId);
                    }
                }
                return dicInvNumber;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }

        }

        /// <summary>
        /// Method to update the already existing order for applicant Modify Shipping Process.
        /// </summary>
        /// <param name="applicantOrder">Existing Order</param>
        /// <param name="applicantOrderDataContract"> applicant Order Data Contract </param>
        /// <param name="applicantOrderCart">applicantOrderCart</param>
        /// <param name="orgUserID">Organization USER ID</param>
        /// <param name="compliancePackages">Compliance Package list</param>
        /// <returns></returns>
        public static Dictionary<String, String> UpdateApplicantModifyShippingProcess(Order userOrder, ApplicantOrderDataContract applicantOrderDataContract, ApplicantOrderCart applicantOrderCart,
                                                                                       out String paymentModeCode, Int32 orgUserID, out List<Int32> newlyAddedOPDIdList,
                                                                                       List<OrderCartCompliancePackage> compliancePackages = null, Boolean IsModifyShipping = false)
        {
            try
            {
                newlyAddedOPDIdList = new List<Int32>();
                List<Int32> newlyAddedOPDIds = new List<Int32>();

                var dicInvNumber = BALUtils.GetComplianceDataRepoInstance(applicantOrderDataContract.TenantId).
                                   UpdateApplicantModifyShippingProcess(userOrder, applicantOrderDataContract, applicantOrderCart, out paymentModeCode, orgUserID, out newlyAddedOPDIds,
                                                                         compliancePackages, IsModifyShipping);

                //UAT 264
                String _prevStatus = ApplicantOrderStatus.Paid.GetStringValue();
                Int32 orderStatusId = ComplianceDataManager.GetOrderStatusList(applicantOrderDataContract.TenantId)
                                                           .Where(orderSts => orderSts.Code.ToLower() == _prevStatus.ToLower() && !orderSts.IsDeleted)
                                                           .FirstOrDefault().OrderStatusID;

                newlyAddedOPDIdList = newlyAddedOPDIds;

                var _lstOPDs = userOrder.OrderPaymentDetails.Where(opd => opd.OPD_IsDeleted == false && newlyAddedOPDIds.Contains(opd.OPD_ID)).ToList();

                if (userOrder.OrderGroupOrderNavProp.IsNotNull() && userOrder.OrderGroupOrderNavProp.Count > 0)
                {
                    foreach (Order o in userOrder.OrderGroupOrderNavProp)
                        _lstOPDs.AddRange(o.OrderPaymentDetails.Where(opd => opd.OPD_IsDeleted == false && newlyAddedOPDIds.Contains(opd.OPD_ID)).ToList());
                }

                foreach (var opd in _lstOPDs)
                {
                    var _paymentTypeCode = opd.lkpPaymentOption.Code;
                    var _orderStatusId = opd.OPD_OrderStatusID;
                    var _orderPaymentDetailId = opd.OPD_ID;
                    var _packageId = AppConsts.NONE;

                    // Case when Order gets Paid with Grand Total = 0 or it is case of Invoice to Institution
                    if (_orderStatusId == orderStatusId || _paymentTypeCode == PaymentOptions.InvoiceWithOutApproval.GetStringValue())
                    {
                        DateTime expirydate = DateTime.Now;
                        if (opd.Order.SubscriptionYear.HasValue)
                        {
                            expirydate = expirydate.AddYears(opd.Order.SubscriptionYear.Value);
                        }
                        if (opd.Order.SubscriptionMonth.HasValue)
                        {
                            expirydate = expirydate.AddMonths(opd.Order.SubscriptionMonth.Value);
                        }

                        // If the Order contained any Compliance Package and it belongs to Current OPDs' OrderPkgPaymentDetails 
                        if (!opd.Order.DeptProgramPackage.IsNullOrEmpty() && opd.OrderPkgPaymentDetails.Any(oppd => oppd.OPPD_BkgOrderPackageID.IsNull()
                            && oppd.lkpOrderPackageType.OPT_Code == OrderPackageTypes.COMPLIANCE_PACKAGE.GetStringValue()))
                            _packageId = opd.Order.DeptProgramPackage.DPP_CompliancePackageID;

                        //Changes done for UAT-357
                        String referenceNumber = String.Empty;
                        if (_orderStatusId == orderStatusId) // Change Subscription with 0 Payment 
                            referenceNumber = String.Format("Change Subscriptions: Previous Order Id: {0}",
                                               opd.Order.PreviousOrderID);
                        else
                            referenceNumber = "N/A";
                        UpdateOrderStatus(applicantOrderDataContract.TenantId, opd.Order.OrderID, ApplicantOrderStatus.Paid.GetStringValue(), _packageId,
                                           orgUserID, applicantOrderDataContract.OrganizationUserProfile.OrganizationUserID, referenceNumber,
                                           expirydate, _orderPaymentDetailId);

                        SendOrderNotification(applicantOrderDataContract.TenantId, opd.Order.CreatedByID, opd.Order.OrderID, _orderPaymentDetailId);
                    }
                }
                return dicInvNumber;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }

        }

        /// <summary>
        /// Method to get Address lookup data on the basis of AddressHandleID
        /// </summary>
        /// <param name="addressHandleID">addressHandleID</param>
        /// <param name="tenantId">tenantId</param>
        /// <returns>vw_AddressLookUp</returns>
        public static List<Int32> GetAppCompPackageSentForOnlinePayment(Int32 organizationUserId, Int32 tenantId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetAppCompPackageSentForOnlinePayment(organizationUserId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        #endregion

        public static Boolean GetBkgOrderNoteSetting(int tenantId, string code)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetBkgOrderNoteSetting(tenantId, code);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        //UAT:4522
        public static List<GranularPermission> GeNewtGranularPermission(int tenantId, Int32 CurrentLogedInUser)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GeNewtGranularPermission(CurrentLogedInUser);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }

        }

        #region UAT-1581:Everett Enhancement Request: Turn off non-data sync doc going to data entry by tenant
        public static ClientSetting GetClientSetting(Int32 tenantId, String settingCode, String _languageCode = default(String))
        {
            try
            {
                if (_languageCode.IsNullOrEmpty())
                {
                    _languageCode = Languages.ENGLISH.GetStringValue();
                }

                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetClientSetting(tenantId, settingCode, _languageCode);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        #endregion

        public static BackgroundServiceExecutionHistory GetLastSuccessfullExecutionHistory(int tenantID, string serviceName)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).GetLastSuccessfullExecutionHistory(tenantID, serviceName);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static Boolean SaveBackgroundServiceExecutionHistory(Int32 tenantId, BackgroundServiceExecutionHistory backgroundServiceExecutionHistory)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).SaveBackgroundServiceExecutionHistory(backgroundServiceExecutionHistory);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static List<Int32> GetUsersToMarkApplicantDocumentsComplete(Int32 tenantId, DateTime fromDate, DateTime toDate, Int32 chunkSize, Int32 lastFetchedOrgUserID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetUsersToMarkApplicantDocumentsComplete(fromDate, toDate, chunkSize, lastFetchedOrgUserID);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static Boolean UpdateStatusForApplicantDocuments(Int32 tenantId, List<Int32> lstUsers, Int32 currentloggedInUserId, Int16 docStatusId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).UpdateStatusForApplicantDocuments(lstUsers, currentloggedInUserId, docStatusId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        #region UAT-1560 : We should be able to add documents that need to be signed to the order process
        public static List<ComplianceDocumentSearchContract> GetAdditionalDocumentSearch(Int32 tenantId, SearchItemDataContract searchDataContract, CustomPagingArgsContract gridCustomPaging)
        {
            try
            {
                DataTable tempDataTable = BALUtils.GetComplianceDataRepoInstance(tenantId).GetAdditionalDocumentSearch(searchDataContract, gridCustomPaging);
                return GetAdditionalDocumentSearchData(tempDataTable);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }
        private static List<ComplianceDocumentSearchContract> GetAdditionalDocumentSearchData(DataTable dataTable)
        {
            List<ComplianceDocumentSearchContract> lstComplianceDocument = new List<ComplianceDocumentSearchContract>();
            IEnumerable<DataRow> rows = dataTable.AsEnumerable();
            lstComplianceDocument = rows.Select(col =>
                  new ComplianceDocumentSearchContract
                  {
                      ApplicantDocumentID = Convert.ToInt32(col["ApplicantDocumentID"]),
                      FirstName = col["FirstName"] == DBNull.Value ? String.Empty : Convert.ToString(col["FirstName"]),
                      LastName = col["LastName"] == DBNull.Value ? String.Empty : Convert.ToString(col["LastName"]),
                      FileName = col["DocumentName"] == DBNull.Value ? String.Empty : Convert.ToString(col["DocumentName"]),
                      ApplicantID = Convert.ToInt32(col["ApplicantId"]),
                      DocumentPath = col["DocumentPath"] == DBNull.Value ? String.Empty : Convert.ToString(col["DocumentPath"]),
                      TotalCount = col["TotalCount"] == DBNull.Value ? 0 : Convert.ToInt32(col["TotalCount"])
                  }).ToList();
            return lstComplianceDocument;
        }
        #endregion

        #region UAT-1560:WB: We should be able to add documents that need to be signed to the order process
        private static String SetNextPagePathForRequiredDocumentation(Int32 lastOrderStageID)
        {
            if (lastOrderStageID == OrderStages.RenewalOrder)
            {
                return SetNextPagePath(ChildControls.RenewalOrder);
            }
            else if (lastOrderStageID == OrderStages.RushOrderReview || lastOrderStageID == OrderStages.RushOrderConfirmation)
            {
                return SetNextPagePath(ChildControls.RushOrderReview);
            }
            else if (lastOrderStageID == OrderStages.OrderReview)
            {
                return SetNextPagePath(ChildControls.ApplicantOrderReview);
            }
            else if (lastOrderStageID >= OrderStages.OrderPayment)
            {
                return SetNextPagePath(ChildControls.OrderPayment);
            }
            else if (lastOrderStageID == OrderStages.ApplicantProfile)
            {
                return SetNextPagePath(ChildControls.ApplicantProfile);
            }
            else if (lastOrderStageID == OrderStages.CustomForms)
            {
                return SetNextPagePath(ChildControls.CustomFormLoad, true);
            }
            return null;
        }

        //added lstSystemDocBkgSvcMapping in UAT-3745
        //added Dictionary<Int32, Int32> dicAppDocWithSysDoc in UAT-4558
        public static List<ApplicantDocument> UpdateApplicantAdditionalEsignatureDocument(Int32 tenantId, List<Int32?> applicantAdditionalDocumentId, Dictionary<Int32, Int32> dicAppDocWithSysDoc, Int32 orderId,
                                                                                          Int32 orgUserProfileId, Int32 orgUserId, Boolean needToSaveMapping
                                                                                          , List<Int32?> additionalDocumentSendToStudent, List<SystemDocBkgSvcMapping> lstSystemDocBkgSvcMapping = null)
        {
            try
            {
                List<ApplicantDocument> lstAppDocCurrentOrd = new List<ApplicantDocument>();
                List<ApplicantDocument> lstAppDocPreviousOrd = new List<ApplicantDocument>();

                String recordTypeCodeOrder = RecordType.Order.GetStringValue();
                String dataEntryDocCompletedStatusCode = DataEntryDocumentStatus.COMPLETE.GetStringValue();
                List<lkpDataEntryDocumentStatu> dataEntryDocStatus = LookupManager.GetLookUpData<lkpDataEntryDocumentStatu>(tenantId);
                List<lkpRecordType> recordTypeList = LookupManager.GetLookUpData<lkpRecordType>(tenantId);
                Int16 dataEntryDocCompletedStatusId = dataEntryDocStatus.FirstOrDefault(cnd => cnd.LDEDS_Code == dataEntryDocCompletedStatusCode && !cnd.LDEDS_IsDeleted).LDEDS_ID;
                Int16 recordTypeIdOrder = recordTypeList.FirstOrDefault(cond => cond.Code == recordTypeCodeOrder && !cond.IsDeleted).RecordTypeID;

                //added Dictionary<Int32, Int32> dicAppDocWithSysDoc in UAT-4558
                lstAppDocCurrentOrd = BALUtils.GetComplianceDataRepoInstance(tenantId).UpdateApplicantAdditionalEsignatureDocument(applicantAdditionalDocumentId, dicAppDocWithSysDoc, orderId, orgUserProfileId,
                                                                                                                      orgUserId, needToSaveMapping, recordTypeIdOrder,
                                                                                                                      dataEntryDocCompletedStatusId, additionalDocumentSendToStudent, lstSystemDocBkgSvcMapping);
                if (!needToSaveMapping)
                {
                    lstAppDocPreviousOrd = UpdateAdditionalDocumentStatusForApproveOrder(tenantId, orderId, orgUserId, orgUserId);
                    lstAppDocCurrentOrd.AddRange(lstAppDocPreviousOrd);
                }
                return lstAppDocCurrentOrd;

            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static List<ApplicantDocument> UpdateAdditionalDocumentStatusForApproveOrder(Int32 tenantId, Int32 orderId, Int32 currentloggedInUserId, Int32 orgUserId)
        {
            try
            {
                String recordTypeCodeOrder = RecordType.Order.GetStringValue();
                String dataEntryDocNewStatusCode = DataEntryDocumentStatus.NEW.GetStringValue();
                String additionalDocTypeCode = DocumentType.ADDITIONAL_DOCUMENTS.GetStringValue();
                List<lkpDataEntryDocumentStatu> dataEntryDocStatus = LookupManager.GetLookUpData<lkpDataEntryDocumentStatu>(tenantId);
                Int16 dataEntryDocNewStatusID = dataEntryDocStatus.FirstOrDefault(cnd => cnd.LDEDS_Code == dataEntryDocNewStatusCode && !cnd.LDEDS_IsDeleted).LDEDS_ID;

                return BALUtils.GetComplianceDataRepoInstance(tenantId).UpdateAdditionalDocumentStatusForApproveOrder(orderId, currentloggedInUserId, additionalDocTypeCode,
                                                                                                                      dataEntryDocNewStatusID, recordTypeCodeOrder, orgUserId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static void SendAdditionalDocumentsToStudent(Int32 tenantId, Order orderDetail, Int32 currentLoggedInUserId)
        {
            try
            {
                String recordTypeCodeOrder = RecordType.Order.GetStringValue();

                String additionalDocTypeCode = DocumentType.ADDITIONAL_DOCUMENTS.GetStringValue();
                List<ApplicantDocument> docNeedToSendToStudent = BALUtils.GetComplianceDataRepoInstance(tenantId).GetAdditionalDocNeedToSendToStudent(orderDetail.OrderID, additionalDocTypeCode, recordTypeCodeOrder);
                if (!docNeedToSendToStudent.IsNullOrEmpty())
                {
                    //Check if docs are already sent for the order do not send again.
                    List<Entity.ClientEntity.lkpOrderNotificationType> orderNotificationType = BackgroundProcessOrderManager.GetOrderNotificationType(tenantId);
                    int sendAdditionalDocNotificationTypeID = orderNotificationType.IsNotNull() && orderNotificationType.Count > 0 ?
                                                                Convert.ToInt32(orderNotificationType.FirstOrDefault(cond => cond.ONT_Code == OrderNotificationType.SEND_ADDITIONALDOCUMENT_NOTIFICATION.GetStringValue()).ONT_ID) : Convert.ToInt32(0);

                    Boolean ifDocsAreAlreadySent = BALUtils.GetComplianceDataRepoInstance(tenantId).CheckIfDocumentsAlreadySent(orderDetail.OrderID, sendAdditionalDocNotificationTypeID);
                    if (!ifDocsAreAlreadySent)
                    {
                        OrganizationUser orgUser = docNeedToSendToStudent.FirstOrDefault().OrganizationUser;
                        CommunicationManager.SendAdditionalDocumentToStudent(docNeedToSendToStudent, orgUser, orderDetail, tenantId, sendAdditionalDocNotificationTypeID, currentLoggedInUserId);
                    }
                }

            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Method to check is any subscription purchased by applicant or not
        /// </summary>
        /// <param name="orgUserId"></param>
        /// <param name="tenantId"></param>
        /// <returns></returns>
        public static Boolean IsSubscriptionExistForApplicant(Int32 orgUserId, Int32 tenantId)
        {
            try
            {
                var subscriptions = ComplianceDataManager.GetSubscribedPackagesForUser(tenantId, orgUserId);
                if (!subscriptions.IsNullOrEmpty())
                    return true;
                return false;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        #endregion

        #region Invoice Group

        /// <summary>
        /// Get Dept Program Mapping List
        /// </summary>
        /// <param name="tenantID"></param>
        /// <returns></returns>
        public static List<DeptProgramMapping> GetDeptProgramMappingList(Int32 tenantID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).GetDeptProgramMappingList();
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }

        #endregion

        #region Data Reconciliation Queue

        /// <summary>
        ///  Getting data based on institution ids selected and custom Paging and filtering.
        /// </summary>
        /// <param name="institutionIds"></param>
        /// <param name="gridCustomPaging"></param>
        /// <returns></returns>
        public static List<DataReconciliationQueueContract> GetQueueData(String institutionIds, CustomPagingArgsContract gridCustomPaging)
        {
            try
            {
                return BALUtils.GetSecurityRepoInstance().GetQueueData(institutionIds, gridCustomPaging);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        #endregion

        #region UAT 1711: Auto Multi-Review
        public static Tuple<List<ReconciliationDetailsDataContract>, List<ApplicantItemVerificationData>> GetApplicantReconciliationDataForVerification(Int32 tenantId, Int32 complianceItemId, Int32 complianceCategoryId, Int32 packageSubscriptionId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetApplicantReconciliationDataForVerification(complianceItemId, complianceCategoryId, packageSubscriptionId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }

        #endregion

        #region UAT-1718 : Get reconciliation Item ids list
        public static List<DataReconciliationQueueContract> GetReconciledItemsList(String institutionIds, Int32 ComplianceItemReconciliationDataID)
        {
            try
            {
                return BALUtils.GetSecurityRepoInstance().GetReconciledItemsList(institutionIds, ComplianceItemReconciliationDataID);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        #endregion


        #region UAT-3744

        public static List<DataReconciliationQueueContract> GetNextActiveReconciledItem(String selectedInstitutionIds, Int32 complianceItemReconciliationDataId)
        {
            try
            {
                return BALUtils.GetSecurityRepoInstance().GetNextActiveReconciledItem(selectedInstitutionIds, complianceItemReconciliationDataId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        #endregion

        #region UAT-1758
        public static String GetOvralCompStatusFromClientSetting(Int32 tenantId)
        {
            try
            {
                List<lkpSetting> settings = LookupManager.GetLookUpData<Entity.ClientEntity.lkpSetting>(tenantId).Where(cnd => cnd.IsDeleted == false).ToList();
                Int32 OverallComplianceStatusSettingID = settings.WhereSelect(cond => cond.Code == Setting.APPROVED_TO_PENDING_REVIEW_CATEGORY_HAS_NO_IMPACT_ON_OVERALL_COMPLIANCE.GetStringValue() && !cond.IsDeleted).FirstOrDefault().SettingID;
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetOvralCompStatusFromClientSetting(tenantId, OverallComplianceStatusSettingID);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        #endregion

        #region Changes related to short series 'usp_Rule_EvaluateAdjustItemSeriesRules' SP.
        /// <summary>
        /// Method to execute 'usp_Rule_EvaluateAdjustItemSeriesRules'
        /// </summary>
        /// <param name="tenantId">tenant id</param>
        /// <param name="dictCategoryData">Combination of Category Id and its Items(includes the series item Id also)</param>
        /// <param name="packageSubscriptionId">PackageSubscriptionId</param>
        /// <param name="systemUserId">System User Id - ID of the currently logged in user.</param>
        /// <returns></returns>
        public static Boolean EvaluateAdjustItemSeriesRules(Int32 tenantId, Dictionary<Int32, List<Int32>> dictCategoryData, Int32 packageSubscriptionId, Int32 systemUserId)
        {
            try
            {
                Dictionary<String, Object> spParameters = new Dictionary<String, Object>();
                spParameters.Add("@PackageSubscriptionID", packageSubscriptionId);
                spParameters.Add("@ItemXML", GenerateAdjustItemSeriesRuleXML(dictCategoryData));
                spParameters.Add("@SystemUserID", systemUserId);
                StoredProcedureManagers.ExecuteProcedure(spParameters, AppConsts.EVALUATE_ADJUST_ITEM_SERIES_RULE_SP_NAME, tenantId);
                return true;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Method to generate input XML for 'usp_Rule_EvaluateAdjustItemSeriesRules' procedure
        /// </summary>
        /// <param name="dictCategoryData">Category Data dictionary</param>
        /// <returns></returns>
        private static String GenerateAdjustItemSeriesRuleXML(Dictionary<Int32, List<Int32>> dictCategoryData)
        {
            try
            {
                StringBuilder categoryXML = new StringBuilder();
                if (!dictCategoryData.IsNullOrEmpty())
                {
                    categoryXML.Append("<Categories>");
                    dictCategoryData.ForEach(catData =>
                    {
                        categoryXML.Append("<Category>");
                        categoryXML.Append("<ID>");
                        categoryXML.Append(catData.Key);
                        categoryXML.Append("</ID>");
                        categoryXML.Append("<Items>");
                        catData.Value.ForEach(itemId =>
                        {
                            categoryXML.Append("<ID>");
                            categoryXML.Append(itemId);
                            categoryXML.Append("</ID>");
                        });
                        categoryXML.Append("</Items>");
                        categoryXML.Append("</Category>");
                    });
                    categoryXML.Append("</Categories>");
                }
                return categoryXML.ToString();
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        #endregion

        #region UAT-963: WB: As an ADB admin, I should be able to search one, many, or all institutions on the admin data audit history search
        /// <summary>
        /// Method to return last Synchronised Applicant data audit record id.
        /// </summary>
        /// <param name="tenantId"></param>
        /// <returns></returns>
        public static ApplicantDataAuditSyncHistory GetLastSynchedAuditDataRecord(Int32 tenantId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetLastSynchedAuditDataRecord();
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Method to sync applicant audit data to multi tenant table of shared data base
        /// </summary>
        /// <param name="tenantId">tenantId</param>
        /// <param name="lastSynchedRecordId">lastSynchedRecordId</param>
        /// <param name="systemUserId">systemUserId</param>
        public static void SyncApplicantAuditDataForTenant(Int32 tenantId, Int32? lastSynchedRecordId, Int32 systemUserId, Int32 chunkSize)
        {
            try
            {
                BALUtils.GetComplianceDataRepoInstance(tenantId).SyncApplicantAuditDataForTenant(tenantId, lastSynchedRecordId, systemUserId, chunkSize);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        #endregion

        /// <summary>
        /// Method to return last Synchronised Applicant data audit record id.
        /// </summary>
        /// <param name="tenantId"></param>
        /// <returns></returns>
        public static void SyncReconcillationQueueData(Int32 tenantId, Int32 systemUserId)
        {
            try
            {
                BALUtils.GetComplianceDataRepoInstance(tenantId).SyncReconcillationQueueData(tenantId, systemUserId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        #region UAT 1843: Phase 2 5: Combining User group mapping, archive and rotation assignment screens
        public static List<StudentBucketAssignmentContract> GetStudentBucketAssignmentSearch(Int32 ClientId, SearchItemDataContract searchDataContract, CustomPagingArgsContract customPagingArgsContract)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(ClientId).GetStudentBucketAssignmentSearch(searchDataContract, customPagingArgsContract);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        /// <summary>
        /// set unarchive status of all background and compliance
        /// subscription of organization user.
        /// </summary>
        /// <param name="orgUserIds"></param>
        /// <param name="tenantId"></param>
        /// <param name="currentLoggedInUserId"></param>
        /// <returns></returns>
        public static Boolean SetUnArchiveStatusByOrgUserIds(List<Int32> orgUserIds, Int32 tenantId, Int32 currentLoggedInUserId)
        {
            try
            {
                short changeTypeID = GetComplianceSubsArchiveChangeTypeIdByCode(tenantId, ComplianceSubscriptionArchiveChangeType.UN_ARCHIVE_BY_ADMIN.GetStringValue());
                Int32 UnArchiveId = LookupManager.GetLookUpData<lkpArchiveState>(tenantId).FirstOrDefault(cond => cond.AS_Code == ArchiveState.Archived.GetStringValue()).AS_ID;

                //UAT-2687: Archive actions to show up on admin data audit history
                short dataAuditChangeTypeID = LookupManager.GetLookUpData<lkpApplicantDataAuditChangeType>(tenantId).FirstOrDefault(cond => cond.Code == "AAAS" && !cond.IsDeleted).ApplicantDataAuditChangeTypeID;

                List<Int32> lstPkgSubForUnarchive = BALUtils.GetComplianceDataRepoInstance(tenantId).GetComPkgSubArchiveHistoryIds(orgUserIds, UnArchiveId);
                List<Int32> lstbkgOrderIdForUnarchive = BALUtils.GetComplianceDataRepoInstance(tenantId).GetbkgOrderArchiveHistoryIds(orgUserIds, UnArchiveId);

                List<CompliancePackageSubscriptionArchiveHistory> lstPackageSubscriptionArchiveHistory = null;
                List<BkgOrderArchiveHistory> lstBkgOrderArchiveHistory = null;
                if (!lstPkgSubForUnarchive.IsNullOrEmpty())
                {

                    lstPackageSubscriptionArchiveHistory = BALUtils.GetComplianceDataRepoInstance(tenantId).ApproveUnArchivalRequests(lstPkgSubForUnarchive, currentLoggedInUserId, changeTypeID, dataAuditChangeTypeID);
                    if (lstPackageSubscriptionArchiveHistory.Count > AppConsts.NONE)
                    {
                        EvaluateBuisnessRulesForMultipleUnarchieveRequests(lstPackageSubscriptionArchiveHistory, currentLoggedInUserId, tenantId);
                    }
                }
                if (!lstbkgOrderIdForUnarchive.IsNullOrEmpty())
                    lstBkgOrderArchiveHistory = BALUtils.GetComplianceDataRepoInstance(tenantId).ApproveBkgUnArchivalRequests(lstbkgOrderIdForUnarchive, currentLoggedInUserId, changeTypeID);

                if ((lstPkgSubForUnarchive.IsNotNull() || lstPackageSubscriptionArchiveHistory.IsNull()) && (lstbkgOrderIdForUnarchive.IsNotNull() || lstBkgOrderArchiveHistory.IsNull()))
                    return true;
                return false;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        #endregion

        #region UAT-1833: NYU Migration 1 of 3: Batch Upload Admin Ordering

        public static List<BulkOrderUploadContract> UploadBulkOrdersData(Int32 tenantId, String applicantXmlData, String filePath, Int32 curentLoggedInUserID, String orderDataSourceCode)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).UploadBulkOrdersData(applicantXmlData, filePath, curentLoggedInUserID, orderDataSourceCode);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        #endregion

        #region UAT-2697
        public static List<BulkOrderUploadContract> UploadBulkRepeatedOrdersData(Int32 tenantId, String applicantXmlData, String filePath, Int32 curentLoggedInUserID, String orderDataSourceCode)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).UploadBulkRepeatedOrdersData(applicantXmlData, filePath, curentLoggedInUserID, orderDataSourceCode);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        #endregion

        #region UAT-1812:Creation of an Approval/rejection summary for applicant logins
        /// <summary>
        /// Method to Save Series item rejected status in ApplComplianceItemStatusHistory.
        /// </summary>
        /// <param name="tenantId"></param>
        /// <returns></returns>
        public static void SaveSeriesRejectedItemStatusHistory(Int32 tenantId, List<ApplicantComplianceItemData> lstItemDataId, Int32 loggedInUserID)
        {
            try
            {
                Int32 itemRejectedStatusID = LookupManager.GetLookUpData<lkpItemComplianceStatu>(tenantId)
                                             .FirstOrDefault(x => x.Code == ApplicantItemComplianceStatus.Not_Approved.GetStringValue()).ItemComplianceStatusID;
                BALUtils.GetComplianceDataRepoInstance(tenantId).SaveSeriesRejectedItemStatusHistory(lstItemDataId, loggedInUserID, itemRejectedStatusID);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        #endregion

        //UAT-1852 : If a Service Group is complete, but other service groups are not complete within an order, the system should send the applicant an email.
        public static Boolean DeleteNotificationDeliveryListIfExist(NotificationDelivery notificationDelivery, Int32 tenantId, Int32 currentLoggedInId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).DeleteNotificationDeliveryListIfExist(notificationDelivery, currentLoggedInId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static List<CustomAttribute> GetCustomAttributesByTenantID(int tenantID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).GetCustomAttributesByTenantID(tenantID);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }


        /// <summary>
        /// UAT-1834:NYU Migration 2 of 3: Applicant Complete Order Process
        /// </summary>
        /// <param name="tenantID">Institution ID</param>
        /// <param name="applicantOrgUserID">Organization UserID of logged in Applicant</param>
        /// <returns></returns>
        public static BulkOrderUpload GetBulkOrderForApplicant(int tenantId, int applicantOrgUserID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetBulkOrderForApplicant(applicantOrgUserID);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Get All Client Custom Attributes
        /// </summary>
        /// <returns>List of Custom Attributes</returns>
        public static CustomAttribute GetCustomAttributes(Int32 tenantId, Int32 customAttributeID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetCustomAttribute(customAttributeID);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static List<BkgOrderPackage> GetBkgOrderPackagesByBkgOrderId(Int32 tenantId, Int32 bkgOrderId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetBkgOrderPackagesByBkgOrderId(bkgOrderId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// UAT-1835, NYU Migration 3 of 3: Automatic Interval Searching.
        /// </summary>
        /// <param name="tenantId"></param>
        /// <param name="currentOrgUserId"></param>
        /// <returns></returns>
        public static OrganizationUserProfile GetOrganizationUserProfileByID(Int32 tenantId, Int32 currentOrgUserId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetOrganizationUserProfileByID(currentOrgUserId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static List<BulkOrderUpload> GetBulkOrderDataForIntervalSearch(Int32 tenantId, Int32 _recordChunkSize)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetBulkOrderDataForIntervalSearch(_recordChunkSize);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }


        #region UAT-2028:Expired items should also show in the Enter Requirements item selection dropdown on the student screen
        /// <summary>
        /// List of available Items for Data entry in dropdown
        /// </summary>
        /// <param name="packageId"></param>
        /// <param name="categoryID"></param>
        /// <param name="itemId"></param>
        /// <param name="currentUserId"></param>
        /// <param name="tenantId"></param>
        /// <returns></returns>
        public static Tuple<List<ComplianceItem>, List<Int32>, List<Int32>> GetAllItemsForDataEntry(Int32 packageId, Int32 categoryID, Int32 currentUserId, Int32 tenantId, Int32 currentSelectedItem = 0
                                                                      , Boolean needToGetAllItems = false, List<Int32> expiringItem = null)
        {
            try
            {
                Int32 itemStatusId_Expired = LookupManager.GetLookUpData<Entity.ClientEntity.lkpItemComplianceStatu>(tenantId).FirstOrDefault(x =>
                                                           x.Code == ApplicantItemComplianceStatus.Expired.GetStringValue() && !x.IsDeleted).ItemComplianceStatusID;

                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetAllItemsForDataEntry(packageId, categoryID, currentUserId, itemStatusId_Expired, currentSelectedItem,
                                                                                                needToGetAllItems, expiringItem);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
            }
            return null;
        }
        #endregion

        public static List<lkpItemDocMappingType> GetlkpItemDocMappingType(Int32 selectedTenantId)
        {
            try
            {
                return LookupManager.GetLookUpData<lkpItemDocMappingType>(selectedTenantId).Where(x => x.IDMT_IsDeleted == false).ToList();
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        /// <summary>
        /// UAT:- 2296,To get the DataEntryDocumentStatus look up 
        /// </summary>
        /// <param name="selectedTenantId"></param>
        /// <returns></returns>
        public static List<lkpDataEntryDocumentStatu> GetlkpDataEntryDocumentStatus(Int32 selectedTenantId)
        {
            try
            {
                return LookupManager.GetLookUpData<lkpDataEntryDocumentStatu>(selectedTenantId).Where(x => x.LDEDS_IsDeleted == false).ToList();
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static List<CompliancePackageCategory> GetPackageListByCategoryId(Int32 categoryId, Int32 tenantId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetPackageListByCategoryId(categoryId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static PackageSubscription GetSubscriptionDetail(Int32 packageId, Int32 orgUserId, Int32 tenantId)
        {
            try
            {
                String mobilitySwitchCode = LkpSubscriptionMobilityStatus.MobilitySwitched;

                Int32 subscriptionMobilityStatusID = LookupManager.GetLookUpData<lkpSubscriptionMobilityStatu>(tenantId).Where(item => !item.IsDeleted && item.Code.Equals(mobilitySwitchCode)).FirstOrDefault().SubscriptionMobilityStatusID;
                String archieveStateCode = ArchiveState.Active.GetStringValue();
                Int32 archieveStateId = LookupManager.GetLookUpData<lkpArchiveState>(tenantId).Where(cond => cond.AS_Code == archieveStateCode && !cond.AS_IsDeleted).FirstOrDefault().AS_ID;

                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetSubscriptionDetail(packageId, orgUserId, subscriptionMobilityStatusID, archieveStateId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        #region UAT-1831, Addition of details on cancellations and packages listed on the portfolio detail page
        public static List<vwOrderDetail> GetOrderDetailListByOrgUserID(Int32 tenantId, Int32 currentOrgUserId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetOrderDetailListByOrgUserID(currentOrgUserId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static List<CancelledBkgCompliancePackageContract> GetCancelledPackageByOrderID(Int32 tenantID, Int32 orderID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).GetCancelledPackageByOrderID(orderID);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        #endregion



        #region UAT-2218, Creation of a "Required Documents" tab on the left side of the student dashboard.
        public static List<ApplicantRequiredDocumentsContract> GetRequirementDocumentsDetails(Int32 tenantId, Int32 orgUserId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetRequirementDocumentsDetails(orgUserId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        #endregion

        #region UAT-3161:- Created of a "Rotatioon Required Documents".
        public static List<ApplicantRequiredDocumentsContract> GetRotReqDocumentsDetails(Int32 tenantId, Int32 orgUserId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetRotReqDocumentsDetails(orgUserId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        #endregion

        public static List<ApplicantDocumentDetails> GetApplicantPersonalDocumentDetails(Int32 organizationUserID, Int32 tenantID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).GetApplicantPersonalDocumentDetails(organizationUserID);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static List<CustomAttribute> GetProfileCustomAttributesByTenantID(Int32 tenantId, Int32 dataTypeId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetProfileCustomAttributesByTenantID(tenantId, dataTypeId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static Boolean AddUpdateProfileCustomAttributes(List<TypeCustomAttributes> customAttributeListToUpdate, Int32 applicantId, Int32 currentUserId, Int32 tenantId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).AddUpdateProfileCustomAttributes(customAttributeListToUpdate, applicantId, currentUserId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        #region UAT-2456:Admin Data Entry: "Discard Documents" should have to go through the process twice
        public static Boolean UpdateDocumentDiscardCount(Int32 fdeqId, Int32 currentUserId, Int32 tenantId, Boolean isDocumentFirstTimeDiscarded)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).UpdateDocumentDiscardCount(fdeqId, currentUserId, isDocumentFirstTimeDiscarded);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }

        }
        #endregion

        #region UAT-2495
        /// <summary>
        /// 
        /// </summary>
        /// <param name="clientDataUploadId"></param>
        /// <param name="tenantId"></param>
        /// <returns></returns>
        public static List<Entity.SharedDataEntity.ClientDataUploadConfiguration> GetClientDataUploadConfiguration(Int32 clientDataUploadId, Int32 tenantId)
        {
            try
            {

                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetClientDataUploadConfiguration(clientDataUploadId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="tenantId"></param>
        /// <returns></returns>
        public static List<ClientDataUploadContract> GetTenantNodeMappingData(Int32 clientDataUploadId)
        {
            try
            {
                DataSet ds = BALUtils.GetComplianceDataRepoInstance(AppConsts.NONE).GetTenantNodeMappingData(clientDataUploadId);
                List<ClientDataUploadContract> lstClientDataUploadContact = new List<ClientDataUploadContract>();
                lstClientDataUploadContact = ds.Tables[0].AsEnumerable().Select(col =>
                      new ClientDataUploadContract
                      {
                          ClientDataUploadID = Convert.ToInt32(col["ClientDataUploadID"]),
                          HierarchyNodeID = Convert.ToInt32(col["HierarchyNodeID"]),
                          ClassFullName = col["ClassFullName"] == DBNull.Value ? String.Empty : Convert.ToString(col["ClassFullName"]),
                          LoopCounter = Convert.ToInt32(col["CDU_LoopCounter"]),
                          AssemblyLocation = col["AssemblyLocation"] == DBNull.Value ? String.Empty : Convert.ToString(col["AssemblyLocation"]),
                          ClientRequestFormatCode = col["ClientRequestFormatCode"] == DBNull.Value ? String.Empty : Convert.ToString(col["ClientRequestFormatCode"]),
                          Frequency = col["Frequency"] == DBNull.Value ? AppConsts.NONE : Convert.ToInt32(col["Frequency"]),
                          ClientRequestFormatName = col["ClientRequestFormatName"] == DBNull.Value ? String.Empty : Convert.ToString(col["ClientRequestFormatName"]),
                          StoreProcedureName = col["StoreProcedureName"] == DBNull.Value ? String.Empty : Convert.ToString(col["StoreProcedureName"]),
                          WebServiceURL = col["WebServiceURL"] == DBNull.Value ? String.Empty : Convert.ToString(col["WebServiceURL"]),
                          AuthenticationRequestURL = col["AuthenticationRequestURL"] == DBNull.Value ? String.Empty : Convert.ToString(col["AuthenticationRequestURL"]),
                          Code = col["Code"] == DBNull.Value ? String.Empty : Convert.ToString(col["Code"]),
                          TenantId = Convert.ToInt32(col["TenantID"])
                      }).ToList();

                return lstClientDataUploadContact;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="clientDataUploadServHistory"></param>
        /// <param name="tenantId"></param>
        public static void CreateClientDataUploadServiceHistory(Entity.SharedDataEntity.ClientDataUploadServiceHistory clientDataUploadServHistory, Int32 tenantId)
        {
            try
            {
                BALUtils.GetComplianceDataRepoInstance(tenantId).CreateClientDataUploadServiceHistory(clientDataUploadServHistory);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="Chunksize"></param>
        /// <param name="NodeIds"></param>
        /// <param name="SPName"></param>
        /// <param name="tenantId"></param>
        /// <returns></returns>
        public static Dictionary<String, String> GetDataToUpload(Int32 Chunksize, String NodeIds, String SPName, Int32 tenantId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetDataToUpload(Chunksize, NodeIds, SPName);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Method to update wait until of Client Upload service
        /// </summary>
        /// <param name="clientDataUploadId">clientDataUploadId</param>
        /// <param name="frequency">frequency in minutes</param>
        /// <param name="tenantId">tenantId</param>
        /// <returns></returns>
        public static Boolean UpdateClientDataUploadService(Int32 clientDataUploadId, Int32 frequency, DateTime processStartdate)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(AppConsts.NONE).UpdateClientDataUploadService(clientDataUploadId, frequency, processStartdate);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        #endregion


        public static List<lkpSetting> GetLkpSetting(Int32 tenantID)
        {
            try
            {
                return LookupManager.GetLookUpData<Entity.ClientEntity.lkpSetting>(tenantID).ToList();
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        //UAT-2494
        public static List<ClientSettingCustomAttributeContract> GetCustomAttributesWithClientSettingmapping(Int32 tenantID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).GetCustomAttributesWithClientSettingmapping();
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static void AddUpdateCustomAttributeClientSetting(Int32 tenantID, List<ClientSettingCustomAttributeContract> lstClientSettingCustomAttributeContract, Int32 loggedInUser)
        {
            try
            {
                BALUtils.GetComplianceDataRepoInstance(tenantID).AddUpdateCustomAttributeClientSetting(lstClientSettingCustomAttributeContract, loggedInUser);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }

        }

        /// <summary>
        /// UAT-2494, New Account verification enhancements (additional verification step)
        /// </summary>
        /// <param name="tenantId"></param>
        /// <returns></returns>
        public static List<ClientSettingCustomAttributeContract> GetClientSettingCustomAttribute(Int32 tenantId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetClientSettingCustomAttribute();
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        #region Production Issue: Data Entry[26/12/2016]
        public static Boolean IsDiscardDocumentEmailNeedToSend(Int32 tenantId, Int32 DocumentId, Int32 DiscardReasonId, Int32 applicantID, Int32 currentLoggedInUserId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).IsDiscardDocumentEmailNeedToSend(DocumentId, DiscardReasonId, applicantID, currentLoggedInUserId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static List<lkpDocumentDiscardReason> GetDocumentDiscardReasonList(Int32 tenantId)
        {
            try
            {
                return LookupManager.GetLookUpData<lkpDocumentDiscardReason>(tenantId).ToList();
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        #endregion

        #region UAT-2460
        public static List<Int32> GetNextAndPrevPackageSubscriptionIds(Int32 tenantId, Int32 CurrentPackageSubscriptionID, String SelectedArchiveStateCode, Int32? OrganizationUserID = null)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetNextAndPrevPackageSubscriptionIds(CurrentPackageSubscriptionID, SelectedArchiveStateCode, OrganizationUserID);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        #endregion


        public static List<ApplicantDocument> GetApplicantDocuments(Int32 tenantId, List<Int32> lstApplicantDocumentIds)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetApplicantDocuments(lstApplicantDocumentIds);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        #region Get Tenant Ids for Client Data Upload
        public static List<Int32> GetTenantForClientDataUpload()
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(AppConsts.NONE).GetTenantForClientDataUpload();
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        //UAT:4473
        public static List<Int32> GetTenantDataBasedClientDataUpload(Int32 clientDataUploadId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(AppConsts.NONE).GetTenantDataBasedClientDataUpload(clientDataUploadId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        #endregion

        #region UAT 2680
        public static Boolean SaveComplianceSearchNote(ComplianceSearchNotesContract complianceSearchNotesContract)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(complianceSearchNotesContract.TenantId).SaveComplianceSearchNote(complianceSearchNotesContract);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static ComplianceSearchNotesContract GetComplianceSearchNote(ComplianceSearchNotesContract complianceSearchNotesContract)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(complianceSearchNotesContract.TenantId).GetComplianceSearchNote(complianceSearchNotesContract);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        #endregion

        #region UAT-2618:If a document has ever been associated with any item within a tracking subscription, the refund functionality on the order detail screen should be grayed out
        public static Boolean IsGrayedOutRefundFunctionality(Int32 tenantId, Int32 orderId, Int32 OPD_ID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).IsGrayedOutRefundFunctionality(orderId, OPD_ID);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static Boolean UpdateIsDocAssociated(Int32 tenantId, Int32 packageSubscriptionID, Boolean isDocAssociated, Int32 currentLoggedInuserID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).UpdateIsDocAssociated(packageSubscriptionID, isDocAssociated, currentLoggedInuserID);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        #endregion

        public static List<UpcomingExpirationContract> GetUpcomingExpiration(int tenantId, String hierarchyIDs, String categoryIDs, String itemIDs, DateTime? dateFrom, DateTime? dateTo, String userGroupIDs, CustomPagingArgsContract customPagingArgsContract, Boolean IsClientAdminLoggedIn, Int32 CurrentLoggedInUserId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetUpcomingExpiration(hierarchyIDs, categoryIDs, itemIDs, dateFrom, dateTo, userGroupIDs, customPagingArgsContract, IsClientAdminLoggedIn, CurrentLoggedInUserId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }


        public static String GetApplicantNameByApplicantId(Int32 applicantId, Int32 tenantID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).GetApplicantNameByApplicantId(applicantId);

            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }
        //UAT 2727
        public static Boolean IsExistClientPieChartTColorSetting(Int32 tenantId, Int32 SettingId, String ColorCode)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).IsExistClientPieChartTColorSetting(tenantId, SettingId, ColorCode);

            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }

        #region UAT-2842:
        /// <summary>
        /// Gets the order details for the given Order Id.
        /// </summary>
        /// <param name="tenantId">Tenant Id</param>
        /// <param name="orderId">Order Id</param>
        /// <returns></returns>
        public static List<Order> GetOrdersByIds(Int32 tenantId, List<Int32> orderIds)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetOrdersByIds(orderIds);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        #endregion

        #region UAT-4364

        public static void UpdateScheduleTask(Int32 tenantId, Int32 ScheduleTaskID)
        {
            try
            {
                BALUtils.GetComplianceDataRepoInstance(tenantId).UpdateScheduleTask(ScheduleTaskID);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }
        #endregion
        #region UAT-2388
        public static Boolean InsertAutomaticInvitationLog(Int32 tenantId, Int32 orderID, Int32 currentLoggedInID)
        {
            try
            {
                String _prevStatus = ApplicantOrderStatus.Paid.GetStringValue();
                Int32 paidStatusID = LookupManager.GetLookUpData<Entity.ClientEntity.lkpOrderStatu>(tenantId).Where(cond => cond.Code == _prevStatus).Select(sel => sel.OrderStatusID).FirstOrDefault();
                return BALUtils.GetComplianceDataRepoInstance(tenantId).InsertAutomaticInvitationLog(tenantId, orderID, currentLoggedInID, paidStatusID);

            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }


        #endregion

        #region "UAT-2802"
        public static Boolean IsExistingNodeSelected(Int32 tenantId, Int32 currentLoggedInID, Int32 currentSelectedNodeId)
        {
            try
            {
                Int32 OrderStatusId = LookupManager.GetLookUpData<lkpOrderStatu>(tenantId).FirstOrDefault(cond => cond.Code == ApplicantOrderStatus.Cancelled.GetStringValue()).OrderStatusID;
                return BALUtils.GetComplianceDataRepoInstance(tenantId).IsExistingNodeSelected(tenantId, currentLoggedInID, currentSelectedNodeId, OrderStatusId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }

        public static Boolean IsClientOrderFlowMessageSetting(Int32 tenantId, String SettingCode)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).IsClientOrderFlowMessageSetting(tenantId, SettingCode);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }
        #endregion

        #region UAT-2971 :- Support Portal

        public static List<ApplicantData> GetSupportPortalSearchData(SearchItemDataContract searchContract, String selectedTenantIds, CustomPagingArgsContract gridCustomPaging, Int32 currentLoggedInUserId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(SecurityManager.DefaultTenantID).GetSupportPortalSearchData(searchContract, selectedTenantIds, gridCustomPaging, currentLoggedInUserId);

            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }

        public static List<BkgOrderQueueNotesContract> GetSupportPortalBkgOrderNotes(Int32 selectedTenantID, Int32 applicantOrganizationUserID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(selectedTenantID).GetSupportPortalBkgOrderNotes(applicantOrganizationUserID);

            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }

        public static Boolean SaveSupportPortalBkgOrderNotes(Int32 selectedTenantID, BkgOrderQueueNote supportPortalBkgOrderNotesToSave)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(selectedTenantID).SaveSupportPortalBkgOrderNotes(supportPortalBkgOrderNotesToSave);

            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }

        public static BkgOrderQueueNote GetSupportPortalBkgOrderNotesByNoteID(Int32 selectedTenantID, Int32 supportPortalBkgOrderNoteId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(selectedTenantID).GetSupportPortalBkgOrderNotesByNoteID(supportPortalBkgOrderNoteId);

            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }

        public static Boolean UpdateSupportPortalBkgOrderNotes(Int32 selectedTenantID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(selectedTenantID).UpdateSupportPortalBkgOrderNotes();

            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }


        public static List<SupportPortalOrderDetailContract> GetSupportPortalOrderDetail(Int32 tenantId, Int32 OrganizationUserId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetSupportPortalOrderDetail(OrganizationUserId);

            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }
        public static List<Int32> GetBkgOrderArchiveHistoryIds(Int32 bkgOrderId, Int32 tenantId)
        {
            try
            {
                Int32 changeTypeID = GetComplianceSubsArchiveChangeTypeIdByCode(tenantId, ComplianceSubscriptionArchiveChangeType.SET_TO_ARCHIVE.GetStringValue());
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetBkgOrderArchiveHistoryIds(bkgOrderId, changeTypeID);

            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }

        public static List<Int32> GetPkgSubArchiveHistoryIds(Int32 packageSubscriptionId, Int32 tenantId)
        {
            try
            {
                Int32 changeTypeID = GetComplianceSubsArchiveChangeTypeIdByCode(tenantId, ComplianceSubscriptionArchiveChangeType.SET_TO_ARCHIVE.GetStringValue());
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetPkgSubArchiveHistoryIds(packageSubscriptionId, changeTypeID);

            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }
        public static List<Int32> GetPkgSubArchiveHistoryIds(List<Int32> packageSubscriptionIds, Int32 tenantId)
        {
            try
            {
                Int32 changeTypeID = GetComplianceSubsArchiveChangeTypeIdByCode(tenantId, ComplianceSubscriptionArchiveChangeType.SET_TO_ARCHIVE.GetStringValue());
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetPkgSubArchiveHistoryIds(packageSubscriptionIds, changeTypeID);

            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }

        public static Entity.ClientEntity.OrganizationUser GetOrganizationUserByUserID(String userId, Int32 tenantId, Boolean isApplicant)
        {
            try
            {

                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetOrganizationUserByUserID(userId, isApplicant);

            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }


        #endregion

        #region UAT-2697:New NYU Bulk Upload Feature
        public static List<BulkOrderUpload> GetBulkOrderDataForRepeatedSearchOrder(Int32 tenantId, Int32 _recordChunkSize)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetBulkOrderDataForRepeatedSearchOrder(_recordChunkSize);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static List<Int32> CreateBulkOrderForRepeatedSearch(String bulkOrderUploadIDs, Int32 currentLoggedInUserID, Int32 tenantID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).CreateBulkOrderForRepeatedSearch(bulkOrderUploadIDs, currentLoggedInUserID, tenantID);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        public static Boolean IsApplicantGraduated(Int32 tenantId, Int32 applicantId)
        {
            try
            {
                Int32 archiveStateGraduatedId = LookupManager.GetLookUpData<Entity.ClientEntity.lkpArchiveState>(tenantId).FirstOrDefault(cnd => cnd.AS_Code == ArchiveState.Graduated.GetStringValue() && cnd.AS_IsDeleted == false).AS_ID;
                Int32 archiveStateArchivedAndGraduatedId = LookupManager.GetLookUpData<Entity.ClientEntity.lkpArchiveState>(tenantId).FirstOrDefault(cnd => cnd.AS_Code == ArchiveState.Archived_and_Graduated.GetStringValue() && cnd.AS_IsDeleted == false).AS_ID;
                return BALUtils.GetComplianceDataRepoInstance(tenantId).IsApplicantGraduated(applicantId, archiveStateGraduatedId, archiveStateArchivedAndGraduatedId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        #endregion

        #region [UAT-2310]
        private static List<AutoAssignItemsToUserContract> FilterBucketsForTenantUserMapping(List<AutoAssignItemsToUserContract> inputList, Int32 tenantID)
        {
            var result = new List<AutoAssignItemsToUserContract>();
            if (!inputList.IsNullOrEmpty() && inputList.Count > AppConsts.NONE)
            {
                if (inputList.Exists(x => x.MappedTenants.Contains(tenantID)))
                {
                    result = inputList.Where(x => x.MappedTenants.Contains(tenantID)).ToList();
                }
                else
                {
                    result.AddRange(inputList.ToList());
                }
            }
            return result;
        }
        private static List<AutoAssignItemsToUserContract> OrderBucketsInOrderOfTenantMapping(List<AutoAssignItemsToUserContract> adminUsersBucketList, List<Int32> tenantIds)
        {
            var result = new List<AutoAssignItemsToUserContract>();
            if (tenantIds.All(x => adminUsersBucketList.Any(y => y.MappedTenants.Contains(x))))// If all selected tenants have at least one user mapped
            {
                result = adminUsersBucketList.Where(
                    x => tenantIds.Any(
                    y => x.MappedTenants.Contains(y)
                    )
                    ).ToList();
            }
            else
            {
                result = adminUsersBucketList.ToList();
            }
            // need to check if this works for 0 count
            return result.OrderBy(x => x.MappedTenants.Count()).ToList();

        }
        private static List<Int32> GetMultipleTenantOrderByNoOfMappedUsers(List<AutoAssignItemsToUserContract> adminUsersBucketList, List<Int32> tenantIds)
        {
            if (tenantIds.IsNotNull() && tenantIds.Count > 0)
            {
                Dictionary<Int32, Int32> dicMappingCount = new Dictionary<Int32, Int32>();

                if (adminUsersBucketList.IsNotNull() && adminUsersBucketList.Count > 0)
                {
                    foreach (var item in tenantIds)
                    {
                        dicMappingCount.Add(item, adminUsersBucketList.Where(x => x.MappedTenants.Contains(item)).Count());
                    }

                    if (dicMappingCount.IsNotNull() && dicMappingCount.Count > 0)
                    {
                        List<Int32> tenants = dicMappingCount.OrderBy(x => x.Value).Select(x => x.Key).ToList();

                        if (tenants.IsNotNull() && tenants.Count > 0)
                        {
                            tenantIds = tenantIds.OrderBy(x => tenants.IndexOf(x)).ToList();
                        }
                    }
                }
            }
            return tenantIds;
        }

        public static Boolean AutomaticAssigningItemsToUsers(Int32 currentLoggedInUserId, AutoAssignItemsToUserListContract AutoAssignContract)
        {
            try
            {
                #region [Get All Admin(s) user bucket count]
                List<AutoAssignItemsToUserContract> adminUsersBucketList = BALUtils.GetComplianceDataRepoInstance(SecurityManager.DefaultTenantID).GetAdminUsersBucketDetails(AutoAssignContract.MultiTenantInputXml);
                #endregion


                if (!AutoAssignContract.IsMultiTenant)
                {
                    adminUsersBucketList = FilterBucketsForTenantUserMapping(adminUsersBucketList, AutoAssignContract.TenantIds.FirstOrDefault());

                    adminUsersBucketList = OrderBucketsInOrderOfTenantMapping(adminUsersBucketList, AutoAssignContract.TenantIds.ToList());
                }
                else
                {
                    adminUsersBucketList = OrderBucketsInOrderOfTenantMapping(adminUsersBucketList, AutoAssignContract.TenantIds);

                    AutoAssignContract.TenantIds = GetMultipleTenantOrderByNoOfMappedUsers(adminUsersBucketList, AutoAssignContract.TenantIds);
                }

                #region [Automatic Assign Items to user according to their availability in their bucket/User Assignment queue]
                if (!adminUsersBucketList.IsNullOrEmpty() && adminUsersBucketList.Count > AppConsts.NONE)
                {

                    foreach (var tenantID in AutoAssignContract.TenantIds)
                    {
                        try
                        {
                            List<AutoAssignItemsToUserContract> adminUsersBucketListDataResult = new List<AutoAssignItemsToUserContract>();
                            List<AutoAssignItemsToUserContract> adminUsersBucketListData = new List<AutoAssignItemsToUserContract>();
                            if (!adminUsersBucketList.IsNullOrEmpty() && adminUsersBucketList.Count > AppConsts.NONE)
                            {
                                adminUsersBucketListData = FilterBucketsForTenantUserMapping(adminUsersBucketList, tenantID);
                                String adminUsersBucketListxml = String.Empty;
                                if (AutoAssignContract.IsMultiTenant)
                                {
                                    if (adminUsersBucketListData.IsNotNull() && adminUsersBucketListData.Count > 0)
                                    {
                                        adminUsersBucketListxml = GetMainDataXML(adminUsersBucketListData);
                                        adminUsersBucketListDataResult = BALUtils.GetComplianceDataRepoInstance(tenantID).AutomaticAssigningItemsToUsersFromAllClientAssignmentQueue(currentLoggedInUserId, adminUsersBucketListxml, AutoAssignContract);
                                        adminUsersBucketList.Where(x => adminUsersBucketListDataResult.Any(y => y.OrganizationUserID == x.OrganizationUserID &&
                                        y.SubmissionStartDate == x.SubmissionStartDate &&
                                        y.SubmissionEndDate == x.SubmissionEndDate))
                                        .ForEach(x => x.TotalBucketCount = adminUsersBucketListDataResult
                                        .Where(y => y.OrganizationUserID == x.OrganizationUserID &&
                                        y.SubmissionStartDate == x.SubmissionStartDate &&
                                        y.SubmissionEndDate == x.SubmissionEndDate).Select(z => z.TotalBucketCount).FirstOrDefault());
                                        BALUtils.GetQueueImagingRepoInstance().UpdateInsertQueueImagingDue(tenantID);
                                    }
                                }
                                else
                                {
                                    adminUsersBucketListxml = GetMainDataXML(adminUsersBucketListData);
                                    adminUsersBucketListDataResult = BALUtils.GetComplianceDataRepoInstance(tenantID).AutomaticAssigningItemsToUsers(currentLoggedInUserId, adminUsersBucketListxml, AutoAssignContract.verficationQueueDataXml, AutoAssignContract.VerificationGridCustomPaging, AutoAssignContract.CustomDataXML, AutoAssignContract.DPMIds);
                                }
                                // adminUsersBucketList = BALUtils.GetComplianceDataRepoInstance(tenantID).AutomaticAssigningItemsToUsers(currentLoggedInUserId, adminUsersBucketListxml, AutoAssignContract.verificationQueueData, AutoAssignContract.VerificationGridCustomPaging, AutoAssignContract.CustomDataXML, AutoAssignContract.DPMIds);
                                // }                            
                            }

                        }
                        catch (Exception ex)
                        {
                            //Log the exception as we don't want to break the tenant loop
                            BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                        }
                    }
                }
                return true;
                #endregion

            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }

        public static String GetMainDataXML(List<AutoAssignItemsToUserContract> adminUsersBucketList)
        {
            try
            {
                String mainDataXML = "<UserBucket>";

                adminUsersBucketList.ForEach(x =>
                {
                    mainDataXML += "<UserBucketDetail>";
                    mainDataXML += "<OrganizationUserID>" + x.OrganizationUserID.ToString() + "</OrganizationUserID>";
                    mainDataXML += "<BucketCount>" + x.TotalBucketCount.ToString() + "</BucketCount>";
                    mainDataXML += "<SubmissionStartDate>" + x.SubmissionStartDate.ToString("yyyy-MM-dd") + "</SubmissionStartDate>";
                    mainDataXML += "<SubmissionEndDate>" + x.SubmissionEndDate.ToString("yyyy-MM-dd") + "</SubmissionEndDate>";
                    mainDataXML += "</UserBucketDetail>";
                });

                mainDataXML += "</UserBucket>";
                return mainDataXML;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }


        public static void UpdateQueueImaging(Int32 tenantID)
        {
            try
            {
                BALUtils.GetQueueImagingRepoInstance().UpdateInsertQueueImagingDue(tenantID);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }

        #endregion


        #region UAT 3009
        public static List<Int32> GetApplicantComplianceItemIdList(Int32 packageSubscriptionId, Int32 complianceCategoryId, Int32 tenantId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetApplicantComplianceItemIdList(packageSubscriptionId, complianceCategoryId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }
        #endregion


        #region UAT-3052
        /// <summary>
        /// Retrieve a list of Agency Hierarchy.
        /// </summary>
        /// <returns>list of Agency Hierarchy By looged in email Id</returns>
        public static List<Entity.SharedDataEntity.Agency> GetAgencyHierarchy(String loggedInEmailId)
        {
            try
            {
                List<Entity.SharedDataEntity.Agency> lstAgency = BALUtils.GetSharedRequirementPackageRepoInstance().GetAgencyHierarchy(loggedInEmailId);
                return lstAgency;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Retrieve a list of Agency Users.
        /// </summary>
        /// <returns>list of Agency Users By looged in email Id</returns>
        public static List<Entity.SharedDataEntity.Agency> GetAgencyUsers(String loggedInEmailId)
        {
            try
            {
                List<Entity.SharedDataEntity.Agency> lstAgency = BALUtils.GetSharedRequirementPackageRepoInstance().GetAgencyUsers(loggedInEmailId);
                return lstAgency;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Get Item List by TenantIds and LoggedInEmailId only for Reports
        /// </summary>
        /// <param name="tenantID"></param>
        /// <param name="loggedInEmailId"></param>
        /// <returns></returns>
        public static Dictionary<String, String> GetItemListForReportsByTenantIdLoggedInEmail(String tenantIDs, String loggedInEmailId)
        {
            try
            {
                return BALUtils.GetSecurityRepoInstance().GetItemListForReportsByTenantIdLoggedInEmail(tenantIDs, loggedInEmailId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }

        /// <summary>        
        /// </summary>
        /// <param name="tenantID"></param>
        /// <param name="loggedInEmailId"></param>
        /// <returns></returns>
        public static Dictionary<String, String> GetAllItemListForReportsByTenantIdLoggedInEmail(String tenantIDs, String loggedInEmailId)
        {
            try
            {
                return BALUtils.GetSecurityRepoInstance().GetAllItemListForReportsByTenantIdLoggedInEmail(tenantIDs, loggedInEmailId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }


        /// <summary>
        /// Get Item List by TenantIds and LoggedInEmailId only for Reports
        /// </summary>
        /// <param name="tenantID"></param>
        /// <param name="loggedInEmailId"></param>
        /// <returns></returns>
        public static List<Entity.ClientEntity.Tenant> GetTenantsByTenantId(String tenantIDs)
        {
            try
            {
                return BALUtils.GetSecurityRepoInstance().GetTenantsByTenantId(tenantIDs);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }

        #endregion

        #region UAT-3075
        public static List<CompliancePriorityObjectContract> GetCompObjMappings(Int32 selectedTenantId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(selectedTenantId).GetCompObjMappings();
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }

        public static List<CompliancePriorityObjectContract> GetCategoryItems(Int32 selectedTenantId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(selectedTenantId).GetCategoryItems();
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }

        public static Boolean SaveCompObjMapping(Int32 selectedTenantId, CompliancePriorityObjectContract compObjMapping, Int32 currentLoggedInUserId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(selectedTenantId).SaveCompObjMapping(compObjMapping, currentLoggedInUserId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }

        public static Boolean DeleteCompObjMapping(Int32 selectedTenantID, Int32 CurrentLoggedInUserID, Int32 compObjMappingID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(selectedTenantID).DeleteCompObjMapping(compObjMappingID, CurrentLoggedInUserID);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }
        #endregion

        #region UAT-3077
        public static ItemPaymentContract CreateItemPaymentOrder(ItemPaymentContract itemPaymentContract)
        {
            try
            {
                //get paymentType,OrderType

                #region Get OrderRequestTypeID,ItemPaymentOrderMappingEntityTypeID
                String OrderRequestTypeCode = OrderRequestType.ItemPayment.GetStringValue(); // "AAF"; // Requirement Item Payment in ams.lkpOrderPackageType 
                //---OrderRequestTypeID
                itemPaymentContract.OrderRequestTypeID = LookupManager.GetLookUpData<Entity.ClientEntity.lkpOrderRequestType>(itemPaymentContract.TenantID).FirstOrDefault(ps => ps.ORT_Code == OrderRequestTypeCode && (ps.ORT_Active ?? false)).ORT_ID;

                String OrderStatusCode = ApplicantOrderStatus.Send_For_Online_Payment.GetStringValue(); // "OSONP";
                itemPaymentContract.OrderStatusID = LookupManager.GetLookUpData<Entity.ClientEntity.lkpOrderStatu>(itemPaymentContract.TenantID).FirstOrDefault(ps => ps.Code == OrderStatusCode && !ps.IsDeleted).OrderStatusID;

                String ItemComplianceStatusCode = ApplicantItemComplianceStatus.Incomplete.GetStringValue(); // "PNDG"; //Pending Review For Admin(i.e. Payment GAteway)
                String CategoryComplianceStatusCode = ApplicantCategoryComplianceStatus.Incomplete.GetStringValue(); // "PNDR"; //Pending Review
                String RequirementCategoryStatusCode = RequirementCategoryStatus.INCOMPLETE.GetStringValue(); // "AAAB";//Pending Review
                String RequirementPendingItemStatusCode = RequirementItemStatus.PENDING_REVIEW.GetStringValue(); // "AAAB";//Pending Review
                String RequirementIncompleteItemStatusCode = RequirementItemStatus.INCOMPLETE.GetStringValue(); // "AAAA";
                String lkpItemDataTypeCode = String.Empty;
                String OrderPackageTypeCode = String.Empty;

                List<lkpObjectType> lstObjectType = LookupManager.GetLookUpData<Entity.ClientEntity.lkpObjectType>(itemPaymentContract.TenantID).Where(cond => !cond.OT_IsDeleted).ToList();
                if (itemPaymentContract.IsRequirementPackage)
                {
                    itemPaymentContract.ApplicantRequirementCategoryDataStatusID = LookupManager.GetLookUpData<Entity.ClientEntity.lkpRequirementCategoryStatu>(itemPaymentContract.TenantID).FirstOrDefault(ps => ps.RCS_Code == RequirementCategoryStatusCode && !ps.RCS_IsDeleted).RCS_ID;

                    List<RequirementItemField> lstFields = BALUtils.GetApplicantRequirementRepoInstance(itemPaymentContract.TenantID).GetRequirementFieldList(itemPaymentContract.ItemID);

                    List<ApplicantRequirementFieldData> lstApplicantData = new List<ApplicantRequirementFieldData>();
                    foreach (RequirementItemField itemField in lstFields)
                    {
                        ApplicantRequirementFieldData applicantFieldData = new ApplicantRequirementFieldData();
                        applicantFieldData.ARFD_RequirementFieldID = itemField.RIF_RequirementFieldID;

                        if (itemField.RequirementField.lkpRequirementFieldDataType.RFDT_Code == INTSOF.Utils.RequirementFieldDataType.SIGNATURE.GetStringValue())
                        {
                            applicantFieldData.ARFD_FieldValue = "False";
                        }

                        lstApplicantData.Add(applicantFieldData);

                    }
                    if (itemPaymentContract.IsPaid)
                    {
                        Dictionary<Boolean, String> ruleResult = BALUtils.GetApplicantRequirementRepoInstance(itemPaymentContract.TenantID).ValidateDynamicUiRules(itemPaymentContract.OrganizationUserID, itemPaymentContract.PkgId, lstApplicantData
                                                                        , itemPaymentContract.ItemID, itemPaymentContract.CategoryID, itemPaymentContract.PkgSubscriptionId, true, lstObjectType);

                        itemPaymentContract.ApplicantRequirementItemDataStatusID = ruleResult.Keys.FirstOrDefault() ? LookupManager.GetLookUpData<Entity.ClientEntity.lkpRequirementItemStatu>(itemPaymentContract.TenantID).FirstOrDefault(ps => ps.RIS_Code == RequirementIncompleteItemStatusCode && !ps.RIS_IsDeleted).RIS_ID
                                                                    : LookupManager.GetLookUpData<Entity.ClientEntity.lkpRequirementItemStatu>(itemPaymentContract.TenantID).FirstOrDefault(ps => ps.RIS_Code == RequirementPendingItemStatusCode && !ps.RIS_IsDeleted).RIS_ID;
                    }
                    else
                    {
                        itemPaymentContract.ApplicantRequirementItemDataStatusID = LookupManager.GetLookUpData<Entity.ClientEntity.lkpRequirementItemStatu>(itemPaymentContract.TenantID).FirstOrDefault(ps => ps.RIS_Code == RequirementIncompleteItemStatusCode && !ps.RIS_IsDeleted).RIS_ID;
                    }
                    lkpItemDataTypeCode = ItemDataType.Applicant_Requirement_Item_Data.GetStringValue(); // "AAAB"; // Applicant Requirement Item Data
                    OrderPackageTypeCode = OrderPackageTypes.REQUIREMENT_ITEM_PAYMENT.GetStringValue(); // "AAAF"; //Requirement Item Payment
                }
                else
                {
                    itemPaymentContract.ApplicantComplianceCategoryDataStatusID = LookupManager.GetLookUpData<Entity.ClientEntity.lkpCategoryComplianceStatu>(itemPaymentContract.TenantID).FirstOrDefault(ps => ps.Code == CategoryComplianceStatusCode && !ps.IsDeleted).CategoryComplianceStatusID;
                    itemPaymentContract.ApplicantComplianceItemDataStatusID = LookupManager.GetLookUpData<Entity.ClientEntity.lkpItemComplianceStatu>(itemPaymentContract.TenantID).FirstOrDefault(ps => ps.Code == ItemComplianceStatusCode && !ps.IsDeleted).ItemComplianceStatusID;
                    lkpItemDataTypeCode = ItemDataType.Applicant_Compliance_Item_Data.GetStringValue(); // "AAAA"; //Applicant Compliance Item Data
                    OrderPackageTypeCode = OrderPackageTypes.TRACKING_ITEM_PAYMENT.GetStringValue(); // "AAAE"; //Tracking Item Payment
                }
                itemPaymentContract.OrderPackageTypeID = LookupManager.GetLookUpData<Entity.ClientEntity.lkpOrderPackageType>(itemPaymentContract.TenantID).FirstOrDefault(s => s.OPT_Code == OrderPackageTypeCode && !s.OPT_IsDeleted).OPT_ID;
                //-- ItemPaymentOrderMappingEntityTypeID
                itemPaymentContract.ItemPaymentOrderMappingEntityTypeID = LookupManager.GetLookUpData<Entity.ClientEntity.lkpItemDataType>(itemPaymentContract.TenantID).FirstOrDefault(s => s.IDT_Code == lkpItemDataTypeCode && !s.IDT_IsDeleted).IDT_ID;
                #endregion
                String ItempaymentContractPaymentOptionCode = PaymentOptions.Credit_Card.GetStringValue(); // "PTCC";
                itemPaymentContract.PaymentOptionID = LookupManager.GetLookUpData<Entity.ClientEntity.lkpPaymentOption>(itemPaymentContract.TenantID).FirstOrDefault(s => s.Code == ItempaymentContractPaymentOptionCode && !s.IsDeleted).PaymentOptionID;

                if (!itemPaymentContract.IsRequirementPackage)
                {
                    var lkpObjectType = LookupManager.GetLookUpData<Entity.ClientEntity.lkpObjectType>(itemPaymentContract.TenantID).Where(x => x.OT_IsDeleted == false).ToList();
                    itemPaymentContract.AssignmentProperty = BALUtils.GetComplianceSetupRepoInstance(itemPaymentContract.TenantID).FetchAssignmentOptions(itemPaymentContract.PkgId, lkpObjectType, itemPaymentContract.CategoryID, itemPaymentContract.ItemID);
                    itemPaymentContract.ListItemMovementType = GetlkpItemMovementType(itemPaymentContract.TenantID);
                }

                return BALUtils.GetComplianceDataRepoInstance(itemPaymentContract.TenantID).CreateItemPaymentOrder(itemPaymentContract, lstObjectType);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }

        public static OrganizationUserProfile GetOrganizationUserProfileByUserProfileID(Int32 TenantID, Int32 OrganizationUserProfileID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(TenantID).GetOrganizationUserProfileByUserProfileID(OrganizationUserProfileID);

            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }

        public static List<ItemPaymentContract> GetItemPaymentDetail(Int32 subscriptionID, Int32 tenantID, Boolean isRequirementPackage)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).GetItemPaymentDetailBySubscriptionId(subscriptionID, isRequirementPackage);

            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }

        /// <summary>
        /// Set handle assignment data in dictionary.
        /// </summary>
        /// <param name="isResetBusinessProcess">true=if item expired otherwise false.</param>
        /// <param name="statusCode">statusCode</param>
        /// <param name="statusId">StatusId</param>
        /// <param name="applicantComplianceItemnId">ApplicantComplianceItemId</param>
        /// <returns>dictionary</returns>
        public static Dictionary<String, Object> SetHandleAssignmentForItemPaymentData(ItemPaymentContract applicantItemData, Boolean notReviewed, Int32 currentLoggdInUserID)
        {
            Int32 queueId = 0;
            String queueCode;
            Dictionary<String, Object> dicHandleAssignmentData = new Dictionary<String, Object>();
            Dictionary<String, Object> dicQueueFields = new Dictionary<String, Object>();
            String queueFieldsXML = String.Empty;
            String rushOrderStatusCode = String.Empty;
            String rushOrderStatusText = String.Empty;
            String itemComplianceStatusText = String.Empty;
            String complianceCategoryName = String.Empty;
            String complianceItemName = String.Empty;
            String statusCode = String.Empty;
            if (applicantItemData.IsNotNull())
            {
                complianceItemName = applicantItemData.ItemName;
                complianceCategoryName = applicantItemData.CategoryName;


                //if (View.RushOrderStatusId.IsNotNull())
                //{
                //    lkpOrderStatu ordrStatus = LookupManager.GetLookUpData<Entity.ClientEntity.lkpOrderStatu>(View.TenantID).Where(x => x.IsDeleted == false && x.OrderStatusID == View.RushOrderStatusId).FirstOrDefault();
                //    rushOrderStatusCode = ordrStatus.Code;
                //    rushOrderStatusText = ordrStatus.Name;
                //}
                if (!applicantItemData.ApplicantRequirementItemDataStatusID.IsNullOrEmpty())
                {
                    lkpItemComplianceStatu complianceStatus = LookupManager.GetLookUpData<Entity.ClientEntity.lkpItemComplianceStatu>(applicantItemData.TenantID).Where(x => x.IsDeleted == false && x.ItemComplianceStatusID == applicantItemData.ApplicantComplianceItemDataStatusID).FirstOrDefault();
                    statusCode = complianceStatus.Code;
                    itemComplianceStatusText = complianceStatus.Name;
                }
                //Get the queueid on the basis status code
                if (statusCode == ApplicantItemComplianceStatus.Pending_Review.GetStringValue())
                {
                    queueCode = QueueMetaDataType.Verification_Queue_For_Admin.GetStringValue();
                    queueId = LookupManager.GetLookUpData<Entity.ClientEntity.QueueMetaData>(applicantItemData.TenantID).Where(x => x.QMD_IsDeleted == false && x.QMD_Code == queueCode).FirstOrDefault().QMD_QueueID;
                }
                else if (statusCode == ApplicantItemComplianceStatus.Pending_Review_For_Client.GetStringValue())
                {
                    queueCode = QueueMetaDataType.Verification_Queue_For_ClientAdmin.GetStringValue();
                    queueId = LookupManager.GetLookUpData<Entity.ClientEntity.QueueMetaData>(applicantItemData.TenantID).Where(x => x.QMD_IsDeleted == false && x.QMD_Code == queueCode).FirstOrDefault().QMD_QueueID;
                }
                else if ((statusCode == ApplicantItemComplianceStatus.Applied_For_Exception.GetStringValue()) && applicantItemData.IsReviewerTypeAdmin == true)
                {
                    queueCode = QueueMetaDataType.Exception_Queue_For_Admin.GetStringValue();
                    queueId = LookupManager.GetLookUpData<Entity.ClientEntity.QueueMetaData>(applicantItemData.TenantID).Where(x => x.QMD_IsDeleted == false && x.QMD_Code == queueCode).FirstOrDefault().QMD_QueueID;
                }
                else if ((statusCode == ApplicantItemComplianceStatus.Applied_For_Exception.GetStringValue()) && (applicantItemData.IsReviewerTypeAdmin == false && applicantItemData.IsReviewerTypeClientAdmin == true))
                {
                    queueCode = QueueMetaDataType.Exception_Queue_For_ClientAdmin.GetStringValue();
                    queueId = LookupManager.GetLookUpData<Entity.ClientEntity.QueueMetaData>(applicantItemData.TenantID).Where(x => x.QMD_IsDeleted == false && x.QMD_Code == queueCode).FirstOrDefault().QMD_QueueID;
                }

                if (queueId > 0)
                {
                    //Create dictionary for QueueFields.
                    dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.ApplicantName, applicantItemData.ApplicantName);
                    dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.ComplianceItemId, applicantItemData.ItemID);
                    dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.CategoryId, applicantItemData.CategoryID);
                    dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.PackageID, applicantItemData.PkgId);
                    dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.SubmissionDate, applicantItemData.SubmissionDate);
                    dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.System_Status, String.Empty);
                    dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.Rush_Order_Status, rushOrderStatusCode);
                    dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.ApplicantComplianceItemID, applicantItemData.ApplicantComplianceItemnId);
                    dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.HierarchyNodeID, Convert.ToString(applicantItemData.HierarchyNodeID));
                    dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.ApplicantId, applicantItemData.OrganizationUserID);
                    dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.Item_Name, complianceItemName);
                    dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.Category_Name, complianceCategoryName);
                    dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.Package_Name, applicantItemData.PkgName);
                    dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.Verification_Status_Text, itemComplianceStatusText);
                    dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.Rush_Order_Status_Text, rushOrderStatusText);
                    dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.Verification_Status, applicantItemData.ApplicantComplianceItemDataStatusID);
                    dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.Assigned_To_User, applicantItemData.AssignedToUser.IsNull() ? 0 : applicantItemData.AssignedToUser);
                    dicQueueFields.Add("ResetReviewProcess", false);
                    dicQueueFields.Add("BypassInitialReview", false);
                    //dicQueueFields.Add("NotReviewed", notReviewed);

                    //Get XML for queueFields.
                    queueFieldsXML = "<Queues>" + QueueManagementManager.GetQueueFieldXMLString(dicQueueFields, queueId, applicantItemData.ApplicantComplianceItemnId, notReviewed) + "</Queues>";

                    //Create dictionary for handle assignment data.
                    dicHandleAssignmentData.Add("CurrentLoggedInUserId", currentLoggdInUserID); //View.CurrentLoggedInUserId UAT 1261
                    dicHandleAssignmentData.Add("TenantId", applicantItemData.TenantID);
                    dicHandleAssignmentData.Add("QueueRecordXML", queueFieldsXML);
                    return dicHandleAssignmentData;
                }
            }
            return null;
        }

        public static String GetOrderNumberByOrderID(Int32 orderID, Int32 tenantId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetOrderNumberByOrderID(orderID);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }

        }
        #endregion

        #region UAT-3084
        public static List<RejectedItemListContract> GetRejectedItemListForReSubmission(Int32 tenantId, Int32 orgUserID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetRejectedItemListForReSubmission(orgUserID);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }

        public static Boolean ResubmitApplicantComplianceItemData(List<Int32> lstApplicantComplianceItemDataIds, Int32 currentUserId, Int32 tenantId, Int32 OrgUsrID)
        {
            List<ApplicantComplianceItemData> lstApplicantComplianceItemData = BALUtils.GetComplianceDataRepoInstance(tenantId).GetApplicantComplianceItemDataByIDs(lstApplicantComplianceItemDataIds);

            if (!lstApplicantComplianceItemData.IsNullOrEmpty())
            {
                foreach (ApplicantComplianceItemData ComplianceItemData in lstApplicantComplianceItemData)
                {
                    List<ApplicantComplianceAttributeData> applicantData = new List<ApplicantComplianceAttributeData>();

                    ApplicantComplianceCategoryData categoryData = new ApplicantComplianceCategoryData
                    {
                        ApplicantComplianceCategoryID = ComplianceItemData.ApplicantComplianceCategoryData.ApplicantComplianceCategoryID > 0 ? ComplianceItemData.ApplicantComplianceCategoryData.ApplicantComplianceCategoryID : 0,
                        PackageSubscriptionID = ComplianceItemData.ApplicantComplianceCategoryData.PackageSubscriptionID,
                        ComplianceCategoryID = ComplianceItemData.ApplicantComplianceCategoryData.ComplianceCategoryID,
                        Notes = ComplianceItemData.ApplicantComplianceCategoryData.Notes
                    };

                    ApplicantComplianceItemData itemData = new ApplicantComplianceItemData
                    {
                        ApplicantComplianceItemID = ComplianceItemData.ApplicantComplianceItemID,
                        ComplianceItemID = ComplianceItemData.ComplianceItemID,
                        Notes = ComplianceItemData.Notes,
                        IsUiRulesViolate = false
                    };

                    Int32 ComplianceCategoryId = ComplianceItemData.ApplicantComplianceCategoryData.ComplianceCategoryID;
                    Int32 CompliancePackageID = ComplianceItemData.ApplicantComplianceCategoryData.PackageSubscription.CompliancePackageID;
                    Int32 packageSubscriptionId = ComplianceItemData.ApplicantComplianceCategoryData.PackageSubscriptionID;
                    String compliancePackageName = !ComplianceItemData.ApplicantComplianceCategoryData.PackageSubscription.CompliancePackage.PackageLabel.IsNullOrEmpty()
                        ? ComplianceItemData.ApplicantComplianceCategoryData.PackageSubscription.CompliancePackage.PackageLabel
                        : ComplianceItemData.ApplicantComplianceCategoryData.PackageSubscription.CompliancePackage.PackageName;

                    Int32 PackageStatusID = ComplianceItemData.ApplicantComplianceCategoryData.PackageSubscription.ComplianceStatusID.Value;
                    String PackageStatusCode = ComplianceItemData.ApplicantComplianceCategoryData.PackageSubscription.lkpPackageComplianceStatu.Code;

                    List<ListItemAssignmentProperties> lstItemAssignmentProperties = ComplianceSetupManager.GetAssignmentPropertiesByCategoryId(CompliancePackageID, ComplianceCategoryId, tenantId);
                    itemData = ComplianceDataManager.SetItemReviewerTypeProperties(itemData, lstItemAssignmentProperties);

                    List<ApplicantComplianceAttributeData> lstApplicantComplianceAttributeData = ComplianceItemData.ApplicantComplianceAttributeDatas.ToList();

                    if (!lstApplicantComplianceAttributeData.IsNullOrEmpty())
                    {
                        foreach (var attData in lstApplicantComplianceAttributeData)
                        {
                            applicantData.Add(new ApplicantComplianceAttributeData
                            {
                                ApplicantComplianceAttributeID = attData.ApplicantComplianceAttributeID > 0 ? attData.ApplicantComplianceAttributeID : 0,
                                ApplicantComplianceItemID = attData.ApplicantComplianceItemID,
                                AttributeValue = attData.AttributeValue,
                                ComplianceAttributeID = attData.ComplianceAttributeID,
                                AttributeTypeCode = attData.AttributeTypeCode
                            });
                        }
                    }
                    String categoryComplianceStatus = ComplianceItemData.ApplicantComplianceCategoryData.lkpCategoryComplianceStatu.Code;


                    var lkpObjectType = LookupManager.GetLookUpData<Entity.ClientEntity.lkpObjectType>(tenantId).Where(x => x.OT_IsDeleted == false).ToList();
                    AssignmentProperty assignmentProperty = BALUtils.GetComplianceSetupRepoInstance(tenantId).FetchAssignmentOptions(CompliancePackageID, lkpObjectType, categoryData.ComplianceCategoryID, itemData.ComplianceItemID);
                    List<lkpItemMovementType> lstItemMovementTypes = GetlkpItemMovementType(tenantId);
                    List<lkpObjectType> lstObjectTypes = GetlkpObjectType(tenantId);

                    ComplianceSaveResponse complianceSaveResponse = BALUtils.GetComplianceDataRepoInstance(tenantId).SaveApplicantDataForReSubmission(categoryData, itemData, applicantData,
                    currentUserId, categoryComplianceStatus, CompliancePackageID, assignmentProperty, packageSubscriptionId, lstItemMovementTypes, lstObjectTypes, true, OrgUsrID, tenantId);

                    List<ApplicantComplianceAttributeDataContract> lstApplicantComplianceAttributeDataContract = new List<ApplicantComplianceAttributeDataContract>();
                    List<ApplicantComplianceAttributeData> lstApplicantComplianceAttributes = itemData.ApplicantComplianceAttributeDatas.ToList();
                    if (!lstApplicantComplianceAttributes.IsNullOrEmpty())
                    {

                        lstApplicantComplianceAttributes.ForEach(x =>
                        {
                            ApplicantComplianceAttributeDataContract applicantComplianceAttributeDataContract = new ApplicantComplianceAttributeDataContract();
                            Boolean IsFileUpload = false;
                            if (x.ComplianceAttribute.lkpComplianceAttributeDatatype.Code == ComplianceAttributeDatatypes.FileUpload.GetStringValue())
                            {
                                IsFileUpload = true;
                            }
                            else
                            {
                                IsFileUpload = false;
                            };
                            applicantComplianceAttributeDataContract.ApplicantComplianceAttributeId = x.ApplicantComplianceAttributeID;
                            applicantComplianceAttributeDataContract.ApplicantComplianceItemId = x.ApplicantComplianceItemID;
                            applicantComplianceAttributeDataContract.AttributeValue = x.AttributeValue;
                            applicantComplianceAttributeDataContract.AttributeTypeCode = x.ComplianceAttribute.lkpComplianceAttributeType.Code;
                            applicantComplianceAttributeDataContract.IsFileUploadTypeAttribute = IsFileUpload;
                            lstApplicantComplianceAttributeDataContract.Add(applicantComplianceAttributeDataContract);
                        });
                    }
                    evaluatePostSubmitRules(itemData.ComplianceItemID, tenantId, packageSubscriptionId, CompliancePackageID, ComplianceCategoryId,
                        currentUserId, OrgUsrID, lstApplicantComplianceAttributeDataContract, PackageStatusID, PackageStatusCode);

                    //Call Parallel task handle assignment method
                    String statusCode = complianceSaveResponse.StatusCode;
                    Int32? statusId = complianceSaveResponse.StatusId;
                    if (!statusCode.IsNullOrEmpty() && statusId != null && statusCode != ApplicantItemComplianceStatus.Approved.GetStringValue())
                    {
                        var LoggerService = (HttpContext.Current.ApplicationInstance as IWebApplication).LoggerService;
                        var ExceptiomService = (HttpContext.Current.ApplicationInstance as IWebApplication).ExceptionService;

                        Dictionary<String, Object> dicHandleAssignmentData = SetHandleAssignmentData(false, statusCode, statusId, itemData.ApplicantComplianceItemID, itemData.ComplianceItemID,
                                                                               complianceSaveResponse.ItemData, true, tenantId, OrgUsrID, ComplianceCategoryId, CompliancePackageID, compliancePackageName);
                        QueueManagementManager.RunParallelTaskHandleAssignment(dicHandleAssignmentData, LoggerService, ExceptiomService, tenantId);
                    }

                }
            }
            return true;

        }


        private static void evaluatePostSubmitRules(Int32 complianceItemId, Int32 tenantId, Int32 PackageSubscriptionId, Int32 ClientCompliancePackageID, Int32 categoryId
                                                , Int32 CurrentLoggedInUserId, Int32 OrgUsrID, List<ApplicantComplianceAttributeDataContract> lstAttributesData, Int32 ComplianceStatusID
                                                , String ComplianceStatus)
        {
            // Use category id as provided by the Deletion of Exception or Item methods
            // var categoryId = complianceCategoryId != AppConsts.NONE ? complianceCategoryId : View.ComplianceCategoryId;

            List<RuleObjectMapping> ruleObjectMappingList = new List<RuleObjectMapping>();
            RuleObjectMapping ruleObjectMappingForPackage = new RuleObjectMapping
            {
                RuleObjectTypeId = Convert.ToString(RuleManager.GetObjectType(ObjectType.Compliance_Package.GetStringValue(), tenantId).OT_ID),
                RuleObjectId = Convert.ToString(ClientCompliancePackageID),
                RuleObjectParentId = Convert.ToString(AppConsts.NONE)
            };

            RuleObjectMapping ruleObjectMappingForCategory = new RuleObjectMapping
            {
                RuleObjectTypeId = Convert.ToString(RuleManager.GetObjectType(ObjectType.Compliance_Category.GetStringValue(), tenantId).OT_ID),
                //RuleObjectId = Convert.ToString(View.ComplianceCategoryId),
                RuleObjectId = Convert.ToString(categoryId),
                RuleObjectParentId = Convert.ToString(ClientCompliancePackageID)
            };

            RuleObjectMapping ruleObjectMappingForItem = new RuleObjectMapping
            {
                RuleObjectTypeId = Convert.ToString(RuleManager.GetObjectType(ObjectType.Compliance_Item.GetStringValue(), tenantId).OT_ID),
                RuleObjectId = Convert.ToString(complianceItemId),
                //RuleObjectParentId = Convert.ToString(View.ComplianceCategoryId)
                RuleObjectParentId = Convert.ToString(categoryId)
            };


            ruleObjectMappingList.Add(ruleObjectMappingForPackage);
            ruleObjectMappingList.Add(ruleObjectMappingForCategory);
            ruleObjectMappingList.Add(ruleObjectMappingForItem);
            if (!lstAttributesData.IsNullOrEmpty() && lstAttributesData.Count > 0)
            {
                foreach (ApplicantComplianceAttributeDataContract attributeData in lstAttributesData)
                {
                    RuleObjectMapping ruleObjectMappingForAttribute = new RuleObjectMapping
                    {
                        RuleObjectTypeId = Convert.ToString(RuleManager.GetObjectType(ObjectType.Compliance_ATR.GetStringValue(), tenantId).OT_ID),
                        RuleObjectId = Convert.ToString(attributeData.ComplianceItemAttributeId),
                        RuleObjectParentId = Convert.ToString(complianceItemId)
                    };
                    ruleObjectMappingList.Add(ruleObjectMappingForAttribute);
                }

            }
            //RuleManager.evaluatePostSubmitRules(ruleObjectMappingList, View.CurrentLoggedInUserId, View.CurrentLoggedInUserId, View.TenantID);
            RuleManager.evaluatePostSubmitRules(ruleObjectMappingList, CurrentLoggedInUserId, OrgUsrID, tenantId);

            if (ComplianceStatusID != 0)
            {
                String tenantName = String.Empty;
                Entity.Tenant tenant = SecurityManager.GetTenant(tenantId);
                if (!tenant.IsNullOrEmpty())
                    tenantName = tenant.TenantName;
                //Send Mail
                //ComplianceDataManager.SendMailOnComplianceStatusChange(View.TenantID, tenantName, View.ComplianceStatus, View.ComplianceStatusID, View.PackageSubscriptionId, View.HierarchyID.HasValue ? View.HierarchyID.Value : 0);
                //UAT - 1067 : Hierarchy for orders (background and screening) should display as the full hierarchy sleected during the order, not the node the package lives on. 
                ComplianceDataManager.SendMailOnComplianceStatusChange(tenantId, tenantName, ComplianceStatus, ComplianceStatusID, PackageSubscriptionId, AppConsts.NONE);
            }
        }


        /// <summary>
        /// Set handle assignment data in dictionary.
        /// </summary>
        /// <param name="isResetBusinessProcess">true=if item expired otherwise false.</param>
        /// <param name="statusCode">statusCode</param>
        /// <param name="statusId">StatusId</param>
        /// <param name="applicantComplianceItemnId">ApplicantComplianceItemId</param>
        /// <returns>dictionary</returns>
        private static Dictionary<String, Object> SetHandleAssignmentData(Boolean isResetBusinessProcess, String statusCode, Int32? statusId, Int32 applicantComplianceItemnId,
            Int32 complianceItemId, ApplicantComplianceItemData applicantItemData, Boolean notReviewed, Int32 tenantId, Int32 OrgUsrID, Int32 ComplianceCategoryId,
            Int32 CompliancePackageID, String CompliancePackageName)
        {
            Int32 queueId = 0;
            String queueCode;
            Dictionary<String, Object> dicHandleAssignmentData = new Dictionary<String, Object>();
            Dictionary<String, Object> dicQueueFields = new Dictionary<String, Object>();
            String queueFieldsXML = String.Empty;
            String rushOrderStatusCode = String.Empty;
            String rushOrderStatusText = String.Empty;
            String itemComplianceStatusText = String.Empty;
            String complianceCategoryName = String.Empty;
            String complianceItemName = String.Empty;
            if (applicantItemData.IsNotNull())
            {
                complianceItemName = !String.IsNullOrEmpty(applicantItemData.ComplianceItem.ItemLabel) ? applicantItemData.ComplianceItem.ItemLabel : applicantItemData.ComplianceItem.Name;
                if (applicantItemData.ApplicantComplianceCategoryData.ComplianceCategory.IsNotNull())
                {
                    complianceCategoryName = !String.IsNullOrEmpty(applicantItemData.ApplicantComplianceCategoryData.ComplianceCategory.CategoryLabel) ? applicantItemData.ApplicantComplianceCategoryData.ComplianceCategory.CategoryLabel : applicantItemData.ApplicantComplianceCategoryData.ComplianceCategory.CategoryName;
                }
            }
            //if (View.RushOrderStatusId.IsNotNull())
            //{
            //    lkpOrderStatu ordrStatus = LookupManager.GetLookUpData<Entity.ClientEntity.lkpOrderStatu>(tenantId).Where(x => x.IsDeleted == false && x.OrderStatusID == View.RushOrderStatusId).FirstOrDefault();
            //    rushOrderStatusCode = ordrStatus.Code;
            //    rushOrderStatusText = ordrStatus.Name;
            //}
            if (!statusCode.IsNullOrEmpty())
            {
                lkpItemComplianceStatu complianceStatus = LookupManager.GetLookUpData<Entity.ClientEntity.lkpItemComplianceStatu>(tenantId).Where(x => x.IsDeleted == false && x.Code == statusCode).FirstOrDefault();
                statusId = complianceStatus.ItemComplianceStatusID;
                itemComplianceStatusText = complianceStatus.Name;
            }
            //Get the queueid on the basis status code
            if (statusCode == ApplicantItemComplianceStatus.Pending_Review.GetStringValue())
            {
                queueCode = QueueMetaDataType.Verification_Queue_For_Admin.GetStringValue();
                queueId = LookupManager.GetLookUpData<Entity.ClientEntity.QueueMetaData>(tenantId).Where(x => x.QMD_IsDeleted == false && x.QMD_Code == queueCode).FirstOrDefault().QMD_QueueID;
            }
            else if (statusCode == ApplicantItemComplianceStatus.Pending_Review_For_Client.GetStringValue())
            {
                queueCode = QueueMetaDataType.Verification_Queue_For_ClientAdmin.GetStringValue();
                queueId = LookupManager.GetLookUpData<Entity.ClientEntity.QueueMetaData>(tenantId).Where(x => x.QMD_IsDeleted == false && x.QMD_Code == queueCode).FirstOrDefault().QMD_QueueID;
            }
            else if ((statusCode == ApplicantItemComplianceStatus.Applied_For_Exception.GetStringValue()) && applicantItemData.IsReviewerTypeAdmin == true)
            {
                queueCode = QueueMetaDataType.Exception_Queue_For_Admin.GetStringValue();
                queueId = LookupManager.GetLookUpData<Entity.ClientEntity.QueueMetaData>(tenantId).Where(x => x.QMD_IsDeleted == false && x.QMD_Code == queueCode).FirstOrDefault().QMD_QueueID;
            }
            else if ((statusCode == ApplicantItemComplianceStatus.Applied_For_Exception.GetStringValue()) && (applicantItemData.IsReviewerTypeAdmin == false && applicantItemData.IsReviewerTypeClientAdmin == true))
            {
                queueCode = QueueMetaDataType.Exception_Queue_For_ClientAdmin.GetStringValue();
                queueId = LookupManager.GetLookUpData<Entity.ClientEntity.QueueMetaData>(tenantId).Where(x => x.QMD_IsDeleted == false && x.QMD_Code == queueCode).FirstOrDefault().QMD_QueueID;
            }

            if (queueId > 0)
            {
                //Create dictionary for QueueFields.
                dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.ApplicantName, String.Empty);
                dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.ComplianceItemId, complianceItemId);
                dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.CategoryId, ComplianceCategoryId);
                dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.PackageID, CompliancePackageID);
                dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.SubmissionDate, applicantItemData.SubmissionDate);
                dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.System_Status, String.Empty);
                dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.Rush_Order_Status, rushOrderStatusCode);
                dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.ApplicantComplianceItemID, applicantComplianceItemnId);
                dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.HierarchyNodeID, AppConsts.NONE);
                dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.ApplicantId, OrgUsrID);
                dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.Item_Name, complianceItemName);
                dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.Category_Name, complianceCategoryName);
                dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.Package_Name, CompliancePackageName);
                dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.Verification_Status_Text, itemComplianceStatusText);
                dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.Rush_Order_Status_Text, rushOrderStatusText);
                dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.Verification_Status, statusId);
                dicQueueFields.Add(QueuefieldsMetaDataTypeConstants.Assigned_To_User, applicantItemData.AssignedToUser.IsNull() ? 0 : applicantItemData.AssignedToUser);
                dicQueueFields.Add("ResetReviewProcess", false);
                dicQueueFields.Add("BypassInitialReview", false);
                //dicQueueFields.Add("NotReviewed", notReviewed);

                //Get XML for queueFields.
                queueFieldsXML = "<Queues>" + QueueManagementManager.GetQueueFieldXMLString(dicQueueFields, queueId, applicantComplianceItemnId, notReviewed) + "</Queues>";

                //Create dictionary for handle assignment data.
                dicHandleAssignmentData.Add("CurrentLoggedInUserId", tenantId); //View.CurrentLoggedInUserId UAT 1261
                dicHandleAssignmentData.Add("TenantId", tenantId);
                dicHandleAssignmentData.Add("QueueRecordXML", queueFieldsXML);
                return dicHandleAssignmentData;
            }
            return null;
        }


        #endregion

        public static Int32 GetPackageTypeIDByCode(Int32 tenantId, string code)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetPackageTypeIDByCode(code);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }

        public static Int32 GetBagdeFormFieldTypeIDByCode(Int32 tenantId, string code)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetBagdeFormFieldTypeIDByCode(code);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }

        public static void SaveBadgeFormNotificationData(Int32 tenantId, String applicantComplianceItemDataIDs, String applicantRequirementItemDataIDs, String PSI_IDs, Int32 currentOrgUserID)
        {
            StringBuilder loggingInfo = new StringBuilder();
            loggingInfo.Append("Method SaveBadgeFormNotificationData started with TenantID:" + tenantId + ", applicantComplianceItemDataIDs:" + applicantComplianceItemDataIDs + ", applicantRequirementItemDataIDs:" + applicantRequirementItemDataIDs + ", PSI_IDs:" + PSI_IDs + ", currentOrgUserID:" + currentOrgUserID);
            loggingInfo.Append("\n");
            try
            {
                List<Int32> lstApprovedItemDataIds = null;
                List<Int32> lstApprovedReqItemDataIds = null;
                string complianceItemObjectCode = ObjectType.Compliance_Item.GetStringValue();
                string requirementItemObjectCode = ObjectType.Requirement_Item.GetStringValue();
                string compliancePackageTypeCode = PackageType.Compliance_Package.GetStringValue();
                string requirementPackageTypeCode = PackageType.Requirement_Package.GetStringValue();
                string itemApprovalDateBagdeFormFieldTypeCode = BagdeFormFieldType.ItemApprovalDate.GetStringValue();

                Int32 itemApprovalDateBagdeFormFieldTypeID = GetBagdeFormFieldTypeIDByCode(tenantId, itemApprovalDateBagdeFormFieldTypeCode);
                Int32 compliancePackageTypeID = GetPackageTypeIDByCode(tenantId, compliancePackageTypeCode);
                Int32 requirementPackageTypeID = GetPackageTypeIDByCode(tenantId, requirementPackageTypeCode);

                if (!applicantComplianceItemDataIDs.IsNullOrEmpty())
                {
                    loggingInfo.Append("FilterComplianceDataItemsByStatusCode Started");
                    loggingInfo.Append("\n");
                    lstApprovedItemDataIds = BALUtils.GetComplianceDataRepoInstance(tenantId).FilterComplianceDataItemsByStatusCode(applicantComplianceItemDataIDs, ApplicantItemComplianceStatus.Approved.GetStringValue());
                    loggingInfo.Append("FilterComplianceDataItemsByStatusCode Started");
                    loggingInfo.Append("\n");

                    if (!lstApprovedItemDataIds.IsNullOrEmpty())
                        applicantComplianceItemDataIDs = string.Join(",", lstApprovedItemDataIds);
                    else
                        applicantComplianceItemDataIDs = string.Empty;

                    loggingInfo.Append("Fetched lstApprovedItemDataIds updated applicantComplianceItemDataIDs:" + applicantComplianceItemDataIDs);
                    loggingInfo.Append("\n");
                }

                if (!applicantRequirementItemDataIDs.IsNullOrEmpty())
                {
                    loggingInfo.Append("FilterRequirementDataItemsByStatusCode Started");
                    loggingInfo.Append("\n");
                    lstApprovedReqItemDataIds = BALUtils.GetApplicantRequirementRepoInstance(tenantId).FilterRequirementDataItemsByStatusCode(applicantRequirementItemDataIDs, RequirementItemStatus.APPROVED.GetStringValue());
                    loggingInfo.Append("FilterRequirementDataItemsByStatusCode Ended");
                    loggingInfo.Append("\n");

                    if (!lstApprovedReqItemDataIds.IsNullOrEmpty())
                        applicantRequirementItemDataIDs = string.Join(",", lstApprovedReqItemDataIds);
                    else
                        applicantRequirementItemDataIDs = string.Empty;

                    loggingInfo.Append("Fetched lstApprovedReqItemDataIds updated applicantRequirementItemDataIDs:" + applicantRequirementItemDataIDs);
                    loggingInfo.Append("\n");
                }

                List<BadgeFormNotificationDataContract> lstBadgeFormNotificationData = new List<BadgeFormNotificationDataContract>();

                if (!applicantComplianceItemDataIDs.IsNullOrEmpty()
                    || !applicantRequirementItemDataIDs.IsNullOrEmpty()
                    || !PSI_IDs.IsNullOrEmpty())
                {
                    loggingInfo.Append("SaveBadgeFormNotificationData Started");
                    loggingInfo.Append("\n");
                    lstBadgeFormNotificationData = BALUtils.GetComplianceDataRepoInstance(tenantId).SaveBadgeFormNotificationData(applicantComplianceItemDataIDs, applicantRequirementItemDataIDs, PSI_IDs, currentOrgUserID);
                    loggingInfo.Append("SaveBadgeFormNotificationData End with Count of BadgeFormNotificationData = " + (lstBadgeFormNotificationData.IsNullOrEmpty() ? AppConsts.NONE : lstBadgeFormNotificationData.Count));
                    loggingInfo.Append("\n");
                }

                if (!lstBadgeFormNotificationData.IsNullOrEmpty())
                {
                    loggingInfo.Append("SaveBadgeRequestFormData Started");
                    loggingInfo.Append("\n");
                    BALUtils.GetApplicantRequirementRepoInstance(tenantId).SaveBadgeRequestFormData(lstBadgeFormNotificationData, compliancePackageTypeID, requirementPackageTypeID, ObjectType.Compliance_Item.GetStringValue(), ObjectType.Requirement_Item.GetStringValue(), itemApprovalDateBagdeFormFieldTypeID, currentOrgUserID);
                    loggingInfo.Append("SaveBadgeRequestFormData End");
                    loggingInfo.Append("\n");
                }
                loggingInfo.Append("SaveBadgeFormNotificationData Ended Successfully");
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace + " Extra Details: " + loggingInfo.ToString(), ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace + " Extra Details: " + loggingInfo.ToString(), ex);
                throw ex;
            }
        }

        #region UAT-3083
        public static ItemPaymentContract GetItempaymentDetailsByOrderId(Int32 OrderID, Int32 tenantId)
        {
            try
            {
                Dictionary<String, String> subscriptinDetails = BALUtils.GetComplianceDataRepoInstance(tenantId).GetSubscriptionIDByOrderIdForItmPaymt(OrderID);
                if (!subscriptinDetails.IsNullOrEmpty())
                {
                    Int32 subscriptionID = Convert.ToInt32(subscriptinDetails["SubscriptionID"]);
                    Boolean isRequirementPackage = Convert.ToBoolean(subscriptinDetails["IsRequirementPackage"]);
                    Int32 ItemDataID = Convert.ToInt32(subscriptinDetails["ItemDataID"]);
                    return BALUtils.GetComplianceDataRepoInstance(tenantId).GetItemPaymentDetailBySubscriptionId(subscriptionID, isRequirementPackage).Where(cond => cond.ItemDataId == ItemDataID).FirstOrDefault();
                }
                return new ItemPaymentContract();
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }
        #endregion

        #region UAT-3112:- Badging Form Documents

        public static Boolean SendBadgeFormNotifications(Int32 tenantId, Int32 chunkSize, Int32 currentLoggedInUser)
        {
            try
            {
                Boolean needToCallForSameTenant = false;
                List<BadgeFormNotificationDataContract> lstBadgeFormNotificationDataContract = new List<BadgeFormNotificationDataContract>();
                lstBadgeFormNotificationDataContract = BALUtils.GetComplianceDataRepoInstance(tenantId).GetBadgeFormNotificationData(chunkSize, currentLoggedInUser);

                if (!lstBadgeFormNotificationDataContract.IsNullOrEmpty())
                {
                    //method to save and get documents.
                    CreateBadgingFormDocument(tenantId, lstBadgeFormNotificationDataContract, currentLoggedInUser);

                    //method to send mail to applicants whose documnet mapping exists.
                    lstBadgeFormNotificationDataContract = lstBadgeFormNotificationDataContract.Where(con => !con.BadgeFormDocumentIDs.IsNullOrEmpty()).ToList();
                    if (!lstBadgeFormNotificationDataContract.IsNullOrEmpty())
                    {
                        foreach (BadgeFormNotificationDataContract badgeFormNotificationDataContract in lstBadgeFormNotificationDataContract)
                        {
                            //get applicant Documents on the basis of id
                            List<Int32> lstApplicantDocumentsID = badgeFormNotificationDataContract.BadgeFormDocumentIDs.Split(',').Select(int.Parse).ToList();
                            List<ApplicantDocument> lstApplicantDocument = GetApplicantDocuments(tenantId, lstApplicantDocumentsID);
                            //send mail 
                            if (!lstApplicantDocument.IsNullOrEmpty())
                            {
                                Int32 systemCommunicationID = CommunicationManager.SendBadgeFormNotificationsWithAttachment(tenantId, badgeFormNotificationDataContract, lstApplicantDocument, currentLoggedInUser);
                                if (!systemCommunicationID.IsNullOrEmpty())
                                    badgeFormNotificationDataContract.SystemCommunicationID = systemCommunicationID;
                            }
                        }
                        //update SystemCommunicationID in BadgeFormNotificationData 
                        BALUtils.GetComplianceDataRepoInstance(tenantId).UpdateBadgeFormNotificationData(lstBadgeFormNotificationDataContract, currentLoggedInUser);
                        needToCallForSameTenant = true;
                    }
                    List<BadgeFormNotificationDataContract> lstBadgeFormContractWithoutDocuments = lstBadgeFormNotificationDataContract.Where(con => con.BadgeFormDocumentIDs.IsNullOrEmpty()).ToList();
                    if (!lstBadgeFormContractWithoutDocuments.IsNullOrEmpty())
                    {
                        BALUtils.GetComplianceDataRepoInstance(tenantId).UpdateBadgeFormNotificationDataComments(lstBadgeFormNotificationDataContract, currentLoggedInUser);
                    }
                }
                return needToCallForSameTenant;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                return false;
                //throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                return false;
                //throw ex;
            }
        }

        public static List<BadgeFormNotificationDataContract> CreateBadgingFormDocument(Int32 tenantId, List<BadgeFormNotificationDataContract> lstBadingFromNotificationData, Int32 currentLoggedInUserId)
        {
            try
            {
                List<Int32> lstBadgeFormNotificationId = new List<Int32>();

                //Get the Badge Form Notification Id's.
                lstBadgeFormNotificationId = lstBadingFromNotificationData.IsNullOrEmpty() ?
                                                               new List<Int32>() : lstBadingFromNotificationData.Where(cond => cond.BadgeFormDocumentIDs.IsNullOrEmpty()).Select(sel => sel.BadgeFormNotificationID).ToList();

                //Get the Document Data regarding the badge form notification id's.
                List<BadgeFormDocumentDataContract> lstBadgeFormDocData = BALUtils.GetComplianceDataRepoInstance(tenantId).GetBadgeFormDocumentData(String.Join(",", lstBadgeFormNotificationId));

                //Get the system Documents of type:- Badge Form
                var lstSystemDocs = SecurityManager.GetBadgeFormDocuments();

                #region Create Applicants Documents

                //Create documents regarding each badge form document.
                foreach (BadgeFormNotificationDataContract badgeFormData in lstBadingFromNotificationData)
                {
                    badgeFormData.badgeFormDocumentData = lstBadgeFormDocData.IsNullOrEmpty() ?
                                                            new BadgeFormDocumentDataContract() : lstBadgeFormDocData.Where(cond => cond.BFND_ID == badgeFormData.BadgeFormNotificationID).FirstOrDefault();

                    List<ApplicantDocument> lstApplicantDocs = new List<ApplicantDocument>();
                    badgeFormData.lstApplicantDocuments = new List<ApplicantDocument>();

                    if (badgeFormData.BadgeFormDocumentIDs.IsNullOrEmpty() && !badgeFormData.badgeFormDocumentData.IsNullOrEmpty())
                    {
                        List<Int32> lstSystemDocIds = new List<Int32>();
                        List<SystemDocument> lstSystemDoc = new List<SystemDocument>();

                        //Get list of system documents mapped with Item.
                        if (badgeFormData.ItemTypeCode == "ITM")
                            lstSystemDocIds = BALUtils.GetComplianceDataRepoInstance(tenantId).GetSystemDocumentsMapped(badgeFormData.ItemID);
                        else
                            lstSystemDocIds = BALUtils.GetSharedRequirementPackageRepoInstance().GetSystemDocumentsMapped(badgeFormData.SharedReqItemId);

                        //Document Creation and Fill Data.
                        if (!lstSystemDocIds.IsNullOrEmpty())
                        {
                            //Create the multiple documents, if multiple system documents are mapped with item.
                            foreach (Int32 systemDocId in lstSystemDocIds)
                            {
                                ApplicantDocument applicantDoc = new ApplicantDocument();

                                //Get Fields mapped with system document 
                                List<Entity.SharedDataEntity.BadgeFormSystemDocField> lstFieldsMapped = BALUtils.GetSharedRequirementPackageRepoInstance().GetSystemDocFieldsMapped(systemDocId);
                                var systemDocument = lstSystemDocs.Where(cond => cond.SystemDocumentID == systemDocId).FirstOrDefault();
                                if (!systemDocument.IsNullOrEmpty())
                                {
                                    byte[] emptyPdfBuffer = CommonFileManager.RetrieveDocument(systemDocument.DocumentPath, FileType.SystemDocumentLocation.GetStringValue());
                                    byte[] updatedDocument = null;

                                    if (!emptyPdfBuffer.IsNullOrEmpty() && !lstFieldsMapped.IsNullOrEmpty())
                                    {
                                        PdfReader reader = new PdfReader(emptyPdfBuffer);
                                        MemoryStream ms = new MemoryStream();
                                        PdfStamper stamper = new PdfStamper(reader, ms);

                                        //Fill-in the form values
                                        AcroFields af = stamper.AcroFields;
                                        foreach (var item in af.Fields.ToList())
                                        {
                                            var fieldDetails = lstFieldsMapped.Where(s => s.BFSDF_AcrobatField.Equals(item.Key) && !s.BFSDF_IsDeleted).FirstOrDefault();
                                            if (af.GetField(item.Key).IsNotNull() && !fieldDetails.IsNullOrEmpty())
                                            {
                                                switch (fieldDetails.lkpBadgeFormFieldType.FieldCode)
                                                {
                                                    case "AAAA":
                                                        af.SetField(fieldDetails.BFSDF_AcrobatField, badgeFormData.badgeFormDocumentData.FullName);
                                                        break;
                                                    case "AAAB":
                                                        af.SetField(fieldDetails.BFSDF_AcrobatField, badgeFormData.badgeFormDocumentData.DOB.IsNullOrEmpty()
                                                                                            ? String.Empty : badgeFormData.badgeFormDocumentData.DOB.Value.ToShortDateString());
                                                        break;
                                                    case "AAAC":
                                                        af.SetField(fieldDetails.BFSDF_AcrobatField, Convert.ToString(badgeFormData.badgeFormDocumentData.PhoneNumber));
                                                        break;
                                                    case "AAAD":
                                                        af.SetField(fieldDetails.BFSDF_AcrobatField, badgeFormData.badgeFormDocumentData.FullAddress);
                                                        break;
                                                    case "AAAE":
                                                        af.SetField(fieldDetails.BFSDF_AcrobatField, badgeFormData.badgeFormDocumentData.RotationName.IsNullOrEmpty()
                                                                                            ? String.Empty : badgeFormData.badgeFormDocumentData.RotationName);
                                                        break;
                                                    case "AAAF":
                                                        af.SetField(fieldDetails.BFSDF_AcrobatField, badgeFormData.badgeFormDocumentData.RotationStartDate.IsNullOrEmpty()
                                                                                            ? String.Empty : badgeFormData.badgeFormDocumentData.RotationStartDate.Value.ToShortDateString());
                                                        break;
                                                    case "AAAG":
                                                        af.SetField(fieldDetails.BFSDF_AcrobatField, badgeFormData.badgeFormDocumentData.RotationEndDate.IsNullOrEmpty()
                                                                                            ? String.Empty : badgeFormData.badgeFormDocumentData.RotationEndDate.Value.ToShortDateString());
                                                        break;
                                                    case "AAAH":
                                                        af.SetField(fieldDetails.BFSDF_AcrobatField, badgeFormData.badgeFormDocumentData.Program.IsNullOrEmpty()
                                                                                            ? String.Empty : Convert.ToString(badgeFormData.badgeFormDocumentData.Program));
                                                        break;
                                                    case "AAAI":
                                                        af.SetField(fieldDetails.BFSDF_AcrobatField, badgeFormData.badgeFormDocumentData.Location.IsNullOrEmpty()
                                                                                            ? String.Empty : Convert.ToString(badgeFormData.badgeFormDocumentData.Location));
                                                        break;
                                                    case "AAAJ":
                                                        af.SetField(fieldDetails.BFSDF_AcrobatField, badgeFormData.badgeFormDocumentData.ItemSubmisssionDate.IsNullOrEmpty()
                                                                                            ? String.Empty : badgeFormData.badgeFormDocumentData.ItemSubmisssionDate.Value.ToShortDateString());
                                                        break;
                                                    case "AAAK":
                                                        af.SetField(fieldDetails.BFSDF_AcrobatField, badgeFormData.badgeFormDocumentData.ItemApprovalDate.IsNullOrEmpty()
                                                                                            ? String.Empty : badgeFormData.badgeFormDocumentData.ItemApprovalDate.Value.ToShortDateString());
                                                        break;
                                                    case "AAAL":
                                                        AcroFields.FieldPosition signatureImagePosition = null;
                                                        stamper.FormFlattening = true;
                                                        float left = 0;
                                                        float right = 0;
                                                        float top = 0;
                                                        float heigth = 0;

                                                        try
                                                        {
                                                            signatureImagePosition = af.GetFieldPositions(fieldDetails.BFSDF_AcrobatField)[0];
                                                        }
                                                        catch
                                                        {

                                                        }
                                                        if (signatureImagePosition != null && badgeFormData.badgeFormDocumentData.Signature != null)
                                                        {
                                                            left = signatureImagePosition.position.Left;
                                                            right = signatureImagePosition.position.Right;
                                                            top = signatureImagePosition.position.Top;
                                                            heigth = signatureImagePosition.position.Height;

                                                            iTextSharp.text.Image signatureImage = iTextSharp.text.Image.GetInstance(badgeFormData.badgeFormDocumentData.Signature);
                                                            PdfContentByte contentByte = stamper.GetOverContent(signatureImagePosition.page);
                                                            float currentImageHeigth = 0;
                                                            currentImageHeigth = signatureImage.Height;
                                                            float ratio = 0;
                                                            ratio = heigth / currentImageHeigth;
                                                            float width = signatureImage.Width * ratio;
                                                            signatureImage.ScaleAbsoluteHeight(heigth);
                                                            signatureImage.ScaleAbsoluteWidth(width);
                                                            signatureImage.SetAbsolutePosition(left, top - signatureImage.ScaledHeight);
                                                            contentByte.AddImage(signatureImage);
                                                        }
                                                        break;

                                                    case "AAAM":
                                                        if (item.Key == fieldDetails.BFSDF_AcrobatField)
                                                        {
                                                            var documentUniversalData = lstBadgeFormDocData.Where(cond => cond.BFND_ID == badgeFormData.BadgeFormNotificationID && fieldDetails.BFSDF_RecordID == cond.UniversalFieldID).FirstOrDefault();
                                                            af.SetField(fieldDetails.BFSDF_AcrobatField, documentUniversalData.IsNullOrEmpty() ? String.Empty : Convert.ToString(documentUniversalData.UniversalFieldValue));
                                                        }
                                                        break;
                                                    case "AAAN":
                                                        af.SetField(fieldDetails.BFSDF_AcrobatField, badgeFormData.badgeFormDocumentData.ShareApprovalDate.IsNullOrEmpty()
                                                                                            ? String.Empty : badgeFormData.badgeFormDocumentData.ShareApprovalDate.Value.ToShortDateString());
                                                        break;
                                                    case "AAAO":
                                                        af.SetField(fieldDetails.BFSDF_AcrobatField, badgeFormData.badgeFormDocumentData.AgencyUserApprovedShare.IsNullOrEmpty()
                                                                                            ? String.Empty : badgeFormData.badgeFormDocumentData.AgencyUserApprovedShare);
                                                        break;
                                                    //[SS]:Changes related to UAT-4104
                                                    case "AAAP":
                                                        af.SetField(fieldDetails.BFSDF_AcrobatField, badgeFormData.badgeFormDocumentData.ItemExpirationDate.IsNullOrEmpty()
                                                                                            ? String.Empty : badgeFormData.badgeFormDocumentData.ItemExpirationDate.Value.ToShortDateString());
                                                        break;
                                                    case "AAAQ":
                                                    case "AAAR":
                                                        var documentAttributeData = lstBadgeFormDocData.Where(cond => cond.BFND_ID == badgeFormData.BadgeFormNotificationID && fieldDetails.BFSDF_RecordID == cond.AttributeID).FirstOrDefault();
                                                        af.SetField(fieldDetails.BFSDF_AcrobatField, documentAttributeData.IsNullOrEmpty() ? String.Empty : Convert.ToString(documentAttributeData.AttributeValue));
                                                        break;
                                                }
                                            }
                                        }
                                        stamper.Close();
                                        updatedDocument = ms.ToArray();
                                        ms.Close();
                                        //Recompress final document to further shrink.
                                        updatedDocument = ComplianceSetupManager.CompressPDFDocument(updatedDocument);
                                        reader.Close();
                                    }

                                    //Save New Document in Applicant Document
                                    String filePath = String.Empty;
                                    Boolean aWSUseS3 = false;
                                    Boolean isCorruptedFileUploaded = false;
                                    StringBuilder corruptedFileMessage = new StringBuilder();
                                    String tempFilePath = WebConfigurationManager.AppSettings["TemporaryFileLocation"];
                                    filePath = WebConfigurationManager.AppSettings[AppConsts.APPLICANT_FILE_LOCATION];
                                    StringBuilder docMessage = new StringBuilder();

                                    if (!WebConfigurationManager.AppSettings["AWSUseS3"].IsNullOrEmpty())
                                    {
                                        aWSUseS3 = Convert.ToBoolean(WebConfigurationManager.AppSettings["AWSUseS3"]);
                                    }
                                    //Check whether use AWS S3, true if need to use
                                    if (aWSUseS3 == false)
                                    {
                                        if (!filePath.EndsWith("\\"))
                                        {
                                            filePath += "\\";
                                        }

                                        filePath += "Tenant(" + tenantId.ToString() + @")\";

                                        if (!Directory.Exists(filePath))
                                            Directory.CreateDirectory(filePath);
                                    }
                                    else
                                    {
                                        if (!filePath.EndsWith("//"))
                                        {
                                            filePath += "//";
                                        }

                                        filePath = filePath + "Tenant(" + tenantId.ToString() + @")/";
                                    }

                                    String fileName = Guid.NewGuid().ToString() + Path.GetExtension(systemDocument.FileName);
                                    String newTempFilePath = Path.Combine(tempFilePath, fileName);

                                    String FinalFileName = Path.GetFileNameWithoutExtension(systemDocument.FileName) + "_" + badgeFormData.AppOrgUserID + "_" + DateTime.Now.Year + DateTime.Now.Month + DateTime.Now.Day + "_" + DateTime.Now.Minute + DateTime.Now.Millisecond + Path.GetExtension(systemDocument.FileName);

                                    if (!updatedDocument.IsNullOrEmpty())
                                    {
                                        File.WriteAllBytes(newTempFilePath, updatedDocument);

                                        if (aWSUseS3 == false)
                                        {
                                            //Move file to other location
                                            String destFilePath = Path.Combine(filePath, FinalFileName);
                                            File.Copy(newTempFilePath, destFilePath);
                                            applicantDoc.DocumentPath = destFilePath;
                                        }

                                        else
                                        {
                                            if (!filePath.EndsWith("//"))
                                            {
                                                filePath += "//";
                                            }
                                            //AWS code to save document to S3 location
                                            AmazonS3Documents objAmazonS3 = new AmazonS3Documents();
                                            String destFolder = filePath + "Tenant(" + tenantId.ToString() + @")/";
                                            String returnFilePath = objAmazonS3.SaveDocument(newTempFilePath, FinalFileName, destFolder);
                                            if (returnFilePath.IsNullOrEmpty())
                                            {
                                                isCorruptedFileUploaded = true;
                                                corruptedFileMessage.Append("Your file " + systemDocument.FileName + " is not uploaded. \\n");
                                                continue;
                                            }
                                            applicantDoc.DocumentPath = returnFilePath;
                                        }

                                        try
                                        {
                                            if (!String.IsNullOrEmpty(newTempFilePath))
                                                File.Delete(newTempFilePath);
                                        }
                                        catch (Exception) { }
                                    }
                                    String docTypeCode = DislkpDocumentType.BADGE_FORM.GetStringValue();
                                    var documentType = LookupManager.GetLookUpData<lkpDocumentType>(tenantId).FirstOrDefault(x => x.DMT_Code == docTypeCode && !x.DMT_IsDeleted);
                                    if (updatedDocument.IsNullOrEmpty())
                                        applicantDoc.DocumentPath = systemDocument.DocumentPath;
                                    applicantDoc.OrganizationUserID = badgeFormData.AppOrgUserID;
                                    applicantDoc.FileName = systemDocument.FileName;
                                    applicantDoc.DocumentType = documentType.IsNullOrEmpty() ? AppConsts.NONE : documentType.DMT_ID;
                                    // applicantDoc.Description = " needed";
                                    applicantDoc.OriginalDocMD5Hash = updatedDocument.IsNullOrEmpty() ? null : CommonFileManager.GetMd5Hash(updatedDocument);
                                    applicantDoc.Size = updatedDocument.IsNullOrEmpty() ? systemDocument.Size : updatedDocument.Length;
                                    applicantDoc.CreatedByID = currentLoggedInUserId;
                                    applicantDoc.CreatedOn = DateTime.Now;
                                    applicantDoc.IsDeleted = false;

                                    lstApplicantDocs.Add(applicantDoc);
                                }
                            }
                            badgeFormData.lstApplicantDocuments.AddRange(lstApplicantDocs);
                        }
                    }
                }

                #endregion

                #region To Save Applicant Documents generated

                var isDocumentSavedSuccessfully = BALUtils.GetComplianceDataRepoInstance(tenantId).SaveBadgeFormApplicantDocument(currentLoggedInUserId, lstBadingFromNotificationData);
                if (isDocumentSavedSuccessfully)
                {
                    foreach (BadgeFormNotificationDataContract badgeForm in lstBadingFromNotificationData)
                    {
                        if (!badgeForm.lstApplicantDocuments.IsNullOrEmpty())
                        {
                            List<Int32> lstApplicantDocIds = badgeForm.lstApplicantDocuments.Select(sel => sel.ApplicantDocumentID).ToList();
                            badgeForm.BadgeFormDocumentIDs = String.Join(",", lstApplicantDocIds);
                        }
                    }
                }

                #endregion

                return lstBadingFromNotificationData;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }

        #endregion

        #region UAT 3143
        public static Dictionary<String, String> GetCategoryListFilterForLoggedInAgencyUserReports(String selectedTenantIDs, String loggedInUserEmailId)
        {
            try
            {
                return BALUtils.GetSecurityRepoInstance().GetCategoryListFilterForLoggedInAgencyUserReports(selectedTenantIDs, loggedInUserEmailId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }
        #endregion

        #region [UAT-4509]
        public static Dictionary<String, String> GetAllCategoryListFilterForLoggedInAgencyUserReports(String selectedTenantIDs, String loggedInUserEmailId)
        {
            try
            {
                return BALUtils.GetSecurityRepoInstance().GetAllCategoryListFilterForLoggedInAgencyUserReports(selectedTenantIDs, loggedInUserEmailId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }
        #endregion

        public static Dictionary<String, String> GetRotationListFilterForLoggedInAgencyUserReports(String SelectedTenantIDs, String loggedInUserEmailId)
        {
            try
            {
                return BALUtils.GetSharedRequirementPackageRepoInstance().GetRotationListFilterForLoggedInAgencyUserReports(SelectedTenantIDs, loggedInUserEmailId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }

        public static void ResetClientEntity(Int32 tenantId)
        {
            try
            {
                //ResetClientContext();
                BALUtils.GetComplianceDataRepoInstance(tenantId).ResetClientEntity();
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }

        public static void ExecuteOptionalCategoryRule(Int32 tenantId, Int32 currentUserId, Int32 nodeID)
        {
            BALUtils.GetComplianceDataRepoInstance(tenantId).ExecuteOptionalCategoryRule(currentUserId, nodeID);
        }

        public static List<Entity.SharedDataEntity.lkpWeekDay> GetWeekDaysList()
        {
            try
            {
                return LookupManager.GetSharedDBLookUpData<Entity.SharedDataEntity.lkpWeekDay>().Where(cond => !cond.WD_IsDeleted).ToList();
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(ex);
                throw (new SysXException(ex.Message, ex));
            }

        }

        public static List<Int32> PackageDataCopy(Int32 tenantId, Int32 packageSubscriptionID, Int32 currentLoggedInUserId, String docXml)
        {
            return BALUtils.GetComplianceDataRepoInstance(tenantId).PackageDataCopy(packageSubscriptionID, currentLoggedInUserId, docXml, tenantId);
        }

        public static List<BkgCopyPackageDataContract> GetBkgCopyPackageData(Int32 tenantId, Int32 chunkSize)
        {
            return BALUtils.GetComplianceDataRepoInstance(tenantId).GetBkgCopyPackageData(chunkSize, AppConsts.NONE);
        }


        public static void UpdateSubscriptionIDInBkgCopyPackageData(Int32 tenantId, Int32 packageSubscriptionID, Boolean IsRecordProcessed, Boolean IsNeedToUpdateRetryCount, String errorMessage, Int32 currentUserID)
        {
            BALUtils.GetComplianceDataRepoInstance(tenantId).UpdateSubscriptionIDInBkgCopyPackageData(packageSubscriptionID, IsRecordProcessed, IsNeedToUpdateRetryCount, errorMessage, currentUserID);
        }

        public static Boolean InsertRecordInBkgCopyPackageData(Int32 tenantId, Int32 packageSubscriptionID, String docXml, Int32 currentLoggedInUserId)
        {
            return BALUtils.GetComplianceDataRepoInstance(tenantId).InsertRecordInBkgCopyPackageData(packageSubscriptionID, docXml, currentLoggedInUserId);
        }


        #region UAT-3338
        public static RequirementPackageSubscription GetRequirementPackageSubscriptionForInstructorPreceptor(Int32 SelectedTenantID, Int32 RotationID, Int32 InstructorPreceptorOrgID)
        {
            return BALUtils.GetComplianceDataRepoInstance(SelectedTenantID).GetRequirementPackageSubscriptionForInstructorPreceptor(RotationID, InstructorPreceptorOrgID);
        }
        #endregion

        #region UAT-3354
        public static DataTable GetDataEntryQueueDataForSingleTenant(CustomPagingArgsContract gridCustomPaging, Int32? CurrentLoggedInUserID, Int32 tenantId, String institutionHierarchyIds)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetDataEntryQueueData(gridCustomPaging, CurrentLoggedInUserID, institutionHierarchyIds);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        #endregion

        #region UAT-3389
        public static Tuple<Boolean, Dictionary<String, object>> AttachOrderApprovalDocuments(Int32 tenantID, Int32 orderID, Int32 orgUserID, Int32 systemCommID)
        {
            Dictionary<String, object> dicMessageParam = new Dictionary<string, object>();
            String documentName = String.Empty;
            FileStream _FileStream = null;
            try
            {
                String requirementExplanationDocumentPath = String.Empty;
                Int32 packageSubscriptionID = AppConsts.NONE;

                #region Get Package Subscription based upon order ID
                var packageSubscription = BALUtils.GetComplianceDataRepoInstance(tenantID).GetPackageSubscriptionByOrderId(orderID);
                if (!packageSubscription.IsNullOrEmpty())
                {
                    packageSubscriptionID = packageSubscription.PackageSubscriptionID;
                }
                #endregion

                if (packageSubscriptionID > AppConsts.NONE && tenantID > AppConsts.NONE && orgUserID > AppConsts.NONE)
                {
                    #region Get Requirement Explanation Document
                    String reportName = "TrackingPackageRequirementsReport";
                    String format = "pdf";
                    ParameterValue[] parameters = new ParameterValue[3];

                    parameters[0] = new ParameterValue();
                    parameters[0].Name = "TenantID";
                    parameters[0].Value = tenantID.ToString();

                    parameters[1] = new ParameterValue();
                    parameters[1].Name = "OrganizationUserID";
                    parameters[1].Value = orgUserID.ToString();

                    parameters[2] = new ParameterValue();
                    parameters[2].Name = "PackageSubscriptionID";
                    parameters[2].Value = packageSubscriptionID.ToString();

                    byte[] reportContent = ReportManager.GetReportByteArrayFormat(reportName, parameters, format);

                    String fileName = "RequirementExplanation_" + packageSubscription.Order.OrderNumber + ".pdf";

                    String tempFilePath = ConfigurationManager.AppSettings["TemporaryFileLocation"];
                    if (tempFilePath.IsNullOrEmpty())
                    {
                        //base.LogError("Please provide path for TemporaryFileLocation in config.", new SystemException());
                        throw new SystemException("Please provide path for TemporaryFileLocation in config.");
                    }
                    if (!tempFilePath.EndsWith(@"\"))
                    {
                        tempFilePath += @"\";
                    }
                    tempFilePath += "Tenant(" + tenantID.ToString() + @")\";

                    if (!Directory.Exists(tempFilePath))
                        Directory.CreateDirectory(tempFilePath);
                    requirementExplanationDocumentPath = Path.Combine(tempFilePath, fileName);
                    _FileStream = new FileStream(requirementExplanationDocumentPath, System.IO.FileMode.Create, System.IO.FileAccess.Write);
                    _FileStream.Write(reportContent, 0, reportContent.Length);
                    _FileStream.Close();
                    #endregion

                    #region Attach req. doc to mail
                    List<Entity.lkpDocumentAttachmentType> docAttachmentType = CommunicationManager.GetDocumentAttachmentType();
                    String docAttachmentTypeCode = DocumentAttachmentType.REQUIREMENT_EXPLANATION.GetStringValue();
                    Int16 docAttachmentTypeID = docAttachmentType.IsNotNull() && docAttachmentType.Count > 0 ?
                        Convert.ToInt16(docAttachmentType.FirstOrDefault(cond => cond.DAT_Code == docAttachmentTypeCode).DAT_ID) : Convert.ToInt16(0);

                    //Save Mail Attachment
                    Int32? sysCommAttachmentID = null;
                    if (systemCommID > AppConsts.NONE)
                    {
                        Entity.SystemCommunicationAttachment sysCommAttachment = new Entity.SystemCommunicationAttachment();
                        sysCommAttachment.SCA_OriginalDocumentID = AppConsts.NONE;
                        sysCommAttachment.SCA_OriginalDocumentName = fileName;
                        sysCommAttachment.SCA_DocumentPath = requirementExplanationDocumentPath;
                        sysCommAttachment.SCA_DocumentSize = 0;
                        sysCommAttachment.SCA_SystemCommunicationID = systemCommID;
                        sysCommAttachment.SCA_DocAttachmentTypeID = docAttachmentTypeID;
                        sysCommAttachment.SCA_TenantID = tenantID;
                        sysCommAttachment.SCA_IsDeleted = false;
                        sysCommAttachment.SCA_CreatedBy = orgUserID;
                        sysCommAttachment.SCA_CreatedOn = DateTime.Now;
                        sysCommAttachment.SCA_ModifiedBy = null;
                        sysCommAttachment.SCA_ModifiedOn = null;

                        sysCommAttachmentID = CommunicationManager.SaveSystemCommunicationAttachment(sysCommAttachment);
                        Dictionary<string, string> attachedFiles = new Dictionary<string, string>();
                        List<Entity.ADBMessageDocument> messageDocument = new List<Entity.ADBMessageDocument>();

                        Entity.ADBMessageDocument documentData = new Entity.ADBMessageDocument();
                        documentData.DocumentName = requirementExplanationDocumentPath;
                        documentData.OriginalDocumentName = fileName;
                        documentData.DocumentSize = 0;
                        documentData.SystemCommunicationAttachmentID = sysCommAttachmentID;
                        messageDocument.Add(documentData);

                        attachedFiles = MessageManager.SaveDocumentAndGetDocumentId(messageDocument);
                        if (!attachedFiles.IsNullOrEmpty())
                        {
                            attachedFiles.ForEach(a => documentName += a.Key.ToString() + ";");
                        }
                    }

                    #endregion
                }
            }
            catch (Exception)
            {
            }
            finally
            {
                try { _FileStream.Close(); }
                catch (Exception) { }
            }
            dicMessageParam.Add("DocumentName", documentName);
            dicMessageParam.Add("IgnoreSpecificTemplate", true);
            return new Tuple<Boolean, Dictionary<String, object>>(true, dicMessageParam);
        }
        #endregion

        #region UAT-3348
        public static List<CommunicationSettingsSubEventsContract> GetCommunicationCopySubEventSetting(Int32 communicationCopySettingID, Int32 TenantId)
        {
            return BALUtils.GetComplianceDataRepoInstance(TenantId).GetCommunicationCopySubEventSetting(communicationCopySettingID);
        }
        #endregion

        #region UAT-3528
        public static List<ReqPkgSubscriptionIDList> GetReqPkgSubscriptionIdList(RequirementVerificationQueueContract searchDataContract, Int32 CurrentReqPkgSubscriptionID, Int32 ApplicantRequirementItemID, Int32 tenantId)
        {
            return BALUtils.GetComplianceDataRepoInstance(tenantId).GetReqPkgSubscriptionIdList(searchDataContract, CurrentReqPkgSubscriptionID, ApplicantRequirementItemID);
        }
        #endregion
        #region uat-4461
        public static List<ReqPkgSubscriptionIDList> GetApplicantDataByRPSid(Int32 CurrentReqPkgSubscriptionID, Int32 ClinicalRotationId, Int32 tenantId)
        {
            return BALUtils.GetComplianceDataRepoInstance(tenantId).GetApplicantDataByRPSid(CurrentReqPkgSubscriptionID, ClinicalRotationId);
        }
        #endregion

        #region UAT-3563
        public static void UniversalAttributeMapping(Int32 tenantId, Int32 complianceAttributeID, Int32 currentLoggedInUserId)
        {
            Int32 UniversalMappingTypeID = LookupManager.GetLookUpData<Entity.ClientEntity.lkpUniversalMappingType>(tenantId).Where(x => x.LUMT_IsDeleted == false).FirstOrDefault().LUMT_ID;
            BALUtils.GetComplianceDataRepoInstance(tenantId).UniversalAttributeMapping(complianceAttributeID, currentLoggedInUserId, UniversalMappingTypeID);
        }
        #endregion

        #region UAT-3593
        public static List<ApplicantDocumentDetails> GetInstructorRequirementDocumentData(Int32 organizationUserID, Int32 tenantID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).GetInstructorRequirementDocumentData(organizationUserID);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static Boolean IsReqDocumentAlreadyUploaded(String documentName, Int32 documentSize, Int32 organizationUserId, Int32 tenantId)
        {
            try
            {
                // List<lkpDocumentType> docType = LookupManager.GetLookUpData<Entity.ClientEntity.lkpDocumentType>(tenantId).Where(x => x.DMT_IsDeleted == false).ToList();
                return BALUtils.GetComplianceDataRepoInstance(tenantId).IsReqDocumentAlreadyUploaded(documentName, documentSize, organizationUserId);//, docType);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }

        }
        #endregion

        #region UAT-3365
        public static Order GetExistingOrderList(Int32 packageId, Int32 orgUserId, Int32 tenantId)
        {
            try
            {
                String mobilitySwitchCode = LkpSubscriptionMobilityStatus.MobilitySwitched;

                Int32 subscriptionMobilityStatusID = LookupManager.GetLookUpData<lkpSubscriptionMobilityStatu>(tenantId).Where(item => !item.IsDeleted && item.Code.Equals(mobilitySwitchCode)).FirstOrDefault().SubscriptionMobilityStatusID;
                String CancelledOrderCode = ApplicantOrderStatus.Cancelled.GetStringValue();
                Int32 CancelledOrderCodeID = LookupManager.GetLookUpData<lkpOrderStatu>(tenantId).Where(cond => cond.Code == CancelledOrderCode && !cond.IsDeleted).FirstOrDefault().OrderStatusID;

                String PaymentRejectedCode = ApplicantOrderStatus.Payment_Rejected.GetStringValue();
                Int32 PaymentRejectedCodeID = LookupManager.GetLookUpData<lkpOrderStatu>(tenantId).Where(cond => cond.Code == PaymentRejectedCode && !cond.IsDeleted).FirstOrDefault().OrderStatusID;

                String OnlinePaymentNotCompletedCode = ApplicantOrderStatus.Online_Payment_Not_Completed.GetStringValue();
                Int32 OnlinePaymentNotCompletedCodeID = LookupManager.GetLookUpData<lkpOrderStatu>(tenantId).Where(cond => cond.Code == OnlinePaymentNotCompletedCode && !cond.IsDeleted).FirstOrDefault().OrderStatusID;

                List<Int32> IgnoredOrderStatusList = new List<Int32>();
                IgnoredOrderStatusList.Add(CancelledOrderCodeID);
                IgnoredOrderStatusList.Add(PaymentRejectedCodeID);
                IgnoredOrderStatusList.Add(OnlinePaymentNotCompletedCodeID);
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetExistingOrderList(packageId, orgUserId, IgnoredOrderStatusList);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        #endregion

        public static List<Entity.ClientEntity.lkpGender> GetGenderList(Int32 tenantId)
        {
            try
            {
                return LookupManager.GetLookUpData<Entity.ClientEntity.lkpGender>(tenantId).Where(gen => !gen.IsDeleted).ToList();
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        #region Mobile Web API
        public static Dictionary<String, String> SaveOrderPaymentDetail(Int32 tenantID, PkgPaymentGrouping pkgPaymentGrouping, Order order)
        {
            try
            {
                var lstOrderPackageTypes = LookupManager.GetLookUpData<Entity.ClientEntity.lkpOrderPackageType>(tenantID);
                return BALUtils.GetComplianceDataRepoInstance(tenantID).SaveOrderPaymentDetail(tenantID, pkgPaymentGrouping, order, lstOrderPackageTypes);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static Int32 GetOrderIdByOrderNumber(String orderNumber, Int32 tenantID)
        {
            try
            {

                return BALUtils.GetComplianceDataRepoInstance(tenantID).GetOrderIDByOrderNumber(orderNumber);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        /// <summary>
        /// Gets the list Of Active Orders filtered on the bases of statuses.
        /// </summary>
        /// <param name="tenantId">Tenant ID</param> 
        /// <returns>Query for fetching active orders</returns>
        public static List<OrderDetailsContract> GetOrderHistory(Int32 tenantId, Int32 currentUserId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetOrderHistory(currentUserId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        #endregion

        #region UAT-3632
        public static Dictionary<String, String> GetItemPaymentOrderData(Int32 tenantID, Int32 orderID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).GetItemPaymentOrderData(orderID);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        #endregion

        #region UAT-3641
        public static List<SubscriptionOption> GetDeptProgramPackageSubscriptionOptions(Int32 dppID, Int32 tenantId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetDeptProgramPackageSubscriptionOptions(dppID);

            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        #endregion

        #region UAT-3871
        public static List<CompliancePackage> GetCompliancePackagesForTrackingRequired(Int32 tenantId)
        {
            try
            {
                List<CompliancePackage> compliancePackage = BALUtils.GetComplianceSetupRepoInstance(tenantId).GetCompliancePackagesForTrackingRequired(tenantId);
                return compliancePackage;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        public static List<TrackingPackageRequiredContract> GetTrackingPackageRequired(Int32 tenantId, string SelectedPackageIDs)
        {
            try
            {
                List<TrackingPackageRequiredContract> trackingPackageRequiredContract = BALUtils.GetComplianceSetupRepoInstance(tenantId).GetTrackingPackageRequired(tenantId, SelectedPackageIDs);
                return trackingPackageRequiredContract;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        public static Boolean SaveComplianceItem(Int32 tenantId, TrackingPackageRequiredContract trackingPackageRequiredContract, Int32 currentloggedInUserId)
        {
            try
            {
                Boolean IsSuccess = BALUtils.GetComplianceSetupRepoInstance(tenantId).SaveComplianceItem(trackingPackageRequiredContract, currentloggedInUserId);
                return IsSuccess;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        public static Boolean CheckDuplicateRecords(Int32 tenantId, TrackingPackageRequiredContract trackingPackageRequiredContract, Int32 currentloggedInUserId)
        {
            try
            {
                Boolean IsDupcateRecordsFound = BALUtils.GetComplianceSetupRepoInstance(tenantId).CheckDuplicateRecords(trackingPackageRequiredContract, currentloggedInUserId);
                return IsDupcateRecordsFound;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        public static Boolean DeleteComplianceItem(Int32 tenantId, TrackingPackageRequiredContract trackingPackageRequiredContract, Int32 currentloggedInUserId)
        {
            try
            {
                Boolean IsSuccess = BALUtils.GetComplianceSetupRepoInstance(tenantId).DeleteComplianceItem(trackingPackageRequiredContract, currentloggedInUserId);
                return IsSuccess;
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        #endregion

        #region Mobile APP Update Order Status
        public static Boolean UpdateOrderStatusForInvoiceWithoutApproval(Int32 tenantId, Int32 orderId, String orderStatusCode, Int32 currentLoggedInUserId,
                                               Int32 organisationUserID, Int32 orderPaymentDetailId, List<lkpEventHistory> lstEventHistory, List<lkpOrderStatusType> lstOrderStatusType)
        {
            try
            {
                //  List<lkpOrderStatusType> lstOrderStatusType = LookupManager.GetLookUpData<lkpOrderStatusType>(tenantId).ToList();
                return BALUtils.GetComplianceDataRepoInstance(tenantId).UpdateOrderStatusForInvoiceWithoutApproval(orderId, orderStatusCode, currentLoggedInUserId,
                         lstOrderStatusType, tenantId, lstEventHistory, orderPaymentDetailId);

            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static void SaveCABSServiceOrderDetails(Int32 tenantId, List<BackgroundPackagesContract> lstPackages, Order applicantOrder, Int32 orgUserID, PreviousAddressContract mailingAddress = null, Boolean isLocationServiceTenant = false, Boolean isConsent = false)
        {
            try
            {
                BALUtils.GetComplianceDataRepoInstance(tenantId).SaveCABSServiceOrderDetails(lstPackages, applicantOrder, orgUserID,
                         mailingAddress, isLocationServiceTenant, isConsent);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        #endregion
        public static void AddDataInXMLForModifyShipping(Int32 tenantId, Order order, ApplicantOrderDataContract applicantOrderDataContract, Int32 organizationUserID, Boolean IsLocationServiceTenant , PreviousAddressContract mailingAddress , FingerPrintAppointmentContract FingerPrintData)
        {
            BALUtils.GetComplianceDataRepoInstance(tenantId).AddDataInXMLForModifyShipping(order, applicantOrderDataContract, organizationUserID, IsLocationServiceTenant , mailingAddress, FingerPrintData);
        }
        public static string GetCreditCardPaymentModeApprovalCode(Int32 dpmId, Int32 tenantId)
        {
            try
            {
                DAL.Interfaces.IComplianceDataRepository _repoInstance = BALUtils.GetComplianceDataRepoInstance(tenantId);
                return _repoInstance.GetCreditCardPaymentModeApprovalCode(dpmId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        #region UAT-3954

        public static List<String> IsOrderExistForCurrentYear(String orderIds, Int32 tenantId)
        {
            try
            {
                DAL.Interfaces.IComplianceDataRepository _repoInstance = BALUtils.GetComplianceDataRepoInstance(tenantId);
                return _repoInstance.IsOrderExistForCurrentYear(orderIds);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        #endregion


        #region UAT-3795
        public static List<WeeklyNonCompliantReportDataContract> GetCCUsersForWeeklyNonComplaintReport(String communicationSubEventCode, Int32 tenantId)
        {
            try
            {
                DataTable data = BALUtils.GetComplianceDataRepoInstance(tenantId).GetCCUsersForWeeklyNonComplaintReport(communicationSubEventCode, tenantId);
                return ConvertTableToWeeklyNonCompliantReportDataContract(data);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        private static List<WeeklyNonCompliantReportDataContract> ConvertTableToWeeklyNonCompliantReportDataContract(DataTable table)
        {
            try
            {
                IEnumerable<DataRow> rows = table.AsEnumerable();
                return rows.Select(x => new WeeklyNonCompliantReportDataContract
                {
                    OrganizationID = x["OrganizationID"].GetType().Name == "DBNull" ? 0 : Convert.ToInt32(x["OrganizationID"]),
                    OrgUserID = x["OrgUserID"].GetType().Name == "DBNull" ? 0 : Convert.ToInt32(x["OrgUserID"]),
                    EmailAddress = x["EmailAddress"].GetType().Name == "DBNull" ? null : Convert.ToString(x["EmailAddress"]),
                    UserFullName = x["UserName"].GetType().Name == "DBNull" ? null : Convert.ToString(x["UserName"]),
                    HeirarchyNodeIds = x["Dpm_Ids"].GetType().Name == "DBNull" ? String.Empty : Convert.ToString(x["Dpm_Ids"])
                }).ToList();
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static DataTable GetWeeklyNonCompliantReportData(Int32 tenantId, String hierarchyId, Int32 organizationID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetWeeklyNonCompliantReportData(hierarchyId, organizationID);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }

        }


        #endregion

        #region UAT-3951
        public static Boolean SaveRejectionReasonAuditHistory(Int32 tenantId, List<Int32> lstRejectionReasonIds, Int32 itemDataId, Int32 currentLoggedInUserId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).SaveRejectionReasonAuditHistory(lstRejectionReasonIds, itemDataId, currentLoggedInUserId);

            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        #endregion

        #region UAT-4114
        /// <summary>
        /// Save Update Random review setting
        /// </summary>
        /// <param name="queueConfigurationID"></param>
        /// <param name="tenantID"></param>
        /// <param name="description"></param>
        /// <param name="percentage"></param>
        /// <param name="reviews"></param>
        /// <param name="currentLoggedInID"></param>
        /// <param name="InstutionHierarchyID"></param>
        /// <returns></returns>
        public static String SaveReconciliationQueueConfiguration(Int32 queueConfigurationID, Int32 tenantID, String description, Decimal percentage, Int32 reviews, String InstutionHierarchyID, Int32 currentLoggedInID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).SaveReconciliationQueueConfiguration(queueConfigurationID, description, percentage, reviews, InstutionHierarchyID, currentLoggedInID);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static Boolean DeleteReconciliationQueueConfiguration(Int32 tenantID, Int32 CurrentAssignmentConfigurationId, Int32 CurrentLoggedInUserId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).DeleteReconciliationQueueConfiguration(CurrentAssignmentConfigurationId, CurrentLoggedInUserId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static Boolean IsHierarchyNodeSettingAlreadyExists(Int32 TenantID, Int32 CurrentAssignmentConfigurationId, Int32 InstitutionHierarchyID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(TenantID).IsHierarchyNodeSettingAlreadyExists(CurrentAssignmentConfigurationId, InstitutionHierarchyID);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        #endregion

        #region UAT-4161
        public static Int32 GetLastRecordToBeSyncAuditData(Int32 tenantId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetLastRecordToBeSyncAuditData();
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }

        public static List<ApplicantDataAudit> GetApplicantDataAuditRecords(Int32 tenantId, Int32 chunkSize, Int32 lastSyncId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetApplicantDataAuditRecords(chunkSize, lastSyncId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        #endregion

        public static ApplicantComplianceAttributeData GetApplicantComplianceAttributeData(Int32 applicantItemDataId, Int32 complianceAttributeID, Int32 tenantId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).GetApplicantComplianceAttributeData(applicantItemDataId, complianceAttributeID);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }

        }

        public static ApplicantDocument GetApplicantDocumentByApplicantAttrDataID(Int32 tenantID, Int32 ApplAttributeDataId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).GetApplicantDocumentByApplicantAttrDataID(ApplAttributeDataId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }

        // UAT-3876
        public static bool CheckDataEntryForRequirementPackages(Int32 reqPkgSubscriptionId, Int32 clinicalRotationId, Int32 tenantId, Int32 currentUserId)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).CheckDataEntryForRequirementPackages(reqPkgSubscriptionId, clinicalRotationId, currentUserId);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }

        #region UAT-4498

        public static void CopyDataForDummyLineItem(Int32 orderId, Int32 tenantId, Int32 currentLoggedInUserId)
        {
            try
            {
                Int32 bkgOrderId = BALUtils.GetComplianceDataRepoInstance(tenantId).CheckIsDummyLineItemPkgPaid(orderId);
                if (!bkgOrderId.IsNullOrEmpty() && bkgOrderId > AppConsts.NONE)
                {
                    CopyData(-1, tenantId, currentLoggedInUserId, bkgOrderId);
                }
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }
         
        public static Dictionary<String, String> GetUserTypesForReports()
        {
            Dictionary<String, String> userTypes = new Dictionary<String, String>();
            userTypes.Add("1", "Student");
            userTypes.Add("0", "Instructor");
            return userTypes;
        }

        public static Dictionary<String, String> GetInvitationReviewStatus()
        {
            Dictionary<String, String> status = new Dictionary<String, String>();
            status.Add("AAAA", "Pending Review");
            status.Add("AAAB", "Approved");
            status.Add("AAAC", "Not Approved");
            status.Add("AAAD", "Dropped");
            return status;
        }
        #endregion


        public static DateTime? GetReconciliationLastDate(int tenantID)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).GetReconciliationLastDate();
            }
            catch (Exception)
            {

                throw;
            }
        }

        public static List<RecounciliationProductivityData> GetRecounciliationProductivityData(int tenantID, DateTime startDT)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantID).GetRecounciliationProductivityData(startDT);
            }
            catch (Exception ex)
            {

                throw;
            }
        }

        public static bool InsertUpdateReconciliationProductivityData(RecounciliationProductivityData objProductivitydataint)
        {
            try
            {
                return BALUtils.GetSecurityRepoInstance().InsertUpdateReconciliationProductivityData(objProductivitydataint);
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }

        #region UAT-5031
        public static Boolean SaveOrderPaymentInvoice(Int32 tenantId, Int32 orderID, Int32 currentLoggedInUserId, Boolean modifyShipping)
        {
            try
            {
                return BALUtils.GetComplianceDataRepoInstance(tenantId).SaveOrderPaymentInvoice(orderID, currentLoggedInUserId, modifyShipping);
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw (new SysXException(ex.Message, ex));
            }
        }
        #endregion
        #region UAT-4558:- Method To Add Compliance Attribute Doc Mapping.
        public static void AddComplianceFileUploadDocMap(Int32 orderId, Int32 tenantId, Int32 currentLoggedInUserId)
        {
            try
            {
                //Step1: Get PackageSubscription by OrderID
                PackageSubscription packageSubscription = GetPackageSubscriptionDetailByOrderId(tenantId, orderId);

                if (!packageSubscription.IsNullOrEmpty() && packageSubscription.PackageSubscriptionID > AppConsts.NONE
                   && (packageSubscription.lkpSubscriptionMobilityStatu.IsNullOrEmpty()
                   ||
                      (!packageSubscription.lkpSubscriptionMobilityStatu.IsNullOrEmpty()
                        && packageSubscription.lkpSubscriptionMobilityStatu.Code != LkpSubscriptionMobilityStatus.DataMovementDue
                        && packageSubscription.lkpSubscriptionMobilityStatu.Code != LkpSubscriptionMobilityStatus.DataMovementComplete
                        && packageSubscription.lkpSubscriptionMobilityStatu.Code != LkpSubscriptionMobilityStatus.DataMovementNotRequired
                      )
                    )
                    && (
                        packageSubscription.Order.PreviousOrderID.IsNullOrEmpty()
                        || (!packageSubscription.Order.PreviousOrderID.IsNullOrEmpty()
                             && (packageSubscription.Order.lkpOrderRequestType.ORT_Code == OrderRequestType.ChangeSubscription.GetStringValue()
                                 || packageSubscription.Order.lkpOrderRequestType.ORT_Code == OrderRequestType.ChangeSubscriptionByAdmin.GetStringValue()
                                 )
                           )
                      )
                  //  && packageSubscription.Order.lkpOrderRequestType.ORT_Code == OrderRequestType.NewOrder.GetStringValue()
                  )
                {
                    Int32 systemUserId = AppConsts.NONE;
                    Entity.AppConfiguration appConfiguration = new Entity.AppConfiguration();
                    Int32 recordId = AppConsts.NONE;
                    appConfiguration = SecurityManager.GetAppConfiguration(AppConsts.SYSTEM_PROCESS_USERID);
                    if (!appConfiguration.IsNullOrEmpty())
                        systemUserId = Convert.ToInt32(appConfiguration.AC_Value);

                    recordId = packageSubscription.Order.GroupOrderID.HasValue ? packageSubscription.Order.GroupOrderID.Value : orderId;

                    //Step2: Get Additional Applicant Documents Mapped with order// 
                    //orderId;
                    String applicantDocTypeCode = DocumentType.ADDITIONAL_DOCUMENTS.GetStringValue();
                    String recordTypeCode = RecordType.Order.GetStringValue();

                    List<GenericDocumentMapping> lstGenericDocumentMappings = new List<GenericDocumentMapping>();
                    lstGenericDocumentMappings = BALUtils.GetComplianceDataRepoInstance(tenantId).GetGenericDocMapping(recordId, applicantDocTypeCode, recordTypeCode);

                    if (!lstGenericDocumentMappings.IsNullOrEmpty() && lstGenericDocumentMappings.Count > AppConsts.NONE)
                    {
                        Int32 compliancePkgId = packageSubscription.CompliancePackageID;
                        Int32? selectedNodeId = packageSubscription.Order.SelectedNodeID;

                        //does we need to use this code, if setup changes after order this code will not work as desired.
                        //if (compliancePkgId > AppConsts.NONE && selectedNodeId > AppConsts.NONE && !selectedNodeId.IsNullOrEmpty())
                        //{
                        //List<Int32> lstBackgroundPkgsIds = new List<Int32>();
                        //List<Int32> lstCompliancePackageIds = new List<Int32>();
                        //lstCompliancePackageIds.Add(compliancePkgId);
                        //List<Entity.SystemDocument> lstSystemDocuments = BackgroundSetupManager.GetAdditionalDocuments(lstBackgroundPkgsIds, lstCompliancePackageIds, selectedNodeId, tenantId);
                        //END

                        // we should use below code //
                        //Step 3: Getting System Documents ids mapped with Applicant Documents.
                        List<Int32> lstSystemDocIds = new List<Int32>();
                        lstSystemDocIds = lstGenericDocumentMappings.Where(c => c.GDM_SystemDocumentID.HasValue).Select(sel => sel.GDM_SystemDocumentID.Value).ToList();

                        //if (!lstSystemDocuments.IsNullOrEmpty() && lstSystemDocuments.Count > AppConsts.NONE)
                        if (!lstSystemDocIds.IsNullOrEmpty() && lstSystemDocIds.Count > AppConsts.NONE)
                        {
                            //List<Int32> lstSystemDocIds = new List<Int32>();
                            List<ComplianceAttributeDocMappings> lstComplianceAttributeData = new List<ComplianceAttributeDocMappings>();
                            List<CompliancePackageCategory> lstCPC = new List<CompliancePackageCategory>();
                            // List<ComplianceCategoryItem> lstCCI = new List<ComplianceCategoryItem>();
                            List<ComplianceItemAttribute> lstCIA = new List<ComplianceItemAttribute>();
                            List<ComplianceAttributeDocMapping> lstComplianceAttrDocMaps = new List<ComplianceAttributeDocMapping>();

                            var lkpObjectType = LookupManager.GetLookUpData<Entity.ClientEntity.lkpObjectType>(tenantId).Where(x => x.OT_IsDeleted == false).ToList();

                            List<lkpItemComplianceStatu> lstItemComplianceStatus = LookupManager.GetLookUpData<Entity.ClientEntity.lkpItemComplianceStatu>(tenantId)
                                                                                    .Where(c => !c.IsDeleted).ToList();
                            Int32 pendingReviewItemStatusId = lstItemComplianceStatus.Where(c => c.Code == ApplicantItemComplianceStatus.Pending_Review.GetStringValue())
                                                                                      .Select(Sel => Sel.ItemComplianceStatusID).FirstOrDefault();
                            // lstSystemDocIds = lstSystemDocuments.Select(Sel => Sel.SystemDocumentID).Distinct().ToList();

                            //Step 4: Getting Compliance Package setup Data.
                            CompliancePackage compliancePackage = ComplianceSetupManager.GetCurrentPackageInfo(packageSubscription.CompliancePackageID, tenantId);

                            lstCPC = compliancePackage.CompliancePackageCategories.Where(con => !con.CPC_IsDeleted
                                                                            && !con.ComplianceCategory.IsDeleted).ToList();

                            //Step 5: Creating ComplianceAttributeDocMappings object for using it to create applicant data//
                            lstCPC.ForEach(cpc =>
                            {
                                //  lstCCI.AddRange(cpc.ComplianceCategory.ComplianceCategoryItems.Where(c => !c.CCI_IsDeleted && !c.ComplianceItem.IsDeleted).ToList());
                                Int32 complianceCategoryStatusId = GetCategoryComplianceStatusByCode(ApplicantCategoryComplianceStatus.Incomplete.GetStringValue(), tenantId).CategoryComplianceStatusID;

                                cpc.ComplianceCategory.ComplianceCategoryItems.Where(c => !c.CCI_IsDeleted && !c.ComplianceItem.IsDeleted)
                                .ToList().ForEach(cci =>
                                {
                                    Int32 attributeCount = cci.ComplianceItem.ComplianceItemAttributes.Where(c => !c.CIA_IsDeleted)
                                                            .Select(sel => sel.ComplianceAttribute).ToList().Count();

                                    Int32 complianceItemStatusId = lstItemComplianceStatus.Where(c => c.Code == ApplicantItemComplianceStatus.Incomplete.GetStringValue())
                                                                                    .Select(Sel => Sel.ItemComplianceStatusID).FirstOrDefault();
                                    AssignmentProperty assignmentProperty = BALUtils.GetComplianceSetupRepoInstance(tenantId).FetchAssignmentOptions(compliancePackage.CompliancePackageID, lkpObjectType, cpc.ComplianceCategory.ComplianceCategoryID, cci.ComplianceItem.ComplianceItemID);

                                    cci.ComplianceItem.ComplianceItemAttributes.Where(c => !c.CIA_IsDeleted && !c.ComplianceItem.IsDeleted
                                    && c.ComplianceAttribute.lkpComplianceAttributeDatatype.Code == ComplianceAttributeDatatypes.FileUpload.GetStringValue())
                                    .Select(Sel => Sel.ComplianceAttribute).Distinct().ForEach(ca =>
                                    {
                                        List<Int32> lstAttrSystemDocIds = ca.ComplianceAttributeDocMappings.Where(c => !c.CADM_IsDeleted && lstSystemDocIds.Contains(c.CADM_SystemDocumentID))
                                                                .Select(Sel => Sel.CADM_SystemDocumentID).ToList();

                                        if (!lstAttrSystemDocIds.IsNullOrEmpty() && lstAttrSystemDocIds.Count > AppConsts.NONE)
                                        {
                                            if (attributeCount == AppConsts.ONE)
                                            {
                                                complianceItemStatusId = lstItemComplianceStatus.Where(c => c.Code == ApplicantItemComplianceStatus.Pending_Review.GetStringValue())
                                                                                    .Select(Sel => Sel.ItemComplianceStatusID).FirstOrDefault();
                                                complianceCategoryStatusId = GetCategoryComplianceStatusByCode(ApplicantCategoryComplianceStatus.Pending_Review.GetStringValue(), tenantId).CategoryComplianceStatusID;
                                            }

                                            if (!Convert.ToBoolean(assignmentProperty.ApprovalRequired))
                                            {
                                                complianceItemStatusId = lstItemComplianceStatus.Where(c => c.Code == ApplicantItemComplianceStatus.Approved.GetStringValue())
                                                                                   .Select(Sel => Sel.ItemComplianceStatusID).FirstOrDefault();
                                            }

                                            ComplianceAttributeDocMappings complianceAttributeData = new ComplianceAttributeDocMappings();
                                            complianceAttributeData.PackageID = cpc.CompliancePackage.CompliancePackageID;
                                            complianceAttributeData.CategoryID = cpc.ComplianceCategory.ComplianceCategoryID;
                                            complianceAttributeData.ComplianceCategoryStatusId = complianceCategoryStatusId;
                                            complianceAttributeData.ItemID = cci.ComplianceItem.ComplianceItemID;
                                            complianceAttributeData.ComplianceItemStatusId = complianceItemStatusId;
                                            complianceAttributeData.AttributeID = ca.ComplianceAttributeID;
                                            complianceAttributeData.lstComplianceAttrSysDocID = lstAttrSystemDocIds;

                                            complianceAttributeData.lstApplicantDocID = lstGenericDocumentMappings.Where(c => c.GDM_SystemDocumentID.HasValue
                                                                                            && lstAttrSystemDocIds.Contains(c.GDM_SystemDocumentID.Value))
                                                                                            .Select(Sel => Sel.ApplicantDocument.ApplicantDocumentID).ToList();

                                            lstComplianceAttributeData.Add(complianceAttributeData);
                                        }
                                    });
                                });
                            });

                            //Step 6: Creating Applicant Compliance Data Object //
                            if (!lstComplianceAttributeData.IsNullOrEmpty() && lstComplianceAttributeData.Count > AppConsts.NONE)
                            {
                                List<ApplicantComplianceCategoryData> lstApplicantComplianceCategoryDatas = new List<ApplicantComplianceCategoryData>();

                                lstComplianceAttributeData.ForEach(cad =>
                                {
                                    if (!cad.lstApplicantDocID.IsNullOrEmpty() && cad.lstApplicantDocID.Count > AppConsts.NONE)
                                    {

                                        ApplicantComplianceCategoryData applicantComplianceCategory = new ApplicantComplianceCategoryData();

                                        if (!lstApplicantComplianceCategoryDatas.Any(c => c.ComplianceCategoryID == cad.CategoryID))
                                        {
                                            Int32 incompleteCategoryStatusId = GetCategoryComplianceStatusByCode(ApplicantCategoryComplianceStatus.Incomplete.GetStringValue(), tenantId).CategoryComplianceStatusID;

                                            applicantComplianceCategory.PackageSubscriptionID = packageSubscription.PackageSubscriptionID;
                                            applicantComplianceCategory.ComplianceCategoryID = cad.CategoryID;
                                            applicantComplianceCategory.StatusID = cad.ComplianceCategoryStatusId;// incompleteCategoryStatusId;
                                            applicantComplianceCategory.IsDeleted = false;
                                            applicantComplianceCategory.CreatedByID = systemUserId;//currentLoggedInUserId; Used 0 as system automatic process.
                                            applicantComplianceCategory.CreatedOn = DateTime.Now;
                                            applicantComplianceCategory.RulesStatusID = null;  // need to review.
                                            applicantComplianceCategory.CategoryExceptionStatusID = null;
                                            applicantComplianceCategory.ExpiryDate = null;
                                            applicantComplianceCategory.Override_Notes = null;
                                            applicantComplianceCategory.CategoryComplianceExpiryDate = null;
                                            applicantComplianceCategory.NonSalesForceCategoryComplianceExpiryDate = null;

                                        }
                                        else
                                        {
                                            applicantComplianceCategory = lstApplicantComplianceCategoryDatas.Where(c => c.ComplianceCategoryID == cad.CategoryID).FirstOrDefault();
                                        }

                                        List<ListItemAssignmentProperties> lstAssignmentProperties = ComplianceSetupManager.GetAssignmentPropertiesByCategoryId(packageSubscription.CompliancePackageID, cad.CategoryID, tenantId);

                                        //ItemData Entry
                                        ApplicantComplianceItemData applicantComplianceItemData = new ApplicantComplianceItemData();
                                        if (!applicantComplianceCategory.IsNullOrEmpty() && applicantComplianceCategory.ComplianceCategoryID > AppConsts.NONE)
                                        {
                                            if (applicantComplianceCategory.ApplicantComplianceItemDatas == null)
                                                applicantComplianceCategory.ApplicantComplianceItemDatas = new EntityCollection<ApplicantComplianceItemData>();

                                            if (!applicantComplianceCategory.ApplicantComplianceItemDatas.Any(c => c.ComplianceItemID == cad.ItemID))
                                            {
                                                //ApplicantComplianceCategoryID
                                                applicantComplianceItemData.ComplianceItemID = cad.ItemID;

                                                //applicantComplianceItemData.StatusID = LookupManager.GetLookUpData<Entity.ClientEntity.lkpItemComplianceStatu>(tenantId)
                                                //                                        .Where(c => !c.IsDeleted && c.Code == ApplicantItemComplianceStatus.Incomplete.GetStringValue())
                                                //                                        .Select(Sel => Sel.ItemComplianceStatusID).FirstOrDefault();
                                                //applicantComplianceItemData.Notes =
                                                applicantComplianceItemData.StatusID = cad.ComplianceItemStatusId;
                                                applicantComplianceItemData.IsDeleted = false;
                                                applicantComplianceItemData.CreatedByID = systemUserId;//currentLoggedInUserId;
                                                applicantComplianceItemData.CreatedOn = DateTime.Now;

                                                applicantComplianceItemData.RuleStatusID = null; //Need to review
                                                applicantComplianceItemData.AssignedToUser = null;
                                                applicantComplianceItemData.ReviewerTypeID = null;
                                                applicantComplianceItemData.ExceptionReason = null;
                                                applicantComplianceItemData.VerificationComments = null;
                                                applicantComplianceItemData.ReviewerTenantID = null;
                                                applicantComplianceItemData.ExpirationDate = null;
                                                applicantComplianceItemData.SubmissionDate = null;
                                                applicantComplianceItemData.ItemMovementTypeID = null;
                                                //applicantComplianceItemData.IsReviewerTypeAdmin = null;
                                                //applicantComplianceItemData.IsReviewerTypeClientAdmin = null;
                                                //applicantComplianceItemData.IsReviewerTypeThirdParty = null;
                                                applicantComplianceItemData.StatusComments = null;
                                                applicantComplianceItemData.ReconciliationReviewCount = null;
                                                applicantComplianceItemData.IsUiRulesViolate = false;
                                                applicantComplianceItemData.VerificationCommentsWithInitials = null;
                                                //applicantComplianceItemData.IsComplainceItemValid = false;

                                                //Assign reviwer type bits using assignment properties.
                                                if (!lstAssignmentProperties.IsNullOrEmpty() && lstAssignmentProperties.Count > AppConsts.NONE)
                                                {
                                                    List<ListItemAssignmentProperties> lstItemAssignmentProperties = lstAssignmentProperties.Where(C => C.ComplianceItemId == cad.ItemID).ToList();
                                                    if (!lstItemAssignmentProperties.IsNullOrEmpty() && lstItemAssignmentProperties.Count > AppConsts.NONE)
                                                        applicantComplianceItemData = ComplianceDataManager.SetItemReviewerTypeProperties(applicantComplianceItemData, lstItemAssignmentProperties);

                                                    if (!Convert.ToBoolean(applicantComplianceItemData.IsReviewerTypeAdmin) && Convert.ToBoolean(applicantComplianceItemData.IsReviewerTypeClientAdmin)
                                                        && pendingReviewItemStatusId == applicantComplianceItemData.StatusID)
                                                    {
                                                        applicantComplianceItemData.StatusID = lstItemComplianceStatus.Where(c => c.Code == ApplicantItemComplianceStatus.Pending_Review_For_Client.GetStringValue())
                                                                                    .Select(Sel => Sel.ItemComplianceStatusID).FirstOrDefault();
                                                    }
                                                }
                                                applicantComplianceCategory.ApplicantComplianceItemDatas.Add(applicantComplianceItemData);
                                            }
                                            else
                                            {
                                                applicantComplianceItemData = applicantComplianceCategory.ApplicantComplianceItemDatas.Where(c => c.ComplianceItemID == cad.ItemID).FirstOrDefault();
                                            }
                                        }

                                        //Attribute Data 
                                        ApplicantComplianceAttributeData applicantComplianceAttributeData = new ApplicantComplianceAttributeData();
                                        if (!applicantComplianceItemData.IsNullOrEmpty() && applicantComplianceItemData.ComplianceItemID > AppConsts.NONE)
                                        {
                                            //if there is no attribute data corressponding to item data
                                            if (applicantComplianceItemData.ApplicantComplianceAttributeDatas == null)
                                                applicantComplianceItemData.ApplicantComplianceAttributeDatas = new EntityCollection<ApplicantComplianceAttributeData>();

                                            // if there is no existing data row for attribute.
                                            if (!applicantComplianceItemData.ApplicantComplianceAttributeDatas.Any(c => c.ComplianceAttributeID == cad.AttributeID))
                                            {
                                                //ApplicantComplianceItemID //Foreign key relation
                                                applicantComplianceAttributeData.ComplianceAttributeID = cad.AttributeID;
                                                applicantComplianceAttributeData.AttributeValue = cad.lstApplicantDocID.Count().ToString();
                                                applicantComplianceAttributeData.IsDeleted = false;
                                                applicantComplianceAttributeData.CreatedByID = systemUserId;//currentLoggedInUserId;
                                                applicantComplianceAttributeData.CreatedOn = DateTime.Now;

                                                applicantComplianceItemData.ApplicantComplianceAttributeDatas.Add(applicantComplianceAttributeData);
                                            }
                                            else
                                            {
                                                applicantComplianceAttributeData = applicantComplianceItemData.ApplicantComplianceAttributeDatas.Where(c => c.ComplianceAttributeID == cad.AttributeID).FirstOrDefault();
                                            }
                                        }

                                        // Attribute Doc Mapping 
                                        cad.lstApplicantDocID.ForEach(AD =>
                                        {
                                            ApplicantComplianceDocumentMap applicantComplianceDocumentMap = new ApplicantComplianceDocumentMap();
                                            if (!applicantComplianceAttributeData.IsNullOrEmpty() && applicantComplianceAttributeData.ComplianceAttributeID > AppConsts.NONE)
                                            {
                                                //if there is no attribute Doc Mapping corressponding to Attribute data
                                                if (applicantComplianceAttributeData.ApplicantComplianceDocumentMaps == null)
                                                    applicantComplianceAttributeData.ApplicantComplianceDocumentMaps = new EntityCollection<ApplicantComplianceDocumentMap>();

                                                if (!applicantComplianceAttributeData.ApplicantComplianceDocumentMaps.Any(c => AD == c.ApplicantDocumentID))
                                                {
                                                    //ApplicantComplianceAttributeID //Foreign key Relation
                                                    applicantComplianceDocumentMap.ApplicantDocumentID = AD;
                                                    applicantComplianceDocumentMap.IsDeleted = false;
                                                    applicantComplianceDocumentMap.CreatedByID = systemUserId;//currentLoggedInUserId;
                                                    applicantComplianceDocumentMap.CreatedOn = DateTime.Now;

                                                    applicantComplianceAttributeData.ApplicantComplianceDocumentMaps.Add(applicantComplianceDocumentMap);
                                                }

                                                else
                                                {
                                                    applicantComplianceDocumentMap = applicantComplianceAttributeData.ApplicantComplianceDocumentMaps.Where(c => c.ApplicantDocumentID == AD).FirstOrDefault();
                                                }
                                            }
                                        });

                                        //Add applicant category data object in list.
                                        if (!lstApplicantComplianceCategoryDatas.Any(x => x.ComplianceCategoryID == applicantComplianceCategory.ComplianceCategoryID)
                                                && !applicantComplianceCategory.IsNullOrEmpty() && applicantComplianceCategory.ComplianceCategoryID > AppConsts.NONE
                                            )
                                            lstApplicantComplianceCategoryDatas.Add(applicantComplianceCategory);
                                    }
                                });

                                if (!lstApplicantComplianceCategoryDatas.IsNullOrEmpty() && lstApplicantComplianceCategoryDatas.Count > AppConsts.NONE)
                                {
                                    //Step 7 : Save data in DB
                                    if (BALUtils.GetComplianceDataRepoInstance(tenantId).SaveApplicantComplianceData(lstApplicantComplianceCategoryDatas))
                                    {
                                        //Step 8 : Execute business rules
                                        List<Int32> lstPackageSubscriptionIds = new List<Int32>();
                                        lstPackageSubscriptionIds.Add(packageSubscription.PackageSubscriptionID);
                                        RuleManager.ExecuteBusinessRules(lstPackageSubscriptionIds, tenantId, systemUserId);
                                        // RevertCategoryItemStatu(lstPackageSubscriptionIds, systemUserId, tenantId); // Not needed, let the status remain as per rule execution or pending review if set in code.
                                        SetItemSubmissionData(lstPackageSubscriptionIds, tenantId);
                                    }
                                }
                            }
                            //}
                        }
                    }
                }
            }
            catch (SysXException ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
            catch (Exception ex)
            {
                BALUtils.LogError(BALUtils.ClassModule + SysXException.ShowTrace() + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace, ex);
                throw ex;
            }
        }

        private static void SetItemSubmissionData(List<Int32> lstPackageSubscriptionIds, Int32 tenantId)
        {
            //Get All Subscriptions Data
            if (!lstPackageSubscriptionIds.IsNullOrEmpty() && lstPackageSubscriptionIds.Count > AppConsts.NONE)
            {
                List<PackageSubscription> lstPackageSubscriptions = GetPackageSubscriptionListByIDs(tenantId, lstPackageSubscriptionIds, true);
                List<lkpItemComplianceStatu> lstItemComplianceStatus = LookupManager.GetLookUpData<Entity.ClientEntity.lkpItemComplianceStatu>(tenantId).Where(c => !c.IsDeleted).ToList();
                Int32 approvedItemStatusId = lstItemComplianceStatus.Where(c => !c.IsDeleted && c.Code == ApplicantItemComplianceStatus.Approved.GetStringValue())
                                                                                    .Select(Sel => Sel.ItemComplianceStatusID).FirstOrDefault();
                lstPackageSubscriptions.ForEach(ps =>
                {
                    ps.ApplicantComplianceCategoryDatas.Where(c => !c.IsDeleted).ToList().ForEach(accd =>
                    {
                        accd.ApplicantComplianceItemDatas.ToList().ForEach(acid =>
                        {
                            if (!acid.lkpItemComplianceStatu.IsNullOrEmpty() && !acid.lkpItemComplianceStatu.Code.IsNullOrEmpty()
                            && acid.StatusID > AppConsts.NONE && acid.lkpItemComplianceStatu.Code != ApplicantItemComplianceStatus.Approved.GetStringValue()
                            &&(acid.lkpItemComplianceStatu.Code == ApplicantItemComplianceStatus.Pending_Review.GetStringValue() ||
                            acid.lkpItemComplianceStatu.Code == ApplicantItemComplianceStatus.Pending_Review_For_Client.GetStringValue())
                            )
                            {
                                var LoggerService = (HttpContext.Current.ApplicationInstance as IWebApplication).LoggerService;
                                var ExceptiomService = (HttpContext.Current.ApplicationInstance as IWebApplication).ExceptionService;

                                Dictionary<String, Object> dicHandleAssignmentData = SetHandleAssignmentData(false, acid.lkpItemComplianceStatu.Code, acid.StatusID, acid.ApplicantComplianceItemID, acid.ComplianceItemID,
                                                                                       acid, true, tenantId, Convert.ToInt32(ps.OrganizationUserID), accd.ComplianceCategoryID, ps.CompliancePackageID
                                                                                       , !String.IsNullOrEmpty(ps.CompliancePackage.PackageLabel) ? ps.CompliancePackage.PackageLabel : ps.CompliancePackage.PackageName);
                                QueueManagementManager.RunParallelTaskHandleAssignment(dicHandleAssignmentData, LoggerService, ExceptiomService, tenantId);
                            }
                        });

                        accd.ApplicantComplianceItemDatas.Where(c => !c.IsDeleted && c.StatusID == approvedItemStatusId).ToList().ForEach(acid =>
                        {
                            acid.SubmissionDate = DateTime.Now;
                        });
                    });
                });
                BALUtils.GetComplianceDataRepoInstance(tenantId).SaveContextInDb();
            }
        }

        private static void RevertCategoryItemStatu(List<Int32> lstPackageSubscriptionIds, Int32 systemUserId, Int32 tenantId)
        {
            //Get All Subscriptions Data
            if (!lstPackageSubscriptionIds.IsNullOrEmpty() && lstPackageSubscriptionIds.Count > AppConsts.NONE)
            {
                //  String subscriptionIds = String.Join(",", lstPackageSubscriptionIds);
                List<PackageSubscription> lstPackageSubscriptions = GetPackageSubscriptionListByIDs(tenantId, lstPackageSubscriptionIds, true);

                Int32 pendingReviewCategoryStatusId = GetCategoryComplianceStatusByCode(ApplicantCategoryComplianceStatus.Pending_Review.GetStringValue(), tenantId).CategoryComplianceStatusID;
                Int32 incompleteCategoryStatusId = GetCategoryComplianceStatusByCode(ApplicantCategoryComplianceStatus.Incomplete.GetStringValue(), tenantId).CategoryComplianceStatusID;

                List<lkpItemComplianceStatu> lstItemComplianceStatus = LookupManager.GetLookUpData<Entity.ClientEntity.lkpItemComplianceStatu>(tenantId)
                                                                                   .Where(c => !c.IsDeleted).ToList();
                Int32 pendingReviewItemStatusId = lstItemComplianceStatus.Where(c => !c.IsDeleted && c.Code == ApplicantItemComplianceStatus.Pending_Review.GetStringValue())
                                                                                    .Select(Sel => Sel.ItemComplianceStatusID).FirstOrDefault();
                Int32 incompleteItemStatusId = lstItemComplianceStatus.Where(c => !c.IsDeleted && c.Code == ApplicantItemComplianceStatus.Incomplete.GetStringValue())
                                                                                    .Select(Sel => Sel.ItemComplianceStatusID).FirstOrDefault();
                lstPackageSubscriptions.ForEach(ps =>
                {
                    ps.ApplicantComplianceCategoryDatas.Where(c => !c.IsDeleted).ToList().ForEach(accd =>
                        {
                            accd.ApplicantComplianceItemDatas.Where(c => !c.IsDeleted && c.StatusID == pendingReviewItemStatusId).ToList().ForEach(acid =>
                            {
                                acid.StatusID = incompleteItemStatusId;
                                acid.ModifiedByID = systemUserId;
                                acid.ModifiedOn = DateTime.Now;
                            });
                            if (accd.StatusID == pendingReviewCategoryStatusId && !accd.ApplicantComplianceItemDatas.Any(c => c.StatusID != incompleteItemStatusId))
                            {
                                accd.StatusID = incompleteCategoryStatusId;
                                accd.ModifiedByID = systemUserId;
                                accd.ModifiedOn = DateTime.Now;
                            }
                        });
                });

                BALUtils.GetComplianceDataRepoInstance(tenantId).SaveContextInDb();
            }
        }
        #endregion
        

    }
}
